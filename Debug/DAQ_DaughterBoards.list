
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1f4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800d3d4  0800d3d4  0000e3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d59c  0800d59c  0000f058  2**0
                  CONTENTS
  4 .ARM          00000008  0800d59c  0800d59c  0000e59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5a4  0800d5a4  0000f058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5a4  0800d5a4  0000e5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d5a8  0800d5a8  0000e5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  0800d5ac  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010fbc  20000058  0800d604  0000f058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20011014  0800d604  00010014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039273  00000000  00000000  0000f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008d54  00000000  00000000  000482fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002be0  00000000  00000000  00051050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000020aa  00000000  00000000  00053c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034017  00000000  00000000  00055cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041e1f  00000000  00000000  00089cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a9a6  00000000  00000000  000cbb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001f64b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad98  00000000  00000000  001f653c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fd  00000000  00000000  002012d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000058 	.word	0x20000058
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d3bc 	.word	0x0800d3bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000005c 	.word	0x2000005c
 800021c:	0800d3bc 	.word	0x0800d3bc

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	@ (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	@ (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	@ (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	@ (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	@ (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	20010a08 	.word	0x20010a08
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	@ (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	@ (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20010aa4 	.word	0x20010aa4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20010a0c 	.word	0x20010a0c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20010a10 	.word	0x20010a10
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	20011010 	.word	0x20011010

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f00c f963 	bl	800c6c4 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f00b ff70 	bl	800c2e8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	@ (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	@ (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20010ab0 	.word	0x20010ab0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	20011010 	.word	0x20011010
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20010ab4 	.word	0x20010ab4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20010b40 	.word	0x20010b40
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20010b44 	.word	0x20010b44
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20010b3c 	.word	0x20010b3c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20010b38 	.word	0x20010b38
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20010aa4 	.word	0x20010aa4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20010a0c 	.word	0x20010a0c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20010a10 	.word	0x20010a10
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <__aeabi_uldivmod>:
 8000458:	b953      	cbnz	r3, 8000470 <__aeabi_uldivmod+0x18>
 800045a:	b94a      	cbnz	r2, 8000470 <__aeabi_uldivmod+0x18>
 800045c:	2900      	cmp	r1, #0
 800045e:	bf08      	it	eq
 8000460:	2800      	cmpeq	r0, #0
 8000462:	bf1c      	itt	ne
 8000464:	f04f 31ff 	movne.w	r1, #4294967295
 8000468:	f04f 30ff 	movne.w	r0, #4294967295
 800046c:	f000 b96a 	b.w	8000744 <__aeabi_idiv0>
 8000470:	f1ad 0c08 	sub.w	ip, sp, #8
 8000474:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000478:	f000 f806 	bl	8000488 <__udivmoddi4>
 800047c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000484:	b004      	add	sp, #16
 8000486:	4770      	bx	lr

08000488 <__udivmoddi4>:
 8000488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800048c:	9d08      	ldr	r5, [sp, #32]
 800048e:	460c      	mov	r4, r1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d14e      	bne.n	8000532 <__udivmoddi4+0xaa>
 8000494:	4694      	mov	ip, r2
 8000496:	458c      	cmp	ip, r1
 8000498:	4686      	mov	lr, r0
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	d962      	bls.n	8000566 <__udivmoddi4+0xde>
 80004a0:	b14a      	cbz	r2, 80004b6 <__udivmoddi4+0x2e>
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	4091      	lsls	r1, r2
 80004a8:	fa20 f303 	lsr.w	r3, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	4319      	orrs	r1, r3
 80004b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ba:	fa1f f68c 	uxth.w	r6, ip
 80004be:	fbb1 f4f7 	udiv	r4, r1, r7
 80004c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004c6:	fb07 1114 	mls	r1, r7, r4, r1
 80004ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ce:	fb04 f106 	mul.w	r1, r4, r6
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d90a      	bls.n	80004ec <__udivmoddi4+0x64>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f104 30ff 	add.w	r0, r4, #4294967295
 80004de:	f080 8112 	bcs.w	8000706 <__udivmoddi4+0x27e>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 810f 	bls.w	8000706 <__udivmoddi4+0x27e>
 80004e8:	3c02      	subs	r4, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a59      	subs	r1, r3, r1
 80004ee:	fa1f f38e 	uxth.w	r3, lr
 80004f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f6:	fb07 1110 	mls	r1, r7, r0, r1
 80004fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fe:	fb00 f606 	mul.w	r6, r0, r6
 8000502:	429e      	cmp	r6, r3
 8000504:	d90a      	bls.n	800051c <__udivmoddi4+0x94>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 31ff 	add.w	r1, r0, #4294967295
 800050e:	f080 80fc 	bcs.w	800070a <__udivmoddi4+0x282>
 8000512:	429e      	cmp	r6, r3
 8000514:	f240 80f9 	bls.w	800070a <__udivmoddi4+0x282>
 8000518:	4463      	add	r3, ip
 800051a:	3802      	subs	r0, #2
 800051c:	1b9b      	subs	r3, r3, r6
 800051e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000522:	2100      	movs	r1, #0
 8000524:	b11d      	cbz	r5, 800052e <__udivmoddi4+0xa6>
 8000526:	40d3      	lsrs	r3, r2
 8000528:	2200      	movs	r2, #0
 800052a:	e9c5 3200 	strd	r3, r2, [r5]
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	428b      	cmp	r3, r1
 8000534:	d905      	bls.n	8000542 <__udivmoddi4+0xba>
 8000536:	b10d      	cbz	r5, 800053c <__udivmoddi4+0xb4>
 8000538:	e9c5 0100 	strd	r0, r1, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	4608      	mov	r0, r1
 8000540:	e7f5      	b.n	800052e <__udivmoddi4+0xa6>
 8000542:	fab3 f183 	clz	r1, r3
 8000546:	2900      	cmp	r1, #0
 8000548:	d146      	bne.n	80005d8 <__udivmoddi4+0x150>
 800054a:	42a3      	cmp	r3, r4
 800054c:	d302      	bcc.n	8000554 <__udivmoddi4+0xcc>
 800054e:	4290      	cmp	r0, r2
 8000550:	f0c0 80f0 	bcc.w	8000734 <__udivmoddi4+0x2ac>
 8000554:	1a86      	subs	r6, r0, r2
 8000556:	eb64 0303 	sbc.w	r3, r4, r3
 800055a:	2001      	movs	r0, #1
 800055c:	2d00      	cmp	r5, #0
 800055e:	d0e6      	beq.n	800052e <__udivmoddi4+0xa6>
 8000560:	e9c5 6300 	strd	r6, r3, [r5]
 8000564:	e7e3      	b.n	800052e <__udivmoddi4+0xa6>
 8000566:	2a00      	cmp	r2, #0
 8000568:	f040 8090 	bne.w	800068c <__udivmoddi4+0x204>
 800056c:	eba1 040c 	sub.w	r4, r1, ip
 8000570:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000574:	fa1f f78c 	uxth.w	r7, ip
 8000578:	2101      	movs	r1, #1
 800057a:	fbb4 f6f8 	udiv	r6, r4, r8
 800057e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000582:	fb08 4416 	mls	r4, r8, r6, r4
 8000586:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800058a:	fb07 f006 	mul.w	r0, r7, r6
 800058e:	4298      	cmp	r0, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x11c>
 8000592:	eb1c 0303 	adds.w	r3, ip, r3
 8000596:	f106 34ff 	add.w	r4, r6, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x11a>
 800059c:	4298      	cmp	r0, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2b4>
 80005a2:	4626      	mov	r6, r4
 80005a4:	1a1c      	subs	r4, r3, r0
 80005a6:	fa1f f38e 	uxth.w	r3, lr
 80005aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80005ae:	fb08 4410 	mls	r4, r8, r0, r4
 80005b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005b6:	fb00 f707 	mul.w	r7, r0, r7
 80005ba:	429f      	cmp	r7, r3
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x148>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c6:	d202      	bcs.n	80005ce <__udivmoddi4+0x146>
 80005c8:	429f      	cmp	r7, r3
 80005ca:	f200 80b0 	bhi.w	800072e <__udivmoddi4+0x2a6>
 80005ce:	4620      	mov	r0, r4
 80005d0:	1bdb      	subs	r3, r3, r7
 80005d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005d6:	e7a5      	b.n	8000524 <__udivmoddi4+0x9c>
 80005d8:	f1c1 0620 	rsb	r6, r1, #32
 80005dc:	408b      	lsls	r3, r1
 80005de:	fa22 f706 	lsr.w	r7, r2, r6
 80005e2:	431f      	orrs	r7, r3
 80005e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e8:	fa04 f301 	lsl.w	r3, r4, r1
 80005ec:	ea43 030c 	orr.w	r3, r3, ip
 80005f0:	40f4      	lsrs	r4, r6
 80005f2:	fa00 f801 	lsl.w	r8, r0, r1
 80005f6:	0c38      	lsrs	r0, r7, #16
 80005f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000600:	fa1f fc87 	uxth.w	ip, r7
 8000604:	fb00 441e 	mls	r4, r0, lr, r4
 8000608:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800060c:	fb0e f90c 	mul.w	r9, lr, ip
 8000610:	45a1      	cmp	r9, r4
 8000612:	fa02 f201 	lsl.w	r2, r2, r1
 8000616:	d90a      	bls.n	800062e <__udivmoddi4+0x1a6>
 8000618:	193c      	adds	r4, r7, r4
 800061a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800061e:	f080 8084 	bcs.w	800072a <__udivmoddi4+0x2a2>
 8000622:	45a1      	cmp	r9, r4
 8000624:	f240 8081 	bls.w	800072a <__udivmoddi4+0x2a2>
 8000628:	f1ae 0e02 	sub.w	lr, lr, #2
 800062c:	443c      	add	r4, r7
 800062e:	eba4 0409 	sub.w	r4, r4, r9
 8000632:	fa1f f983 	uxth.w	r9, r3
 8000636:	fbb4 f3f0 	udiv	r3, r4, r0
 800063a:	fb00 4413 	mls	r4, r0, r3, r4
 800063e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000642:	fb03 fc0c 	mul.w	ip, r3, ip
 8000646:	45a4      	cmp	ip, r4
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0x1d2>
 800064a:	193c      	adds	r4, r7, r4
 800064c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000650:	d267      	bcs.n	8000722 <__udivmoddi4+0x29a>
 8000652:	45a4      	cmp	ip, r4
 8000654:	d965      	bls.n	8000722 <__udivmoddi4+0x29a>
 8000656:	3b02      	subs	r3, #2
 8000658:	443c      	add	r4, r7
 800065a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800065e:	fba0 9302 	umull	r9, r3, r0, r2
 8000662:	eba4 040c 	sub.w	r4, r4, ip
 8000666:	429c      	cmp	r4, r3
 8000668:	46ce      	mov	lr, r9
 800066a:	469c      	mov	ip, r3
 800066c:	d351      	bcc.n	8000712 <__udivmoddi4+0x28a>
 800066e:	d04e      	beq.n	800070e <__udivmoddi4+0x286>
 8000670:	b155      	cbz	r5, 8000688 <__udivmoddi4+0x200>
 8000672:	ebb8 030e 	subs.w	r3, r8, lr
 8000676:	eb64 040c 	sbc.w	r4, r4, ip
 800067a:	fa04 f606 	lsl.w	r6, r4, r6
 800067e:	40cb      	lsrs	r3, r1
 8000680:	431e      	orrs	r6, r3
 8000682:	40cc      	lsrs	r4, r1
 8000684:	e9c5 6400 	strd	r6, r4, [r5]
 8000688:	2100      	movs	r1, #0
 800068a:	e750      	b.n	800052e <__udivmoddi4+0xa6>
 800068c:	f1c2 0320 	rsb	r3, r2, #32
 8000690:	fa20 f103 	lsr.w	r1, r0, r3
 8000694:	fa0c fc02 	lsl.w	ip, ip, r2
 8000698:	fa24 f303 	lsr.w	r3, r4, r3
 800069c:	4094      	lsls	r4, r2
 800069e:	430c      	orrs	r4, r1
 80006a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a8:	fa1f f78c 	uxth.w	r7, ip
 80006ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b0:	fb08 3110 	mls	r1, r8, r0, r3
 80006b4:	0c23      	lsrs	r3, r4, #16
 80006b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ba:	fb00 f107 	mul.w	r1, r0, r7
 80006be:	4299      	cmp	r1, r3
 80006c0:	d908      	bls.n	80006d4 <__udivmoddi4+0x24c>
 80006c2:	eb1c 0303 	adds.w	r3, ip, r3
 80006c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80006ca:	d22c      	bcs.n	8000726 <__udivmoddi4+0x29e>
 80006cc:	4299      	cmp	r1, r3
 80006ce:	d92a      	bls.n	8000726 <__udivmoddi4+0x29e>
 80006d0:	3802      	subs	r0, #2
 80006d2:	4463      	add	r3, ip
 80006d4:	1a5b      	subs	r3, r3, r1
 80006d6:	b2a4      	uxth	r4, r4
 80006d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80006dc:	fb08 3311 	mls	r3, r8, r1, r3
 80006e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e4:	fb01 f307 	mul.w	r3, r1, r7
 80006e8:	42a3      	cmp	r3, r4
 80006ea:	d908      	bls.n	80006fe <__udivmoddi4+0x276>
 80006ec:	eb1c 0404 	adds.w	r4, ip, r4
 80006f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80006f4:	d213      	bcs.n	800071e <__udivmoddi4+0x296>
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	d911      	bls.n	800071e <__udivmoddi4+0x296>
 80006fa:	3902      	subs	r1, #2
 80006fc:	4464      	add	r4, ip
 80006fe:	1ae4      	subs	r4, r4, r3
 8000700:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000704:	e739      	b.n	800057a <__udivmoddi4+0xf2>
 8000706:	4604      	mov	r4, r0
 8000708:	e6f0      	b.n	80004ec <__udivmoddi4+0x64>
 800070a:	4608      	mov	r0, r1
 800070c:	e706      	b.n	800051c <__udivmoddi4+0x94>
 800070e:	45c8      	cmp	r8, r9
 8000710:	d2ae      	bcs.n	8000670 <__udivmoddi4+0x1e8>
 8000712:	ebb9 0e02 	subs.w	lr, r9, r2
 8000716:	eb63 0c07 	sbc.w	ip, r3, r7
 800071a:	3801      	subs	r0, #1
 800071c:	e7a8      	b.n	8000670 <__udivmoddi4+0x1e8>
 800071e:	4631      	mov	r1, r6
 8000720:	e7ed      	b.n	80006fe <__udivmoddi4+0x276>
 8000722:	4603      	mov	r3, r0
 8000724:	e799      	b.n	800065a <__udivmoddi4+0x1d2>
 8000726:	4630      	mov	r0, r6
 8000728:	e7d4      	b.n	80006d4 <__udivmoddi4+0x24c>
 800072a:	46d6      	mov	lr, sl
 800072c:	e77f      	b.n	800062e <__udivmoddi4+0x1a6>
 800072e:	4463      	add	r3, ip
 8000730:	3802      	subs	r0, #2
 8000732:	e74d      	b.n	80005d0 <__udivmoddi4+0x148>
 8000734:	4606      	mov	r6, r0
 8000736:	4623      	mov	r3, r4
 8000738:	4608      	mov	r0, r1
 800073a:	e70f      	b.n	800055c <__udivmoddi4+0xd4>
 800073c:	3e02      	subs	r6, #2
 800073e:	4463      	add	r3, ip
 8000740:	e730      	b.n	80005a4 <__udivmoddi4+0x11c>
 8000742:	bf00      	nop

08000744 <__aeabi_idiv0>:
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000754:	2334      	movs	r3, #52	@ 0x34
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <tx_application_define+0x4c>)
 800075e:	490e      	ldr	r1, [pc, #56]	@ (8000798 <tx_application_define+0x50>)
 8000760:	480e      	ldr	r0, [pc, #56]	@ (800079c <tx_application_define+0x54>)
 8000762:	f00c fa59 	bl	800cc18 <_txe_byte_pool_create>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10e      	bne.n	800078a <tx_application_define+0x42>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800076c:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <tx_application_define+0x54>)
 800076e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f000 fa4d 	bl	8000c10 <App_ThreadX_Init>
 8000776:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <tx_application_define+0x36>
      }
      /* USER CODE END  App_ThreadX_Init_Error */
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    status = ThreadX_Init(memory_ptr);
 8000782:	68b8      	ldr	r0, [r7, #8]
 8000784:	f001 fb36 	bl	8001df4 <ThreadX_Init>
 8000788:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000074 	.word	0x20000074
 8000798:	0800d3d4 	.word	0x0800d3d4
 800079c:	20010074 	.word	0x20010074

080007a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	@ 0x30
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00c fdd3 	bl	800d364 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007be:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f2:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000828:	4817      	ldr	r0, [pc, #92]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800082a:	f002 fd53 	bl	80032d4 <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000834:	f000 fde2 	bl	80013fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000844:	f004 f816 	bl	8004874 <HAL_ADCEx_MultiModeConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800084e:	f000 fdd5 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_ADC1_Init+0xec>)
 8000854:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000856:	2306      	movs	r3, #6
 8000858:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085e:	237f      	movs	r3, #127	@ 0x7f
 8000860:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000862:	2304      	movs	r3, #4
 8000864:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000870:	f003 fa3e 	bl	8003cf0 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800087a:	f000 fdbf 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	@ 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200100a8 	.word	0x200100a8
 800088c:	10c00010 	.word	0x10c00010

08000890 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2220      	movs	r2, #32
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f00c fd61 	bl	800d364 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008a2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008a4:	4a5e      	ldr	r2, [pc, #376]	@ (8000a20 <MX_ADC4_Init+0x190>)
 80008a6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a8:	4b5c      	ldr	r3, [pc, #368]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008ae:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008b0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b59      	ldr	r3, [pc, #356]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008bc:	4b57      	ldr	r3, [pc, #348]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008c2:	4b56      	ldr	r3, [pc, #344]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008c8:	4b54      	ldr	r3, [pc, #336]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008ce:	4b53      	ldr	r3, [pc, #332]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008d4:	4b51      	ldr	r3, [pc, #324]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 8;
 80008da:	4b50      	ldr	r3, [pc, #320]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008dc:	2208      	movs	r2, #8
 80008de:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008e0:	4b4e      	ldr	r3, [pc, #312]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e8:	4b4c      	ldr	r3, [pc, #304]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ee:	4b4b      	ldr	r3, [pc, #300]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80008f4:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008fc:	4b47      	ldr	r3, [pc, #284]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000902:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000904:	4b45      	ldr	r3, [pc, #276]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800090c:	4843      	ldr	r0, [pc, #268]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800090e:	f002 fce1 	bl	80032d4 <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 fd70 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800091c:	4b41      	ldr	r3, [pc, #260]	@ (8000a24 <MX_ADC4_Init+0x194>)
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000920:	2306      	movs	r3, #6
 8000922:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000928:	237f      	movs	r3, #127	@ 0x7f
 800092a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092c:	2304      	movs	r3, #4
 800092e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4838      	ldr	r0, [pc, #224]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800093a:	f003 f9d9 	bl	8003cf0 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8000944:	f000 fd5a 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000948:	4b37      	ldr	r3, [pc, #220]	@ (8000a28 <MX_ADC4_Init+0x198>)
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800094c:	230c      	movs	r3, #12
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4831      	ldr	r0, [pc, #196]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000956:	f003 f9cb 	bl	8003cf0 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC4_Init+0xd4>
  {
    Error_Handler();
 8000960:	f000 fd4c 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000964:	4b31      	ldr	r3, [pc, #196]	@ (8000a2c <MX_ADC4_Init+0x19c>)
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000968:	2312      	movs	r3, #18
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	482a      	ldr	r0, [pc, #168]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000972:	f003 f9bd 	bl	8003cf0 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC4_Init+0xf0>
  {
    Error_Handler();
 800097c:	f000 fd3e 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_ADC4_Init+0x1a0>)
 8000982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000984:	2318      	movs	r3, #24
 8000986:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4823      	ldr	r0, [pc, #140]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800098e:	f003 f9af 	bl	8003cf0 <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC4_Init+0x10c>
  {
    Error_Handler();
 8000998:	f000 fd30 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <MX_ADC4_Init+0x1a4>)
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	481c      	ldr	r0, [pc, #112]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009ac:	f003 f9a0 	bl	8003cf0 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC4_Init+0x12a>
  {
    Error_Handler();
 80009b6:	f000 fd21 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_ADC4_Init+0x1a8>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009be:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009ca:	f003 f991 	bl	8003cf0 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC4_Init+0x148>
  {
    Error_Handler();
 80009d4:	f000 fd12 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_ADC4_Init+0x1ac>)
 80009da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009dc:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80009e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009e8:	f003 f982 	bl	8003cf0 <HAL_ADC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC4_Init+0x166>
  {
    Error_Handler();
 80009f2:	f000 fd03 	bl	80013fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_ADC4_Init+0x1b0>)
 80009f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009fa:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80009fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000a06:	f003 f973 	bl	8003cf0 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC4_Init+0x184>
  {
    Error_Handler();
 8000a10:	f000 fcf4 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20010114 	.word	0x20010114
 8000a20:	50000500 	.word	0x50000500
 8000a24:	14f00020 	.word	0x14f00020
 8000a28:	32601000 	.word	0x32601000
 8000a2c:	2a000400 	.word	0x2a000400
 8000a30:	2e300800 	.word	0x2e300800
 8000a34:	36902000 	.word	0x36902000
 8000a38:	1d500080 	.word	0x1d500080
 8000a3c:	21800100 	.word	0x21800100
 8000a40:	25b00200 	.word	0x25b00200

08000a44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0a2      	sub	sp, #136	@ 0x88
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	2254      	movs	r2, #84	@ 0x54
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00c fc7d 	bl	800d364 <memset>
  if(adcHandle->Instance==ADC1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a72:	d135      	bne.n	8000ae0 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a7a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a7e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	4618      	mov	r0, r3
 8000a86:	f008 f8a9 	bl	8008bdc <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a90:	f000 fcb4 	bl	80013fc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a94:	4b58      	ldr	r3, [pc, #352]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	4a57      	ldr	r2, [pc, #348]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000a9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa0:	4b55      	ldr	r3, [pc, #340]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b52      	ldr	r3, [pc, #328]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab0:	4a51      	ldr	r2, [pc, #324]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = FIRMWARECHECK_Pin;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(FIRMWARECHECK_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f005 f8d5 	bl	8005c88 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000ade:	e086      	b.n	8000bee <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC4)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a45      	ldr	r2, [pc, #276]	@ (8000bfc <HAL_ADC_MspInit+0x1b8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	f040 8081 	bne.w	8000bee <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000af2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000af6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4618      	mov	r0, r3
 8000afe:	f008 f86d 	bl	8008bdc <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 8000b08:	f000 fc78 	bl	80013fc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	4a39      	ldr	r2, [pc, #228]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b18:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b28:	4a33      	ldr	r2, [pc, #204]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b40:	4a2d      	ldr	r2, [pc, #180]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8000b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b58:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b66:	4619      	mov	r1, r3
 8000b68:	4825      	ldr	r0, [pc, #148]	@ (8000c00 <HAL_ADC_MspInit+0x1bc>)
 8000b6a:	f005 f88d 	bl	8005c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG_2_Pin|ANALOG_5_Pin|ANALOG_6_Pin|ANALOG_7_Pin
 8000b6e:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8000b72:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b74:	2303      	movs	r3, #3
 8000b76:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b80:	4619      	mov	r1, r3
 8000b82:	4820      	ldr	r0, [pc, #128]	@ (8000c04 <HAL_ADC_MspInit+0x1c0>)
 8000b84:	f005 f880 	bl	8005c88 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel3;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b8a:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <HAL_ADC_MspInit+0x1c8>)
 8000b8c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b90:	2226      	movs	r2, #38	@ 0x26
 8000b92:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000ba2:	2280      	movs	r2, #128	@ 0x80
 8000ba4:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bac:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bb4:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bb8:	2220      	movs	r2, #32
 8000bba:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000bc2:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bc4:	f004 f930 	bl	8004e28 <HAL_DMA_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 8000bce:	f000 fc15 	bl	80013fc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	203d      	movs	r0, #61	@ 0x3d
 8000be4:	f004 f806 	bl	8004bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000be8:	203d      	movs	r0, #61	@ 0x3d
 8000bea:	f004 f81d 	bl	8004c28 <HAL_NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3788      	adds	r7, #136	@ 0x88
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000500 	.word	0x50000500
 8000c00:	48000400 	.word	0x48000400
 8000c04:	48000c00 	.word	0x48000c00
 8000c08:	20010180 	.word	0x20010180
 8000c0c:	40020030 	.word	0x40020030

08000c10 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  ret = ThreadX_Init(memory_ptr);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f001 f8e9 	bl	8001df4 <ThreadX_Init>
 8000c22:	60f8      	str	r0, [r7, #12]
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000c32:	f00a fd27 	bl	800b684 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <MX_CRC_Init+0x40>)
 8000c44:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c66:	f003 ffed 	bl	8004c44 <HAL_CRC_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c70:	f000 fbc4 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200101e0 	.word	0x200101e0
 8000c7c:	40023000 	.word	0x40023000

08000c80 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <HAL_CRC_MspInit+0x38>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d10b      	bne.n	8000caa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c96:	4a09      	ldr	r2, [pc, #36]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ca2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023000 	.word	0x40023000
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cca:	4a11      	ldr	r2, [pc, #68]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	200d      	movs	r0, #13
 8000cfc:	f003 ff7a 	bl	8004bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d00:	200d      	movs	r0, #13
 8000d02:	f003 ff91 	bl	8004c28 <HAL_NVIC_EnableIRQ>

}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d18:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d1a:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <MX_FDCAN1_Init+0x8c>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d26:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d2a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000d44:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d46:	2202      	movs	r2, #2
 8000d48:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d52:	221f      	movs	r2, #31
 8000d54:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d58:	2208      	movs	r2, #8
 8000d5a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d5e:	2202      	movs	r2, #2
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d6a:	2205      	movs	r2, #5
 8000d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d70:	2202      	movs	r2, #2
 8000d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d88:	f004 fb36 	bl	80053f8 <HAL_FDCAN_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000d92:	f000 fb33 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20010204 	.word	0x20010204
 8000da0:	40006400 	.word	0x40006400

08000da4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b09e      	sub	sp, #120	@ 0x78
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	2254      	movs	r2, #84	@ 0x54
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00c facd 	bl	800d364 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a28      	ldr	r2, [pc, #160]	@ (8000e70 <HAL_FDCAN_MspInit+0xcc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d149      	bne.n	8000e68 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000dda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000dde:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4618      	mov	r0, r3
 8000de6:	f007 fef9 	bl	8008bdc <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000df0:	f000 fb04 	bl	80013fc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000dfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e00:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e24:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e28:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e36:	2309      	movs	r3, #9
 8000e38:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f004 ff20 	bl	8005c88 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2015      	movs	r0, #21
 8000e4e:	f003 fed1 	bl	8004bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e52:	2015      	movs	r0, #21
 8000e54:	f003 fee8 	bl	8004c28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2016      	movs	r0, #22
 8000e5e:	f003 fec9 	bl	8004bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000e62:	2016      	movs	r0, #22
 8000e64:	f003 fee0 	bl	8004c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3778      	adds	r7, #120	@ 0x78
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40006400 	.word	0x40006400
 8000e74:	40021000 	.word	0x40021000

08000e78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	@ 0x30
 8000e7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8e:	4b71      	ldr	r3, [pc, #452]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	4a70      	ldr	r2, [pc, #448]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	f003 0320 	and.w	r3, r3, #32
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b6b      	ldr	r3, [pc, #428]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	4a6a      	ldr	r2, [pc, #424]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb2:	4b68      	ldr	r3, [pc, #416]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b65      	ldr	r3, [pc, #404]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	4a64      	ldr	r2, [pc, #400]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eca:	4b62      	ldr	r3, [pc, #392]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	4a5e      	ldr	r2, [pc, #376]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eee:	4b59      	ldr	r3, [pc, #356]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a58      	ldr	r2, [pc, #352]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b56      	ldr	r3, [pc, #344]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	4b53      	ldr	r3, [pc, #332]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a52      	ldr	r2, [pc, #328]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b50      	ldr	r3, [pc, #320]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f641 7130 	movw	r1, #7984	@ 0x1f30
 8000f24:	484c      	ldr	r0, [pc, #304]	@ (8001058 <MX_GPIO_Init+0x1e0>)
 8000f26:	f005 f831 	bl	8005f8c <HAL_GPIO_WritePin>
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f246 0102 	movw	r1, #24578	@ 0x6002
 8000f30:	484a      	ldr	r0, [pc, #296]	@ (800105c <MX_GPIO_Init+0x1e4>)
 8000f32:	f005 f82b 	bl	8005f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STARTSYNC_2_Pin|CS2_Pin|RESET2_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000f3c:	4848      	ldr	r0, [pc, #288]	@ (8001060 <MX_GPIO_Init+0x1e8>)
 8000f3e:	f005 f825 	bl	8005f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANALOGSWITCH_5_GPIO_Port, ANALOGSWITCH_5_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f48:	4846      	ldr	r0, [pc, #280]	@ (8001064 <MX_GPIO_Init+0x1ec>)
 8000f4a:	f005 f81f 	bl	8005f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f005 f818 	bl	8005f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8000f5c:	f641 7330 	movw	r3, #7984	@ 0x1f30
 8000f60:	61fb      	str	r3, [r7, #28]
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4838      	ldr	r0, [pc, #224]	@ (8001058 <MX_GPIO_Init+0x1e0>)
 8000f76:	f004 fe87 	bl	8005c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY1_Pin;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY1_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4833      	ldr	r0, [pc, #204]	@ (800105c <MX_GPIO_Init+0x1e4>)
 8000f90:	f004 fe7a 	bl	8005c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin;
 8000f94:	f246 0302 	movw	r3, #24578	@ 0x6002
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	482b      	ldr	r0, [pc, #172]	@ (800105c <MX_GPIO_Init+0x1e4>)
 8000fae:	f004 fe6b 	bl	8005c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STARTSYNC_2_Pin|CS2_Pin|RESET2_Pin;
 8000fb2:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4825      	ldr	r0, [pc, #148]	@ (8001060 <MX_GPIO_Init+0x1e8>)
 8000fcc:	f004 fe5c 	bl	8005c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY2_Pin;
 8000fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY2_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481e      	ldr	r0, [pc, #120]	@ (8001060 <MX_GPIO_Init+0x1e8>)
 8000fe8:	f004 fe4e 	bl	8005c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_5_Pin;
 8000fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ANALOGSWITCH_5_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4817      	ldr	r0, [pc, #92]	@ (8001064 <MX_GPIO_Init+0x1ec>)
 8001006:	f004 fe3f 	bl	8005c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin;
 800100a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001026:	f004 fe2f 	bl	8005c88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2006      	movs	r0, #6
 8001030:	f003 fde0 	bl	8004bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001034:	2006      	movs	r0, #6
 8001036:	f003 fdf7 	bl	8004c28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2017      	movs	r0, #23
 8001040:	f003 fdd8 	bl	8004bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001044:	2017      	movs	r0, #23
 8001046:	f003 fdef 	bl	8004c28 <HAL_NVIC_EnableIRQ>

}
 800104a:	bf00      	nop
 800104c:	3730      	adds	r7, #48	@ 0x30
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	48000800 	.word	0x48000800
 800105c:	48000400 	.word	0x48000400
 8001060:	48001000 	.word	0x48001000
 8001064:	48000c00 	.word	0x48000c00

08001068 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <MX_I2C1_Init+0x74>)
 800106e:	4a1c      	ldr	r2, [pc, #112]	@ (80010e0 <MX_I2C1_Init+0x78>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <MX_I2C1_Init+0x7c>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MX_I2C1_Init+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107e:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001080:	2201      	movs	r2, #1
 8001082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_I2C1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a2:	480e      	ldr	r0, [pc, #56]	@ (80010dc <MX_I2C1_Init+0x74>)
 80010a4:	f004 ffbc 	bl	8006020 <HAL_I2C_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ae:	f000 f9a5 	bl	80013fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4809      	ldr	r0, [pc, #36]	@ (80010dc <MX_I2C1_Init+0x74>)
 80010b6:	f006 fee5 	bl	8007e84 <HAL_I2CEx_ConfigAnalogFilter>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010c0:	f000 f99c 	bl	80013fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_I2C1_Init+0x74>)
 80010c8:	f006 ff27 	bl	8007f1a <HAL_I2CEx_ConfigDigitalFilter>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010d2:	f000 f993 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20010268 	.word	0x20010268
 80010e0:	40005400 	.word	0x40005400
 80010e4:	30909dec 	.word	0x30909dec

080010e8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */
//    hi2c4.XferCount
  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <MX_I2C4_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <MX_I2C4_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00F07BFF;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_I2C4_Init+0x74>)
 80010f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <MX_I2C4_Init+0x7c>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <MX_I2C4_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_I2C4_Init+0x74>)
 8001100:	2201      	movs	r2, #1
 8001102:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_I2C4_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_I2C4_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_I2C4_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_I2C4_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_I2C4_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001122:	480e      	ldr	r0, [pc, #56]	@ (800115c <MX_I2C4_Init+0x74>)
 8001124:	f004 ff7c 	bl	8006020 <HAL_I2C_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800112e:	f000 f965 	bl	80013fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001132:	2100      	movs	r1, #0
 8001134:	4809      	ldr	r0, [pc, #36]	@ (800115c <MX_I2C4_Init+0x74>)
 8001136:	f006 fea5 	bl	8007e84 <HAL_I2CEx_ConfigAnalogFilter>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001140:	f000 f95c 	bl	80013fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_I2C4_Init+0x74>)
 8001148:	f006 fee7 	bl	8007f1a <HAL_I2CEx_ConfigDigitalFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 f953 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200102bc 	.word	0x200102bc
 8001160:	40008400 	.word	0x40008400
 8001164:	00f07bff 	.word	0x00f07bff

08001168 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0a2      	sub	sp, #136	@ 0x88
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	2254      	movs	r2, #84	@ 0x54
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f00c f8eb 	bl	800d364 <memset>
  if(i2cHandle->Instance==I2C1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a57      	ldr	r2, [pc, #348]	@ (80012f0 <HAL_I2C_MspInit+0x188>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d158      	bne.n	800124a <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001198:	2340      	movs	r3, #64	@ 0x40
 800119a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800119c:	2300      	movs	r3, #0
 800119e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4618      	mov	r0, r3
 80011a6:	f007 fd19 	bl	8008bdc <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011b0:	f000 f924 	bl	80013fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b4f      	ldr	r3, [pc, #316]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b8:	4a4e      	ldr	r2, [pc, #312]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c0:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b49      	ldr	r3, [pc, #292]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d0:	4a48      	ldr	r2, [pc, #288]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d8:	4b46      	ldr	r3, [pc, #280]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
 80011e2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011e8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ea:	2312      	movs	r3, #18
 80011ec:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f8:	2304      	movs	r3, #4
 80011fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001208:	f004 fd3e 	bl	8005c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800120c:	2380      	movs	r3, #128	@ 0x80
 800120e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001210:	2312      	movs	r3, #18
 8001212:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121e:	2304      	movs	r3, #4
 8001220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001228:	4619      	mov	r1, r3
 800122a:	4833      	ldr	r0, [pc, #204]	@ (80012f8 <HAL_I2C_MspInit+0x190>)
 800122c:	f004 fd2c 	bl	8005c88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001230:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001234:	4a2f      	ldr	r2, [pc, #188]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800123a:	6593      	str	r3, [r2, #88]	@ 0x58
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001248:	e04d      	b.n	80012e6 <HAL_I2C_MspInit+0x17e>
  else if(i2cHandle->Instance==I2C4)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a2b      	ldr	r2, [pc, #172]	@ (80012fc <HAL_I2C_MspInit+0x194>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d148      	bne.n	80012e6 <HAL_I2C_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001254:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001258:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800125a:	2300      	movs	r3, #0
 800125c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	4618      	mov	r0, r3
 8001264:	f007 fcba 	bl	8008bdc <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 800126e:	f000 f8c5 	bl	80013fc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a1f      	ldr	r2, [pc, #124]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128a:	23c0      	movs	r3, #192	@ 0xc0
 800128c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128e:	2312      	movs	r3, #18
 8001290:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 800129c:	2308      	movs	r3, #8
 800129e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012a6:	4619      	mov	r1, r3
 80012a8:	4815      	ldr	r0, [pc, #84]	@ (8001300 <HAL_I2C_MspInit+0x198>)
 80012aa:	f004 fced 	bl	8005c88 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80012b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b2:	4a10      	ldr	r2, [pc, #64]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80012bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2052      	movs	r0, #82	@ 0x52
 80012cc:	f003 fc92 	bl	8004bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80012d0:	2052      	movs	r0, #82	@ 0x52
 80012d2:	f003 fca9 	bl	8004c28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2053      	movs	r0, #83	@ 0x53
 80012dc:	f003 fc8a 	bl	8004bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80012e0:	2053      	movs	r0, #83	@ 0x53
 80012e2:	f003 fca1 	bl	8004c28 <HAL_NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3788      	adds	r7, #136	@ 0x88
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48000400 	.word	0x48000400
 80012fc:	40008400 	.word	0x40008400
 8001300:	48000800 	.word	0x48000800

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001308:	f001 fd49 	bl	8002d9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130c:	f000 f81a 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001310:	f7ff fdb2 	bl	8000e78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001314:	f7ff fcd4 	bl	8000cc0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001318:	f7ff fcfc 	bl	8000d14 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 800131c:	f000 fa28 	bl	8001770 <MX_TIM2_Init>
  MX_CRC_Init();
 8001320:	f7ff fc8c 	bl	8000c3c <MX_CRC_Init>
  MX_ADC4_Init();
 8001324:	f7ff fab4 	bl	8000890 <MX_ADC4_Init>
  MX_SPI4_Init();
 8001328:	f000 f86e 	bl	8001408 <MX_SPI4_Init>
  MX_ADC1_Init();
 800132c:	f7ff fa38 	bl	80007a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001330:	f7ff fe9a 	bl	8001068 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001334:	f7ff fed8 	bl	80010e8 <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 8001338:	f000 fad8 	bl	80018ec <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800133c:	f7ff fc77 	bl	8000c2e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <main+0x3c>

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	@ 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	2238      	movs	r2, #56	@ 0x38
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f00c f806 	bl	800d364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001366:	2000      	movs	r0, #0
 8001368:	f006 fe24 	bl	8007fb4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136c:	2301      	movs	r3, #1
 800136e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001370:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001374:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001376:	2302      	movs	r3, #2
 8001378:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137a:	2303      	movs	r3, #3
 800137c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800137e:	2306      	movs	r3, #6
 8001380:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001382:	2350      	movs	r3, #80	@ 0x50
 8001384:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800138a:	2304      	movs	r3, #4
 800138c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800138e:	2302      	movs	r3, #2
 8001390:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	4618      	mov	r0, r3
 8001398:	f006 fec0 	bl	800811c <HAL_RCC_OscConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80013a2:	f000 f82b 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a6:	230f      	movs	r3, #15
 80013a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013aa:	2303      	movs	r3, #3
 80013ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2104      	movs	r1, #4
 80013be:	4618      	mov	r0, r3
 80013c0:	f007 f9be 	bl	8008740 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013ca:	f000 f817 	bl	80013fc <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3750      	adds	r7, #80	@ 0x50
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ea:	f001 fcf1 	bl	8002dd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40001000 	.word	0x40001000

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800140c:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <MX_SPI4_Init+0x74>)
 800140e:	4a1c      	ldr	r2, [pc, #112]	@ (8001480 <MX_SPI4_Init+0x78>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001412:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <MX_SPI4_Init+0x74>)
 8001414:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001418:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	4b18      	ldr	r3, [pc, #96]	@ (800147c <MX_SPI4_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <MX_SPI4_Init+0x74>)
 8001422:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001426:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001428:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_SPI4_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <MX_SPI4_Init+0x74>)
 8001430:	2201      	movs	r2, #1
 8001432:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_SPI4_Init+0x74>)
 8001436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800143a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_SPI4_Init+0x74>)
 800143e:	2220      	movs	r2, #32
 8001440:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_SPI4_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_SPI4_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <MX_SPI4_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_SPI4_Init+0x74>)
 8001456:	2207      	movs	r2, #7
 8001458:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800145a:	4b08      	ldr	r3, [pc, #32]	@ (800147c <MX_SPI4_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <MX_SPI4_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	@ (800147c <MX_SPI4_Init+0x74>)
 8001468:	f007 fe06 	bl	8009078 <HAL_SPI_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001472:	f7ff ffc3 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20010310 	.word	0x20010310
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001510 <HAL_SPI_MspInit+0x8c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d130      	bne.n	8001508 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	4a14      	ldr	r2, [pc, #80]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014c4:	f043 0310 	orr.w	r3, r3, #16
 80014c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_SPI_MspInit+0x90>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80014d6:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014e8:	2305      	movs	r3, #5
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4809      	ldr	r0, [pc, #36]	@ (8001518 <HAL_SPI_MspInit+0x94>)
 80014f4:	f004 fbc8 	bl	8005c88 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2054      	movs	r0, #84	@ 0x54
 80014fe:	f003 fb79 	bl	8004bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001502:	2054      	movs	r0, #84	@ 0x54
 8001504:	f003 fb90 	bl	8004c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40013c00 	.word	0x40013c00
 8001514:	40021000 	.word	0x40021000
 8001518:	48001000 	.word	0x48001000

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_MspInit+0x4c>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001526:	4a10      	ldr	r2, [pc, #64]	@ (8001568 <HAL_MspInit+0x4c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6613      	str	r3, [r2, #96]	@ 0x60
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <HAL_MspInit+0x4c>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_MspInit+0x4c>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <HAL_MspInit+0x4c>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001544:	6593      	str	r3, [r2, #88]	@ 0x58
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <HAL_MspInit+0x4c>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001552:	f001 fc6f 	bl	8002e34 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001556:	2002      	movs	r0, #2
 8001558:	f001 fc58 	bl	8002e0c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800155c:	f006 fdce 	bl	80080fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	@ 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800157c:	4b2c      	ldr	r3, [pc, #176]	@ (8001630 <HAL_InitTick+0xc4>)
 800157e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001580:	4a2b      	ldr	r2, [pc, #172]	@ (8001630 <HAL_InitTick+0xc4>)
 8001582:	f043 0310 	orr.w	r3, r3, #16
 8001586:	6593      	str	r3, [r2, #88]	@ 0x58
 8001588:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <HAL_InitTick+0xc4>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001594:	f107 020c 	add.w	r2, r7, #12
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f007 faa4 	bl	8008aec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015a4:	f007 fa76 	bl	8008a94 <HAL_RCC_GetPCLK1Freq>
 80015a8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ac:	4a21      	ldr	r2, [pc, #132]	@ (8001634 <HAL_InitTick+0xc8>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	3b01      	subs	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <HAL_InitTick+0xcc>)
 80015ba:	4a20      	ldr	r2, [pc, #128]	@ (800163c <HAL_InitTick+0xd0>)
 80015bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015be:	4b1e      	ldr	r3, [pc, #120]	@ (8001638 <HAL_InitTick+0xcc>)
 80015c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <HAL_InitTick+0xcc>)
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_InitTick+0xcc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_InitTick+0xcc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80015d8:	4817      	ldr	r0, [pc, #92]	@ (8001638 <HAL_InitTick+0xcc>)
 80015da:	f007 ff0c 	bl	80093f6 <HAL_TIM_Base_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d11b      	bne.n	8001624 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015ec:	4812      	ldr	r0, [pc, #72]	@ (8001638 <HAL_InitTick+0xcc>)
 80015ee:	f007 ff63 	bl	80094b8 <HAL_TIM_Base_Start_IT>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d111      	bne.n	8001624 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001600:	2036      	movs	r0, #54	@ 0x36
 8001602:	f003 fb11 	bl	8004c28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d808      	bhi.n	800161e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	2036      	movs	r0, #54	@ 0x36
 8001612:	f003 faef 	bl	8004bf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001616:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <HAL_InitTick+0xd4>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	e002      	b.n	8001624 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001624:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001628:	4618      	mov	r0, r3
 800162a:	3730      	adds	r7, #48	@ 0x30
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	431bde83 	.word	0x431bde83
 8001638:	20010374 	.word	0x20010374
 800163c:	40001000 	.word	0x40001000
 8001640:	2000004c 	.word	0x2000004c

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <NMI_Handler+0x4>

0800164c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <MemManage_Handler+0x4>

0800165c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <UsageFault_Handler+0x4>

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY1_Pin);
 800167e:	2001      	movs	r0, #1
 8001680:	f004 fcb6 	bl	8005ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <DMA1_Channel3_IRQHandler+0x10>)
 800168e:	f003 fd55 	bl	800513c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20010180 	.word	0x20010180

0800169c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <FDCAN1_IT0_IRQHandler+0x10>)
 80016a2:	f004 f86f 	bl	8005784 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20010204 	.word	0x20010204

080016b0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <FDCAN1_IT1_IRQHandler+0x10>)
 80016b6:	f004 f865 	bl	8005784 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20010204 	.word	0x20010204

080016c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY2_Pin);
 80016c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016cc:	f004 fc90 	bl	8005ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <TIM2_IRQHandler+0x10>)
 80016da:	f008 f90d 	bl	80098f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200103c0 	.word	0x200103c0

080016e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <TIM6_DAC_IRQHandler+0x10>)
 80016ee:	f008 f903 	bl	80098f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20010374 	.word	0x20010374

080016fc <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <ADC4_IRQHandler+0x10>)
 8001702:	f002 f877 	bl	80037f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20010114 	.word	0x20010114

08001710 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <I2C4_EV_IRQHandler+0x10>)
 8001716:	f004 fec7 	bl	80064a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200102bc 	.word	0x200102bc

08001724 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <I2C4_ER_IRQHandler+0x10>)
 800172a:	f004 fed7 	bl	80064dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200102bc 	.word	0x200102bc

08001738 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <SPI4_IRQHandler+0x10>)
 800173e:	f007 fd47 	bl	80091d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20010310 	.word	0x20010310

0800174c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	@ (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178e:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <MX_TIM2_Init+0xe4>)
 8001790:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001794:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001796:	4b2f      	ldr	r3, [pc, #188]	@ (8001854 <MX_TIM2_Init+0xe4>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <MX_TIM2_Init+0xe4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017b6:	4827      	ldr	r0, [pc, #156]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017b8:	f007 fef6 	bl	80095a8 <HAL_TIM_IC_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017c2:	f7ff fe1b 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	481f      	ldr	r0, [pc, #124]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017d6:	f008 fce1 	bl	800a19c <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017e0:	f7ff fe0c 	bl	80013fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017e8:	2301      	movs	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	4619      	mov	r1, r3
 80017fa:	4816      	ldr	r0, [pc, #88]	@ (8001854 <MX_TIM2_Init+0xe4>)
 80017fc:	f008 f9cb 	bl	8009b96 <HAL_TIM_IC_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001806:	f7ff fdf9 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	2204      	movs	r2, #4
 800180e:	4619      	mov	r1, r3
 8001810:	4810      	ldr	r0, [pc, #64]	@ (8001854 <MX_TIM2_Init+0xe4>)
 8001812:	f008 f9c0 	bl	8009b96 <HAL_TIM_IC_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800181c:	f7ff fdee 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2208      	movs	r2, #8
 8001824:	4619      	mov	r1, r3
 8001826:	480b      	ldr	r0, [pc, #44]	@ (8001854 <MX_TIM2_Init+0xe4>)
 8001828:	f008 f9b5 	bl	8009b96 <HAL_TIM_IC_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001832:	f7ff fde3 	bl	80013fc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	220c      	movs	r2, #12
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	@ (8001854 <MX_TIM2_Init+0xe4>)
 800183e:	f008 f9aa 	bl	8009b96 <HAL_TIM_IC_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001848:	f7ff fdd8 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200103c0 	.word	0x200103c0

08001858 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001878:	d12f      	bne.n	80018da <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	4a19      	ldr	r2, [pc, #100]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6593      	str	r3, [r2, #88]	@ 0x58
 8001886:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001892:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	4a13      	ldr	r2, [pc, #76]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_TIM_IC_MspInit+0x8c>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FREQUENCY_3_Pin|FREQUENCY_2_Pin|FREQUENCY_1_Pin|FREQUENCY_4_Pin;
 80018aa:	23d8      	movs	r3, #216	@ 0xd8
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4808      	ldr	r0, [pc, #32]	@ (80018e8 <HAL_TIM_IC_MspInit+0x90>)
 80018c6:	f004 f9df 	bl	8005c88 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	201c      	movs	r0, #28
 80018d0:	f003 f990 	bl	8004bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d4:	201c      	movs	r0, #28
 80018d6:	f003 f9a7 	bl	8004c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	@ 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000c00 	.word	0x48000c00

080018ec <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 80018f2:	4a21      	ldr	r2, [pc, #132]	@ (8001978 <MX_LPUART1_UART_Init+0x8c>)
 80018f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 80018f8:	4a20      	ldr	r2, [pc, #128]	@ (800197c <MX_LPUART1_UART_Init+0x90>)
 80018fa:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001904:	2200      	movs	r2, #0
 8001906:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001910:	220c      	movs	r2, #12
 8001912:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191a:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800192c:	4811      	ldr	r0, [pc, #68]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 800192e:	f008 fd11 	bl	800a354 <HAL_UART_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001938:	f7ff fd60 	bl	80013fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800193c:	2100      	movs	r1, #0
 800193e:	480d      	ldr	r0, [pc, #52]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001940:	f009 faac 	bl	800ae9c <HAL_UARTEx_SetTxFifoThreshold>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800194a:	f7ff fd57 	bl	80013fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194e:	2100      	movs	r1, #0
 8001950:	4808      	ldr	r0, [pc, #32]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001952:	f009 fae1 	bl	800af18 <HAL_UARTEx_SetRxFifoThreshold>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800195c:	f7ff fd4e 	bl	80013fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	@ (8001974 <MX_LPUART1_UART_Init+0x88>)
 8001962:	f009 fa62 	bl	800ae2a <HAL_UARTEx_DisableFifoMode>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800196c:	f7ff fd46 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2001040c 	.word	0x2001040c
 8001978:	40008000 	.word	0x40008000
 800197c:	00033324 	.word	0x00033324

08001980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b09e      	sub	sp, #120	@ 0x78
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	2254      	movs	r2, #84	@ 0x54
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00b fcdf 	bl	800d364 <memset>
  if(uartHandle->Instance==LPUART1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a24 <HAL_UART_MspInit+0xa4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d135      	bne.n	8001a1c <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019b0:	2320      	movs	r3, #32
 80019b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4618      	mov	r0, r3
 80019be:	f007 f90d 	bl	8008bdc <HAL_RCCEx_PeriphCLKConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019c8:	f7ff fd18 	bl	80013fc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d0:	4a15      	ldr	r2, [pc, #84]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80019d8:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e4:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <HAL_UART_MspInit+0xa8>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019fc:	2303      	movs	r3, #3
 80019fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a14:	4619      	mov	r1, r3
 8001a16:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <HAL_UART_MspInit+0xac>)
 8001a18:	f004 f936 	bl	8005c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3778      	adds	r7, #120	@ 0x78
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40008000 	.word	0x40008000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000800 	.word	0x48000800

08001a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a30:	480d      	ldr	r0, [pc, #52]	@ (8001a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a34:	f7ff fe8a 	bl	800174c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a38:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a3a:	490d      	ldr	r1, [pc, #52]	@ (8001a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <LoopForever+0xe>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a40:	e002      	b.n	8001a48 <LoopCopyDataInit>

08001a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a46:	3304      	adds	r3, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a4c:	d3f9      	bcc.n	8001a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a50:	4c0a      	ldr	r4, [pc, #40]	@ (8001a7c <LoopForever+0x16>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a54:	e001      	b.n	8001a5a <LoopFillZerobss>

08001a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a58:	3204      	adds	r2, #4

08001a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a5c:	d3fb      	bcc.n	8001a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f00b fc89 	bl	800d374 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a62:	f7ff fc4f 	bl	8001304 <main>

08001a66 <LoopForever>:

LoopForever:
    b LoopForever
 8001a66:	e7fe      	b.n	8001a66 <LoopForever>
  ldr   r0, =_estack
 8001a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001a74:	0800d5ac 	.word	0x0800d5ac
  ldr r2, =_sbss
 8001a78:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001a7c:	20011014 	.word	0x20011014

08001a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC1_2_IRQHandler>
	...

08001a84 <HAL_ADC_ConvCpltCallback>:
	analogSwitch8
};

void HAL_ADC_ConvCpltCallback(
    ADC_HandleTypeDef* hadc
){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
    tx_semaphore_put(&semaphoreAnalog);
 8001a8c:	4803      	ldr	r0, [pc, #12]	@ (8001a9c <HAL_ADC_ConvCpltCallback+0x18>)
 8001a8e:	f00b fa3b 	bl	800cf08 <_txe_semaphore_put>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20010828 	.word	0x20010828

08001aa0 <setAnalogSwitches>:

uint8_t setAnalogSwitches(
	const uint8_t switchSettings[NUM_ADC_CHANNELS]
){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	72fb      	strb	r3, [r7, #11]

	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	e017      	b.n	8001ae2 <setAnalogSwitches+0x42>
		if(switchSettings[i]){
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <setAnalogSwitches+0x2e>
			set12VSensor(&analogSwitches[i]);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8001af4 <setAnalogSwitches+0x54>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f816 	bl	8001af8 <set12VSensor>
 8001acc:	e006      	b.n	8001adc <setAnalogSwitches+0x3c>
		}else{
			set5VSensor(&analogSwitches[i]);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4a08      	ldr	r2, [pc, #32]	@ (8001af4 <setAnalogSwitches+0x54>)
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f826 	bl	8001b28 <set5VSensor>
	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b07      	cmp	r3, #7
 8001ae6:	d9e4      	bls.n	8001ab2 <setAnalogSwitches+0x12>
		}
	}
	return retval;
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000004 	.word	0x20000004

08001af8 <set12VSensor>:

uint8_t set12VSensor(
	gpio_control_t *self
){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <set12VSensor+0x16>
		retval = UCR_NPTR;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(self->port, self->pin, SET_12V);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	889b      	ldrh	r3, [r3, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f004 fa37 	bl	8005f8c <HAL_GPIO_WritePin>
	return retval;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <set5VSensor>:

uint8_t set5VSensor(
	gpio_control_t *self
){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <set5VSensor+0x16>
		retval = UCR_NPTR;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(self->port, self->pin, SET_5V);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	889b      	ldrh	r3, [r3, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f004 fa1f 	bl	8005f8c <HAL_GPIO_WritePin>
	return retval;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <AeroInit>:
        DATA_MSB_ADDRESS,
        DATA_CSB_ADDRESS,
        DATA_LSB_ADDRESS
};

uint8_t AeroInit(void){
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
    uint8_t retVal = UCR_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	70fb      	strb	r3, [r7, #3]
    for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	e00a      	b.n	8001b7e <AeroInit+0x26>
        AeroSensors[i].sensorNumber = i;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	b2d9      	uxtb	r1, r3
 8001b6c:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <AeroInit+0x3c>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	460a      	mov	r2, r1
 8001b76:	719a      	strb	r2, [r3, #6]
    for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d9f1      	bls.n	8001b68 <AeroInit+0x10>
    }
    return retVal;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	200104a0 	.word	0x200104a0

08001b98 <SetChannel>:

uint8_t SetChannel(
    uint8_t sensor
){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
    uint8_t retVal = UCR_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
    if(sensor > NUM_AERO_SENSORS){
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d903      	bls.n	8001bb4 <SetChannel+0x1c>
        retVal = UCR_NOT_OK;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
        return retVal;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	e01b      	b.n	8001bec <SetChannel+0x54>
    }
    uint8_t data = 1 << (sensor);
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	73bb      	strb	r3, [r7, #14]
    if(HAL_OK != HAL_I2C_Master_Transmit_IT(&hi2c4, SWITCH_ADDRESS, &data, ONE_BYTE)){
 8001bc0:	f107 020e 	add.w	r2, r7, #14
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	21e0      	movs	r1, #224	@ 0xe0
 8001bc8:	480a      	ldr	r0, [pc, #40]	@ (8001bf4 <SetChannel+0x5c>)
 8001bca:	f004 fac5 	bl	8006158 <HAL_I2C_Master_Transmit_IT>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <SetChannel+0x40>
        return UCR_NOT_OK;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e009      	b.n	8001bec <SetChannel+0x54>
    }
    if(TX_NO_INSTANCE != tx_semaphore_get(&semaphoreAero, 10)){
 8001bd8:	210a      	movs	r1, #10
 8001bda:	4807      	ldr	r0, [pc, #28]	@ (8001bf8 <SetChannel+0x60>)
 8001bdc:	f00b f952 	bl	800ce84 <_txe_semaphore_get>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b0d      	cmp	r3, #13
 8001be4:	d001      	beq.n	8001bea <SetChannel+0x52>
        return UCR_NOT_OK;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <SetChannel+0x54>
    }
    return retVal;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200102bc 	.word	0x200102bc
 8001bf8:	20010844 	.word	0x20010844

08001bfc <StartSensorReading>:

uint8_t StartSensorReading(
    aeroSensor_t* sensor
){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	6078      	str	r0, [r7, #4]
    uint8_t retVal = UCR_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]
    if(UCR_OK != SetChannel(sensor->sensorNumber)){
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	799b      	ldrb	r3, [r3, #6]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ffc3 	bl	8001b98 <SetChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <StartSensorReading+0x24>
        retVal = UCR_NOT_OK;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
        return retVal;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	e01b      	b.n	8001c58 <StartSensorReading+0x5c>
    }
    uint8_t data = START_SENSOR;
 8001c20:	230a      	movs	r3, #10
 8001c22:	73bb      	strb	r3, [r7, #14]
    if(HAL_OK != HAL_I2C_Mem_Write_IT(&hi2c4, SENSOR_ADDRESS, CMD_ADDRESS, ONE_BYTE, &data, 1)){
 8001c24:	2301      	movs	r3, #1
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	f107 030e 	add.w	r3, r7, #14
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	2230      	movs	r2, #48	@ 0x30
 8001c32:	21da      	movs	r1, #218	@ 0xda
 8001c34:	480a      	ldr	r0, [pc, #40]	@ (8001c60 <StartSensorReading+0x64>)
 8001c36:	f004 fb27 	bl	8006288 <HAL_I2C_Mem_Write_IT>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <StartSensorReading+0x48>
        return UCR_NOT_OK;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e009      	b.n	8001c58 <StartSensorReading+0x5c>
    }
    if(TX_NO_INSTANCE != tx_semaphore_get(&semaphoreAero, 10)){
 8001c44:	210a      	movs	r1, #10
 8001c46:	4807      	ldr	r0, [pc, #28]	@ (8001c64 <StartSensorReading+0x68>)
 8001c48:	f00b f91c 	bl	800ce84 <_txe_semaphore_get>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b0d      	cmp	r3, #13
 8001c50:	d001      	beq.n	8001c56 <StartSensorReading+0x5a>
        return UCR_NOT_OK;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <StartSensorReading+0x5c>
    }
    return retVal;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200102bc 	.word	0x200102bc
 8001c64:	20010844 	.word	0x20010844

08001c68 <ReadData>:

uint8_t ReadData(
    aeroSensor_t* sensor
){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	@ 0x28
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	6078      	str	r0, [r7, #4]
    uint8_t retVal = UCR_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	74fb      	strb	r3, [r7, #19]
    if(UCR_OK != SetChannel(sensor->sensorNumber)){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	799b      	ldrb	r3, [r3, #6]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff8d 	bl	8001b98 <SetChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <ReadData+0x24>
        retVal = UCR_NOT_OK;
 8001c84:	2301      	movs	r3, #1
 8001c86:	74fb      	strb	r3, [r7, #19]
        return retVal;
 8001c88:	7cfb      	ldrb	r3, [r7, #19]
 8001c8a:	e071      	b.n	8001d70 <ReadData+0x108>
    }
    int32_t pressureReading;
    int16_t temperatureReading;
    uint8_t pressureData[3];
    uint8_t temperatureData[2];
    for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e021      	b.n	8001cd6 <ReadData+0x6e>
        if(HAL_OK != HAL_I2C_Mem_Read_IT(&hi2c4, SENSOR_ADDRESS, pressureAddresses[i], ONE_BYTE, &pressureData[i], ONE_BYTE)){
 8001c92:	4a39      	ldr	r2, [pc, #228]	@ (8001d78 <ReadData+0x110>)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001c9a:	f107 0210 	add.w	r2, r7, #16
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	9201      	str	r2, [sp, #4]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	460a      	mov	r2, r1
 8001cac:	21da      	movs	r1, #218	@ 0xda
 8001cae:	4833      	ldr	r0, [pc, #204]	@ (8001d7c <ReadData+0x114>)
 8001cb0:	f004 fb74 	bl	800639c <HAL_I2C_Mem_Read_IT>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <ReadData+0x56>
            return UCR_NOT_OK;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e058      	b.n	8001d70 <ReadData+0x108>
        }
        if(TX_NO_INSTANCE != tx_semaphore_get(&semaphoreAero, 10)){
 8001cbe:	210a      	movs	r1, #10
 8001cc0:	482f      	ldr	r0, [pc, #188]	@ (8001d80 <ReadData+0x118>)
 8001cc2:	f00b f8df 	bl	800ce84 <_txe_semaphore_get>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b0d      	cmp	r3, #13
 8001cca:	d001      	beq.n	8001cd0 <ReadData+0x68>
            return UCR_NOT_OK;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e04f      	b.n	8001d70 <ReadData+0x108>
    for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d9da      	bls.n	8001c92 <ReadData+0x2a>
        }
    }

    pressureReading = (pressureData[0] << TWO_BYTE_OFFSET) + (pressureData[1] << ONE_BYTE_OFFSET) + pressureData[2];
 8001cdc:	7c3b      	ldrb	r3, [r7, #16]
 8001cde:	041a      	lsls	r2, r3, #16
 8001ce0:	7c7b      	ldrb	r3, [r7, #17]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	4413      	add	r3, r2
 8001ce6:	7cba      	ldrb	r2, [r7, #18]
 8001ce8:	4413      	add	r3, r2
 8001cea:	61fb      	str	r3, [r7, #28]
    if(pressureReading >> PRESSURE_MSB_OFFSET){
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	15db      	asrs	r3, r3, #23
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <ReadData+0x94>
        pressureReading = pressureReading - 16777216;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
 8001cfa:	61fb      	str	r3, [r7, #28]
    }
    sensor->pressure = pressureReading;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	601a      	str	r2, [r3, #0]

    HAL_I2C_Mem_Read_IT(&hi2c4, SENSOR_ADDRESS, TEMP_MSB_ADDRESS, ONE_BYTE, &temperatureData[0], ONE_BYTE);
 8001d02:	2301      	movs	r3, #1
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	2209      	movs	r2, #9
 8001d10:	21da      	movs	r1, #218	@ 0xda
 8001d12:	481a      	ldr	r0, [pc, #104]	@ (8001d7c <ReadData+0x114>)
 8001d14:	f004 fb42 	bl	800639c <HAL_I2C_Mem_Read_IT>
    if(TX_NO_INSTANCE != tx_semaphore_get(&semaphoreAero, 10)){
 8001d18:	210a      	movs	r1, #10
 8001d1a:	4819      	ldr	r0, [pc, #100]	@ (8001d80 <ReadData+0x118>)
 8001d1c:	f00b f8b2 	bl	800ce84 <_txe_semaphore_get>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b0d      	cmp	r3, #13
 8001d24:	d001      	beq.n	8001d2a <ReadData+0xc2>
        return UCR_NOT_OK;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e022      	b.n	8001d70 <ReadData+0x108>
    }
    HAL_I2C_Mem_Read_IT(&hi2c4, SENSOR_ADDRESS, TEMP_LSB_ADDRESS, ONE_BYTE, &temperatureData[1], ONE_BYTE);
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	9301      	str	r3, [sp, #4]
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	3301      	adds	r3, #1
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2301      	movs	r3, #1
 8001d38:	220a      	movs	r2, #10
 8001d3a:	21da      	movs	r1, #218	@ 0xda
 8001d3c:	480f      	ldr	r0, [pc, #60]	@ (8001d7c <ReadData+0x114>)
 8001d3e:	f004 fb2d 	bl	800639c <HAL_I2C_Mem_Read_IT>
    if(TX_NO_INSTANCE != tx_semaphore_get(&semaphoreAero, 10)){
 8001d42:	210a      	movs	r1, #10
 8001d44:	480e      	ldr	r0, [pc, #56]	@ (8001d80 <ReadData+0x118>)
 8001d46:	f00b f89d 	bl	800ce84 <_txe_semaphore_get>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b0d      	cmp	r3, #13
 8001d4e:	d001      	beq.n	8001d54 <ReadData+0xec>
        return UCR_NOT_OK;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e00d      	b.n	8001d70 <ReadData+0x108>
    }
    temperatureReading = (temperatureData[0] << ONE_BYTE_OFFSET) + temperatureData[1];
 8001d54:	7b3b      	ldrb	r3, [r7, #12]
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	7b7a      	ldrb	r2, [r7, #13]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	837b      	strh	r3, [r7, #26]
    if(temperatureReading >> TEMPERATURE_MSB_OFFSET){
 8001d62:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d66:	2b00      	cmp	r3, #0
        temperatureReading = temperatureReading - 65536;
    }
    sensor->temperature = temperatureReading;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	8b7a      	ldrh	r2, [r7, #26]
 8001d6c:	809a      	strh	r2, [r3, #4]

    return retVal;
 8001d6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000044 	.word	0x20000044
 8001d7c:	200102bc 	.word	0x200102bc
 8001d80:	20010844 	.word	0x20010844

08001d84 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
//    tx_semaphore_ceiling_put(&semaphoreAero, 1);
    tx_semaphore_put(&semaphoreAero);
 8001d8c:	4803      	ldr	r0, [pc, #12]	@ (8001d9c <HAL_I2C_MasterTxCpltCallback+0x18>)
 8001d8e:	f00b f8bb 	bl	800cf08 <_txe_semaphore_put>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20010844 	.word	0x20010844

08001da0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
//    tx_semaphore_ceiling_put(&semaphoreAero, 1);
    tx_semaphore_put(&semaphoreAero);
 8001da8:	4803      	ldr	r0, [pc, #12]	@ (8001db8 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8001daa:	f00b f8ad 	bl	800cf08 <_txe_semaphore_put>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20010844 	.word	0x20010844

08001dbc <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
//    tx_semaphore_ceiling_put(&semaphoreAero, 1);
    tx_semaphore_put(&semaphoreAero);
 8001dc4:	4803      	ldr	r0, [pc, #12]	@ (8001dd4 <HAL_I2C_MemRxCpltCallback+0x18>)
 8001dc6:	f00b f89f 	bl	800cf08 <_txe_semaphore_put>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20010844 	.word	0x20010844

08001dd8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
//    tx_semaphore_ceiling_put(&semaphoreAero, 1);
    tx_semaphore_put(&semaphoreAero);
 8001de0:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <HAL_I2C_MemTxCpltCallback+0x18>)
 8001de2:	f00b f891 	bl	800cf08 <_txe_semaphore_put>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20010844 	.word	0x20010844

08001df4 <ThreadX_Init>:
};


UINT ThreadX_Init(
        VOID *memory_ptr
){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08e      	sub	sp, #56	@ 0x38
 8001df8:	af08      	add	r7, sp, #32
 8001dfa:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

	TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	613b      	str	r3, [r7, #16]
	CHAR *pointer;

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001e04:	f107 010c 	add.w	r1, r7, #12
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e0e:	6938      	ldr	r0, [r7, #16]
 8001e10:	f00a fe8e 	bl	800cb30 <_txe_byte_allocate>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <ThreadX_Init+0x2a>
	    return TX_POOL_ERROR;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e0da      	b.n	8001fd4 <ThreadX_Init+0x1e0>
	}

	if(tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	22b0      	movs	r2, #176	@ 0xb0
 8001e22:	9206      	str	r2, [sp, #24]
 8001e24:	2201      	movs	r2, #1
 8001e26:	9205      	str	r2, [sp, #20]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	9204      	str	r2, [sp, #16]
 8001e2c:	220a      	movs	r2, #10
 8001e2e:	9203      	str	r2, [sp, #12]
 8001e30:	220a      	movs	r2, #10
 8001e32:	9202      	str	r2, [sp, #8]
 8001e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e38:	9201      	str	r2, [sp, #4]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	4a67      	ldr	r2, [pc, #412]	@ (8001fdc <ThreadX_Init+0x1e8>)
 8001e40:	4967      	ldr	r1, [pc, #412]	@ (8001fe0 <ThreadX_Init+0x1ec>)
 8001e42:	4868      	ldr	r0, [pc, #416]	@ (8001fe4 <ThreadX_Init+0x1f0>)
 8001e44:	f00b f87e 	bl	800cf44 <_txe_thread_create>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <ThreadX_Init+0x5e>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
	    return TX_THREAD_ERROR;
 8001e4e:	230e      	movs	r3, #14
 8001e50:	e0c0      	b.n	8001fd4 <ThreadX_Init+0x1e0>
	}

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001e52:	f107 010c 	add.w	r1, r7, #12
 8001e56:	2300      	movs	r3, #0
 8001e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e5c:	6938      	ldr	r0, [r7, #16]
 8001e5e:	f00a fe67 	bl	800cb30 <_txe_byte_allocate>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <ThreadX_Init+0x78>
	    return TX_POOL_ERROR;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e0b3      	b.n	8001fd4 <ThreadX_Init+0x1e0>
    }

	if(tx_thread_create(&txAnalogThread, "txAnalogThread", txAnalogThreadEntry, 0, pointer,
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	22b0      	movs	r2, #176	@ 0xb0
 8001e70:	9206      	str	r2, [sp, #24]
 8001e72:	2201      	movs	r2, #1
 8001e74:	9205      	str	r2, [sp, #20]
 8001e76:	2200      	movs	r2, #0
 8001e78:	9204      	str	r2, [sp, #16]
 8001e7a:	220a      	movs	r2, #10
 8001e7c:	9203      	str	r2, [sp, #12]
 8001e7e:	220b      	movs	r2, #11
 8001e80:	9202      	str	r2, [sp, #8]
 8001e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e86:	9201      	str	r2, [sp, #4]
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	4a56      	ldr	r2, [pc, #344]	@ (8001fe8 <ThreadX_Init+0x1f4>)
 8001e8e:	4957      	ldr	r1, [pc, #348]	@ (8001fec <ThreadX_Init+0x1f8>)
 8001e90:	4857      	ldr	r0, [pc, #348]	@ (8001ff0 <ThreadX_Init+0x1fc>)
 8001e92:	f00b f857 	bl	800cf44 <_txe_thread_create>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <ThreadX_Init+0xac>
						 TX_APP_STACK_SIZE, TX_ANALOG_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
	    return TX_THREAD_ERROR;
 8001e9c:	230e      	movs	r3, #14
 8001e9e:	e099      	b.n	8001fd4 <ThreadX_Init+0x1e0>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001ea0:	f107 010c 	add.w	r1, r7, #12
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eaa:	6938      	ldr	r0, [r7, #16]
 8001eac:	f00a fe40 	bl	800cb30 <_txe_byte_allocate>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <ThreadX_Init+0xc6>
        return TX_POOL_ERROR;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e08c      	b.n	8001fd4 <ThreadX_Init+0x1e0>
    }

	if(tx_thread_create(&txAeroThread, "txAeroThread", txAeroThreadEntry, 0, pointer,
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	22b0      	movs	r2, #176	@ 0xb0
 8001ebe:	9206      	str	r2, [sp, #24]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	9205      	str	r2, [sp, #20]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	9204      	str	r2, [sp, #16]
 8001ec8:	220a      	movs	r2, #10
 8001eca:	9203      	str	r2, [sp, #12]
 8001ecc:	220c      	movs	r2, #12
 8001ece:	9202      	str	r2, [sp, #8]
 8001ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed4:	9201      	str	r2, [sp, #4]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4a46      	ldr	r2, [pc, #280]	@ (8001ff4 <ThreadX_Init+0x200>)
 8001edc:	4946      	ldr	r1, [pc, #280]	@ (8001ff8 <ThreadX_Init+0x204>)
 8001ede:	4847      	ldr	r0, [pc, #284]	@ (8001ffc <ThreadX_Init+0x208>)
 8001ee0:	f00b f830 	bl	800cf44 <_txe_thread_create>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <ThreadX_Init+0xfa>
					   TX_APP_STACK_SIZE, 12, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
		return TX_THREAD_ERROR;
 8001eea:	230e      	movs	r3, #14
 8001eec:	e072      	b.n	8001fd4 <ThreadX_Init+0x1e0>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001eee:	f107 010c 	add.w	r1, r7, #12
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ef8:	6938      	ldr	r0, [r7, #16]
 8001efa:	f00a fe19 	bl	800cb30 <_txe_byte_allocate>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <ThreadX_Init+0x114>
        return TX_POOL_ERROR;
 8001f04:	2302      	movs	r3, #2
 8001f06:	e065      	b.n	8001fd4 <ThreadX_Init+0x1e0>
    }

	if(tx_thread_create(&txCAN500HzThread, "txCAN500Hz", txCAN500HzThreadEntry, 0, pointer,
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	22b0      	movs	r2, #176	@ 0xb0
 8001f0c:	9206      	str	r2, [sp, #24]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	9205      	str	r2, [sp, #20]
 8001f12:	2200      	movs	r2, #0
 8001f14:	9204      	str	r2, [sp, #16]
 8001f16:	220a      	movs	r2, #10
 8001f18:	9203      	str	r2, [sp, #12]
 8001f1a:	220d      	movs	r2, #13
 8001f1c:	9202      	str	r2, [sp, #8]
 8001f1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f22:	9201      	str	r2, [sp, #4]
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2300      	movs	r3, #0
 8001f28:	4a35      	ldr	r2, [pc, #212]	@ (8002000 <ThreadX_Init+0x20c>)
 8001f2a:	4936      	ldr	r1, [pc, #216]	@ (8002004 <ThreadX_Init+0x210>)
 8001f2c:	4836      	ldr	r0, [pc, #216]	@ (8002008 <ThreadX_Init+0x214>)
 8001f2e:	f00b f809 	bl	800cf44 <_txe_thread_create>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <ThreadX_Init+0x148>
					   TX_APP_STACK_SIZE, 13, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
		return TX_THREAD_ERROR;
 8001f38:	230e      	movs	r3, #14
 8001f3a:	e04b      	b.n	8001fd4 <ThreadX_Init+0x1e0>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001f3c:	f107 010c 	add.w	r1, r7, #12
 8001f40:	2300      	movs	r3, #0
 8001f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f46:	6938      	ldr	r0, [r7, #16]
 8001f48:	f00a fdf2 	bl	800cb30 <_txe_byte_allocate>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <ThreadX_Init+0x162>
        return TX_POOL_ERROR;
 8001f52:	2302      	movs	r3, #2
 8001f54:	e03e      	b.n	8001fd4 <ThreadX_Init+0x1e0>
    }

	if(tx_thread_create(&txCAN100HzThread, "txCAN100Hz", txCAN100HzThreadEntry, 0, pointer,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	22b0      	movs	r2, #176	@ 0xb0
 8001f5a:	9206      	str	r2, [sp, #24]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	9205      	str	r2, [sp, #20]
 8001f60:	2200      	movs	r2, #0
 8001f62:	9204      	str	r2, [sp, #16]
 8001f64:	220a      	movs	r2, #10
 8001f66:	9203      	str	r2, [sp, #12]
 8001f68:	220e      	movs	r2, #14
 8001f6a:	9202      	str	r2, [sp, #8]
 8001f6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f70:	9201      	str	r2, [sp, #4]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2300      	movs	r3, #0
 8001f76:	4a25      	ldr	r2, [pc, #148]	@ (800200c <ThreadX_Init+0x218>)
 8001f78:	4925      	ldr	r1, [pc, #148]	@ (8002010 <ThreadX_Init+0x21c>)
 8001f7a:	4826      	ldr	r0, [pc, #152]	@ (8002014 <ThreadX_Init+0x220>)
 8001f7c:	f00a ffe2 	bl	800cf44 <_txe_thread_create>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <ThreadX_Init+0x196>
					   TX_APP_STACK_SIZE, 14, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
		return TX_THREAD_ERROR;
 8001f86:	230e      	movs	r3, #14
 8001f88:	e024      	b.n	8001fd4 <ThreadX_Init+0x1e0>
//                       TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
//    ){
//        return TX_THREAD_ERROR;
//    }

	tx_semaphore_create(&semaphoreAnalog, "semaphoreAnalog", 0);
 8001f8a:	231c      	movs	r3, #28
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	4922      	ldr	r1, [pc, #136]	@ (8002018 <ThreadX_Init+0x224>)
 8001f90:	4822      	ldr	r0, [pc, #136]	@ (800201c <ThreadX_Init+0x228>)
 8001f92:	f00a fee1 	bl	800cd58 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreAero, "semaphoreAero", 0);
 8001f96:	231c      	movs	r3, #28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	4921      	ldr	r1, [pc, #132]	@ (8002020 <ThreadX_Init+0x22c>)
 8001f9c:	4821      	ldr	r0, [pc, #132]	@ (8002024 <ThreadX_Init+0x230>)
 8001f9e:	f00a fedb 	bl	800cd58 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreFrequency, "semaphoreFrequency", 1);
 8001fa2:	231c      	movs	r3, #28
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4920      	ldr	r1, [pc, #128]	@ (8002028 <ThreadX_Init+0x234>)
 8001fa8:	4820      	ldr	r0, [pc, #128]	@ (800202c <ThreadX_Init+0x238>)
 8001faa:	f00a fed5 	bl	800cd58 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreExADC1, "semaphoreExADC1", 0);
 8001fae:	231c      	movs	r3, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	491f      	ldr	r1, [pc, #124]	@ (8002030 <ThreadX_Init+0x23c>)
 8001fb4:	481f      	ldr	r0, [pc, #124]	@ (8002034 <ThreadX_Init+0x240>)
 8001fb6:	f00a fecf 	bl	800cd58 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreExADC2, "semaphoreExADC2", 0);
 8001fba:	231c      	movs	r3, #28
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	491e      	ldr	r1, [pc, #120]	@ (8002038 <ThreadX_Init+0x244>)
 8001fc0:	481e      	ldr	r0, [pc, #120]	@ (800203c <ThreadX_Init+0x248>)
 8001fc2:	f00a fec9 	bl	800cd58 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreSPI, "semaphoreSPI", 0);
 8001fc6:	231c      	movs	r3, #28
 8001fc8:	2200      	movs	r2, #0
 8001fca:	491d      	ldr	r1, [pc, #116]	@ (8002040 <ThreadX_Init+0x24c>)
 8001fcc:	481d      	ldr	r0, [pc, #116]	@ (8002044 <ThreadX_Init+0x250>)
 8001fce:	f00a fec3 	bl	800cd58 <_txe_semaphore_create>
    

	return ret;
 8001fd2:	697b      	ldr	r3, [r7, #20]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	08002049 	.word	0x08002049
 8001fe0:	0800d3e8 	.word	0x0800d3e8
 8001fe4:	200104b8 	.word	0x200104b8
 8001fe8:	08002099 	.word	0x08002099
 8001fec:	0800d3f8 	.word	0x0800d3f8
 8001ff0:	20010568 	.word	0x20010568
 8001ff4:	08002141 	.word	0x08002141
 8001ff8:	0800d408 	.word	0x0800d408
 8001ffc:	20010618 	.word	0x20010618
 8002000:	0800220d 	.word	0x0800220d
 8002004:	0800d418 	.word	0x0800d418
 8002008:	200106c8 	.word	0x200106c8
 800200c:	08002221 	.word	0x08002221
 8002010:	0800d424 	.word	0x0800d424
 8002014:	20010778 	.word	0x20010778
 8002018:	0800d430 	.word	0x0800d430
 800201c:	20010828 	.word	0x20010828
 8002020:	0800d440 	.word	0x0800d440
 8002024:	20010844 	.word	0x20010844
 8002028:	0800d450 	.word	0x0800d450
 800202c:	20010860 	.word	0x20010860
 8002030:	0800d464 	.word	0x0800d464
 8002034:	2001087c 	.word	0x2001087c
 8002038:	0800d474 	.word	0x0800d474
 800203c:	20010898 	.word	0x20010898
 8002040:	0800d484 	.word	0x0800d484
 8002044:	200108b4 	.word	0x200108b4

08002048 <txMainThreadEntry>:


void txMainThreadEntry(
    ULONG threadInput
){
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    HAL_FDCAN_Start(&hfdcan1);
 8002050:	480e      	ldr	r0, [pc, #56]	@ (800208c <txMainThreadEntry+0x44>)
 8002052:	f003 fb2b 	bl	80056ac <HAL_FDCAN_Start>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002056:	2100      	movs	r1, #0
 8002058:	480d      	ldr	r0, [pc, #52]	@ (8002090 <txMainThreadEntry+0x48>)
 800205a:	f007 fafd 	bl	8009658 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800205e:	2104      	movs	r1, #4
 8002060:	480b      	ldr	r0, [pc, #44]	@ (8002090 <txMainThreadEntry+0x48>)
 8002062:	f007 faf9 	bl	8009658 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8002066:	2108      	movs	r1, #8
 8002068:	4809      	ldr	r0, [pc, #36]	@ (8002090 <txMainThreadEntry+0x48>)
 800206a:	f007 faf5 	bl	8009658 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 800206e:	210c      	movs	r1, #12
 8002070:	4807      	ldr	r0, [pc, #28]	@ (8002090 <txMainThreadEntry+0x48>)
 8002072:	f007 faf1 	bl	8009658 <HAL_TIM_IC_Start_IT>


	while(1){
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002076:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800207a:	4806      	ldr	r0, [pc, #24]	@ (8002094 <txMainThreadEntry+0x4c>)
 800207c:	f003 ff9e 	bl	8005fbc <HAL_GPIO_TogglePin>

	    tx_thread_sleep(1000);
 8002080:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002084:	f009 fe5e 	bl	800bd44 <_tx_thread_sleep>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002088:	bf00      	nop
 800208a:	e7f4      	b.n	8002076 <txMainThreadEntry+0x2e>
 800208c:	20010204 	.word	0x20010204
 8002090:	200103c0 	.word	0x200103c0
 8002094:	48000800 	.word	0x48000800

08002098 <txAnalogThreadEntry>:
	}
}

void txAnalogThreadEntry(ULONG threadInput){
 8002098:	b5b0      	push	{r4, r5, r7, lr}
 800209a:	b09c      	sub	sp, #112	@ 0x70
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
    uint8_t analogRxData[ANALOG_DATA_LENGTH];
    uint32_t adcValues[NUM_ADC_CHANNELS];
    setAnalogSwitches(analogSwitchStates);
 80020a0:	4822      	ldr	r0, [pc, #136]	@ (800212c <txAnalogThreadEntry+0x94>)
 80020a2:	f7ff fcfd 	bl	8001aa0 <setAnalogSwitches>

    FDCAN_TxHeaderTypeDef analogHeader = {
 80020a6:	4b22      	ldr	r3, [pc, #136]	@ (8002130 <txAnalogThreadEntry+0x98>)
 80020a8:	f107 041c 	add.w	r4, r7, #28
 80020ac:	461d      	mov	r5, r3
 80020ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b6:	682b      	ldr	r3, [r5, #0]
 80020b8:	6023      	str	r3, [r4, #0]
            .FDFormat = FDCAN_FD_CAN,
            .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
            .MessageMarker = 0
    };
    while(1){
        HAL_ADC_Start_DMA(&hadc4, adcValues, NUM_ADC_CHANNELS);
 80020ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020be:	2208      	movs	r2, #8
 80020c0:	4619      	mov	r1, r3
 80020c2:	481c      	ldr	r0, [pc, #112]	@ (8002134 <txAnalogThreadEntry+0x9c>)
 80020c4:	f001 fac2 	bl	800364c <HAL_ADC_Start_DMA>
        tx_semaphore_get(&semaphoreAnalog, TX_WAIT_FOREVER);
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	481a      	ldr	r0, [pc, #104]	@ (8002138 <txAnalogThreadEntry+0xa0>)
 80020ce:	f00a fed9 	bl	800ce84 <_txe_semaphore_get>
        struct analogData_t analogStruct = {
            .analog1 = adcValues[0],
 80020d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
        struct analogData_t analogStruct = {
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	81bb      	strh	r3, [r7, #12]
            .analog2 = adcValues[1],
 80020d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
        struct analogData_t analogStruct = {
 80020da:	b29b      	uxth	r3, r3
 80020dc:	81fb      	strh	r3, [r7, #14]
            .analog3 = adcValues[2],
 80020de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
        struct analogData_t analogStruct = {
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	823b      	strh	r3, [r7, #16]
            .analog4 = adcValues[3],
 80020e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
        struct analogData_t analogStruct = {
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	827b      	strh	r3, [r7, #18]
            .analog5 = adcValues[4],
 80020ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
        struct analogData_t analogStruct = {
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	82bb      	strh	r3, [r7, #20]
            .analog6 = adcValues[5],
 80020f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
        struct analogData_t analogStruct = {
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	82fb      	strh	r3, [r7, #22]
            .analog7 = adcValues[6],
 80020f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
        struct analogData_t analogStruct = {
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	833b      	strh	r3, [r7, #24]
            .analog8 = adcValues[7]
 80020fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
        struct analogData_t analogStruct = {
 80020fe:	b29b      	uxth	r3, r3
 8002100:	837b      	strh	r3, [r7, #26]
        };
        analogPack(analogRxData, &analogStruct, ANALOG_DATA_LENGTH);
 8002102:	f107 010c 	add.w	r1, r7, #12
 8002106:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800210a:	2210      	movs	r2, #16
 800210c:	4618      	mov	r0, r3
 800210e:	f000 faef 	bl	80026f0 <ucr_01_front_analog_pack>
        HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &analogHeader, analogRxData);
 8002112:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002116:	f107 031c 	add.w	r3, r7, #28
 800211a:	4619      	mov	r1, r3
 800211c:	4807      	ldr	r0, [pc, #28]	@ (800213c <txAnalogThreadEntry+0xa4>)
 800211e:	f003 faed 	bl	80056fc <HAL_FDCAN_AddMessageToTxFifoQ>
        tx_thread_sleep(4);
 8002122:	2004      	movs	r0, #4
 8002124:	f009 fe0e 	bl	800bd44 <_tx_thread_sleep>
    while(1){
 8002128:	bf00      	nop
 800212a:	e7c6      	b.n	80020ba <txAnalogThreadEntry+0x22>
 800212c:	0800d55c 	.word	0x0800d55c
 8002130:	0800d494 	.word	0x0800d494
 8002134:	20010114 	.word	0x20010114
 8002138:	20010828 	.word	0x20010828
 800213c:	20010204 	.word	0x20010204

08002140 <txAeroThreadEntry>:
    }
}

void txAeroThreadEntry(
   ULONG threadInput
){
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	b096      	sub	sp, #88	@ 0x58
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
    if(UCR_OK != AeroInit()){
 8002148:	f7ff fd06 	bl	8001b58 <AeroInit>

    }
    struct aero_t aeroData;
    uint8_t transmitData[AERO_DATA_LENGTH];
    FDCAN_TxHeaderTypeDef aeroHeader = {
 800214c:	4b2c      	ldr	r3, [pc, #176]	@ (8002200 <txAeroThreadEntry+0xc0>)
 800214e:	f107 0408 	add.w	r4, r7, #8
 8002152:	461d      	mov	r5, r3
 8002154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800215a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800215c:	682b      	ldr	r3, [r5, #0]
 800215e:	6023      	str	r3, [r4, #0]
        .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
        .MessageMarker = 0
    };

    while(1){
        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8002160:	2300      	movs	r3, #0
 8002162:	657b      	str	r3, [r7, #84]	@ 0x54
 8002164:	e009      	b.n	800217a <txAeroThreadEntry+0x3a>
            StartSensorReading(&AeroSensors[i]);
 8002166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4a26      	ldr	r2, [pc, #152]	@ (8002204 <txAeroThreadEntry+0xc4>)
 800216c:	4413      	add	r3, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fd44 	bl	8001bfc <StartSensorReading>
        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8002174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002176:	3301      	adds	r3, #1
 8002178:	657b      	str	r3, [r7, #84]	@ 0x54
 800217a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217c:	2b02      	cmp	r3, #2
 800217e:	d9f2      	bls.n	8002166 <txAeroThreadEntry+0x26>
        }
        tx_thread_sleep(20);
 8002180:	2014      	movs	r0, #20
 8002182:	f009 fddf 	bl	800bd44 <_tx_thread_sleep>

        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8002186:	2300      	movs	r3, #0
 8002188:	653b      	str	r3, [r7, #80]	@ 0x50
 800218a:	e009      	b.n	80021a0 <txAeroThreadEntry+0x60>
            ReadData(&AeroSensors[i]);
 800218c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4a1c      	ldr	r2, [pc, #112]	@ (8002204 <txAeroThreadEntry+0xc4>)
 8002192:	4413      	add	r3, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fd67 	bl	8001c68 <ReadData>
        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 800219a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800219c:	3301      	adds	r3, #1
 800219e:	653b      	str	r3, [r7, #80]	@ 0x50
 80021a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d9f2      	bls.n	800218c <txAeroThreadEntry+0x4c>
        }
        aeroData.pressure1 = AeroSensors[0].pressure;
 80021a6:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <txAeroThreadEntry+0xc4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        aeroData.pressure2 = AeroSensors[1].pressure;
 80021ac:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <txAeroThreadEntry+0xc4>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	643b      	str	r3, [r7, #64]	@ 0x40
        aeroData.pressure3 = AeroSensors[2].pressure;
 80021b2:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <txAeroThreadEntry+0xc4>)
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	647b      	str	r3, [r7, #68]	@ 0x44

        aeroData.temperature1 = AeroSensors[0].temperature;
 80021b8:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <txAeroThreadEntry+0xc4>)
 80021ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021be:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        aeroData.temperature2 = AeroSensors[1].temperature;
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <txAeroThreadEntry+0xc4>)
 80021c4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80021c8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        aeroData.temperature3 = AeroSensors[2].temperature;
 80021cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <txAeroThreadEntry+0xc4>)
 80021ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80021d2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        aeroPack(transmitData, &aeroData, AERO_DATA_LENGTH);
 80021d6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80021da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021de:	2210      	movs	r2, #16
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fba9 	bl	8002938 <ucr_01_front_aero_pack>
        tx_thread_sleep(80);
 80021e6:	2050      	movs	r0, #80	@ 0x50
 80021e8:	f009 fdac 	bl	800bd44 <_tx_thread_sleep>
        HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &aeroHeader, transmitData);
 80021ec:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80021f0:	f107 0308 	add.w	r3, r7, #8
 80021f4:	4619      	mov	r1, r3
 80021f6:	4804      	ldr	r0, [pc, #16]	@ (8002208 <txAeroThreadEntry+0xc8>)
 80021f8:	f003 fa80 	bl	80056fc <HAL_FDCAN_AddMessageToTxFifoQ>
        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 80021fc:	e7b0      	b.n	8002160 <txAeroThreadEntry+0x20>
 80021fe:	bf00      	nop
 8002200:	0800d4b8 	.word	0x0800d4b8
 8002204:	200104a0 	.word	0x200104a0
 8002208:	20010204 	.word	0x20010204

0800220c <txCAN500HzThreadEntry>:
    }
}

void txCAN500HzThreadEntry(ULONG threadInput){
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

    while(1){
    	tx_thread_sleep(1000);
 8002214:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002218:	f009 fd94 	bl	800bd44 <_tx_thread_sleep>
 800221c:	e7fa      	b.n	8002214 <txCAN500HzThreadEntry+0x8>
	...

08002220 <txCAN100HzThreadEntry>:
    }
}

void txCAN100HzThreadEntry(
    ULONG threadInput
){
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b09a      	sub	sp, #104	@ 0x68
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    if(UCR_OK != FrequencyInit()){
 8002228:	f000 f87a 	bl	8002320 <FrequencyInit>

    }
	uint8_t preScalar = htim2.Init.Prescaler + 1;
 800222c:	4b36      	ldr	r3, [pc, #216]	@ (8002308 <txCAN100HzThreadEntry+0xe8>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3301      	adds	r3, #1
 8002234:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    float refClock = TIMCLOCK/(preScalar);
 8002238:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800223c:	4a33      	ldr	r2, [pc, #204]	@ (800230c <txCAN100HzThreadEntry+0xec>)
 800223e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800224a:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	float frequency[NUM_FREQUENCY_CHANNELS];
	uint8_t frequencyData[FREQUENCY_DATA_LENGTH];
	FDCAN_TxHeaderTypeDef frequencyHeader = {
 800224e:	4b30      	ldr	r3, [pc, #192]	@ (8002310 <txCAN100HzThreadEntry+0xf0>)
 8002250:	f107 0418 	add.w	r4, r7, #24
 8002254:	461d      	mov	r5, r3
 8002256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225e:	682b      	ldr	r3, [r5, #0]
 8002260:	6023      	str	r3, [r4, #0]
	        .MessageMarker = 0
	};

    while(1){
        // Acquire the semaphore
    	tx_semaphore_get(&semaphoreFrequency, TX_WAIT_FOREVER);
 8002262:	f04f 31ff 	mov.w	r1, #4294967295
 8002266:	482b      	ldr	r0, [pc, #172]	@ (8002314 <txCAN100HzThreadEntry+0xf4>)
 8002268:	f00a fe0c 	bl	800ce84 <_txe_semaphore_get>
    	// Convert the data to frequency and encode it
    	for(int i = 0; i < 4; i ++){
 800226c:	2300      	movs	r3, #0
 800226e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002270:	e028      	b.n	80022c4 <txCAN100HzThreadEntry+0xa4>
    	    if(!ChannelData[i].difference){
 8002272:	4a29      	ldr	r2, [pc, #164]	@ (8002318 <txCAN100HzThreadEntry+0xf8>)
 8002274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002276:	019b      	lsls	r3, r3, #6
 8002278:	4413      	add	r3, r2
 800227a:	333c      	adds	r3, #60	@ 0x3c
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d108      	bne.n	8002294 <txCAN100HzThreadEntry+0x74>
    	        frequency[i] = 0;
 8002282:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	3368      	adds	r3, #104	@ 0x68
 8002288:	443b      	add	r3, r7
 800228a:	3b1c      	subs	r3, #28
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	e014      	b.n	80022be <txCAN100HzThreadEntry+0x9e>
    	    }else{
    	        frequency[i] = refClock / ChannelData[i].difference;
 8002294:	4a20      	ldr	r2, [pc, #128]	@ (8002318 <txCAN100HzThreadEntry+0xf8>)
 8002296:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002298:	019b      	lsls	r3, r3, #6
 800229a:	4413      	add	r3, r2
 800229c:	333c      	adds	r3, #60	@ 0x3c
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022a8:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80022ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	3368      	adds	r3, #104	@ 0x68
 80022b6:	443b      	add	r3, r7
 80022b8:	3b1c      	subs	r3, #28
 80022ba:	edc3 7a00 	vstr	s15, [r3]
    	for(int i = 0; i < 4; i ++){
 80022be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022c0:	3301      	adds	r3, #1
 80022c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80022c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	ddd3      	ble.n	8002272 <txCAN100HzThreadEntry+0x52>
    	    }
    	}
    	struct frequencyData_t frequencyStruct = {
    	        .freq1 = frequency[0],
 80022ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    	struct frequencyData_t frequencyStruct = {
 80022cc:	60bb      	str	r3, [r7, #8]
    	        .freq2 = frequency[1],
 80022ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    	struct frequencyData_t frequencyStruct = {
 80022d0:	60fb      	str	r3, [r7, #12]
    	        .freq3 = frequency[2],
 80022d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    	struct frequencyData_t frequencyStruct = {
 80022d4:	613b      	str	r3, [r7, #16]
    	        .freq4 = frequency[3]
 80022d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
    	struct frequencyData_t frequencyStruct = {
 80022d8:	617b      	str	r3, [r7, #20]
    	};
    	frequencyPack(frequencyData, &frequencyStruct, FREQUENCY_DATA_LENGTH);
 80022da:	f107 0108 	add.w	r1, r7, #8
 80022de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80022e2:	2210      	movs	r2, #16
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 fc37 	bl	8002b58 <ucr_01_front_frequency_pack>
    	tx_semaphore_put(&semaphoreFrequency);
 80022ea:	480a      	ldr	r0, [pc, #40]	@ (8002314 <txCAN100HzThreadEntry+0xf4>)
 80022ec:	f00a fe0c 	bl	800cf08 <_txe_semaphore_put>
    	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frequencyHeader, frequencyData);
 80022f0:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80022f4:	f107 0318 	add.w	r3, r7, #24
 80022f8:	4619      	mov	r1, r3
 80022fa:	4808      	ldr	r0, [pc, #32]	@ (800231c <txCAN100HzThreadEntry+0xfc>)
 80022fc:	f003 f9fe 	bl	80056fc <HAL_FDCAN_AddMessageToTxFifoQ>

        tx_thread_sleep(10);
 8002300:	200a      	movs	r0, #10
 8002302:	f009 fd1f 	bl	800bd44 <_tx_thread_sleep>
    while(1){
 8002306:	e7ac      	b.n	8002262 <txCAN100HzThreadEntry+0x42>
 8002308:	200103c0 	.word	0x200103c0
 800230c:	0a21fe80 	.word	0x0a21fe80
 8002310:	0800d4dc 	.word	0x0800d4dc
 8002314:	20010860 	.word	0x20010860
 8002318:	200108d0 	.word	0x200108d0
 800231c:	20010204 	.word	0x20010204

08002320 <FrequencyInit>:
static uint8_t CalculateFrequency(
        frequency_t* channel,
        TIM_HandleTypeDef* htim
);

uint8_t FrequencyInit(void){
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af04      	add	r7, sp, #16
    uint8_t retVal = UCR_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	70fb      	strb	r3, [r7, #3]
    for(int i = 0; i < NUM_FREQUENCY_CHANNELS; i ++){
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	e016      	b.n	800235e <FrequencyInit+0x3e>
        ChannelData[i].firstValue = 0;
 8002330:	4a35      	ldr	r2, [pc, #212]	@ (8002408 <FrequencyInit+0xe8>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	4413      	add	r3, r2
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
        ChannelData[i].secondValue = 0;
 800233c:	4a32      	ldr	r2, [pc, #200]	@ (8002408 <FrequencyInit+0xe8>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	019b      	lsls	r3, r3, #6
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
        ChannelData[i].isFirstCapture = false;
 800234a:	4a2f      	ldr	r2, [pc, #188]	@ (8002408 <FrequencyInit+0xe8>)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	019b      	lsls	r3, r3, #6
 8002350:	4413      	add	r3, r2
 8002352:	3308      	adds	r3, #8
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < NUM_FREQUENCY_CHANNELS; i ++){
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3301      	adds	r3, #1
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d9e5      	bls.n	8002330 <FrequencyInit+0x10>
//        ChannelData[i].zeroReset = true;
    }
    ChannelData[0].halChannel = TIM_CHANNEL_1;
 8002364:	4b28      	ldr	r3, [pc, #160]	@ (8002408 <FrequencyInit+0xe8>)
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ChannelData[1].halChannel = TIM_CHANNEL_2;
 800236c:	4b26      	ldr	r3, [pc, #152]	@ (8002408 <FrequencyInit+0xe8>)
 800236e:	2204      	movs	r2, #4
 8002370:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    ChannelData[2].halChannel = TIM_CHANNEL_3;
 8002374:	4b24      	ldr	r3, [pc, #144]	@ (8002408 <FrequencyInit+0xe8>)
 8002376:	2208      	movs	r2, #8
 8002378:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    ChannelData[3].halChannel = TIM_CHANNEL_4;
 800237c:	4b22      	ldr	r3, [pc, #136]	@ (8002408 <FrequencyInit+0xe8>)
 800237e:	220c      	movs	r2, #12
 8002380:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8

    tx_timer_create(&ChannelData[0].resetTimer, "resetTimer1", 
 8002384:	232c      	movs	r3, #44	@ 0x2c
 8002386:	9303      	str	r3, [sp, #12]
 8002388:	2300      	movs	r3, #0
 800238a:	9302      	str	r3, [sp, #8]
 800238c:	2300      	movs	r3, #0
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2300      	movs	r3, #0
 8002398:	4a1c      	ldr	r2, [pc, #112]	@ (800240c <FrequencyInit+0xec>)
 800239a:	491d      	ldr	r1, [pc, #116]	@ (8002410 <FrequencyInit+0xf0>)
 800239c:	481d      	ldr	r0, [pc, #116]	@ (8002414 <FrequencyInit+0xf4>)
 800239e:	f00a ff17 	bl	800d1d0 <_txe_timer_create>
        timerExpirationFrequency, 0, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[1].resetTimer, "resetTimer2", 
 80023a2:	232c      	movs	r3, #44	@ 0x2c
 80023a4:	9303      	str	r3, [sp, #12]
 80023a6:	2300      	movs	r3, #0
 80023a8:	9302      	str	r3, [sp, #8]
 80023aa:	2300      	movs	r3, #0
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2301      	movs	r3, #1
 80023b6:	4a15      	ldr	r2, [pc, #84]	@ (800240c <FrequencyInit+0xec>)
 80023b8:	4917      	ldr	r1, [pc, #92]	@ (8002418 <FrequencyInit+0xf8>)
 80023ba:	4818      	ldr	r0, [pc, #96]	@ (800241c <FrequencyInit+0xfc>)
 80023bc:	f00a ff08 	bl	800d1d0 <_txe_timer_create>
        timerExpirationFrequency, 1, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[2].resetTimer, "resetTimer3", 
 80023c0:	232c      	movs	r3, #44	@ 0x2c
 80023c2:	9303      	str	r3, [sp, #12]
 80023c4:	2300      	movs	r3, #0
 80023c6:	9302      	str	r3, [sp, #8]
 80023c8:	2300      	movs	r3, #0
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2302      	movs	r3, #2
 80023d4:	4a0d      	ldr	r2, [pc, #52]	@ (800240c <FrequencyInit+0xec>)
 80023d6:	4912      	ldr	r1, [pc, #72]	@ (8002420 <FrequencyInit+0x100>)
 80023d8:	4812      	ldr	r0, [pc, #72]	@ (8002424 <FrequencyInit+0x104>)
 80023da:	f00a fef9 	bl	800d1d0 <_txe_timer_create>
        timerExpirationFrequency, 2, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[3].resetTimer, "resetTimer4", 
 80023de:	232c      	movs	r3, #44	@ 0x2c
 80023e0:	9303      	str	r3, [sp, #12]
 80023e2:	2300      	movs	r3, #0
 80023e4:	9302      	str	r3, [sp, #8]
 80023e6:	2300      	movs	r3, #0
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2303      	movs	r3, #3
 80023f2:	4a06      	ldr	r2, [pc, #24]	@ (800240c <FrequencyInit+0xec>)
 80023f4:	490c      	ldr	r1, [pc, #48]	@ (8002428 <FrequencyInit+0x108>)
 80023f6:	480d      	ldr	r0, [pc, #52]	@ (800242c <FrequencyInit+0x10c>)
 80023f8:	f00a feea 	bl	800d1d0 <_txe_timer_create>
        timerExpirationFrequency, 3, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    return retVal;
 80023fc:	78fb      	ldrb	r3, [r7, #3]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200108d0 	.word	0x200108d0
 800240c:	08002591 	.word	0x08002591
 8002410:	0800d500 	.word	0x0800d500
 8002414:	200108dc 	.word	0x200108dc
 8002418:	0800d50c 	.word	0x0800d50c
 800241c:	2001091c 	.word	0x2001091c
 8002420:	0800d518 	.word	0x0800d518
 8002424:	2001095c 	.word	0x2001095c
 8002428:	0800d524 	.word	0x0800d524
 800242c:	2001099c 	.word	0x2001099c

08002430 <HAL_TIM_IC_CaptureCallback>:
  * @param htim: Timer handle
  * @retval void
  */
void HAL_TIM_IC_CaptureCallback(
    TIM_HandleTypeDef* htim
){
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
    uint8_t channel = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	73fb      	strb	r3, [r7, #15]
    switch (htim->Channel){
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7f1b      	ldrb	r3, [r3, #28]
 8002440:	3b01      	subs	r3, #1
 8002442:	2b07      	cmp	r3, #7
 8002444:	d827      	bhi.n	8002496 <HAL_TIM_IC_CaptureCallback+0x66>
 8002446:	a201      	add	r2, pc, #4	@ (adr r2, 800244c <HAL_TIM_IC_CaptureCallback+0x1c>)
 8002448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244c:	0800246d 	.word	0x0800246d
 8002450:	08002473 	.word	0x08002473
 8002454:	08002497 	.word	0x08002497
 8002458:	08002479 	.word	0x08002479
 800245c:	08002497 	.word	0x08002497
 8002460:	08002497 	.word	0x08002497
 8002464:	08002497 	.word	0x08002497
 8002468:	0800247f 	.word	0x0800247f
        case HAL_TIM_ACTIVE_CHANNEL_1:
            channel = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
            break;
 8002470:	e008      	b.n	8002484 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_2:
            channel = 1;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
            break;
 8002476:	e005      	b.n	8002484 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            channel = 2;
 8002478:	2302      	movs	r3, #2
 800247a:	73fb      	strb	r3, [r7, #15]
            break;
 800247c:	e002      	b.n	8002484 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_4:
            channel = 3;
 800247e:	2303      	movs	r3, #3
 8002480:	73fb      	strb	r3, [r7, #15]
            break;
 8002482:	bf00      	nop
        default:
            return;
    }
    CalculateFrequency(&ChannelData[channel], htim);
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	019b      	lsls	r3, r3, #6
 8002488:	4a05      	ldr	r2, [pc, #20]	@ (80024a0 <HAL_TIM_IC_CaptureCallback+0x70>)
 800248a:	4413      	add	r3, r2
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f808 	bl	80024a4 <CalculateFrequency>
 8002494:	e000      	b.n	8002498 <HAL_TIM_IC_CaptureCallback+0x68>
            return;
 8002496:	bf00      	nop
}
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200108d0 	.word	0x200108d0

080024a4 <CalculateFrequency>:

static uint8_t CalculateFrequency(
    frequency_t* channel,
    TIM_HandleTypeDef* htim
){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
    uint8_t retVal = UCR_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	73fb      	strb	r3, [r7, #15]
    // Check if first rising edge to begin capture
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 80024b2:	2100      	movs	r1, #0
 80024b4:	4835      	ldr	r0, [pc, #212]	@ (800258c <CalculateFrequency+0xe8>)
 80024b6:	f00a fce5 	bl	800ce84 <_txe_semaphore_get>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <CalculateFrequency+0x24>
        retVal = UCR_NOT_OK;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
        return retVal;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	e05c      	b.n	8002582 <CalculateFrequency+0xde>
    }

    if(!channel->isFirstCapture){
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7a1b      	ldrb	r3, [r3, #8]
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d012      	beq.n	80024fc <CalculateFrequency+0x58>
        if(TX_SUCCESS != tx_timer_activate(&channel->resetTimer)){
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	330c      	adds	r3, #12
 80024da:	4618      	mov	r0, r3
 80024dc:	f00a fe24 	bl	800d128 <_txe_timer_activate>
                   // ADD error handler stuff here;
        }
        channel->firstValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024e6:	4619      	mov	r1, r3
 80024e8:	6838      	ldr	r0, [r7, #0]
 80024ea:	f007 fbf1 	bl	8009cd0 <HAL_TIM_ReadCapturedValue>
 80024ee:	4602      	mov	r2, r0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	601a      	str	r2, [r3, #0]
        // Set flag to indicate next value will be second rising edge
        channel->isFirstCapture = true;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	721a      	strb	r2, [r3, #8]
 80024fa:	e036      	b.n	800256a <CalculateFrequency+0xc6>
    }else{
        // Stop the reset timer
        if(TX_SUCCESS != tx_timer_deactivate(&channel->resetTimer)){
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	330c      	adds	r3, #12
 8002500:	4618      	mov	r0, r3
 8002502:	f00a ff11 	bl	800d328 <_txe_timer_deactivate>
            // ADD error handler stuff here;
        }
        channel->secondValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800250c:	4619      	mov	r1, r3
 800250e:	6838      	ldr	r0, [r7, #0]
 8002510:	f007 fbde 	bl	8009cd0 <HAL_TIM_ReadCapturedValue>
 8002514:	4602      	mov	r2, r0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	605a      	str	r2, [r3, #4]
        // Check if the first capture was before the second
        if(channel->secondValue > channel->firstValue){
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d907      	bls.n	8002536 <CalculateFrequency+0x92>
            // Calculate the difference
            channel->difference = channel->secondValue - channel->firstValue;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	1ad2      	subs	r2, r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002534:	e010      	b.n	8002558 <CalculateFrequency+0xb4>
        } else if (channel->secondValue < channel->firstValue){
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d20a      	bcs.n	8002558 <CalculateFrequency+0xb4>
            channel->difference = ((htim->Init.Period - channel->firstValue) + channel->secondValue) + 1;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	1ad2      	subs	r2, r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4413      	add	r3, r2
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        // Reset the first capture state
        channel->firstValue = channel->secondValue;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	601a      	str	r2, [r3, #0]
        if(TX_SUCCESS != tx_timer_activate(&channel->resetTimer)){
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	330c      	adds	r3, #12
 8002564:	4618      	mov	r0, r3
 8002566:	f00a fddf 	bl	800d128 <_txe_timer_activate>
                   // ADD error handler stuff here;
        }
    }
    // Release the semaphore
    if(TX_SUCCESS != tx_semaphore_put(&semaphoreFrequency)){
 800256a:	4808      	ldr	r0, [pc, #32]	@ (800258c <CalculateFrequency+0xe8>)
 800256c:	f00a fccc 	bl	800cf08 <_txe_semaphore_put>
        // ADD error handler stuff here;
    }
    // Reset the timer;
    if(TX_SUCCESS != tx_timer_change(&channel->resetTimer, FREQUENCY_RESET_TIME, 0)){
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	330c      	adds	r3, #12
 8002574:	2200      	movs	r2, #0
 8002576:	f241 3188 	movw	r1, #5000	@ 0x1388
 800257a:	4618      	mov	r0, r3
 800257c:	f00a fdf2 	bl	800d164 <_txe_timer_change>
        // ADD error handler stuff here;
    }
    return retVal;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20010860 	.word	0x20010860

08002590 <timerExpirationFrequency>:
  * @param channel: the number of the timer
  * @retval void
  */
void timerExpirationFrequency(
    ULONG channel
){
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
    // Attempt to acquire the semaphore
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 8002598:	2100      	movs	r1, #0
 800259a:	4818      	ldr	r0, [pc, #96]	@ (80025fc <timerExpirationFrequency+0x6c>)
 800259c:	f00a fc72 	bl	800ce84 <_txe_semaphore_get>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d126      	bne.n	80025f4 <timerExpirationFrequency+0x64>
        return;
    }
    // Set the first capture and difference to zero
    ChannelData[channel].isFirstCapture = false;
 80025a6:	4a16      	ldr	r2, [pc, #88]	@ (8002600 <timerExpirationFrequency+0x70>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	019b      	lsls	r3, r3, #6
 80025ac:	4413      	add	r3, r2
 80025ae:	3308      	adds	r3, #8
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
    ChannelData[channel].difference = 0;
 80025b4:	4a12      	ldr	r2, [pc, #72]	@ (8002600 <timerExpirationFrequency+0x70>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	019b      	lsls	r3, r3, #6
 80025ba:	4413      	add	r3, r2
 80025bc:	333c      	adds	r3, #60	@ 0x3c
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
    // Reset the timer
    tx_timer_deactivate(&ChannelData[channel].resetTimer);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	3308      	adds	r3, #8
 80025c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002600 <timerExpirationFrequency+0x70>)
 80025ca:	4413      	add	r3, r2
 80025cc:	3304      	adds	r3, #4
 80025ce:	4618      	mov	r0, r3
 80025d0:	f00a feaa 	bl	800d328 <_txe_timer_deactivate>
    tx_timer_change(&ChannelData[channel].resetTimer, FREQUENCY_RESET_TIME, 0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	019b      	lsls	r3, r3, #6
 80025d8:	3308      	adds	r3, #8
 80025da:	4a09      	ldr	r2, [pc, #36]	@ (8002600 <timerExpirationFrequency+0x70>)
 80025dc:	4413      	add	r3, r2
 80025de:	3304      	adds	r3, #4
 80025e0:	2200      	movs	r2, #0
 80025e2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00a fdbc 	bl	800d164 <_txe_timer_change>
    // Release the semaphore
    tx_semaphore_put(&semaphoreFrequency);
 80025ec:	4803      	ldr	r0, [pc, #12]	@ (80025fc <timerExpirationFrequency+0x6c>)
 80025ee:	f00a fc8b 	bl	800cf08 <_txe_semaphore_put>
    return;
 80025f2:	e000      	b.n	80025f6 <timerExpirationFrequency+0x66>
        return;
 80025f4:	bf00      	nop
}
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20010860 	.word	0x20010860
 8002600:	200108d0 	.word	0x200108d0

08002604 <HAL_GPIO_EXTI_Callback>:
#include "exti.h"
#include "stdint.h"
#include "main.h"
#include "threadx.h"

void HAL_GPIO_EXTI_Callback(uint16_t pin){
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	80fb      	strh	r3, [r7, #6]
    if(pin == DRDY1_Pin){
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d103      	bne.n	800261c <HAL_GPIO_EXTI_Callback+0x18>
        tx_semaphore_put(&semaphoreExADC1);
 8002614:	4807      	ldr	r0, [pc, #28]	@ (8002634 <HAL_GPIO_EXTI_Callback+0x30>)
 8002616:	f00a fc77 	bl	800cf08 <_txe_semaphore_put>
    }else if(pin == DRDY2_Pin){
        tx_semaphore_put(&semaphoreExADC2);
    }
}
 800261a:	e006      	b.n	800262a <HAL_GPIO_EXTI_Callback+0x26>
    }else if(pin == DRDY2_Pin){
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002622:	d102      	bne.n	800262a <HAL_GPIO_EXTI_Callback+0x26>
        tx_semaphore_put(&semaphoreExADC2);
 8002624:	4804      	ldr	r0, [pc, #16]	@ (8002638 <HAL_GPIO_EXTI_Callback+0x34>)
 8002626:	f00a fc6f 	bl	800cf08 <_txe_semaphore_put>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	2001087c 	.word	0x2001087c
 8002638:	20010898 	.word	0x20010898

0800263c <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	80fb      	strh	r3, [r7, #6]
 8002646:	460b      	mov	r3, r1
 8002648:	717b      	strb	r3, [r7, #5]
 800264a:	4613      	mov	r3, r2
 800264c:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800264e:	88fa      	ldrh	r2, [r7, #6]
 8002650:	797b      	ldrb	r3, [r7, #5]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	b2da      	uxtb	r2, r3
 8002658:	793b      	ldrb	r3, [r7, #4]
 800265a:	4013      	ands	r3, r2
 800265c:	b2db      	uxtb	r3, r3
}
 800265e:	4618      	mov	r0, r3
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <pack_left_shift_u32>:

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	70fb      	strb	r3, [r7, #3]
 8002676:	4613      	mov	r3, r2
 8002678:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	b2da      	uxtb	r2, r3
 8002684:	78bb      	ldrb	r3, [r7, #2]
 8002686:	4013      	ands	r3, r2
 8002688:	b2db      	uxtb	r3, r3
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	80fb      	strh	r3, [r7, #6]
 80026a0:	460b      	mov	r3, r1
 80026a2:	717b      	strb	r3, [r7, #5]
 80026a4:	4613      	mov	r3, r2
 80026a6:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 80026a8:	88fa      	ldrh	r2, [r7, #6]
 80026aa:	797b      	ldrb	r3, [r7, #5]
 80026ac:	fa42 f303 	asr.w	r3, r2, r3
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	793b      	ldrb	r3, [r7, #4]
 80026b4:	4013      	ands	r3, r2
 80026b6:	b2db      	uxtb	r3, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <pack_right_shift_u32>:

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	70fb      	strb	r3, [r7, #3]
 80026d0:	4613      	mov	r3, r2
 80026d2:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	78bb      	ldrb	r3, [r7, #2]
 80026e0:	4013      	ands	r3, r2
 80026e2:	b2db      	uxtb	r3, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <ucr_01_front_analog_pack>:

int ucr_01_front_analog_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_analog_t *src_p,
    size_t size)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
    if (size < 16u) {
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b0f      	cmp	r3, #15
 8002700:	d802      	bhi.n	8002708 <ucr_01_front_analog_pack+0x18>
        return (-EINVAL);
 8002702:	f06f 0315 	mvn.w	r3, #21
 8002706:	e113      	b.n	8002930 <ucr_01_front_analog_pack+0x240>
    }

    memset(&dst_p[0], 0, 16);
 8002708:	2210      	movs	r2, #16
 800270a:	2100      	movs	r1, #0
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f00a fe29 	bl	800d364 <memset>

    dst_p[0] |= pack_left_shift_u16(src_p->analog1, 0u, 0xffu);
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	22ff      	movs	r2, #255	@ 0xff
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff8e 	bl	800263c <pack_left_shift_u16>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4313      	orrs	r3, r2
 800272a:	b2da      	uxtb	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(src_p->analog1, 8u, 0xffu);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	22ff      	movs	r2, #255	@ 0xff
 8002736:	2108      	movs	r1, #8
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ffac 	bl	8002696 <pack_right_shift_u16>
 800273e:	4603      	mov	r3, r0
 8002740:	4619      	mov	r1, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3301      	adds	r3, #1
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	430a      	orrs	r2, r1
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u16(src_p->analog2, 0u, 0xffu);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	885b      	ldrh	r3, [r3, #2]
 8002756:	22ff      	movs	r2, #255	@ 0xff
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ff6e 	bl	800263c <pack_left_shift_u16>
 8002760:	4603      	mov	r3, r0
 8002762:	4619      	mov	r1, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3302      	adds	r3, #2
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3302      	adds	r3, #2
 800276e:	430a      	orrs	r2, r1
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u16(src_p->analog2, 8u, 0xffu);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	885b      	ldrh	r3, [r3, #2]
 8002778:	22ff      	movs	r2, #255	@ 0xff
 800277a:	2108      	movs	r1, #8
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff8a 	bl	8002696 <pack_right_shift_u16>
 8002782:	4603      	mov	r3, r0
 8002784:	4619      	mov	r1, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3303      	adds	r3, #3
 800278a:	781a      	ldrb	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3303      	adds	r3, #3
 8002790:	430a      	orrs	r2, r1
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u16(src_p->analog3, 0u, 0xffu);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	889b      	ldrh	r3, [r3, #4]
 800279a:	22ff      	movs	r2, #255	@ 0xff
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff4c 	bl	800263c <pack_left_shift_u16>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4619      	mov	r1, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3304      	adds	r3, #4
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3304      	adds	r3, #4
 80027b2:	430a      	orrs	r2, r1
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(src_p->analog3, 8u, 0xffu);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	889b      	ldrh	r3, [r3, #4]
 80027bc:	22ff      	movs	r2, #255	@ 0xff
 80027be:	2108      	movs	r1, #8
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff68 	bl	8002696 <pack_right_shift_u16>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4619      	mov	r1, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3305      	adds	r3, #5
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	3305      	adds	r3, #5
 80027d4:	430a      	orrs	r2, r1
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u16(src_p->analog4, 0u, 0xffu);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	88db      	ldrh	r3, [r3, #6]
 80027de:	22ff      	movs	r2, #255	@ 0xff
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff2a 	bl	800263c <pack_left_shift_u16>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4619      	mov	r1, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3306      	adds	r3, #6
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3306      	adds	r3, #6
 80027f6:	430a      	orrs	r2, r1
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u16(src_p->analog4, 8u, 0xffu);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	88db      	ldrh	r3, [r3, #6]
 8002800:	22ff      	movs	r2, #255	@ 0xff
 8002802:	2108      	movs	r1, #8
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff46 	bl	8002696 <pack_right_shift_u16>
 800280a:	4603      	mov	r3, r0
 800280c:	4619      	mov	r1, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3307      	adds	r3, #7
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3307      	adds	r3, #7
 8002818:	430a      	orrs	r2, r1
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_left_shift_u16(src_p->analog5, 0u, 0xffu);
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	891b      	ldrh	r3, [r3, #8]
 8002822:	22ff      	movs	r2, #255	@ 0xff
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff ff08 	bl	800263c <pack_left_shift_u16>
 800282c:	4603      	mov	r3, r0
 800282e:	4619      	mov	r1, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3308      	adds	r3, #8
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3308      	adds	r3, #8
 800283a:	430a      	orrs	r2, r1
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u16(src_p->analog5, 8u, 0xffu);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	891b      	ldrh	r3, [r3, #8]
 8002844:	22ff      	movs	r2, #255	@ 0xff
 8002846:	2108      	movs	r1, #8
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff24 	bl	8002696 <pack_right_shift_u16>
 800284e:	4603      	mov	r3, r0
 8002850:	4619      	mov	r1, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3309      	adds	r3, #9
 8002856:	781a      	ldrb	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3309      	adds	r3, #9
 800285c:	430a      	orrs	r2, r1
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_left_shift_u16(src_p->analog6, 0u, 0xffu);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	895b      	ldrh	r3, [r3, #10]
 8002866:	22ff      	movs	r2, #255	@ 0xff
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fee6 	bl	800263c <pack_left_shift_u16>
 8002870:	4603      	mov	r3, r0
 8002872:	4619      	mov	r1, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	330a      	adds	r3, #10
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	330a      	adds	r3, #10
 800287e:	430a      	orrs	r2, r1
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u16(src_p->analog6, 8u, 0xffu);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	895b      	ldrh	r3, [r3, #10]
 8002888:	22ff      	movs	r2, #255	@ 0xff
 800288a:	2108      	movs	r1, #8
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff02 	bl	8002696 <pack_right_shift_u16>
 8002892:	4603      	mov	r3, r0
 8002894:	4619      	mov	r1, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	330b      	adds	r3, #11
 800289a:	781a      	ldrb	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	330b      	adds	r3, #11
 80028a0:	430a      	orrs	r2, r1
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u16(src_p->analog7, 0u, 0xffu);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	899b      	ldrh	r3, [r3, #12]
 80028aa:	22ff      	movs	r2, #255	@ 0xff
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fec4 	bl	800263c <pack_left_shift_u16>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4619      	mov	r1, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	330c      	adds	r3, #12
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	330c      	adds	r3, #12
 80028c2:	430a      	orrs	r2, r1
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u16(src_p->analog7, 8u, 0xffu);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	899b      	ldrh	r3, [r3, #12]
 80028cc:	22ff      	movs	r2, #255	@ 0xff
 80028ce:	2108      	movs	r1, #8
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fee0 	bl	8002696 <pack_right_shift_u16>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4619      	mov	r1, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	330d      	adds	r3, #13
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	330d      	adds	r3, #13
 80028e4:	430a      	orrs	r2, r1
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_left_shift_u16(src_p->analog8, 0u, 0xffu);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	89db      	ldrh	r3, [r3, #14]
 80028ee:	22ff      	movs	r2, #255	@ 0xff
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fea2 	bl	800263c <pack_left_shift_u16>
 80028f8:	4603      	mov	r3, r0
 80028fa:	4619      	mov	r1, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	330e      	adds	r3, #14
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	330e      	adds	r3, #14
 8002906:	430a      	orrs	r2, r1
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u16(src_p->analog8, 8u, 0xffu);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	89db      	ldrh	r3, [r3, #14]
 8002910:	22ff      	movs	r2, #255	@ 0xff
 8002912:	2108      	movs	r1, #8
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff febe 	bl	8002696 <pack_right_shift_u16>
 800291a:	4603      	mov	r3, r0
 800291c:	4619      	mov	r1, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	330f      	adds	r3, #15
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	330f      	adds	r3, #15
 8002928:	430a      	orrs	r2, r1
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

    return (16);
 800292e:	2310      	movs	r3, #16
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <ucr_01_front_aero_pack>:

int ucr_01_front_aero_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_aero_t *src_p,
    size_t size)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	@ 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
    uint16_t temperature3;
    uint32_t pressure1;
    uint32_t pressure2;
    uint32_t pressure3;

    if (size < 16u) {
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	d802      	bhi.n	8002950 <ucr_01_front_aero_pack+0x18>
        return (-EINVAL);
 800294a:	f06f 0315 	mvn.w	r3, #21
 800294e:	e0ff      	b.n	8002b50 <ucr_01_front_aero_pack+0x218>
    }

    memset(&dst_p[0], 0, 16);
 8002950:	2210      	movs	r2, #16
 8002952:	2100      	movs	r1, #0
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f00a fd05 	bl	800d364 <memset>

    pressure1 = (uint32_t)src_p->pressure1;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
    dst_p[0] |= pack_left_shift_u32(pressure1, 0u, 0xffu);
 8002960:	22ff      	movs	r2, #255	@ 0xff
 8002962:	2100      	movs	r1, #0
 8002964:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002966:	f7ff fe80 	bl	800266a <pack_left_shift_u32>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(pressure1, 8u, 0xffu);
 800297a:	22ff      	movs	r2, #255	@ 0xff
 800297c:	2108      	movs	r1, #8
 800297e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002980:	f7ff fea0 	bl	80026c4 <pack_right_shift_u32>
 8002984:	4603      	mov	r3, r0
 8002986:	4619      	mov	r1, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3301      	adds	r3, #1
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3301      	adds	r3, #1
 8002992:	430a      	orrs	r2, r1
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(pressure1, 16u, 0xffu);
 8002998:	22ff      	movs	r2, #255	@ 0xff
 800299a:	2110      	movs	r1, #16
 800299c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800299e:	f7ff fe91 	bl	80026c4 <pack_right_shift_u32>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4619      	mov	r1, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3302      	adds	r3, #2
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3302      	adds	r3, #2
 80029b0:	430a      	orrs	r2, r1
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]
    pressure2 = (uint32_t)src_p->pressure2;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	623b      	str	r3, [r7, #32]
    dst_p[3] |= pack_left_shift_u32(pressure2, 0u, 0xffu);
 80029bc:	22ff      	movs	r2, #255	@ 0xff
 80029be:	2100      	movs	r1, #0
 80029c0:	6a38      	ldr	r0, [r7, #32]
 80029c2:	f7ff fe52 	bl	800266a <pack_left_shift_u32>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4619      	mov	r1, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3303      	adds	r3, #3
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3303      	adds	r3, #3
 80029d4:	430a      	orrs	r2, r1
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u32(pressure2, 8u, 0xffu);
 80029da:	22ff      	movs	r2, #255	@ 0xff
 80029dc:	2108      	movs	r1, #8
 80029de:	6a38      	ldr	r0, [r7, #32]
 80029e0:	f7ff fe70 	bl	80026c4 <pack_right_shift_u32>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4619      	mov	r1, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3304      	adds	r3, #4
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3304      	adds	r3, #4
 80029f2:	430a      	orrs	r2, r1
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(pressure2, 16u, 0xffu);
 80029f8:	22ff      	movs	r2, #255	@ 0xff
 80029fa:	2110      	movs	r1, #16
 80029fc:	6a38      	ldr	r0, [r7, #32]
 80029fe:	f7ff fe61 	bl	80026c4 <pack_right_shift_u32>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4619      	mov	r1, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3305      	adds	r3, #5
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3305      	adds	r3, #5
 8002a10:	430a      	orrs	r2, r1
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]
    pressure3 = (uint32_t)src_p->pressure3;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	61fb      	str	r3, [r7, #28]
    dst_p[6] |= pack_left_shift_u32(pressure3, 0u, 0xffu);
 8002a1c:	22ff      	movs	r2, #255	@ 0xff
 8002a1e:	2100      	movs	r1, #0
 8002a20:	69f8      	ldr	r0, [r7, #28]
 8002a22:	f7ff fe22 	bl	800266a <pack_left_shift_u32>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3306      	adds	r3, #6
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3306      	adds	r3, #6
 8002a34:	430a      	orrs	r2, r1
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(pressure3, 8u, 0xffu);
 8002a3a:	22ff      	movs	r2, #255	@ 0xff
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	69f8      	ldr	r0, [r7, #28]
 8002a40:	f7ff fe40 	bl	80026c4 <pack_right_shift_u32>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4619      	mov	r1, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3307      	adds	r3, #7
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3307      	adds	r3, #7
 8002a52:	430a      	orrs	r2, r1
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_right_shift_u32(pressure3, 16u, 0xffu);
 8002a58:	22ff      	movs	r2, #255	@ 0xff
 8002a5a:	2110      	movs	r1, #16
 8002a5c:	69f8      	ldr	r0, [r7, #28]
 8002a5e:	f7ff fe31 	bl	80026c4 <pack_right_shift_u32>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4619      	mov	r1, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3308      	adds	r3, #8
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3308      	adds	r3, #8
 8002a70:	430a      	orrs	r2, r1
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]
    temperature1 = (uint16_t)src_p->temperature1;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002a7c:	837b      	strh	r3, [r7, #26]
    dst_p[9] |= pack_left_shift_u16(temperature1, 0u, 0xffu);
 8002a7e:	8b7b      	ldrh	r3, [r7, #26]
 8002a80:	22ff      	movs	r2, #255	@ 0xff
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fdd9 	bl	800263c <pack_left_shift_u16>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3309      	adds	r3, #9
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3309      	adds	r3, #9
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u16(temperature1, 8u, 0xffu);
 8002a9e:	8b7b      	ldrh	r3, [r7, #26]
 8002aa0:	22ff      	movs	r2, #255	@ 0xff
 8002aa2:	2108      	movs	r1, #8
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fdf6 	bl	8002696 <pack_right_shift_u16>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	330a      	adds	r3, #10
 8002ab2:	781a      	ldrb	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	330a      	adds	r3, #10
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]
    temperature2 = (uint16_t)src_p->temperature2;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002ac4:	833b      	strh	r3, [r7, #24]
    dst_p[11] |= pack_left_shift_u16(temperature2, 0u, 0xffu);
 8002ac6:	8b3b      	ldrh	r3, [r7, #24]
 8002ac8:	22ff      	movs	r2, #255	@ 0xff
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fdb5 	bl	800263c <pack_left_shift_u16>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	330b      	adds	r3, #11
 8002ada:	781a      	ldrb	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	330b      	adds	r3, #11
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_right_shift_u16(temperature2, 8u, 0xffu);
 8002ae6:	8b3b      	ldrh	r3, [r7, #24]
 8002ae8:	22ff      	movs	r2, #255	@ 0xff
 8002aea:	2108      	movs	r1, #8
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fdd2 	bl	8002696 <pack_right_shift_u16>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4619      	mov	r1, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	330c      	adds	r3, #12
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	330c      	adds	r3, #12
 8002b00:	430a      	orrs	r2, r1
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]
    temperature3 = (uint16_t)src_p->temperature3;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002b0c:	82fb      	strh	r3, [r7, #22]
    dst_p[13] |= pack_left_shift_u16(temperature3, 0u, 0xffu);
 8002b0e:	8afb      	ldrh	r3, [r7, #22]
 8002b10:	22ff      	movs	r2, #255	@ 0xff
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fd91 	bl	800263c <pack_left_shift_u16>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	330d      	adds	r3, #13
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	330d      	adds	r3, #13
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u16(temperature3, 8u, 0xffu);
 8002b2e:	8afb      	ldrh	r3, [r7, #22]
 8002b30:	22ff      	movs	r2, #255	@ 0xff
 8002b32:	2108      	movs	r1, #8
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fdae 	bl	8002696 <pack_right_shift_u16>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	330e      	adds	r3, #14
 8002b42:	781a      	ldrb	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	330e      	adds	r3, #14
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

    return (16);
 8002b4e:	2310      	movs	r3, #16
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3728      	adds	r7, #40	@ 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <ucr_01_front_frequency_pack>:

int ucr_01_front_frequency_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_frequency_t *src_p,
    size_t size)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
    uint32_t freq1;
    uint32_t freq2;
    uint32_t freq3;
    uint32_t freq4;

    if (size < 16u) {
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b0f      	cmp	r3, #15
 8002b68:	d802      	bhi.n	8002b70 <ucr_01_front_frequency_pack+0x18>
        return (-EINVAL);
 8002b6a:	f06f 0315 	mvn.w	r3, #21
 8002b6e:	e112      	b.n	8002d96 <ucr_01_front_frequency_pack+0x23e>
    }

    memset(&dst_p[0], 0, 16);
 8002b70:	2210      	movs	r2, #16
 8002b72:	2100      	movs	r1, #0
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f00a fbf5 	bl	800d364 <memset>

    memcpy(&freq1, &src_p->freq1, sizeof(freq1));
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	61fb      	str	r3, [r7, #28]
    dst_p[0] |= pack_left_shift_u32(freq1, 0u, 0xffu);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	22ff      	movs	r2, #255	@ 0xff
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fd6f 	bl	800266a <pack_left_shift_u32>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(freq1, 8u, 0xffu);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	22ff      	movs	r2, #255	@ 0xff
 8002ba0:	2108      	movs	r1, #8
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fd8e 	bl	80026c4 <pack_right_shift_u32>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4619      	mov	r1, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(freq1, 16u, 0xffu);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	22ff      	movs	r2, #255	@ 0xff
 8002bc0:	2110      	movs	r1, #16
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fd7e 	bl	80026c4 <pack_right_shift_u32>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3302      	adds	r3, #2
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u32(freq1, 24u, 0xffu);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	22ff      	movs	r2, #255	@ 0xff
 8002be0:	2118      	movs	r1, #24
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fd6e 	bl	80026c4 <pack_right_shift_u32>
 8002be8:	4603      	mov	r3, r0
 8002bea:	4619      	mov	r1, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3303      	adds	r3, #3
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3303      	adds	r3, #3
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]
    memcpy(&freq2, &src_p->freq2, sizeof(freq2));
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	61bb      	str	r3, [r7, #24]
    dst_p[4] |= pack_left_shift_u32(freq2, 0u, 0xffu);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	22ff      	movs	r2, #255	@ 0xff
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fd2d 	bl	800266a <pack_left_shift_u32>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4619      	mov	r1, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3304      	adds	r3, #4
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(freq2, 8u, 0xffu);
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	22ff      	movs	r2, #255	@ 0xff
 8002c28:	2108      	movs	r1, #8
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fd4a 	bl	80026c4 <pack_right_shift_u32>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4619      	mov	r1, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3305      	adds	r3, #5
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3305      	adds	r3, #5
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u32(freq2, 16u, 0xffu);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	22ff      	movs	r2, #255	@ 0xff
 8002c48:	2110      	movs	r1, #16
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fd3a 	bl	80026c4 <pack_right_shift_u32>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4619      	mov	r1, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3306      	adds	r3, #6
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3306      	adds	r3, #6
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(freq2, 24u, 0xffu);
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	22ff      	movs	r2, #255	@ 0xff
 8002c68:	2118      	movs	r1, #24
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fd2a 	bl	80026c4 <pack_right_shift_u32>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4619      	mov	r1, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3307      	adds	r3, #7
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3307      	adds	r3, #7
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]
    memcpy(&freq3, &src_p->freq3, sizeof(freq3));
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	3308      	adds	r3, #8
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	617b      	str	r3, [r7, #20]
    dst_p[8] |= pack_left_shift_u32(freq3, 0u, 0xffu);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	22ff      	movs	r2, #255	@ 0xff
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fce9 	bl	800266a <pack_left_shift_u32>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3308      	adds	r3, #8
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u32(freq3, 8u, 0xffu);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	22ff      	movs	r2, #255	@ 0xff
 8002cb0:	2108      	movs	r1, #8
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fd06 	bl	80026c4 <pack_right_shift_u32>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4619      	mov	r1, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3309      	adds	r3, #9
 8002cc0:	781a      	ldrb	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3309      	adds	r3, #9
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u32(freq3, 16u, 0xffu);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	22ff      	movs	r2, #255	@ 0xff
 8002cd0:	2110      	movs	r1, #16
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fcf6 	bl	80026c4 <pack_right_shift_u32>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4619      	mov	r1, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	330a      	adds	r3, #10
 8002ce0:	781a      	ldrb	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	330a      	adds	r3, #10
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u32(freq3, 24u, 0xffu);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	22ff      	movs	r2, #255	@ 0xff
 8002cf0:	2118      	movs	r1, #24
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fce6 	bl	80026c4 <pack_right_shift_u32>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	330b      	adds	r3, #11
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	330b      	adds	r3, #11
 8002d06:	430a      	orrs	r2, r1
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]
    memcpy(&freq4, &src_p->freq4, sizeof(freq4));
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	330c      	adds	r3, #12
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	613b      	str	r3, [r7, #16]
    dst_p[12] |= pack_left_shift_u32(freq4, 0u, 0xffu);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	22ff      	movs	r2, #255	@ 0xff
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fca5 	bl	800266a <pack_left_shift_u32>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4619      	mov	r1, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	330c      	adds	r3, #12
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u32(freq4, 8u, 0xffu);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	22ff      	movs	r2, #255	@ 0xff
 8002d38:	2108      	movs	r1, #8
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fcc2 	bl	80026c4 <pack_right_shift_u32>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4619      	mov	r1, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	330d      	adds	r3, #13
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	330d      	adds	r3, #13
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u32(freq4, 16u, 0xffu);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	22ff      	movs	r2, #255	@ 0xff
 8002d58:	2110      	movs	r1, #16
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fcb2 	bl	80026c4 <pack_right_shift_u32>
 8002d60:	4603      	mov	r3, r0
 8002d62:	4619      	mov	r1, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	330e      	adds	r3, #14
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	330e      	adds	r3, #14
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u32(freq4, 24u, 0xffu);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	22ff      	movs	r2, #255	@ 0xff
 8002d78:	2118      	movs	r1, #24
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fca2 	bl	80026c4 <pack_right_shift_u32>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4619      	mov	r1, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	330f      	adds	r3, #15
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	330f      	adds	r3, #15
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]

    return (16);
 8002d94:	2310      	movs	r3, #16
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da8:	2003      	movs	r0, #3
 8002daa:	f001 ff18 	bl	8004bde <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dae:	200f      	movs	r0, #15
 8002db0:	f7fe fbdc 	bl	800156c <HAL_InitTick>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	71fb      	strb	r3, [r7, #7]
 8002dbe:	e001      	b.n	8002dc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dc0:	f7fe fbac 	bl	800151c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dc4:	79fb      	ldrb	r3, [r7, #7]

}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <HAL_IncTick+0x1c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <HAL_IncTick+0x20>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4413      	add	r3, r2
 8002dde:	4a03      	ldr	r2, [pc, #12]	@ (8002dec <HAL_IncTick+0x1c>)
 8002de0:	6013      	str	r3, [r2, #0]
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	200109d0 	.word	0x200109d0
 8002df0:	20000050 	.word	0x20000050

08002df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return uwTick;
 8002df8:	4b03      	ldr	r3, [pc, #12]	@ (8002e08 <HAL_GetTick+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	200109d0 	.word	0x200109d0

08002e0c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 0202 	bic.w	r2, r3, #2
 8002e1c:	4904      	ldr	r1, [pc, #16]	@ (8002e30 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40010030 	.word	0x40010030

08002e34 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	@ (8002e50 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	6013      	str	r3, [r2, #0]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40010030 	.word	0x40010030

08002e54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	609a      	str	r2, [r3, #8]
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3360      	adds	r3, #96	@ 0x60
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b08      	ldr	r3, [pc, #32]	@ (8002f00 <LL_ADC_SetOffset+0x44>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	03fff000 	.word	0x03fff000

08002f04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3360      	adds	r3, #96	@ 0x60
 8002f12:	461a      	mov	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3360      	adds	r3, #96	@ 0x60
 8002f40:	461a      	mov	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b087      	sub	sp, #28
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	3360      	adds	r3, #96	@ 0x60
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	3360      	adds	r3, #96	@ 0x60
 8002fac:	461a      	mov	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	615a      	str	r2, [r3, #20]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800301e:	b480      	push	{r7}
 8003020:	b087      	sub	sp, #28
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3330      	adds	r3, #48	@ 0x30
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	4413      	add	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	211f      	movs	r1, #31
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	401a      	ands	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	0e9b      	lsrs	r3, r3, #26
 8003056:	f003 011f 	and.w	r1, r3, #31
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	431a      	orrs	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003082:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3314      	adds	r3, #20
 80030ac:	461a      	mov	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	0e5b      	lsrs	r3, r3, #25
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	4413      	add	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	0d1b      	lsrs	r3, r3, #20
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	2107      	movs	r1, #7
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	401a      	ands	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	0d1b      	lsrs	r3, r3, #20
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	431a      	orrs	r2, r3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310c:	43db      	mvns	r3, r3
 800310e:	401a      	ands	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0318 	and.w	r3, r3, #24
 8003116:	4908      	ldr	r1, [pc, #32]	@ (8003138 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003118:	40d9      	lsrs	r1, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	400b      	ands	r3, r1
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003122:	431a      	orrs	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	0007ffff 	.word	0x0007ffff

0800313c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 031f 	and.w	r3, r3, #31
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003184:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6093      	str	r3, [r2, #8]
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ac:	d101      	bne.n	80031b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80031d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031fc:	d101      	bne.n	8003202 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003220:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <LL_ADC_IsEnabled+0x18>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <LL_ADC_IsEnabled+0x1a>
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800326e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003272:	f043 0204 	orr.w	r2, r3, #4
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d101      	bne.n	800329e <LL_ADC_REG_IsConversionOngoing+0x18>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d101      	bne.n	80032c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b089      	sub	sp, #36	@ 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e1a9      	b.n	8003642 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7fd fba1 	bl	8000a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff3f 	bl	8003198 <LL_ADC_IsDeepPowerDownEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff25 	bl	8003174 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ff5a 	bl	80031e8 <LL_ADC_IsInternalRegulatorEnabled>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d115      	bne.n	8003366 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff3e 	bl	80031c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003344:	4b9c      	ldr	r3, [pc, #624]	@ (80035b8 <HAL_ADC_Init+0x2e4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	4a9c      	ldr	r2, [pc, #624]	@ (80035bc <HAL_ADC_Init+0x2e8>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	3301      	adds	r3, #1
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003358:	e002      	b.n	8003360 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3b01      	subs	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f9      	bne.n	800335a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ff3c 	bl	80031e8 <LL_ADC_IsInternalRegulatorEnabled>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10d      	bne.n	8003392 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337a:	f043 0210 	orr.w	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003386:	f043 0201 	orr.w	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ff75 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 800339c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f040 8142 	bne.w	8003630 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f040 813e 	bne.w	8003630 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80033bc:	f043 0202 	orr.w	r2, r3, #2
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff35 	bl	8003238 <LL_ADC_IsEnabled>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d141      	bne.n	8003458 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033dc:	d004      	beq.n	80033e8 <HAL_ADC_Init+0x114>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a77      	ldr	r2, [pc, #476]	@ (80035c0 <HAL_ADC_Init+0x2ec>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10f      	bne.n	8003408 <HAL_ADC_Init+0x134>
 80033e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033ec:	f7ff ff24 	bl	8003238 <LL_ADC_IsEnabled>
 80033f0:	4604      	mov	r4, r0
 80033f2:	4873      	ldr	r0, [pc, #460]	@ (80035c0 <HAL_ADC_Init+0x2ec>)
 80033f4:	f7ff ff20 	bl	8003238 <LL_ADC_IsEnabled>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4323      	orrs	r3, r4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e012      	b.n	800342e <HAL_ADC_Init+0x15a>
 8003408:	486e      	ldr	r0, [pc, #440]	@ (80035c4 <HAL_ADC_Init+0x2f0>)
 800340a:	f7ff ff15 	bl	8003238 <LL_ADC_IsEnabled>
 800340e:	4604      	mov	r4, r0
 8003410:	486d      	ldr	r0, [pc, #436]	@ (80035c8 <HAL_ADC_Init+0x2f4>)
 8003412:	f7ff ff11 	bl	8003238 <LL_ADC_IsEnabled>
 8003416:	4603      	mov	r3, r0
 8003418:	431c      	orrs	r4, r3
 800341a:	486c      	ldr	r0, [pc, #432]	@ (80035cc <HAL_ADC_Init+0x2f8>)
 800341c:	f7ff ff0c 	bl	8003238 <LL_ADC_IsEnabled>
 8003420:	4603      	mov	r3, r0
 8003422:	4323      	orrs	r3, r4
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d012      	beq.n	8003458 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800343a:	d004      	beq.n	8003446 <HAL_ADC_Init+0x172>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a5f      	ldr	r2, [pc, #380]	@ (80035c0 <HAL_ADC_Init+0x2ec>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <HAL_ADC_Init+0x176>
 8003446:	4a62      	ldr	r2, [pc, #392]	@ (80035d0 <HAL_ADC_Init+0x2fc>)
 8003448:	e000      	b.n	800344c <HAL_ADC_Init+0x178>
 800344a:	4a62      	ldr	r2, [pc, #392]	@ (80035d4 <HAL_ADC_Init+0x300>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f7ff fcfe 	bl	8002e54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	7f5b      	ldrb	r3, [r3, #29]
 800345c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003462:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003468:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800346e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003476:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003482:	2b01      	cmp	r3, #1
 8003484:	d106      	bne.n	8003494 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	3b01      	subs	r3, #1
 800348c:	045b      	lsls	r3, r3, #17
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d009      	beq.n	80034b0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	4b48      	ldr	r3, [pc, #288]	@ (80035d8 <HAL_ADC_Init+0x304>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	69b9      	ldr	r1, [r7, #24]
 80034c0:	430b      	orrs	r3, r1
 80034c2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fee4 	bl	80032ac <LL_ADC_INJ_IsConversionOngoing>
 80034e4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d17f      	bne.n	80035ec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d17c      	bne.n	80035ec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034f6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034fe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800350e:	f023 0302 	bic.w	r3, r3, #2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	69b9      	ldr	r1, [r7, #24]
 8003518:	430b      	orrs	r3, r1
 800351a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d017      	beq.n	8003554 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003532:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800353c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003540:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6911      	ldr	r1, [r2, #16]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	430b      	orrs	r3, r1
 800354e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003552:	e013      	b.n	800357c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003562:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003574:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003578:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003582:	2b01      	cmp	r3, #1
 8003584:	d12a      	bne.n	80035dc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003590:	f023 0304 	bic.w	r3, r3, #4
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800359c:	4311      	orrs	r1, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80035a2:	4311      	orrs	r1, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035a8:	430a      	orrs	r2, r1
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	611a      	str	r2, [r3, #16]
 80035b6:	e019      	b.n	80035ec <HAL_ADC_Init+0x318>
 80035b8:	20000000 	.word	0x20000000
 80035bc:	053e2d63 	.word	0x053e2d63
 80035c0:	50000100 	.word	0x50000100
 80035c4:	50000400 	.word	0x50000400
 80035c8:	50000500 	.word	0x50000500
 80035cc:	50000600 	.word	0x50000600
 80035d0:	50000300 	.word	0x50000300
 80035d4:	50000700 	.word	0x50000700
 80035d8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0201 	bic.w	r2, r2, #1
 80035ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d10c      	bne.n	800360e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	f023 010f 	bic.w	r1, r3, #15
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	1e5a      	subs	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	631a      	str	r2, [r3, #48]	@ 0x30
 800360c:	e007      	b.n	800361e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 020f 	bic.w	r2, r2, #15
 800361c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003622:	f023 0303 	bic.w	r3, r3, #3
 8003626:	f043 0201 	orr.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800362e:	e007      	b.n	8003640 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003634:	f043 0210 	orr.w	r2, r3, #16
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003640:	7ffb      	ldrb	r3, [r7, #31]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3724      	adds	r7, #36	@ 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd90      	pop	{r4, r7, pc}
 800364a:	bf00      	nop

0800364c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003660:	d004      	beq.n	800366c <HAL_ADC_Start_DMA+0x20>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a5a      	ldr	r2, [pc, #360]	@ (80037d0 <HAL_ADC_Start_DMA+0x184>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d101      	bne.n	8003670 <HAL_ADC_Start_DMA+0x24>
 800366c:	4b59      	ldr	r3, [pc, #356]	@ (80037d4 <HAL_ADC_Start_DMA+0x188>)
 800366e:	e000      	b.n	8003672 <HAL_ADC_Start_DMA+0x26>
 8003670:	4b59      	ldr	r3, [pc, #356]	@ (80037d8 <HAL_ADC_Start_DMA+0x18c>)
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fd62 	bl	800313c <LL_ADC_GetMultimode>
 8003678:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fe01 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 809b 	bne.w	80037c2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_ADC_Start_DMA+0x4e>
 8003696:	2302      	movs	r3, #2
 8003698:	e096      	b.n	80037c8 <HAL_ADC_Start_DMA+0x17c>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a4d      	ldr	r2, [pc, #308]	@ (80037dc <HAL_ADC_Start_DMA+0x190>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d008      	beq.n	80036be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d002      	beq.n	80036be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b09      	cmp	r3, #9
 80036bc:	d17a      	bne.n	80037b4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 ff56 	bl	8004570 <ADC_Enable>
 80036c4:	4603      	mov	r3, r0
 80036c6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d16d      	bne.n	80037aa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a3a      	ldr	r2, [pc, #232]	@ (80037d0 <HAL_ADC_Start_DMA+0x184>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d009      	beq.n	8003700 <HAL_ADC_Start_DMA+0xb4>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a3b      	ldr	r2, [pc, #236]	@ (80037e0 <HAL_ADC_Start_DMA+0x194>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d002      	beq.n	80036fc <HAL_ADC_Start_DMA+0xb0>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	e003      	b.n	8003704 <HAL_ADC_Start_DMA+0xb8>
 80036fc:	4b39      	ldr	r3, [pc, #228]	@ (80037e4 <HAL_ADC_Start_DMA+0x198>)
 80036fe:	e001      	b.n	8003704 <HAL_ADC_Start_DMA+0xb8>
 8003700:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	4293      	cmp	r3, r2
 800370a:	d002      	beq.n	8003712 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d105      	bne.n	800371e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003716:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003722:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d006      	beq.n	8003738 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372e:	f023 0206 	bic.w	r2, r3, #6
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	661a      	str	r2, [r3, #96]	@ 0x60
 8003736:	e002      	b.n	800373e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003742:	4a29      	ldr	r2, [pc, #164]	@ (80037e8 <HAL_ADC_Start_DMA+0x19c>)
 8003744:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374a:	4a28      	ldr	r2, [pc, #160]	@ (80037ec <HAL_ADC_Start_DMA+0x1a0>)
 800374c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003752:	4a27      	ldr	r2, [pc, #156]	@ (80037f0 <HAL_ADC_Start_DMA+0x1a4>)
 8003754:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	221c      	movs	r2, #28
 800375c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0210 	orr.w	r2, r2, #16
 8003774:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0201 	orr.w	r2, r2, #1
 8003784:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3340      	adds	r3, #64	@ 0x40
 8003790:	4619      	mov	r1, r3
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f001 fbef 	bl	8004f78 <HAL_DMA_Start_IT>
 800379a:	4603      	mov	r3, r0
 800379c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fd5b 	bl	800325e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80037a8:	e00d      	b.n	80037c6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80037b2:	e008      	b.n	80037c6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80037c0:	e001      	b.n	80037c6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
 80037c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	50000100 	.word	0x50000100
 80037d4:	50000300 	.word	0x50000300
 80037d8:	50000700 	.word	0x50000700
 80037dc:	50000600 	.word	0x50000600
 80037e0:	50000500 	.word	0x50000500
 80037e4:	50000400 	.word	0x50000400
 80037e8:	0800469d 	.word	0x0800469d
 80037ec:	08004775 	.word	0x08004775
 80037f0:	08004791 	.word	0x08004791

080037f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	@ 0x28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037fc:	2300      	movs	r3, #0
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003818:	d004      	beq.n	8003824 <HAL_ADC_IRQHandler+0x30>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a8e      	ldr	r2, [pc, #568]	@ (8003a58 <HAL_ADC_IRQHandler+0x264>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d101      	bne.n	8003828 <HAL_ADC_IRQHandler+0x34>
 8003824:	4b8d      	ldr	r3, [pc, #564]	@ (8003a5c <HAL_ADC_IRQHandler+0x268>)
 8003826:	e000      	b.n	800382a <HAL_ADC_IRQHandler+0x36>
 8003828:	4b8d      	ldr	r3, [pc, #564]	@ (8003a60 <HAL_ADC_IRQHandler+0x26c>)
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fc86 	bl	800313c <LL_ADC_GetMultimode>
 8003830:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d017      	beq.n	800386c <HAL_ADC_IRQHandler+0x78>
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d012      	beq.n	800386c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d105      	bne.n	800385e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003856:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fffe 	bl	8004860 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2202      	movs	r2, #2
 800386a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <HAL_ADC_IRQHandler+0x8c>
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8094 	beq.w	80039b4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 808e 	beq.w	80039b4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fb9f 	bl	8002ff8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d072      	beq.n	80039a6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a64      	ldr	r2, [pc, #400]	@ (8003a58 <HAL_ADC_IRQHandler+0x264>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d009      	beq.n	80038de <HAL_ADC_IRQHandler+0xea>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a65      	ldr	r2, [pc, #404]	@ (8003a64 <HAL_ADC_IRQHandler+0x270>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d002      	beq.n	80038da <HAL_ADC_IRQHandler+0xe6>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	e003      	b.n	80038e2 <HAL_ADC_IRQHandler+0xee>
 80038da:	4b63      	ldr	r3, [pc, #396]	@ (8003a68 <HAL_ADC_IRQHandler+0x274>)
 80038dc:	e001      	b.n	80038e2 <HAL_ADC_IRQHandler+0xee>
 80038de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d008      	beq.n	80038fc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d002      	beq.n	80038fc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b09      	cmp	r3, #9
 80038fa:	d104      	bne.n	8003906 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	623b      	str	r3, [r7, #32]
 8003904:	e014      	b.n	8003930 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a53      	ldr	r2, [pc, #332]	@ (8003a58 <HAL_ADC_IRQHandler+0x264>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_ADC_IRQHandler+0x130>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a53      	ldr	r2, [pc, #332]	@ (8003a64 <HAL_ADC_IRQHandler+0x270>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d002      	beq.n	8003920 <HAL_ADC_IRQHandler+0x12c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	e003      	b.n	8003928 <HAL_ADC_IRQHandler+0x134>
 8003920:	4b51      	ldr	r3, [pc, #324]	@ (8003a68 <HAL_ADC_IRQHandler+0x274>)
 8003922:	e001      	b.n	8003928 <HAL_ADC_IRQHandler+0x134>
 8003924:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003928:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d135      	bne.n	80039a6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b08      	cmp	r3, #8
 8003946:	d12e      	bne.n	80039a6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fc9a 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11a      	bne.n	800398e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 020c 	bic.w	r2, r2, #12
 8003966:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d112      	bne.n	80039a6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003984:	f043 0201 	orr.w	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800398c:	e00b      	b.n	80039a6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003992:	f043 0210 	orr.w	r2, r3, #16
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399e:	f043 0201 	orr.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fe f86c 	bl	8001a84 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	220c      	movs	r2, #12
 80039b2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <HAL_ADC_IRQHandler+0x1d4>
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80b3 	beq.w	8003b3a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80ad 	beq.w	8003b3a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d105      	bne.n	80039f8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fb3a 	bl	8003076 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003a02:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff faf5 	bl	8002ff8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a0e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a10      	ldr	r2, [pc, #64]	@ (8003a58 <HAL_ADC_IRQHandler+0x264>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_ADC_IRQHandler+0x23a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a11      	ldr	r2, [pc, #68]	@ (8003a64 <HAL_ADC_IRQHandler+0x270>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d002      	beq.n	8003a2a <HAL_ADC_IRQHandler+0x236>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	e003      	b.n	8003a32 <HAL_ADC_IRQHandler+0x23e>
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a68 <HAL_ADC_IRQHandler+0x274>)
 8003a2c:	e001      	b.n	8003a32 <HAL_ADC_IRQHandler+0x23e>
 8003a2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d008      	beq.n	8003a4c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2b06      	cmp	r3, #6
 8003a44:	d002      	beq.n	8003a4c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b07      	cmp	r3, #7
 8003a4a:	d10f      	bne.n	8003a6c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	e01f      	b.n	8003a96 <HAL_ADC_IRQHandler+0x2a2>
 8003a56:	bf00      	nop
 8003a58:	50000100 	.word	0x50000100
 8003a5c:	50000300 	.word	0x50000300
 8003a60:	50000700 	.word	0x50000700
 8003a64:	50000500 	.word	0x50000500
 8003a68:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a8b      	ldr	r2, [pc, #556]	@ (8003ca0 <HAL_ADC_IRQHandler+0x4ac>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_ADC_IRQHandler+0x296>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a8a      	ldr	r2, [pc, #552]	@ (8003ca4 <HAL_ADC_IRQHandler+0x4b0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d002      	beq.n	8003a86 <HAL_ADC_IRQHandler+0x292>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	e003      	b.n	8003a8e <HAL_ADC_IRQHandler+0x29a>
 8003a86:	4b88      	ldr	r3, [pc, #544]	@ (8003ca8 <HAL_ADC_IRQHandler+0x4b4>)
 8003a88:	e001      	b.n	8003a8e <HAL_ADC_IRQHandler+0x29a>
 8003a8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a8e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d047      	beq.n	8003b2c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0x2c2>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d03f      	beq.n	8003b2c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d13a      	bne.n	8003b2c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac0:	2b40      	cmp	r3, #64	@ 0x40
 8003ac2:	d133      	bne.n	8003b2c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d12e      	bne.n	8003b2c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fbea 	bl	80032ac <LL_ADC_INJ_IsConversionOngoing>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d11a      	bne.n	8003b14 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003aec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d112      	bne.n	8003b2c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b12:	e00b      	b.n	8003b2c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b18:	f043 0210 	orr.w	r2, r3, #16
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fe6f 	bl	8004810 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2260      	movs	r2, #96	@ 0x60
 8003b38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d011      	beq.n	8003b68 <HAL_ADC_IRQHandler+0x374>
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00c      	beq.n	8003b68 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8b4 	bl	8003cc8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2280      	movs	r2, #128	@ 0x80
 8003b66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d012      	beq.n	8003b98 <HAL_ADC_IRQHandler+0x3a4>
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00d      	beq.n	8003b98 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b80:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fe55 	bl	8004838 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d012      	beq.n	8003bc8 <HAL_ADC_IRQHandler+0x3d4>
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00d      	beq.n	8003bc8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fe47 	bl	800484c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bc6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d043      	beq.n	8003c5a <HAL_ADC_IRQHandler+0x466>
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d03e      	beq.n	8003c5a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003be4:	2301      	movs	r3, #1
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be8:	e021      	b.n	8003c2e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d015      	beq.n	8003c1c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bf8:	d004      	beq.n	8003c04 <HAL_ADC_IRQHandler+0x410>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a28      	ldr	r2, [pc, #160]	@ (8003ca0 <HAL_ADC_IRQHandler+0x4ac>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <HAL_ADC_IRQHandler+0x414>
 8003c04:	4b29      	ldr	r3, [pc, #164]	@ (8003cac <HAL_ADC_IRQHandler+0x4b8>)
 8003c06:	e000      	b.n	8003c0a <HAL_ADC_IRQHandler+0x416>
 8003c08:	4b29      	ldr	r3, [pc, #164]	@ (8003cb0 <HAL_ADC_IRQHandler+0x4bc>)
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff faa4 	bl	8003158 <LL_ADC_GetMultiDMATransfer>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003c16:	2301      	movs	r3, #1
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c1a:	e008      	b.n	8003c2e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d10e      	bne.n	8003c52 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c38:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c44:	f043 0202 	orr.w	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f845 	bl	8003cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2210      	movs	r2, #16
 8003c58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d018      	beq.n	8003c96 <HAL_ADC_IRQHandler+0x4a2>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d013      	beq.n	8003c96 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c72:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c7e:	f043 0208 	orr.w	r2, r3, #8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c8e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fdc7 	bl	8004824 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c96:	bf00      	nop
 8003c98:	3728      	adds	r7, #40	@ 0x28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	50000100 	.word	0x50000100
 8003ca4:	50000500 	.word	0x50000500
 8003ca8:	50000400 	.word	0x50000400
 8003cac:	50000300 	.word	0x50000300
 8003cb0:	50000700 	.word	0x50000700

08003cb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b0b6      	sub	sp, #216	@ 0xd8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d102      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x24>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	f000 bc13 	b.w	800453a <HAL_ADC_ConfigChannel+0x84a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fab0 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f040 83f3 	bne.w	8004514 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f7ff f96f 	bl	800301e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fa9e 	bl	8003286 <LL_ADC_REG_IsConversionOngoing>
 8003d4a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff faaa 	bl	80032ac <LL_ADC_INJ_IsConversionOngoing>
 8003d58:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f040 81d9 	bne.w	8004118 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 81d4 	bne.w	8004118 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d78:	d10f      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	4619      	mov	r1, r3
 8003d86:	f7ff f989 	bl	800309c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff f91d 	bl	8002fd2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003d98:	e00e      	b.n	8003db8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	6819      	ldr	r1, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	461a      	mov	r2, r3
 8003da8:	f7ff f978 	bl	800309c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff f90d 	bl	8002fd2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	08db      	lsrs	r3, r3, #3
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d022      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6919      	ldr	r1, [r3, #16]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003dea:	f7ff f867 	bl	8002ebc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6919      	ldr	r1, [r3, #16]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f7ff f8b3 	bl	8002f66 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x126>
 8003e10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e14:	e000      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x128>
 8003e16:	2300      	movs	r3, #0
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f7ff f8bf 	bl	8002f9c <LL_ADC_SetOffsetSaturation>
 8003e1e:	e17b      	b.n	8004118 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff f86c 	bl	8002f04 <LL_ADC_GetOffsetChannel>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x15c>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff f861 	bl	8002f04 <LL_ADC_GetOffsetChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	0e9b      	lsrs	r3, r3, #26
 8003e46:	f003 021f 	and.w	r2, r3, #31
 8003e4a:	e01e      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x19a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2100      	movs	r1, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff f856 	bl	8002f04 <LL_ADC_GetOffsetChannel>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e7a:	2320      	movs	r3, #32
 8003e7c:	e004      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e82:	fab3 f383 	clz	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d105      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x1b2>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	0e9b      	lsrs	r3, r3, #26
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	e018      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x1e4>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003eae:	fa93 f3a3 	rbit	r3, r3
 8003eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003ec6:	2320      	movs	r3, #32
 8003ec8:	e004      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003eca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ece:	fab3 f383 	clz	r3, r3
 8003ed2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d106      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff f825 	bl	8002f30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2101      	movs	r1, #1
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff f809 	bl	8002f04 <LL_ADC_GetOffsetChannel>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0x222>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2101      	movs	r1, #1
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fffe 	bl	8002f04 <LL_ADC_GetOffsetChannel>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	0e9b      	lsrs	r3, r3, #26
 8003f0c:	f003 021f 	and.w	r2, r3, #31
 8003f10:	e01e      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x260>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2101      	movs	r1, #1
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe fff3 	bl	8002f04 <LL_ADC_GetOffsetChannel>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f28:	fa93 f3a3 	rbit	r3, r3
 8003f2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003f30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003f38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f40:	2320      	movs	r3, #32
 8003f42:	e004      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f48:	fab3 f383 	clz	r3, r3
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x278>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	0e9b      	lsrs	r3, r3, #26
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	e018      	b.n	8003f9a <HAL_ADC_ConfigChannel+0x2aa>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	e004      	b.n	8003f9a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f94:	fab3 f383 	clz	r3, r3
 8003f98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d106      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fe ffc2 	bl	8002f30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe ffa6 	bl	8002f04 <LL_ADC_GetOffsetChannel>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x2e8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe ff9b 	bl	8002f04 <LL_ADC_GetOffsetChannel>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	0e9b      	lsrs	r3, r3, #26
 8003fd2:	f003 021f 	and.w	r2, r3, #31
 8003fd6:	e01e      	b.n	8004016 <HAL_ADC_ConfigChannel+0x326>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2102      	movs	r1, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe ff90 	bl	8002f04 <LL_ADC_GetOffsetChannel>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fee:	fa93 f3a3 	rbit	r3, r3
 8003ff2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003ff6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ffa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003ffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004006:	2320      	movs	r3, #32
 8004008:	e004      	b.n	8004014 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800400a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401e:	2b00      	cmp	r3, #0
 8004020:	d105      	bne.n	800402e <HAL_ADC_ConfigChannel+0x33e>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	0e9b      	lsrs	r3, r3, #26
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	e016      	b.n	800405c <HAL_ADC_ConfigChannel+0x36c>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004040:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004042:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004046:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800404e:	2320      	movs	r3, #32
 8004050:	e004      	b.n	800405c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004052:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800405c:	429a      	cmp	r2, r3
 800405e:	d106      	bne.n	800406e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2200      	movs	r2, #0
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe ff61 	bl	8002f30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2103      	movs	r1, #3
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe ff45 	bl	8002f04 <LL_ADC_GetOffsetChannel>
 800407a:	4603      	mov	r3, r0
 800407c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <HAL_ADC_ConfigChannel+0x3aa>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2103      	movs	r1, #3
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe ff3a 	bl	8002f04 <LL_ADC_GetOffsetChannel>
 8004090:	4603      	mov	r3, r0
 8004092:	0e9b      	lsrs	r3, r3, #26
 8004094:	f003 021f 	and.w	r2, r3, #31
 8004098:	e017      	b.n	80040ca <HAL_ADC_ConfigChannel+0x3da>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2103      	movs	r1, #3
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe ff2f 	bl	8002f04 <LL_ADC_GetOffsetChannel>
 80040a6:	4603      	mov	r3, r0
 80040a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80040b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80040b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80040bc:	2320      	movs	r3, #32
 80040be:	e003      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80040c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040c2:	fab3 f383 	clz	r3, r3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x3f2>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	0e9b      	lsrs	r3, r3, #26
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	e011      	b.n	8004106 <HAL_ADC_ConfigChannel+0x416>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040ea:	fa93 f3a3 	rbit	r3, r3
 80040ee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80040f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80040f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80040fa:	2320      	movs	r3, #32
 80040fc:	e003      	b.n	8004106 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80040fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004100:	fab3 f383 	clz	r3, r3
 8004104:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004106:	429a      	cmp	r2, r3
 8004108:	d106      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2200      	movs	r2, #0
 8004110:	2103      	movs	r1, #3
 8004112:	4618      	mov	r0, r3
 8004114:	f7fe ff0c 	bl	8002f30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff f88b 	bl	8003238 <LL_ADC_IsEnabled>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 813d 	bne.w	80043a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6819      	ldr	r1, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	461a      	mov	r2, r3
 8004138:	f7fe ffdc 	bl	80030f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4aa2      	ldr	r2, [pc, #648]	@ (80043cc <HAL_ADC_ConfigChannel+0x6dc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	f040 812e 	bne.w	80043a4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x480>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	0e9b      	lsrs	r3, r3, #26
 800415e:	3301      	adds	r3, #1
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	2b09      	cmp	r3, #9
 8004166:	bf94      	ite	ls
 8004168:	2301      	movls	r3, #1
 800416a:	2300      	movhi	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e019      	b.n	80041a4 <HAL_ADC_ConfigChannel+0x4b4>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800417e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004180:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004188:	2320      	movs	r3, #32
 800418a:	e003      	b.n	8004194 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800418c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800418e:	fab3 f383 	clz	r3, r3
 8004192:	b2db      	uxtb	r3, r3
 8004194:	3301      	adds	r3, #1
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	2b09      	cmp	r3, #9
 800419c:	bf94      	ite	ls
 800419e:	2301      	movls	r3, #1
 80041a0:	2300      	movhi	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d079      	beq.n	800429c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d107      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x4d4>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	0e9b      	lsrs	r3, r3, #26
 80041ba:	3301      	adds	r3, #1
 80041bc:	069b      	lsls	r3, r3, #26
 80041be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041c2:	e015      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x500>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041cc:	fa93 f3a3 	rbit	r3, r3
 80041d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80041d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80041d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80041dc:	2320      	movs	r3, #32
 80041de:	e003      	b.n	80041e8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80041e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e2:	fab3 f383 	clz	r3, r3
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	3301      	adds	r3, #1
 80041ea:	069b      	lsls	r3, r3, #26
 80041ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d109      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x520>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	0e9b      	lsrs	r3, r3, #26
 8004202:	3301      	adds	r3, #1
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	2101      	movs	r1, #1
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	e017      	b.n	8004240 <HAL_ADC_ConfigChannel+0x550>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004218:	fa93 f3a3 	rbit	r3, r3
 800421c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800421e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004220:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004228:	2320      	movs	r3, #32
 800422a:	e003      	b.n	8004234 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800422c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800422e:	fab3 f383 	clz	r3, r3
 8004232:	b2db      	uxtb	r3, r3
 8004234:	3301      	adds	r3, #1
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	2101      	movs	r1, #1
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	ea42 0103 	orr.w	r1, r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x576>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	0e9b      	lsrs	r3, r3, #26
 8004256:	3301      	adds	r3, #1
 8004258:	f003 021f 	and.w	r2, r3, #31
 800425c:	4613      	mov	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4413      	add	r3, r2
 8004262:	051b      	lsls	r3, r3, #20
 8004264:	e018      	b.n	8004298 <HAL_ADC_ConfigChannel+0x5a8>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800427e:	2320      	movs	r3, #32
 8004280:	e003      	b.n	800428a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004284:	fab3 f383 	clz	r3, r3
 8004288:	b2db      	uxtb	r3, r3
 800428a:	3301      	adds	r3, #1
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	4613      	mov	r3, r2
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	4413      	add	r3, r2
 8004296:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004298:	430b      	orrs	r3, r1
 800429a:	e07e      	b.n	800439a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d107      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x5c8>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	0e9b      	lsrs	r3, r3, #26
 80042ae:	3301      	adds	r3, #1
 80042b0:	069b      	lsls	r3, r3, #26
 80042b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042b6:	e015      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x5f4>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80042c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80042ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80042d0:	2320      	movs	r3, #32
 80042d2:	e003      	b.n	80042dc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	fab3 f383 	clz	r3, r3
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	3301      	adds	r3, #1
 80042de:	069b      	lsls	r3, r3, #26
 80042e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d109      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x614>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	0e9b      	lsrs	r3, r3, #26
 80042f6:	3301      	adds	r3, #1
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	2101      	movs	r1, #1
 80042fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004302:	e017      	b.n	8004334 <HAL_ADC_ConfigChannel+0x644>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	fa93 f3a3 	rbit	r3, r3
 8004310:	61fb      	str	r3, [r7, #28]
  return result;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800431c:	2320      	movs	r3, #32
 800431e:	e003      	b.n	8004328 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	fab3 f383 	clz	r3, r3
 8004326:	b2db      	uxtb	r3, r3
 8004328:	3301      	adds	r3, #1
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	2101      	movs	r1, #1
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	ea42 0103 	orr.w	r1, r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10d      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x670>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0e9b      	lsrs	r3, r3, #26
 800434a:	3301      	adds	r3, #1
 800434c:	f003 021f 	and.w	r2, r3, #31
 8004350:	4613      	mov	r3, r2
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4413      	add	r3, r2
 8004356:	3b1e      	subs	r3, #30
 8004358:	051b      	lsls	r3, r3, #20
 800435a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800435e:	e01b      	b.n	8004398 <HAL_ADC_ConfigChannel+0x6a8>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	613b      	str	r3, [r7, #16]
  return result;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004378:	2320      	movs	r3, #32
 800437a:	e003      	b.n	8004384 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	fab3 f383 	clz	r3, r3
 8004382:	b2db      	uxtb	r3, r3
 8004384:	3301      	adds	r3, #1
 8004386:	f003 021f 	and.w	r2, r3, #31
 800438a:	4613      	mov	r3, r2
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4413      	add	r3, r2
 8004390:	3b1e      	subs	r3, #30
 8004392:	051b      	lsls	r3, r3, #20
 8004394:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004398:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800439e:	4619      	mov	r1, r3
 80043a0:	f7fe fe7c 	bl	800309c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b09      	ldr	r3, [pc, #36]	@ (80043d0 <HAL_ADC_ConfigChannel+0x6e0>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80be 	beq.w	800452e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043ba:	d004      	beq.n	80043c6 <HAL_ADC_ConfigChannel+0x6d6>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a04      	ldr	r2, [pc, #16]	@ (80043d4 <HAL_ADC_ConfigChannel+0x6e4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10a      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x6ec>
 80043c6:	4b04      	ldr	r3, [pc, #16]	@ (80043d8 <HAL_ADC_ConfigChannel+0x6e8>)
 80043c8:	e009      	b.n	80043de <HAL_ADC_ConfigChannel+0x6ee>
 80043ca:	bf00      	nop
 80043cc:	407f0000 	.word	0x407f0000
 80043d0:	80080000 	.word	0x80080000
 80043d4:	50000100 	.word	0x50000100
 80043d8:	50000300 	.word	0x50000300
 80043dc:	4b59      	ldr	r3, [pc, #356]	@ (8004544 <HAL_ADC_ConfigChannel+0x854>)
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe fd5e 	bl	8002ea0 <LL_ADC_GetCommonPathInternalCh>
 80043e4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a56      	ldr	r2, [pc, #344]	@ (8004548 <HAL_ADC_ConfigChannel+0x858>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_ADC_ConfigChannel+0x70c>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a55      	ldr	r2, [pc, #340]	@ (800454c <HAL_ADC_ConfigChannel+0x85c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d13a      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004400:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d134      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004410:	d005      	beq.n	800441e <HAL_ADC_ConfigChannel+0x72e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a4e      	ldr	r2, [pc, #312]	@ (8004550 <HAL_ADC_ConfigChannel+0x860>)
 8004418:	4293      	cmp	r3, r2
 800441a:	f040 8085 	bne.w	8004528 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004426:	d004      	beq.n	8004432 <HAL_ADC_ConfigChannel+0x742>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a49      	ldr	r2, [pc, #292]	@ (8004554 <HAL_ADC_ConfigChannel+0x864>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d101      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x746>
 8004432:	4a49      	ldr	r2, [pc, #292]	@ (8004558 <HAL_ADC_ConfigChannel+0x868>)
 8004434:	e000      	b.n	8004438 <HAL_ADC_ConfigChannel+0x748>
 8004436:	4a43      	ldr	r2, [pc, #268]	@ (8004544 <HAL_ADC_ConfigChannel+0x854>)
 8004438:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800443c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f7fe fd19 	bl	8002e7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004448:	4b44      	ldr	r3, [pc, #272]	@ (800455c <HAL_ADC_ConfigChannel+0x86c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	4a44      	ldr	r2, [pc, #272]	@ (8004560 <HAL_ADC_ConfigChannel+0x870>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	099b      	lsrs	r3, r3, #6
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	4613      	mov	r3, r2
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004462:	e002      	b.n	800446a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3b01      	subs	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f9      	bne.n	8004464 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004470:	e05a      	b.n	8004528 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a3b      	ldr	r2, [pc, #236]	@ (8004564 <HAL_ADC_ConfigChannel+0x874>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d125      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800447c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004480:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11f      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a31      	ldr	r2, [pc, #196]	@ (8004554 <HAL_ADC_ConfigChannel+0x864>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d104      	bne.n	800449c <HAL_ADC_ConfigChannel+0x7ac>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a34      	ldr	r2, [pc, #208]	@ (8004568 <HAL_ADC_ConfigChannel+0x878>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d047      	beq.n	800452c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044a4:	d004      	beq.n	80044b0 <HAL_ADC_ConfigChannel+0x7c0>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004554 <HAL_ADC_ConfigChannel+0x864>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d101      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x7c4>
 80044b0:	4a29      	ldr	r2, [pc, #164]	@ (8004558 <HAL_ADC_ConfigChannel+0x868>)
 80044b2:	e000      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x7c6>
 80044b4:	4a23      	ldr	r2, [pc, #140]	@ (8004544 <HAL_ADC_ConfigChannel+0x854>)
 80044b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f7fe fcda 	bl	8002e7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044c6:	e031      	b.n	800452c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a27      	ldr	r2, [pc, #156]	@ (800456c <HAL_ADC_ConfigChannel+0x87c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d12d      	bne.n	800452e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d127      	bne.n	800452e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004554 <HAL_ADC_ConfigChannel+0x864>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d022      	beq.n	800452e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044f0:	d004      	beq.n	80044fc <HAL_ADC_ConfigChannel+0x80c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a17      	ldr	r2, [pc, #92]	@ (8004554 <HAL_ADC_ConfigChannel+0x864>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d101      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x810>
 80044fc:	4a16      	ldr	r2, [pc, #88]	@ (8004558 <HAL_ADC_ConfigChannel+0x868>)
 80044fe:	e000      	b.n	8004502 <HAL_ADC_ConfigChannel+0x812>
 8004500:	4a10      	ldr	r2, [pc, #64]	@ (8004544 <HAL_ADC_ConfigChannel+0x854>)
 8004502:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004506:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f7fe fcb4 	bl	8002e7a <LL_ADC_SetCommonPathInternalCh>
 8004512:	e00c      	b.n	800452e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004518:	f043 0220 	orr.w	r2, r3, #32
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004526:	e002      	b.n	800452e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004528:	bf00      	nop
 800452a:	e000      	b.n	800452e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800452c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004536:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800453a:	4618      	mov	r0, r3
 800453c:	37d8      	adds	r7, #216	@ 0xd8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	50000700 	.word	0x50000700
 8004548:	c3210000 	.word	0xc3210000
 800454c:	90c00010 	.word	0x90c00010
 8004550:	50000600 	.word	0x50000600
 8004554:	50000100 	.word	0x50000100
 8004558:	50000300 	.word	0x50000300
 800455c:	20000000 	.word	0x20000000
 8004560:	053e2d63 	.word	0x053e2d63
 8004564:	c7520000 	.word	0xc7520000
 8004568:	50000500 	.word	0x50000500
 800456c:	cb840000 	.word	0xcb840000

08004570 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004578:	2300      	movs	r3, #0
 800457a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe fe59 	bl	8003238 <LL_ADC_IsEnabled>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d176      	bne.n	800467a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	4b3c      	ldr	r3, [pc, #240]	@ (8004684 <ADC_Enable+0x114>)
 8004594:	4013      	ands	r3, r2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00d      	beq.n	80045b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459e:	f043 0210 	orr.w	r2, r3, #16
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e062      	b.n	800467c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe fe28 	bl	8003210 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045c8:	d004      	beq.n	80045d4 <ADC_Enable+0x64>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a2e      	ldr	r2, [pc, #184]	@ (8004688 <ADC_Enable+0x118>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <ADC_Enable+0x68>
 80045d4:	4b2d      	ldr	r3, [pc, #180]	@ (800468c <ADC_Enable+0x11c>)
 80045d6:	e000      	b.n	80045da <ADC_Enable+0x6a>
 80045d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004690 <ADC_Enable+0x120>)
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe fc60 	bl	8002ea0 <LL_ADC_GetCommonPathInternalCh>
 80045e0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d013      	beq.n	8004612 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004694 <ADC_Enable+0x124>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	099b      	lsrs	r3, r3, #6
 80045f0:	4a29      	ldr	r2, [pc, #164]	@ (8004698 <ADC_Enable+0x128>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004604:	e002      	b.n	800460c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	3b01      	subs	r3, #1
 800460a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f9      	bne.n	8004606 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004612:	f7fe fbef 	bl	8002df4 <HAL_GetTick>
 8004616:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004618:	e028      	b.n	800466c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe fe0a 	bl	8003238 <LL_ADC_IsEnabled>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d104      	bne.n	8004634 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fdee 	bl	8003210 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004634:	f7fe fbde 	bl	8002df4 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d914      	bls.n	800466c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b01      	cmp	r3, #1
 800464e:	d00d      	beq.n	800466c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004654:	f043 0210 	orr.w	r2, r3, #16
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004660:	f043 0201 	orr.w	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e007      	b.n	800467c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d1cf      	bne.n	800461a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	8000003f 	.word	0x8000003f
 8004688:	50000100 	.word	0x50000100
 800468c:	50000300 	.word	0x50000300
 8004690:	50000700 	.word	0x50000700
 8004694:	20000000 	.word	0x20000000
 8004698:	053e2d63 	.word	0x053e2d63

0800469c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d14b      	bne.n	800474e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d021      	beq.n	8004714 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fe fc8f 	bl	8002ff8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d032      	beq.n	8004746 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d12b      	bne.n	8004746 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d11f      	bne.n	8004746 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470a:	f043 0201 	orr.w	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004712:	e018      	b.n	8004746 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d111      	bne.n	8004746 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004726:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004732:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d105      	bne.n	8004746 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473e:	f043 0201 	orr.w	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7fd f99c 	bl	8001a84 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800474c:	e00e      	b.n	800476c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fabe 	bl	8003cdc <HAL_ADC_ErrorCallback>
}
 8004760:	e004      	b.n	800476c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	4798      	blx	r3
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff fa96 	bl	8003cb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ae:	f043 0204 	orr.w	r2, r3, #4
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f7ff fa90 	bl	8003cdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <LL_ADC_IsEnabled>:
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <LL_ADC_IsEnabled+0x18>
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <LL_ADC_IsEnabled+0x1a>
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <LL_ADC_REG_IsConversionOngoing>:
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d101      	bne.n	8004802 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b0a1      	sub	sp, #132	@ 0x84
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800488e:	2302      	movs	r3, #2
 8004890:	e0e7      	b.n	8004a62 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800489a:	2300      	movs	r3, #0
 800489c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800489e:	2300      	movs	r3, #0
 80048a0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048aa:	d102      	bne.n	80048b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80048ac:	4b6f      	ldr	r3, [pc, #444]	@ (8004a6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	e009      	b.n	80048c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a6e      	ldr	r2, [pc, #440]	@ (8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d102      	bne.n	80048c2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80048bc:	4b6d      	ldr	r3, [pc, #436]	@ (8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	e001      	b.n	80048c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0be      	b.n	8004a62 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff ff7f 	bl	80047ea <LL_ADC_REG_IsConversionOngoing>
 80048ec:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff ff79 	bl	80047ea <LL_ADC_REG_IsConversionOngoing>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f040 80a0 	bne.w	8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004900:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004902:	2b00      	cmp	r3, #0
 8004904:	f040 809c 	bne.w	8004a40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004910:	d004      	beq.n	800491c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a55      	ldr	r2, [pc, #340]	@ (8004a6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d101      	bne.n	8004920 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800491c:	4b56      	ldr	r3, [pc, #344]	@ (8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800491e:	e000      	b.n	8004922 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004920:	4b56      	ldr	r3, [pc, #344]	@ (8004a7c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004922:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d04b      	beq.n	80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800492c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	6859      	ldr	r1, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800493e:	035b      	lsls	r3, r3, #13
 8004940:	430b      	orrs	r3, r1
 8004942:	431a      	orrs	r2, r3
 8004944:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004946:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004950:	d004      	beq.n	800495c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a45      	ldr	r2, [pc, #276]	@ (8004a6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d10f      	bne.n	800497c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800495c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004960:	f7ff ff30 	bl	80047c4 <LL_ADC_IsEnabled>
 8004964:	4604      	mov	r4, r0
 8004966:	4841      	ldr	r0, [pc, #260]	@ (8004a6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004968:	f7ff ff2c 	bl	80047c4 <LL_ADC_IsEnabled>
 800496c:	4603      	mov	r3, r0
 800496e:	4323      	orrs	r3, r4
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf0c      	ite	eq
 8004974:	2301      	moveq	r3, #1
 8004976:	2300      	movne	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e012      	b.n	80049a2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800497c:	483c      	ldr	r0, [pc, #240]	@ (8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800497e:	f7ff ff21 	bl	80047c4 <LL_ADC_IsEnabled>
 8004982:	4604      	mov	r4, r0
 8004984:	483b      	ldr	r0, [pc, #236]	@ (8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004986:	f7ff ff1d 	bl	80047c4 <LL_ADC_IsEnabled>
 800498a:	4603      	mov	r3, r0
 800498c:	431c      	orrs	r4, r3
 800498e:	483c      	ldr	r0, [pc, #240]	@ (8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004990:	f7ff ff18 	bl	80047c4 <LL_ADC_IsEnabled>
 8004994:	4603      	mov	r3, r0
 8004996:	4323      	orrs	r3, r4
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d056      	beq.n	8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80049a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80049ae:	f023 030f 	bic.w	r3, r3, #15
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	6811      	ldr	r1, [r2, #0]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	6892      	ldr	r2, [r2, #8]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	431a      	orrs	r2, r3
 80049be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049c0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049c2:	e047      	b.n	8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049d8:	d004      	beq.n	80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a23      	ldr	r2, [pc, #140]	@ (8004a6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10f      	bne.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80049e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80049e8:	f7ff feec 	bl	80047c4 <LL_ADC_IsEnabled>
 80049ec:	4604      	mov	r4, r0
 80049ee:	481f      	ldr	r0, [pc, #124]	@ (8004a6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049f0:	f7ff fee8 	bl	80047c4 <LL_ADC_IsEnabled>
 80049f4:	4603      	mov	r3, r0
 80049f6:	4323      	orrs	r3, r4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e012      	b.n	8004a2a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004a04:	481a      	ldr	r0, [pc, #104]	@ (8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a06:	f7ff fedd 	bl	80047c4 <LL_ADC_IsEnabled>
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4819      	ldr	r0, [pc, #100]	@ (8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a0e:	f7ff fed9 	bl	80047c4 <LL_ADC_IsEnabled>
 8004a12:	4603      	mov	r3, r0
 8004a14:	431c      	orrs	r4, r3
 8004a16:	481a      	ldr	r0, [pc, #104]	@ (8004a80 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a18:	f7ff fed4 	bl	80047c4 <LL_ADC_IsEnabled>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4323      	orrs	r3, r4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d012      	beq.n	8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a36:	f023 030f 	bic.w	r3, r3, #15
 8004a3a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004a3c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a3e:	e009      	b.n	8004a54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004a52:	e000      	b.n	8004a56 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3784      	adds	r7, #132	@ 0x84
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd90      	pop	{r4, r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	50000100 	.word	0x50000100
 8004a70:	50000400 	.word	0x50000400
 8004a74:	50000500 	.word	0x50000500
 8004a78:	50000300 	.word	0x50000300
 8004a7c:	50000700 	.word	0x50000700
 8004a80:	50000600 	.word	0x50000600

08004a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ab6:	4a04      	ldr	r2, [pc, #16]	@ (8004ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	60d3      	str	r3, [r2, #12]
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ad0:	4b04      	ldr	r3, [pc, #16]	@ (8004ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	0a1b      	lsrs	r3, r3, #8
 8004ad6:	f003 0307 	and.w	r3, r3, #7
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000ed00 	.word	0xe000ed00

08004ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	db0b      	blt.n	8004b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	f003 021f 	and.w	r2, r3, #31
 8004b00:	4907      	ldr	r1, [pc, #28]	@ (8004b20 <__NVIC_EnableIRQ+0x38>)
 8004b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	2001      	movs	r0, #1
 8004b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000e100 	.word	0xe000e100

08004b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	6039      	str	r1, [r7, #0]
 8004b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	db0a      	blt.n	8004b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	490c      	ldr	r1, [pc, #48]	@ (8004b70 <__NVIC_SetPriority+0x4c>)
 8004b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b42:	0112      	lsls	r2, r2, #4
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	440b      	add	r3, r1
 8004b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b4c:	e00a      	b.n	8004b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	4908      	ldr	r1, [pc, #32]	@ (8004b74 <__NVIC_SetPriority+0x50>)
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	3b04      	subs	r3, #4
 8004b5c:	0112      	lsls	r2, r2, #4
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	440b      	add	r3, r1
 8004b62:	761a      	strb	r2, [r3, #24]
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	e000e100 	.word	0xe000e100
 8004b74:	e000ed00 	.word	0xe000ed00

08004b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b089      	sub	sp, #36	@ 0x24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f1c3 0307 	rsb	r3, r3, #7
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	bf28      	it	cs
 8004b96:	2304      	movcs	r3, #4
 8004b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	2b06      	cmp	r3, #6
 8004ba0:	d902      	bls.n	8004ba8 <NVIC_EncodePriority+0x30>
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	3b03      	subs	r3, #3
 8004ba6:	e000      	b.n	8004baa <NVIC_EncodePriority+0x32>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	401a      	ands	r2, r3
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bca:	43d9      	mvns	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd0:	4313      	orrs	r3, r2
         );
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3724      	adds	r7, #36	@ 0x24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff ff4c 	bl	8004a84 <__NVIC_SetPriorityGrouping>
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c02:	f7ff ff63 	bl	8004acc <__NVIC_GetPriorityGrouping>
 8004c06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	6978      	ldr	r0, [r7, #20]
 8004c0e:	f7ff ffb3 	bl	8004b78 <NVIC_EncodePriority>
 8004c12:	4602      	mov	r2, r0
 8004c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff ff82 	bl	8004b24 <__NVIC_SetPriority>
}
 8004c20:	bf00      	nop
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff ff56 	bl	8004ae8 <__NVIC_EnableIRQ>
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e054      	b.n	8004d00 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7f5b      	ldrb	r3, [r3, #29]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fc f80a 	bl	8000c80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	791b      	ldrb	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10c      	bne.n	8004c94 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a22      	ldr	r2, [pc, #136]	@ (8004d08 <HAL_CRC_Init+0xc4>)
 8004c80:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0218 	bic.w	r2, r2, #24
 8004c90:	609a      	str	r2, [r3, #8]
 8004c92:	e00c      	b.n	8004cae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6899      	ldr	r1, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f834 	bl	8004d0c <HAL_CRCEx_Polynomial_Set>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e028      	b.n	8004d00 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	795b      	ldrb	r3, [r3, #5]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d105      	bne.n	8004cc2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f04f 32ff 	mov.w	r2, #4294967295
 8004cbe:	611a      	str	r2, [r3, #16]
 8004cc0:	e004      	b.n	8004ccc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6912      	ldr	r2, [r2, #16]
 8004cca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	04c11db7 	.word	0x04c11db7

08004d0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004d1c:	231f      	movs	r3, #31
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
 8004d2e:	e063      	b.n	8004df8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004d30:	bf00      	nop
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1e5a      	subs	r2, r3, #1
 8004d36:	613a      	str	r2, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d009      	beq.n	8004d50 <HAL_CRCEx_Polynomial_Set+0x44>
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b18      	cmp	r3, #24
 8004d54:	d846      	bhi.n	8004de4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004d56:	a201      	add	r2, pc, #4	@ (adr r2, 8004d5c <HAL_CRCEx_Polynomial_Set+0x50>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004deb 	.word	0x08004deb
 8004d60:	08004de5 	.word	0x08004de5
 8004d64:	08004de5 	.word	0x08004de5
 8004d68:	08004de5 	.word	0x08004de5
 8004d6c:	08004de5 	.word	0x08004de5
 8004d70:	08004de5 	.word	0x08004de5
 8004d74:	08004de5 	.word	0x08004de5
 8004d78:	08004de5 	.word	0x08004de5
 8004d7c:	08004dd9 	.word	0x08004dd9
 8004d80:	08004de5 	.word	0x08004de5
 8004d84:	08004de5 	.word	0x08004de5
 8004d88:	08004de5 	.word	0x08004de5
 8004d8c:	08004de5 	.word	0x08004de5
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004de5 	.word	0x08004de5
 8004d98:	08004de5 	.word	0x08004de5
 8004d9c:	08004dcd 	.word	0x08004dcd
 8004da0:	08004de5 	.word	0x08004de5
 8004da4:	08004de5 	.word	0x08004de5
 8004da8:	08004de5 	.word	0x08004de5
 8004dac:	08004de5 	.word	0x08004de5
 8004db0:	08004de5 	.word	0x08004de5
 8004db4:	08004de5 	.word	0x08004de5
 8004db8:	08004de5 	.word	0x08004de5
 8004dbc:	08004dc1 	.word	0x08004dc1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	2b06      	cmp	r3, #6
 8004dc4:	d913      	bls.n	8004dee <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004dca:	e010      	b.n	8004dee <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b07      	cmp	r3, #7
 8004dd0:	d90f      	bls.n	8004df2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004dd6:	e00c      	b.n	8004df2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2b0f      	cmp	r3, #15
 8004ddc:	d90b      	bls.n	8004df6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004de2:	e008      	b.n	8004df6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	75fb      	strb	r3, [r7, #23]
        break;
 8004de8:	e006      	b.n	8004df8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004dea:	bf00      	nop
 8004dec:	e004      	b.n	8004df8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004dee:	bf00      	nop
 8004df0:	e002      	b.n	8004df8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004df2:	bf00      	nop
 8004df4:	e000      	b.n	8004df8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004df6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f023 0118 	bic.w	r1, r3, #24
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e08d      	b.n	8004f56 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_DMA_Init+0x138>)
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d80f      	bhi.n	8004e66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4b45      	ldr	r3, [pc, #276]	@ (8004f64 <HAL_DMA_Init+0x13c>)
 8004e4e:	4413      	add	r3, r2
 8004e50:	4a45      	ldr	r2, [pc, #276]	@ (8004f68 <HAL_DMA_Init+0x140>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	091b      	lsrs	r3, r3, #4
 8004e58:	009a      	lsls	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a42      	ldr	r2, [pc, #264]	@ (8004f6c <HAL_DMA_Init+0x144>)
 8004e62:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e64:	e00e      	b.n	8004e84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4b40      	ldr	r3, [pc, #256]	@ (8004f70 <HAL_DMA_Init+0x148>)
 8004e6e:	4413      	add	r3, r2
 8004e70:	4a3d      	ldr	r2, [pc, #244]	@ (8004f68 <HAL_DMA_Init+0x140>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	091b      	lsrs	r3, r3, #4
 8004e78:	009a      	lsls	r2, r3, #2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a3c      	ldr	r2, [pc, #240]	@ (8004f74 <HAL_DMA_Init+0x14c>)
 8004e82:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fa2c 	bl	8005334 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ee4:	d102      	bne.n	8004eec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f00:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d010      	beq.n	8004f2c <HAL_DMA_Init+0x104>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d80c      	bhi.n	8004f2c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa4c 	bl	80053b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	e008      	b.n	8004f3e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40020407 	.word	0x40020407
 8004f64:	bffdfff8 	.word	0xbffdfff8
 8004f68:	cccccccd 	.word	0xcccccccd
 8004f6c:	40020000 	.word	0x40020000
 8004f70:	bffdfbf8 	.word	0xbffdfbf8
 8004f74:	40020400 	.word	0x40020400

08004f78 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_DMA_Start_IT+0x20>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e066      	b.n	8005066 <HAL_DMA_Start_IT+0xee>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d155      	bne.n	8005058 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0201 	bic.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f970 	bl	80052b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d008      	beq.n	8004ff0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 020e 	orr.w	r2, r2, #14
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e00f      	b.n	8005010 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0204 	bic.w	r2, r2, #4
 8004ffe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 020a 	orr.w	r2, r2, #10
 800500e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005028:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800502c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005040:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005044:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e005      	b.n	8005064 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005060:	2302      	movs	r3, #2
 8005062:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005064:	7dfb      	ldrb	r3, [r7, #23]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d00d      	beq.n	80050a2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2204      	movs	r2, #4
 800508a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
 80050a0:	e047      	b.n	8005132 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 020e 	bic.w	r2, r2, #14
 80050b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f003 021f 	and.w	r2, r3, #31
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050de:	2101      	movs	r1, #1
 80050e0:	fa01 f202 	lsl.w	r2, r1, r2
 80050e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80050ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00c      	beq.n	8005112 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005102:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005106:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005110:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
    }
  }
  return status;
 8005132:	7bfb      	ldrb	r3, [r7, #15]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	2204      	movs	r2, #4
 800515e:	409a      	lsls	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d026      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x7a>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b00      	cmp	r3, #0
 8005170:	d021      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d107      	bne.n	8005190 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0204 	bic.w	r2, r2, #4
 800518e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005194:	f003 021f 	and.w	r2, r3, #31
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519c:	2104      	movs	r1, #4
 800519e:	fa01 f202 	lsl.w	r2, r1, r2
 80051a2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d071      	beq.n	8005290 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80051b4:	e06c      	b.n	8005290 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	2202      	movs	r2, #2
 80051c0:	409a      	lsls	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d02e      	beq.n	8005228 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d029      	beq.n	8005228 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10b      	bne.n	80051fa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 020a 	bic.w	r2, r2, #10
 80051f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fe:	f003 021f 	and.w	r2, r3, #31
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	2102      	movs	r1, #2
 8005208:	fa01 f202 	lsl.w	r2, r1, r2
 800520c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d038      	beq.n	8005290 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005226:	e033      	b.n	8005290 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2208      	movs	r2, #8
 8005232:	409a      	lsls	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4013      	ands	r3, r2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d02a      	beq.n	8005292 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d025      	beq.n	8005292 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 020e 	bic.w	r2, r2, #14
 8005254:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800525a:	f003 021f 	and.w	r2, r3, #31
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	2101      	movs	r1, #1
 8005264:	fa01 f202 	lsl.w	r2, r1, r2
 8005268:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005284:	2b00      	cmp	r3, #0
 8005286:	d004      	beq.n	8005292 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005290:	bf00      	nop
 8005292:	bf00      	nop
}
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052a8:	b2db      	uxtb	r3, r3
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052cc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d004      	beq.n	80052e0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80052de:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e4:	f003 021f 	and.w	r2, r3, #31
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	2101      	movs	r1, #1
 80052ee:	fa01 f202 	lsl.w	r2, r1, r2
 80052f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b10      	cmp	r3, #16
 8005302:	d108      	bne.n	8005316 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005314:	e007      	b.n	8005326 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	60da      	str	r2, [r3, #12]
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	4b16      	ldr	r3, [pc, #88]	@ (800539c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005344:	429a      	cmp	r2, r3
 8005346:	d802      	bhi.n	800534e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005348:	4b15      	ldr	r3, [pc, #84]	@ (80053a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e001      	b.n	8005352 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800534e:	4b15      	ldr	r3, [pc, #84]	@ (80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005350:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	3b08      	subs	r3, #8
 800535e:	4a12      	ldr	r2, [pc, #72]	@ (80053a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005360:	fba2 2303 	umull	r2, r3, r2, r3
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536c:	089b      	lsrs	r3, r3, #2
 800536e:	009a      	lsls	r2, r3, #2
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4413      	add	r3, r2
 8005374:	461a      	mov	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a0b      	ldr	r2, [pc, #44]	@ (80053ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800537e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	2201      	movs	r2, #1
 8005388:	409a      	lsls	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40020407 	.word	0x40020407
 80053a0:	40020800 	.word	0x40020800
 80053a4:	40020820 	.word	0x40020820
 80053a8:	cccccccd 	.word	0xcccccccd
 80053ac:	40020880 	.word	0x40020880

080053b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4b0b      	ldr	r3, [pc, #44]	@ (80053f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	461a      	mov	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a08      	ldr	r2, [pc, #32]	@ (80053f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80053d2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	2201      	movs	r2, #1
 80053de:	409a      	lsls	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	1000823f 	.word	0x1000823f
 80053f4:	40020940 	.word	0x40020940

080053f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e147      	b.n	800569a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fb fcc0 	bl	8000da4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0210 	bic.w	r2, r2, #16
 8005432:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005434:	f7fd fcde 	bl	8002df4 <HAL_GetTick>
 8005438:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800543a:	e012      	b.n	8005462 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800543c:	f7fd fcda 	bl	8002df4 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b0a      	cmp	r3, #10
 8005448:	d90b      	bls.n	8005462 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800544e:	f043 0201 	orr.w	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2203      	movs	r2, #3
 800545a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e11b      	b.n	800569a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b08      	cmp	r3, #8
 800546e:	d0e5      	beq.n	800543c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005480:	f7fd fcb8 	bl	8002df4 <HAL_GetTick>
 8005484:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005486:	e012      	b.n	80054ae <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005488:	f7fd fcb4 	bl	8002df4 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b0a      	cmp	r3, #10
 8005494:	d90b      	bls.n	80054ae <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800549a:	f043 0201 	orr.w	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2203      	movs	r2, #3
 80054a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e0f5      	b.n	800569a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0e5      	beq.n	8005488 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0202 	orr.w	r2, r2, #2
 80054ca:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a74      	ldr	r2, [pc, #464]	@ (80056a4 <HAL_FDCAN_Init+0x2ac>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d103      	bne.n	80054de <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80054d6:	4a74      	ldr	r2, [pc, #464]	@ (80056a8 <HAL_FDCAN_Init+0x2b0>)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	7c1b      	ldrb	r3, [r3, #16]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d108      	bne.n	80054f8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054f4:	619a      	str	r2, [r3, #24]
 80054f6:	e007      	b.n	8005508 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005506:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	7c5b      	ldrb	r3, [r3, #17]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d108      	bne.n	8005522 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800551e:	619a      	str	r2, [r3, #24]
 8005520:	e007      	b.n	8005532 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005530:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	7c9b      	ldrb	r3, [r3, #18]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d108      	bne.n	800554c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005548:	619a      	str	r2, [r3, #24]
 800554a:	e007      	b.n	800555c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800555a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699a      	ldr	r2, [r3, #24]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005580:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0210 	bic.w	r2, r2, #16
 8005590:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d108      	bne.n	80055ac <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0204 	orr.w	r2, r2, #4
 80055a8:	619a      	str	r2, [r3, #24]
 80055aa:	e02c      	b.n	8005606 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d028      	beq.n	8005606 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d01c      	beq.n	80055f6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80055ca:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0210 	orr.w	r2, r2, #16
 80055da:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d110      	bne.n	8005606 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0220 	orr.w	r2, r2, #32
 80055f2:	619a      	str	r2, [r3, #24]
 80055f4:	e007      	b.n	8005606 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699a      	ldr	r2, [r3, #24]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0220 	orr.w	r2, r2, #32
 8005604:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	3b01      	subs	r3, #1
 800560c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	3b01      	subs	r3, #1
 8005614:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005616:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800561e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	3b01      	subs	r3, #1
 8005628:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800562e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005630:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800563a:	d115      	bne.n	8005668 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005640:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005646:	3b01      	subs	r3, #1
 8005648:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800564a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005650:	3b01      	subs	r3, #1
 8005652:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005654:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	3b01      	subs	r3, #1
 800565e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005664:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005666:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fa1a 	bl	8005ab8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40006400 	.word	0x40006400
 80056a8:	40006500 	.word	0x40006500

080056ac <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d110      	bne.n	80056e2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0201 	bic.w	r2, r2, #1
 80056d6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	e006      	b.n	80056f0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e6:	f043 0204 	orr.w	r2, r3, #4
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
  }
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d12c      	bne.n	800576e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800571c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d007      	beq.n	8005734 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005728:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e023      	b.n	800577c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800573c:	0c1b      	lsrs	r3, r3, #16
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 fa20 	bl	8005b90 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2101      	movs	r1, #1
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	fa01 f202 	lsl.w	r2, r1, r2
 800575c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005760:	2201      	movs	r2, #1
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	409a      	lsls	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	e006      	b.n	800577c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005772:	f043 0208 	orr.w	r2, r3, #8
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
  }
}
 800577c:	4618      	mov	r0, r3
 800577e:	3718      	adds	r7, #24
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08c      	sub	sp, #48	@ 0x30
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005792:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800579e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a0:	4013      	ands	r3, r2
 80057a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057b8:	4013      	ands	r3, r2
 80057ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d0:	4013      	ands	r3, r2
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057da:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80057de:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e6:	6a3a      	ldr	r2, [r7, #32]
 80057e8:	4013      	ands	r3, r2
 80057ea:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80057f6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	4013      	ands	r3, r2
 8005802:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005812:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d006      	beq.n	8005836 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2240      	movs	r2, #64	@ 0x40
 800582e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f921 	bl	8005a78 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d019      	beq.n	8005874 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d014      	beq.n	8005874 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005852:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4013      	ands	r3, r2
 8005860:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800586a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800586c:	6939      	ldr	r1, [r7, #16]
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f8e3 	bl	8005a3a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005880:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f8a2 	bl	80059ce <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005896:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f8a2 	bl	80059e4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d007      	beq.n	80058b6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058ac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80058ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f8a2 	bl	80059fa <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00c      	beq.n	80058da <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f89b 	bl	8005a10 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d013      	beq.n	8005916 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80058f6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4013      	ands	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2280      	movs	r2, #128	@ 0x80
 800590c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800590e:	68f9      	ldr	r1, [r7, #12]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f887 	bl	8005a24 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00c      	beq.n	800593a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005932:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f88b 	bl	8005a50 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00c      	beq.n	800595e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d007      	beq.n	800595e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005956:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f883 	bl	8005a64 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00f      	beq.n	8005988 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800597a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005980:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d007      	beq.n	800599e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005996:	69f9      	ldr	r1, [r7, #28]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f881 	bl	8005aa0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d009      	beq.n	80059b8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6a3a      	ldr	r2, [r7, #32]
 80059aa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f863 	bl	8005a8c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80059c6:	bf00      	nop
 80059c8:	3730      	adds	r7, #48	@ 0x30
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005ac0:	4b30      	ldr	r3, [pc, #192]	@ (8005b84 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005ac2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8005b88 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d103      	bne.n	8005ad6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005ad4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2c      	ldr	r2, [pc, #176]	@ (8005b8c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d103      	bne.n	8005ae8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8005ae6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005afe:	041a      	lsls	r2, r3, #16
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b1c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b24:	061a      	lsls	r2, r3, #24
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	e005      	b.n	8005b6a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3304      	adds	r3, #4
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d3f3      	bcc.n	8005b5e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	4000a400 	.word	0x4000a400
 8005b88:	40006800 	.word	0x40006800
 8005b8c:	40006c00 	.word	0x40006c00

08005b90 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b089      	sub	sp, #36	@ 0x24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005bae:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	e00a      	b.n	8005bd2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005bc4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005bca:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005bcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bd0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005bdc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005be2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005be8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	4413      	add	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	440b      	add	r3, r1
 8005c04:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e020      	b.n	8005c66 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	3303      	adds	r3, #3
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	3302      	adds	r3, #2
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	440b      	add	r3, r1
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c3c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	3301      	adds	r3, #1
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	440b      	add	r3, r1
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005c4a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	440a      	add	r2, r1
 8005c52:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005c54:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3304      	adds	r3, #4
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	4a06      	ldr	r2, [pc, #24]	@ (8005c84 <FDCAN_CopyMessageToRAM+0xf4>)
 8005c6c:	5cd3      	ldrb	r3, [r2, r3]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d3d6      	bcc.n	8005c24 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8005c76:	bf00      	nop
 8005c78:	bf00      	nop
 8005c7a:	3724      	adds	r7, #36	@ 0x24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	0800d564 	.word	0x0800d564

08005c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c96:	e15a      	b.n	8005f4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 814c 	beq.w	8005f48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d005      	beq.n	8005cc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d130      	bne.n	8005d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cfe:	2201      	movs	r2, #1
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	43db      	mvns	r3, r3
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	091b      	lsrs	r3, r3, #4
 8005d14:	f003 0201 	and.w	r2, r3, #1
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d017      	beq.n	8005d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	2203      	movs	r2, #3
 8005d42:	fa02 f303 	lsl.w	r3, r2, r3
 8005d46:	43db      	mvns	r3, r3
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d123      	bne.n	8005dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	08da      	lsrs	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3208      	adds	r2, #8
 8005d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	220f      	movs	r2, #15
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	4013      	ands	r3, r2
 8005d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	fa02 f303 	lsl.w	r3, r2, r3
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	08da      	lsrs	r2, r3, #3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3208      	adds	r2, #8
 8005db4:	6939      	ldr	r1, [r7, #16]
 8005db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f003 0203 	and.w	r2, r3, #3
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 80a6 	beq.w	8005f48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dfc:	4b5b      	ldr	r3, [pc, #364]	@ (8005f6c <HAL_GPIO_Init+0x2e4>)
 8005dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e00:	4a5a      	ldr	r2, [pc, #360]	@ (8005f6c <HAL_GPIO_Init+0x2e4>)
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e08:	4b58      	ldr	r3, [pc, #352]	@ (8005f6c <HAL_GPIO_Init+0x2e4>)
 8005e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e14:	4a56      	ldr	r2, [pc, #344]	@ (8005f70 <HAL_GPIO_Init+0x2e8>)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	089b      	lsrs	r3, r3, #2
 8005e1a:	3302      	adds	r3, #2
 8005e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	220f      	movs	r2, #15
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	43db      	mvns	r3, r3
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4013      	ands	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e3e:	d01f      	beq.n	8005e80 <HAL_GPIO_Init+0x1f8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a4c      	ldr	r2, [pc, #304]	@ (8005f74 <HAL_GPIO_Init+0x2ec>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d019      	beq.n	8005e7c <HAL_GPIO_Init+0x1f4>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a4b      	ldr	r2, [pc, #300]	@ (8005f78 <HAL_GPIO_Init+0x2f0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d013      	beq.n	8005e78 <HAL_GPIO_Init+0x1f0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a4a      	ldr	r2, [pc, #296]	@ (8005f7c <HAL_GPIO_Init+0x2f4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00d      	beq.n	8005e74 <HAL_GPIO_Init+0x1ec>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a49      	ldr	r2, [pc, #292]	@ (8005f80 <HAL_GPIO_Init+0x2f8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d007      	beq.n	8005e70 <HAL_GPIO_Init+0x1e8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a48      	ldr	r2, [pc, #288]	@ (8005f84 <HAL_GPIO_Init+0x2fc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d101      	bne.n	8005e6c <HAL_GPIO_Init+0x1e4>
 8005e68:	2305      	movs	r3, #5
 8005e6a:	e00a      	b.n	8005e82 <HAL_GPIO_Init+0x1fa>
 8005e6c:	2306      	movs	r3, #6
 8005e6e:	e008      	b.n	8005e82 <HAL_GPIO_Init+0x1fa>
 8005e70:	2304      	movs	r3, #4
 8005e72:	e006      	b.n	8005e82 <HAL_GPIO_Init+0x1fa>
 8005e74:	2303      	movs	r3, #3
 8005e76:	e004      	b.n	8005e82 <HAL_GPIO_Init+0x1fa>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e002      	b.n	8005e82 <HAL_GPIO_Init+0x1fa>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <HAL_GPIO_Init+0x1fa>
 8005e80:	2300      	movs	r3, #0
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	f002 0203 	and.w	r2, r2, #3
 8005e88:	0092      	lsls	r2, r2, #2
 8005e8a:	4093      	lsls	r3, r2
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e92:	4937      	ldr	r1, [pc, #220]	@ (8005f70 <HAL_GPIO_Init+0x2e8>)
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	089b      	lsrs	r3, r3, #2
 8005e98:	3302      	adds	r3, #2
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ea0:	4b39      	ldr	r3, [pc, #228]	@ (8005f88 <HAL_GPIO_Init+0x300>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4013      	ands	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ec4:	4a30      	ldr	r2, [pc, #192]	@ (8005f88 <HAL_GPIO_Init+0x300>)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005eca:	4b2f      	ldr	r3, [pc, #188]	@ (8005f88 <HAL_GPIO_Init+0x300>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005eee:	4a26      	ldr	r2, [pc, #152]	@ (8005f88 <HAL_GPIO_Init+0x300>)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005ef4:	4b24      	ldr	r3, [pc, #144]	@ (8005f88 <HAL_GPIO_Init+0x300>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4013      	ands	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f18:	4a1b      	ldr	r2, [pc, #108]	@ (8005f88 <HAL_GPIO_Init+0x300>)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005f88 <HAL_GPIO_Init+0x300>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	43db      	mvns	r3, r3
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f42:	4a11      	ldr	r2, [pc, #68]	@ (8005f88 <HAL_GPIO_Init+0x300>)
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f47f ae9d 	bne.w	8005c98 <HAL_GPIO_Init+0x10>
  }
}
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40010000 	.word	0x40010000
 8005f74:	48000400 	.word	0x48000400
 8005f78:	48000800 	.word	0x48000800
 8005f7c:	48000c00 	.word	0x48000c00
 8005f80:	48001000 	.word	0x48001000
 8005f84:	48001400 	.word	0x48001400
 8005f88:	40010400 	.word	0x40010400

08005f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	807b      	strh	r3, [r7, #2]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f9c:	787b      	ldrb	r3, [r7, #1]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005fa2:	887a      	ldrh	r2, [r7, #2]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005fa8:	e002      	b.n	8005fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005faa:	887a      	ldrh	r2, [r7, #2]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005fce:	887a      	ldrh	r2, [r7, #2]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	041a      	lsls	r2, r3, #16
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	43d9      	mvns	r1, r3
 8005fda:	887b      	ldrh	r3, [r7, #2]
 8005fdc:	400b      	ands	r3, r1
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	619a      	str	r2, [r3, #24]
}
 8005fe4:	bf00      	nop
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ffa:	4b08      	ldr	r3, [pc, #32]	@ (800601c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ffc:	695a      	ldr	r2, [r3, #20]
 8005ffe:	88fb      	ldrh	r3, [r7, #6]
 8006000:	4013      	ands	r3, r2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d006      	beq.n	8006014 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006006:	4a05      	ldr	r2, [pc, #20]	@ (800601c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800600c:	88fb      	ldrh	r3, [r7, #6]
 800600e:	4618      	mov	r0, r3
 8006010:	f7fc faf8 	bl	8002604 <HAL_GPIO_EXTI_Callback>
  }
}
 8006014:	bf00      	nop
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40010400 	.word	0x40010400

08006020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e08d      	b.n	800614e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fb f88e 	bl	8001168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2224      	movs	r2, #36	@ 0x24
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006070:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006080:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d107      	bne.n	800609a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006096:	609a      	str	r2, [r3, #8]
 8006098:	e006      	b.n	80060a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80060a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d108      	bne.n	80060c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060be:	605a      	str	r2, [r3, #4]
 80060c0:	e007      	b.n	80060d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80060e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	69d9      	ldr	r1, [r3, #28]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1a      	ldr	r2, [r3, #32]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	430a      	orrs	r2, r1
 800611e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af02      	add	r7, sp, #8
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	607a      	str	r2, [r7, #4]
 8006162:	461a      	mov	r2, r3
 8006164:	460b      	mov	r3, r1
 8006166:	817b      	strh	r3, [r7, #10]
 8006168:	4613      	mov	r3, r2
 800616a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b20      	cmp	r3, #32
 8006176:	d17c      	bne.n	8006272 <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006186:	d101      	bne.n	800618c <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8006188:	2302      	movs	r3, #2
 800618a:	e073      	b.n	8006274 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_I2C_Master_Transmit_IT+0x42>
 8006196:	2302      	movs	r3, #2
 8006198:	e06c      	b.n	8006274 <HAL_I2C_Master_Transmit_IT+0x11c>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2221      	movs	r2, #33	@ 0x21
 80061a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2210      	movs	r2, #16
 80061ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	893a      	ldrh	r2, [r7, #8]
 80061c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4a2d      	ldr	r2, [pc, #180]	@ (800627c <HAL_I2C_Master_Transmit_IT+0x124>)
 80061c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a2c      	ldr	r2, [pc, #176]	@ (8006280 <HAL_I2C_Master_Transmit_IT+0x128>)
 80061ce:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2bff      	cmp	r3, #255	@ 0xff
 80061d8:	d906      	bls.n	80061e8 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	22ff      	movs	r2, #255	@ 0xff
 80061de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80061e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	e007      	b.n	80061f8 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80061f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061f6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d024      	beq.n	800624a <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006204:	781a      	ldrb	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006234:	b2db      	uxtb	r3, r3
 8006236:	3301      	adds	r3, #1
 8006238:	b2da      	uxtb	r2, r3
 800623a:	8979      	ldrh	r1, [r7, #10]
 800623c:	4b11      	ldr	r3, [pc, #68]	@ (8006284 <HAL_I2C_Master_Transmit_IT+0x12c>)
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f001 fd0a 	bl	8007c5c <I2C_TransferConfig>
 8006248:	e009      	b.n	800625e <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800624e:	b2da      	uxtb	r2, r3
 8006250:	8979      	ldrh	r1, [r7, #10]
 8006252:	4b0c      	ldr	r3, [pc, #48]	@ (8006284 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f001 fcff 	bl	8007c5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006266:	2101      	movs	r1, #1
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f001 fd29 	bl	8007cc0 <I2C_Enable_IRQ>

    return HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	e000      	b.n	8006274 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006272:	2302      	movs	r3, #2
  }
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	ffff0000 	.word	0xffff0000
 8006280:	08006613 	.word	0x08006613
 8006284:	80002000 	.word	0x80002000

08006288 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	4608      	mov	r0, r1
 8006292:	4611      	mov	r1, r2
 8006294:	461a      	mov	r2, r3
 8006296:	4603      	mov	r3, r0
 8006298:	817b      	strh	r3, [r7, #10]
 800629a:	460b      	mov	r3, r1
 800629c:	813b      	strh	r3, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d16a      	bne.n	8006384 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_I2C_Mem_Write_IT+0x32>
 80062b4:	8bbb      	ldrh	r3, [r7, #28]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d105      	bne.n	80062c6 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062c0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e05f      	b.n	8006386 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062d4:	d101      	bne.n	80062da <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 80062d6:	2302      	movs	r3, #2
 80062d8:	e055      	b.n	8006386 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_I2C_Mem_Write_IT+0x60>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e04e      	b.n	8006386 <HAL_I2C_Mem_Write_IT+0xfe>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2221      	movs	r2, #33	@ 0x21
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2240      	movs	r2, #64	@ 0x40
 80062fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8bba      	ldrh	r2, [r7, #28]
 8006316:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4a1d      	ldr	r2, [pc, #116]	@ (8006390 <HAL_I2C_Mem_Write_IT+0x108>)
 800631c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4a1c      	ldr	r2, [pc, #112]	@ (8006394 <HAL_I2C_Mem_Write_IT+0x10c>)
 8006322:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8006324:	897a      	ldrh	r2, [r7, #10]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d109      	bne.n	8006344 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006330:	893b      	ldrh	r3, [r7, #8]
 8006332:	b2da      	uxtb	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f04f 32ff 	mov.w	r2, #4294967295
 8006340:	651a      	str	r2, [r3, #80]	@ 0x50
 8006342:	e00b      	b.n	800635c <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006344:	893b      	ldrh	r3, [r7, #8]
 8006346:	0a1b      	lsrs	r3, r3, #8
 8006348:	b29b      	uxth	r3, r3
 800634a:	b2da      	uxtb	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8006352:	893b      	ldrh	r3, [r7, #8]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	461a      	mov	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800635c:	88fb      	ldrh	r3, [r7, #6]
 800635e:	b2da      	uxtb	r2, r3
 8006360:	8979      	ldrh	r1, [r7, #10]
 8006362:	4b0d      	ldr	r3, [pc, #52]	@ (8006398 <HAL_I2C_Mem_Write_IT+0x110>)
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f001 fc76 	bl	8007c5c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006378:	2101      	movs	r1, #1
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f001 fca0 	bl	8007cc0 <I2C_Enable_IRQ>

    return HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	e000      	b.n	8006386 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006384:	2302      	movs	r3, #2
  }
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	ffff0000 	.word	0xffff0000
 8006394:	08006861 	.word	0x08006861
 8006398:	80002000 	.word	0x80002000

0800639c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	4608      	mov	r0, r1
 80063a6:	4611      	mov	r1, r2
 80063a8:	461a      	mov	r2, r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	817b      	strh	r3, [r7, #10]
 80063ae:	460b      	mov	r3, r1
 80063b0:	813b      	strh	r3, [r7, #8]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d166      	bne.n	8006490 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_I2C_Mem_Read_IT+0x32>
 80063c8:	8bbb      	ldrh	r3, [r7, #28]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063d4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e05b      	b.n	8006492 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063e8:	d101      	bne.n	80063ee <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
 80063ec:	e051      	b.n	8006492 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_I2C_Mem_Read_IT+0x60>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e04a      	b.n	8006492 <HAL_I2C_Mem_Read_IT+0xf6>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2222      	movs	r2, #34	@ 0x22
 8006408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2240      	movs	r2, #64	@ 0x40
 8006410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8bba      	ldrh	r2, [r7, #28]
 8006424:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4a1c      	ldr	r2, [pc, #112]	@ (800649c <HAL_I2C_Mem_Read_IT+0x100>)
 800642a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4a1c      	ldr	r2, [pc, #112]	@ (80064a0 <HAL_I2C_Mem_Read_IT+0x104>)
 8006430:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8006432:	897a      	ldrh	r2, [r7, #10]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006438:	88fb      	ldrh	r3, [r7, #6]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d109      	bne.n	8006452 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800643e:	893b      	ldrh	r3, [r7, #8]
 8006440:	b2da      	uxtb	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f04f 32ff 	mov.w	r2, #4294967295
 800644e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006450:	e00b      	b.n	800646a <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006452:	893b      	ldrh	r3, [r7, #8]
 8006454:	0a1b      	lsrs	r3, r3, #8
 8006456:	b29b      	uxth	r3, r3
 8006458:	b2da      	uxtb	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8006460:	893b      	ldrh	r3, [r7, #8]
 8006462:	b2db      	uxtb	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	b2da      	uxtb	r2, r3
 800646e:	8979      	ldrh	r1, [r7, #10]
 8006470:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <HAL_I2C_Mem_Read_IT+0x108>)
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	2300      	movs	r3, #0
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f001 fbf0 	bl	8007c5c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006484:	2101      	movs	r1, #1
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f001 fc1a 	bl	8007cc0 <I2C_Enable_IRQ>

    return HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	e000      	b.n	8006492 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8006490:	2302      	movs	r3, #2
  }
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	ffff0000 	.word	0xffff0000
 80064a0:	08006861 	.word	0x08006861
 80064a4:	80002000 	.word	0x80002000

080064a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	4798      	blx	r3
  }
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00f      	beq.n	800651e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00a      	beq.n	800651e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800650c:	f043 0201 	orr.w	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800651c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00f      	beq.n	8006548 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006536:	f043 0208 	orr.w	r2, r3, #8
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006546:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00f      	beq.n	8006572 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006560:	f043 0202 	orr.w	r2, r3, #2
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006570:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006576:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f003 030b 	and.w	r3, r3, #11
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8006582:	68f9      	ldr	r1, [r7, #12]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 fa0f 	bl	80079a8 <I2C_ITError>
  }
}
 800658a:	bf00      	nop
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b083      	sub	sp, #12
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	460b      	mov	r3, r1
 80065c4:	70fb      	strb	r3, [r7, #3]
 80065c6:	4613      	mov	r3, r2
 80065c8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b088      	sub	sp, #32
 8006616:	af02      	add	r7, sp, #8
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <I2C_Master_ISR_IT+0x1e>
 800662c:	2302      	movs	r3, #2
 800662e:	e113      	b.n	8006858 <I2C_Master_ISR_IT+0x246>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f003 0310 	and.w	r3, r3, #16
 800663e:	2b00      	cmp	r3, #0
 8006640:	d012      	beq.n	8006668 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00d      	beq.n	8006668 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2210      	movs	r2, #16
 8006652:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006658:	f043 0204 	orr.w	r2, r3, #4
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f001 fab8 	bl	8007bd6 <I2C_Flush_TXDR>
 8006666:	e0e4      	b.n	8006832 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	d022      	beq.n	80066b8 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01d      	beq.n	80066b8 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 0304 	bic.w	r3, r3, #4
 8006682:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80066b6:	e0bc      	b.n	8006832 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d128      	bne.n	8006714 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d023      	beq.n	8006714 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01e      	beq.n	8006714 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066da:	b29b      	uxth	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80a8 	beq.w	8006832 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e6:	781a      	ldrb	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006708:	b29b      	uxth	r3, r3
 800670a:	3b01      	subs	r3, #1
 800670c:	b29a      	uxth	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006712:	e08e      	b.n	8006832 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800671a:	2b00      	cmp	r3, #0
 800671c:	d05c      	beq.n	80067d8 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006724:	2b00      	cmp	r3, #0
 8006726:	d057      	beq.n	80067d8 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d040      	beq.n	80067b4 <I2C_Master_ISR_IT+0x1a2>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006736:	2b00      	cmp	r3, #0
 8006738:	d13c      	bne.n	80067b4 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	b29b      	uxth	r3, r3
 8006742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006746:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	2bff      	cmp	r3, #255	@ 0xff
 8006750:	d90e      	bls.n	8006770 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	22ff      	movs	r2, #255	@ 0xff
 8006756:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800675c:	b2da      	uxtb	r2, r3
 800675e:	8a79      	ldrh	r1, [r7, #18]
 8006760:	2300      	movs	r3, #0
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f001 fa77 	bl	8007c5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800676e:	e032      	b.n	80067d6 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006774:	b29a      	uxth	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006782:	d00b      	beq.n	800679c <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006788:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800678e:	8a79      	ldrh	r1, [r7, #18]
 8006790:	2000      	movs	r0, #0
 8006792:	9000      	str	r0, [sp, #0]
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f001 fa61 	bl	8007c5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800679a:	e01c      	b.n	80067d6 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	8a79      	ldrh	r1, [r7, #18]
 80067a4:	2300      	movs	r3, #0
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f001 fa55 	bl	8007c5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067b2:	e010      	b.n	80067d6 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067c2:	d003      	beq.n	80067cc <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fdd6 	bl	8007376 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067ca:	e032      	b.n	8006832 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80067cc:	2140      	movs	r1, #64	@ 0x40
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f001 f8ea 	bl	80079a8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067d4:	e02d      	b.n	8006832 <I2C_Master_ISR_IT+0x220>
 80067d6:	e02c      	b.n	8006832 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d027      	beq.n	8006832 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d022      	beq.n	8006832 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d119      	bne.n	800682a <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006800:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006804:	d015      	beq.n	8006832 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800680e:	d108      	bne.n	8006822 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800681e:	605a      	str	r2, [r3, #4]
 8006820:	e007      	b.n	8006832 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 fda7 	bl	8007376 <I2C_ITMasterSeqCplt>
 8006828:	e003      	b.n	8006832 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800682a:	2140      	movs	r1, #64	@ 0x40
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f001 f8bb 	bl	80079a8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d008      	beq.n	800684e <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006846:	6979      	ldr	r1, [r7, #20]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fe2d 	bl	80074a8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af02      	add	r7, sp, #8
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800686c:	4b8d      	ldr	r3, [pc, #564]	@ (8006aa4 <I2C_Mem_ISR_IT+0x244>)
 800686e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <I2C_Mem_ISR_IT+0x22>
 800687e:	2302      	movs	r3, #2
 8006880:	e10c      	b.n	8006a9c <I2C_Mem_ISR_IT+0x23c>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	d012      	beq.n	80068ba <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00d      	beq.n	80068ba <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2210      	movs	r2, #16
 80068a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068aa:	f043 0204 	orr.w	r2, r3, #4
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f001 f98f 	bl	8007bd6 <I2C_Flush_TXDR>
 80068b8:	e0dd      	b.n	8006a76 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d022      	beq.n	800690a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d01d      	beq.n	800690a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f023 0304 	bic.w	r3, r3, #4
 80068d4:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068fe:	b29b      	uxth	r3, r3
 8006900:	3b01      	subs	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006908:	e0b5      	b.n	8006a76 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d02c      	beq.n	800696e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800691a:	2b00      	cmp	r3, #0
 800691c:	d027      	beq.n	800696e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006926:	d118      	bne.n	800695a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692c:	781a      	ldrb	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8006958:	e08d      	b.n	8006a76 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006962:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f04f 32ff 	mov.w	r2, #4294967295
 800696a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800696c:	e083      	b.n	8006a76 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006974:	2b00      	cmp	r3, #0
 8006976:	d03c      	beq.n	80069f2 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800697e:	2b00      	cmp	r3, #0
 8006980:	d037      	beq.n	80069f2 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d02c      	beq.n	80069e6 <I2C_Mem_ISR_IT+0x186>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006990:	2b00      	cmp	r3, #0
 8006992:	d128      	bne.n	80069e6 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006998:	b29b      	uxth	r3, r3
 800699a:	2bff      	cmp	r3, #255	@ 0xff
 800699c:	d910      	bls.n	80069c0 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	22ff      	movs	r2, #255	@ 0xff
 80069a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069a8:	b299      	uxth	r1, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	2300      	movs	r3, #0
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f001 f94f 	bl	8007c5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069be:	e017      	b.n	80069f0 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ce:	b299      	uxth	r1, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	2300      	movs	r3, #0
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f001 f93c 	bl	8007c5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069e4:	e004      	b.n	80069f0 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80069e6:	2140      	movs	r1, #64	@ 0x40
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 ffdd 	bl	80079a8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069ee:	e042      	b.n	8006a76 <I2C_Mem_ISR_IT+0x216>
 80069f0:	e041      	b.n	8006a76 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d03c      	beq.n	8006a76 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d037      	beq.n	8006a76 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a06:	2101      	movs	r1, #1
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f001 f9dd 	bl	8007dc8 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a0e:	2102      	movs	r1, #2
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f001 f955 	bl	8007cc0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b22      	cmp	r3, #34	@ 0x22
 8006a20:	d101      	bne.n	8006a26 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8006a22:	4b21      	ldr	r3, [pc, #132]	@ (8006aa8 <I2C_Mem_ISR_IT+0x248>)
 8006a24:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2bff      	cmp	r3, #255	@ 0xff
 8006a2e:	d910      	bls.n	8006a52 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	22ff      	movs	r2, #255	@ 0xff
 8006a34:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a3a:	b299      	uxth	r1, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f001 f906 	bl	8007c5c <I2C_TransferConfig>
 8006a50:	e011      	b.n	8006a76 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a60:	b299      	uxth	r1, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f001 f8f3 	bl	8007c5c <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d008      	beq.n	8006a92 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006a8a:	6939      	ldr	r1, [r7, #16]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 fd0b 	bl	80074a8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	80002000 	.word	0x80002000
 8006aa8:	80002400 	.word	0x80002400

08006aac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <I2C_Slave_ISR_IT+0x24>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e0e2      	b.n	8006c96 <I2C_Slave_ISR_IT+0x1ea>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d009      	beq.n	8006af6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006aec:	6939      	ldr	r1, [r7, #16]
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fda2 	bl	8007638 <I2C_ITSlaveCplt>
 8006af4:	e0ca      	b.n	8006c8c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d04b      	beq.n	8006b98 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d046      	beq.n	8006b98 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d128      	bne.n	8006b66 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b28      	cmp	r3, #40	@ 0x28
 8006b1e:	d108      	bne.n	8006b32 <I2C_Slave_ISR_IT+0x86>
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b26:	d104      	bne.n	8006b32 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006b28:	6939      	ldr	r1, [r7, #16]
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 fee8 	bl	8007900 <I2C_ITListenCplt>
 8006b30:	e031      	b.n	8006b96 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b29      	cmp	r3, #41	@ 0x29
 8006b3c:	d10e      	bne.n	8006b5c <I2C_Slave_ISR_IT+0xb0>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b44:	d00a      	beq.n	8006b5c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2210      	movs	r2, #16
 8006b4c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f001 f841 	bl	8007bd6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fc4b 	bl	80073f0 <I2C_ITSlaveSeqCplt>
 8006b5a:	e01c      	b.n	8006b96 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2210      	movs	r2, #16
 8006b62:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006b64:	e08f      	b.n	8006c86 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2210      	movs	r2, #16
 8006b6c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b72:	f043 0204 	orr.w	r2, r3, #4
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <I2C_Slave_ISR_IT+0xdc>
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b86:	d17e      	bne.n	8006c86 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 ff0a 	bl	80079a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006b94:	e077      	b.n	8006c86 <I2C_Slave_ISR_IT+0x1da>
 8006b96:	e076      	b.n	8006c86 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d02f      	beq.n	8006c02 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d02a      	beq.n	8006c02 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d018      	beq.n	8006be8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d14b      	bne.n	8006c8a <I2C_Slave_ISR_IT+0x1de>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006bf8:	d047      	beq.n	8006c8a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 fbf8 	bl	80073f0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006c00:	e043      	b.n	8006c8a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d009      	beq.n	8006c20 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d004      	beq.n	8006c20 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006c16:	6939      	ldr	r1, [r7, #16]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fb28 	bl	800726e <I2C_ITAddrCplt>
 8006c1e:	e035      	b.n	8006c8c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d030      	beq.n	8006c8c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d02b      	beq.n	8006c8c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d018      	beq.n	8006c70 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c42:	781a      	ldrb	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c66:	3b01      	subs	r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006c6e:	e00d      	b.n	8006c8c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c76:	d002      	beq.n	8006c7e <I2C_Slave_ISR_IT+0x1d2>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 fbb6 	bl	80073f0 <I2C_ITSlaveSeqCplt>
 8006c84:	e002      	b.n	8006c8c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006c86:	bf00      	nop
 8006c88:	e000      	b.n	8006c8c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006c8a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b088      	sub	sp, #32
 8006ca2:	af02      	add	r7, sp, #8
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <I2C_Master_ISR_DMA+0x1a>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e0d9      	b.n	8006e6c <I2C_Master_ISR_DMA+0x1ce>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d016      	beq.n	8006cf8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d011      	beq.n	8006cf8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2210      	movs	r2, #16
 8006cda:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce0:	f043 0204 	orr.w	r2, r3, #4
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ce8:	2120      	movs	r1, #32
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 ffe8 	bl	8007cc0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 ff70 	bl	8007bd6 <I2C_Flush_TXDR>
 8006cf6:	e0b4      	b.n	8006e62 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d071      	beq.n	8006de6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d06c      	beq.n	8006de6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d1a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d04e      	beq.n	8006dc4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d32:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2bff      	cmp	r3, #255	@ 0xff
 8006d3c:	d906      	bls.n	8006d4c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	22ff      	movs	r2, #255	@ 0xff
 8006d42:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8006d44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	e010      	b.n	8006d6e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d5e:	d003      	beq.n	8006d68 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	e002      	b.n	8006d6e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006d68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d6c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	8a79      	ldrh	r1, [r7, #18]
 8006d76:	2300      	movs	r3, #0
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 ff6d 	bl	8007c5c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b22      	cmp	r3, #34	@ 0x22
 8006d9e:	d108      	bne.n	8006db2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006dae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006db0:	e057      	b.n	8006e62 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dc0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006dc2:	e04e      	b.n	8006e62 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dd2:	d003      	beq.n	8006ddc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 face 	bl	8007376 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006dda:	e042      	b.n	8006e62 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006ddc:	2140      	movs	r1, #64	@ 0x40
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 fde2 	bl	80079a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006de4:	e03d      	b.n	8006e62 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d028      	beq.n	8006e42 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d023      	beq.n	8006e42 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d119      	bne.n	8006e38 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e12:	d025      	beq.n	8006e60 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e1c:	d108      	bne.n	8006e30 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e2c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006e2e:	e017      	b.n	8006e60 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 faa0 	bl	8007376 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006e36:	e013      	b.n	8006e60 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006e38:	2140      	movs	r1, #64	@ 0x40
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fdb4 	bl	80079a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006e40:	e00e      	b.n	8006e60 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006e56:	68b9      	ldr	r1, [r7, #8]
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 fb25 	bl	80074a8 <I2C_ITMasterCplt>
 8006e5e:	e000      	b.n	8006e62 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006e60:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006e80:	4b8d      	ldr	r3, [pc, #564]	@ (80070b8 <I2C_Mem_ISR_DMA+0x244>)
 8006e82:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <I2C_Mem_ISR_DMA+0x1e>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e10e      	b.n	80070b0 <I2C_Mem_ISR_DMA+0x23c>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d016      	beq.n	8006ed2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d011      	beq.n	8006ed2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2210      	movs	r2, #16
 8006eb4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eba:	f043 0204 	orr.w	r2, r3, #4
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ec2:	2120      	movs	r1, #32
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 fefb 	bl	8007cc0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f000 fe83 	bl	8007bd6 <I2C_Flush_TXDR>
 8006ed0:	e0e9      	b.n	80070a6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00e      	beq.n	8006efa <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006eee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef6:	651a      	str	r2, [r3, #80]	@ 0x50
 8006ef8:	e0d5      	b.n	80070a6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d05f      	beq.n	8006fc4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d05a      	beq.n	8006fc4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f0e:	2101      	movs	r1, #1
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 ff59 	bl	8007dc8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006f16:	2110      	movs	r1, #16
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 fed1 	bl	8007cc0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d048      	beq.n	8006fba <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2bff      	cmp	r3, #255	@ 0xff
 8006f30:	d910      	bls.n	8006f54 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	22ff      	movs	r2, #255	@ 0xff
 8006f36:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f3c:	b299      	uxth	r1, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	2300      	movs	r3, #0
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 fe85 	bl	8007c5c <I2C_TransferConfig>
 8006f52:	e011      	b.n	8006f78 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f62:	b299      	uxth	r1, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fe72 	bl	8007c5c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b22      	cmp	r3, #34	@ 0x22
 8006f94:	d108      	bne.n	8006fa8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fa4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006fa6:	e07e      	b.n	80070a6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fb6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006fb8:	e075      	b.n	80070a6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006fba:	2140      	movs	r1, #64	@ 0x40
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fcf3 	bl	80079a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006fc2:	e070      	b.n	80070a6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d05d      	beq.n	800708a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d058      	beq.n	800708a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006fd8:	2101      	movs	r1, #1
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 fef4 	bl	8007dc8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006fe0:	2110      	movs	r1, #16
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 fe6c 	bl	8007cc0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b22      	cmp	r3, #34	@ 0x22
 8006ff2:	d101      	bne.n	8006ff8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8006ff4:	4b31      	ldr	r3, [pc, #196]	@ (80070bc <I2C_Mem_ISR_DMA+0x248>)
 8006ff6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2bff      	cmp	r3, #255	@ 0xff
 8007000:	d910      	bls.n	8007024 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	22ff      	movs	r2, #255	@ 0xff
 8007006:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800700c:	b299      	uxth	r1, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007012:	b2da      	uxtb	r2, r3
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fe1d 	bl	8007c5c <I2C_TransferConfig>
 8007022:	e011      	b.n	8007048 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007032:	b299      	uxth	r1, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007038:	b2da      	uxtb	r2, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fe0a 	bl	8007c5c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	b29a      	uxth	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b22      	cmp	r3, #34	@ 0x22
 8007064:	d108      	bne.n	8007078 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007074:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007076:	e016      	b.n	80070a6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007086:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007088:	e00d      	b.n	80070a6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800709e:	68b9      	ldr	r1, [r7, #8]
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 fa01 	bl	80074a8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3718      	adds	r7, #24
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	80002000 	.word	0x80002000
 80070bc:	80002400 	.word	0x80002400

080070c0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <I2C_Slave_ISR_DMA+0x24>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e0c0      	b.n	8007266 <I2C_Slave_ISR_DMA+0x1a6>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007100:	68b9      	ldr	r1, [r7, #8]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 fa98 	bl	8007638 <I2C_ITSlaveCplt>
 8007108:	e0a8      	b.n	800725c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f003 0310 	and.w	r3, r3, #16
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8095 	beq.w	8007240 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 808f 	beq.w	8007240 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d104      	bne.n	8007136 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007132:	2b00      	cmp	r3, #0
 8007134:	d07d      	beq.n	8007232 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00c      	beq.n	8007158 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d007      	beq.n	8007158 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8007154:	2301      	movs	r3, #1
 8007156:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00c      	beq.n	800717a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8007176:	2301      	movs	r3, #1
 8007178:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d128      	bne.n	80071d2 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b28      	cmp	r3, #40	@ 0x28
 800718a:	d108      	bne.n	800719e <I2C_Slave_ISR_DMA+0xde>
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007192:	d104      	bne.n	800719e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 fbb2 	bl	8007900 <I2C_ITListenCplt>
 800719c:	e048      	b.n	8007230 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b29      	cmp	r3, #41	@ 0x29
 80071a8:	d10e      	bne.n	80071c8 <I2C_Slave_ISR_DMA+0x108>
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80071b0:	d00a      	beq.n	80071c8 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2210      	movs	r2, #16
 80071b8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fd0b 	bl	8007bd6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 f915 	bl	80073f0 <I2C_ITSlaveSeqCplt>
 80071c6:	e033      	b.n	8007230 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2210      	movs	r2, #16
 80071ce:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80071d0:	e034      	b.n	800723c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2210      	movs	r2, #16
 80071d8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071de:	f043 0204 	orr.w	r2, r3, #4
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ec:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d003      	beq.n	80071fc <I2C_Slave_ISR_DMA+0x13c>
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071fa:	d11f      	bne.n	800723c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
 80071fe:	2b21      	cmp	r3, #33	@ 0x21
 8007200:	d002      	beq.n	8007208 <I2C_Slave_ISR_DMA+0x148>
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	2b29      	cmp	r3, #41	@ 0x29
 8007206:	d103      	bne.n	8007210 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2221      	movs	r2, #33	@ 0x21
 800720c:	631a      	str	r2, [r3, #48]	@ 0x30
 800720e:	e008      	b.n	8007222 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007210:	7dfb      	ldrb	r3, [r7, #23]
 8007212:	2b22      	cmp	r3, #34	@ 0x22
 8007214:	d002      	beq.n	800721c <I2C_Slave_ISR_DMA+0x15c>
 8007216:	7dfb      	ldrb	r3, [r7, #23]
 8007218:	2b2a      	cmp	r3, #42	@ 0x2a
 800721a:	d102      	bne.n	8007222 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2222      	movs	r2, #34	@ 0x22
 8007220:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007226:	4619      	mov	r1, r3
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 fbbd 	bl	80079a8 <I2C_ITError>
      if (treatdmanack == 1U)
 800722e:	e005      	b.n	800723c <I2C_Slave_ISR_DMA+0x17c>
 8007230:	e004      	b.n	800723c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2210      	movs	r2, #16
 8007238:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800723a:	e00f      	b.n	800725c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 800723c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800723e:	e00d      	b.n	800725c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f003 0308 	and.w	r3, r3, #8
 8007246:	2b00      	cmp	r3, #0
 8007248:	d008      	beq.n	800725c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f809 	bl	800726e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3720      	adds	r7, #32
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800727e:	b2db      	uxtb	r3, r3
 8007280:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007284:	2b28      	cmp	r3, #40	@ 0x28
 8007286:	d16a      	bne.n	800735e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	0c1b      	lsrs	r3, r3, #16
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	0c1b      	lsrs	r3, r3, #16
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80072a6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072b4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80072c2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d138      	bne.n	800733e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80072cc:	897b      	ldrh	r3, [r7, #10]
 80072ce:	09db      	lsrs	r3, r3, #7
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	89bb      	ldrh	r3, [r7, #12]
 80072d4:	4053      	eors	r3, r2
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	f003 0306 	and.w	r3, r3, #6
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d11c      	bne.n	800731a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80072e0:	897b      	ldrh	r3, [r7, #10]
 80072e2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d13b      	bne.n	800736e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2208      	movs	r2, #8
 8007302:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800730c:	89ba      	ldrh	r2, [r7, #12]
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff f951 	bl	80065ba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007318:	e029      	b.n	800736e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800731a:	893b      	ldrh	r3, [r7, #8]
 800731c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800731e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fd50 	bl	8007dc8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007330:	89ba      	ldrh	r2, [r7, #12]
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7ff f93f 	bl	80065ba <HAL_I2C_AddrCallback>
}
 800733c:	e017      	b.n	800736e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800733e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fd40 	bl	8007dc8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007350:	89ba      	ldrh	r2, [r7, #12]
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff f92f 	bl	80065ba <HAL_I2C_AddrCallback>
}
 800735c:	e007      	b.n	800736e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2208      	movs	r2, #8
 8007364:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800736e:	bf00      	nop
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b082      	sub	sp, #8
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b21      	cmp	r3, #33	@ 0x21
 8007390:	d115      	bne.n	80073be <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2220      	movs	r2, #32
 8007396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2211      	movs	r2, #17
 800739e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80073a6:	2101      	movs	r1, #1
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fd0d 	bl	8007dc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fa fce4 	bl	8001d84 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073bc:	e014      	b.n	80073e8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2212      	movs	r2, #18
 80073ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80073d2:	2102      	movs	r1, #2
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fcf7 	bl	8007dc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7fa fcdc 	bl	8001da0 <HAL_I2C_MasterRxCpltCallback>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d008      	beq.n	8007424 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007420:	601a      	str	r2, [r3, #0]
 8007422:	e00c      	b.n	800743e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d007      	beq.n	800743e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800743c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b29      	cmp	r3, #41	@ 0x29
 8007448:	d112      	bne.n	8007470 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2228      	movs	r2, #40	@ 0x28
 800744e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2221      	movs	r2, #33	@ 0x21
 8007456:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007458:	2101      	movs	r1, #1
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fcb4 	bl	8007dc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff f892 	bl	8006592 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800746e:	e017      	b.n	80074a0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b2a      	cmp	r3, #42	@ 0x2a
 800747a:	d111      	bne.n	80074a0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2228      	movs	r2, #40	@ 0x28
 8007480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2222      	movs	r2, #34	@ 0x22
 8007488:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800748a:	2102      	movs	r1, #2
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fc9b 	bl	8007dc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff f883 	bl	80065a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2220      	movs	r2, #32
 80074bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b21      	cmp	r3, #33	@ 0x21
 80074c8:	d107      	bne.n	80074da <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80074ca:	2101      	movs	r1, #1
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fc7b 	bl	8007dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2211      	movs	r2, #17
 80074d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80074d8:	e00c      	b.n	80074f4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b22      	cmp	r3, #34	@ 0x22
 80074e4:	d106      	bne.n	80074f4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80074e6:	2102      	movs	r1, #2
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fc6d 	bl	8007dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2212      	movs	r2, #18
 80074f2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6859      	ldr	r1, [r3, #4]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	4b4c      	ldr	r3, [pc, #304]	@ (8007630 <I2C_ITMasterCplt+0x188>)
 8007500:	400b      	ands	r3, r1
 8007502:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a49      	ldr	r2, [pc, #292]	@ (8007634 <I2C_ITMasterCplt+0x18c>)
 800750e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f003 0310 	and.w	r3, r3, #16
 8007516:	2b00      	cmp	r3, #0
 8007518:	d009      	beq.n	800752e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2210      	movs	r2, #16
 8007520:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007526:	f043 0204 	orr.w	r2, r3, #4
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b60      	cmp	r3, #96	@ 0x60
 8007538:	d10a      	bne.n	8007550 <I2C_ITMasterCplt+0xa8>
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754a:	b2db      	uxtb	r3, r3
 800754c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800754e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fb40 	bl	8007bd6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800755a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b60      	cmp	r3, #96	@ 0x60
 8007566:	d002      	beq.n	800756e <I2C_ITMasterCplt+0xc6>
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d006      	beq.n	800757c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa17 	bl	80079a8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800757a:	e054      	b.n	8007626 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b21      	cmp	r3, #33	@ 0x21
 8007586:	d124      	bne.n	80075d2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b40      	cmp	r3, #64	@ 0x40
 80075a0:	d10b      	bne.n	80075ba <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fa fc10 	bl	8001dd8 <HAL_I2C_MemTxCpltCallback>
}
 80075b8:	e035      	b.n	8007626 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fa fbda 	bl	8001d84 <HAL_I2C_MasterTxCpltCallback>
}
 80075d0:	e029      	b.n	8007626 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b22      	cmp	r3, #34	@ 0x22
 80075dc:	d123      	bne.n	8007626 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b40      	cmp	r3, #64	@ 0x40
 80075f6:	d10b      	bne.n	8007610 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7fa fbd7 	bl	8001dbc <HAL_I2C_MemRxCpltCallback>
}
 800760e:	e00a      	b.n	8007626 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7fa fbbd 	bl	8001da0 <HAL_I2C_MasterRxCpltCallback>
}
 8007626:	bf00      	nop
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	fe00e800 	.word	0xfe00e800
 8007634:	ffff0000 	.word	0xffff0000

08007638 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007652:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800765a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2220      	movs	r2, #32
 8007662:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	2b21      	cmp	r3, #33	@ 0x21
 8007668:	d002      	beq.n	8007670 <I2C_ITSlaveCplt+0x38>
 800766a:	7afb      	ldrb	r3, [r7, #11]
 800766c:	2b29      	cmp	r3, #41	@ 0x29
 800766e:	d108      	bne.n	8007682 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007670:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fba7 	bl	8007dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2221      	movs	r2, #33	@ 0x21
 800767e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007680:	e019      	b.n	80076b6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007682:	7afb      	ldrb	r3, [r7, #11]
 8007684:	2b22      	cmp	r3, #34	@ 0x22
 8007686:	d002      	beq.n	800768e <I2C_ITSlaveCplt+0x56>
 8007688:	7afb      	ldrb	r3, [r7, #11]
 800768a:	2b2a      	cmp	r3, #42	@ 0x2a
 800768c:	d108      	bne.n	80076a0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800768e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fb98 	bl	8007dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2222      	movs	r2, #34	@ 0x22
 800769c:	631a      	str	r2, [r3, #48]	@ 0x30
 800769e:	e00a      	b.n	80076b6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80076a0:	7afb      	ldrb	r3, [r7, #11]
 80076a2:	2b28      	cmp	r3, #40	@ 0x28
 80076a4:	d107      	bne.n	80076b6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80076a6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fb8c 	bl	8007dc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076c4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6859      	ldr	r1, [r3, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	4b89      	ldr	r3, [pc, #548]	@ (80078f8 <I2C_ITSlaveCplt+0x2c0>)
 80076d2:	400b      	ands	r3, r1
 80076d4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa7d 	bl	8007bd6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d013      	beq.n	800770e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80076f4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d01f      	beq.n	800773e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	b29a      	uxth	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800770c:	e017      	b.n	800773e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d012      	beq.n	800773e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007726:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d006      	beq.n	800773e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	b29a      	uxth	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b00      	cmp	r3, #0
 8007746:	d020      	beq.n	800778a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f023 0304 	bic.w	r3, r3, #4
 800774e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775a:	b2d2      	uxtb	r2, r2
 800775c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00c      	beq.n	800778a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007774:	3b01      	subs	r3, #1
 8007776:	b29a      	uxth	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007780:	b29b      	uxth	r3, r3
 8007782:	3b01      	subs	r3, #1
 8007784:	b29a      	uxth	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d005      	beq.n	80077a0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007798:	f043 0204 	orr.w	r2, r3, #4
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d049      	beq.n	800783e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d044      	beq.n	800783e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d128      	bne.n	8007810 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b28      	cmp	r3, #40	@ 0x28
 80077c8:	d108      	bne.n	80077dc <I2C_ITSlaveCplt+0x1a4>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077d0:	d104      	bne.n	80077dc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80077d2:	6979      	ldr	r1, [r7, #20]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f893 	bl	8007900 <I2C_ITListenCplt>
 80077da:	e030      	b.n	800783e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b29      	cmp	r3, #41	@ 0x29
 80077e6:	d10e      	bne.n	8007806 <I2C_ITSlaveCplt+0x1ce>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80077ee:	d00a      	beq.n	8007806 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2210      	movs	r2, #16
 80077f6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f9ec 	bl	8007bd6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff fdf6 	bl	80073f0 <I2C_ITSlaveSeqCplt>
 8007804:	e01b      	b.n	800783e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2210      	movs	r2, #16
 800780c:	61da      	str	r2, [r3, #28]
 800780e:	e016      	b.n	800783e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2210      	movs	r2, #16
 8007816:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800781c:	f043 0204 	orr.w	r2, r3, #4
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <I2C_ITSlaveCplt+0x1fa>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007830:	d105      	bne.n	800783e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f8b5 	bl	80079a8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007850:	2b00      	cmp	r3, #0
 8007852:	d010      	beq.n	8007876 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f8a4 	bl	80079a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b28      	cmp	r3, #40	@ 0x28
 800786a:	d141      	bne.n	80078f0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800786c:	6979      	ldr	r1, [r7, #20]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f846 	bl	8007900 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007874:	e03c      	b.n	80078f0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800787e:	d014      	beq.n	80078aa <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff fdb5 	bl	80073f0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a1c      	ldr	r2, [pc, #112]	@ (80078fc <I2C_ITSlaveCplt+0x2c4>)
 800788a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2220      	movs	r2, #32
 8007890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7fe fe97 	bl	80065d6 <HAL_I2C_ListenCpltCallback>
}
 80078a8:	e022      	b.n	80078f0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b22      	cmp	r3, #34	@ 0x22
 80078b4:	d10e      	bne.n	80078d4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7fe fe6a 	bl	80065a6 <HAL_I2C_SlaveRxCpltCallback>
}
 80078d2:	e00d      	b.n	80078f0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7fe fe51 	bl	8006592 <HAL_I2C_SlaveTxCpltCallback>
}
 80078f0:	bf00      	nop
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	fe00e800 	.word	0xfe00e800
 80078fc:	ffff0000 	.word	0xffff0000

08007900 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a25      	ldr	r2, [pc, #148]	@ (80079a4 <I2C_ITListenCplt+0xa4>)
 800790e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	f003 0304 	and.w	r3, r3, #4
 8007932:	2b00      	cmp	r3, #0
 8007934:	d022      	beq.n	800797c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007952:	2b00      	cmp	r3, #0
 8007954:	d012      	beq.n	800797c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800795a:	3b01      	subs	r3, #1
 800795c:	b29a      	uxth	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007966:	b29b      	uxth	r3, r3
 8007968:	3b01      	subs	r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007974:	f043 0204 	orr.w	r2, r3, #4
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800797c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fa21 	bl	8007dc8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2210      	movs	r2, #16
 800798c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7fe fe1d 	bl	80065d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	ffff0000 	.word	0xffff0000

080079a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079b8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a6d      	ldr	r2, [pc, #436]	@ (8007b7c <I2C_ITError+0x1d4>)
 80079c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	431a      	orrs	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80079da:	7bfb      	ldrb	r3, [r7, #15]
 80079dc:	2b28      	cmp	r3, #40	@ 0x28
 80079de:	d005      	beq.n	80079ec <I2C_ITError+0x44>
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	2b29      	cmp	r3, #41	@ 0x29
 80079e4:	d002      	beq.n	80079ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80079ea:	d10b      	bne.n	8007a04 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80079ec:	2103      	movs	r1, #3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f9ea 	bl	8007dc8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2228      	movs	r2, #40	@ 0x28
 80079f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a60      	ldr	r2, [pc, #384]	@ (8007b80 <I2C_ITError+0x1d8>)
 8007a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a02:	e030      	b.n	8007a66 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a04:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f9dd 	bl	8007dc8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f8e1 	bl	8007bd6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b60      	cmp	r3, #96	@ 0x60
 8007a1e:	d01f      	beq.n	8007a60 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	d114      	bne.n	8007a60 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	f003 0310 	and.w	r3, r3, #16
 8007a40:	2b10      	cmp	r3, #16
 8007a42:	d109      	bne.n	8007a58 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2210      	movs	r2, #16
 8007a4a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a50:	f043 0204 	orr.w	r2, r3, #4
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d039      	beq.n	8007ae8 <I2C_ITError+0x140>
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2b11      	cmp	r3, #17
 8007a78:	d002      	beq.n	8007a80 <I2C_ITError+0xd8>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b21      	cmp	r3, #33	@ 0x21
 8007a7e:	d133      	bne.n	8007ae8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a8e:	d107      	bne.n	8007aa0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a9e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fd fbf8 	bl	800529a <HAL_DMA_GetState>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d017      	beq.n	8007ae0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab4:	4a33      	ldr	r2, [pc, #204]	@ (8007b84 <I2C_ITError+0x1dc>)
 8007ab6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fd fad2 	bl	800506e <HAL_DMA_Abort_IT>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d04d      	beq.n	8007b6c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007ada:	4610      	mov	r0, r2
 8007adc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007ade:	e045      	b.n	8007b6c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f851 	bl	8007b88 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007ae6:	e041      	b.n	8007b6c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d039      	beq.n	8007b64 <I2C_ITError+0x1bc>
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b12      	cmp	r3, #18
 8007af4:	d002      	beq.n	8007afc <I2C_ITError+0x154>
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2b22      	cmp	r3, #34	@ 0x22
 8007afa:	d133      	bne.n	8007b64 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b0a:	d107      	bne.n	8007b1c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b1a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fd fbba 	bl	800529a <HAL_DMA_GetState>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d017      	beq.n	8007b5c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b30:	4a14      	ldr	r2, [pc, #80]	@ (8007b84 <I2C_ITError+0x1dc>)
 8007b32:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fd fa94 	bl	800506e <HAL_DMA_Abort_IT>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d011      	beq.n	8007b70 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b56:	4610      	mov	r0, r2
 8007b58:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b5a:	e009      	b.n	8007b70 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f813 	bl	8007b88 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b62:	e005      	b.n	8007b70 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f80f 	bl	8007b88 <I2C_TreatErrorCallback>
  }
}
 8007b6a:	e002      	b.n	8007b72 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b6c:	bf00      	nop
 8007b6e:	e000      	b.n	8007b72 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b70:	bf00      	nop
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	ffff0000 	.word	0xffff0000
 8007b80:	08006aad 	.word	0x08006aad
 8007b84:	08007c1f 	.word	0x08007c1f

08007b88 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b60      	cmp	r3, #96	@ 0x60
 8007b9a:	d10e      	bne.n	8007bba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7fe fd23 	bl	80065fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007bb8:	e009      	b.n	8007bce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7fe fd0e 	bl	80065ea <HAL_I2C_ErrorCallback>
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d103      	bne.n	8007bf4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d007      	beq.n	8007c12 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	699a      	ldr	r2, [r3, #24]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0201 	orr.w	r2, r2, #1
 8007c10:	619a      	str	r2, [r3, #24]
  }
}
 8007c12:	bf00      	nop
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c38:	2200      	movs	r2, #0
 8007c3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c48:	2200      	movs	r2, #0
 8007c4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff ff9b 	bl	8007b88 <I2C_TreatErrorCallback>
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	607b      	str	r3, [r7, #4]
 8007c66:	460b      	mov	r3, r1
 8007c68:	817b      	strh	r3, [r7, #10]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c6e:	897b      	ldrh	r3, [r7, #10]
 8007c70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c74:	7a7b      	ldrb	r3, [r7, #9]
 8007c76:	041b      	lsls	r3, r3, #16
 8007c78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	0d5b      	lsrs	r3, r3, #21
 8007c96:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007c9a:	4b08      	ldr	r3, [pc, #32]	@ (8007cbc <I2C_TransferConfig+0x60>)
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	43db      	mvns	r3, r3
 8007ca0:	ea02 0103 	and.w	r1, r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007cae:	bf00      	nop
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	03ff63ff 	.word	0x03ff63ff

08007cc0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd4:	4a39      	ldr	r2, [pc, #228]	@ (8007dbc <I2C_Enable_IRQ+0xfc>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d032      	beq.n	8007d40 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007cde:	4a38      	ldr	r2, [pc, #224]	@ (8007dc0 <I2C_Enable_IRQ+0x100>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d02d      	beq.n	8007d40 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007ce8:	4a36      	ldr	r2, [pc, #216]	@ (8007dc4 <I2C_Enable_IRQ+0x104>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d028      	beq.n	8007d40 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007cee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	da03      	bge.n	8007cfe <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007cfc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007cfe:	887b      	ldrh	r3, [r7, #2]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007d0e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007d10:	887b      	ldrh	r3, [r7, #2]
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007d20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007d22:	887b      	ldrh	r3, [r7, #2]
 8007d24:	2b10      	cmp	r3, #16
 8007d26:	d103      	bne.n	8007d30 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007d2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d30:	887b      	ldrh	r3, [r7, #2]
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d133      	bne.n	8007d9e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f043 0320 	orr.w	r3, r3, #32
 8007d3c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d3e:	e02e      	b.n	8007d9e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007d40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	da03      	bge.n	8007d50 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007d4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007d50:	887b      	ldrh	r3, [r7, #2]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007d60:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007d62:	887b      	ldrh	r3, [r7, #2]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007d72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007d74:	887b      	ldrh	r3, [r7, #2]
 8007d76:	2b10      	cmp	r3, #16
 8007d78:	d103      	bne.n	8007d82 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007d80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d82:	887b      	ldrh	r3, [r7, #2]
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d103      	bne.n	8007d90 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007d8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007d90:	887b      	ldrh	r3, [r7, #2]
 8007d92:	2b40      	cmp	r3, #64	@ 0x40
 8007d94:	d103      	bne.n	8007d9e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d9c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6819      	ldr	r1, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	601a      	str	r2, [r3, #0]
}
 8007dae:	bf00      	nop
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	08006c9f 	.word	0x08006c9f
 8007dc0:	080070c1 	.word	0x080070c1
 8007dc4:	08006e75 	.word	0x08006e75

08007dc8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007dd8:	887b      	ldrh	r3, [r7, #2]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00f      	beq.n	8007e02 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007de8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007df6:	2b28      	cmp	r3, #40	@ 0x28
 8007df8:	d003      	beq.n	8007e02 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007e00:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007e02:	887b      	ldrh	r3, [r7, #2]
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00f      	beq.n	8007e2c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007e12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007e20:	2b28      	cmp	r3, #40	@ 0x28
 8007e22:	d003      	beq.n	8007e2c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007e2a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007e2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	da03      	bge.n	8007e3c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007e3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007e3c:	887b      	ldrh	r3, [r7, #2]
 8007e3e:	2b10      	cmp	r3, #16
 8007e40:	d103      	bne.n	8007e4a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007e48:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007e4a:	887b      	ldrh	r3, [r7, #2]
 8007e4c:	2b20      	cmp	r3, #32
 8007e4e:	d103      	bne.n	8007e58 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f043 0320 	orr.w	r3, r3, #32
 8007e56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007e58:	887b      	ldrh	r3, [r7, #2]
 8007e5a:	2b40      	cmp	r3, #64	@ 0x40
 8007e5c:	d103      	bne.n	8007e66 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e64:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6819      	ldr	r1, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	43da      	mvns	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	400a      	ands	r2, r1
 8007e76:	601a      	str	r2, [r3, #0]
}
 8007e78:	bf00      	nop
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	d138      	bne.n	8007f0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d101      	bne.n	8007ea8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e032      	b.n	8007f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2224      	movs	r2, #36	@ 0x24
 8007eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 0201 	bic.w	r2, r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ed6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6819      	ldr	r1, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0201 	orr.w	r2, r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2220      	movs	r2, #32
 8007efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e000      	b.n	8007f0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f0c:	2302      	movs	r3, #2
  }
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b20      	cmp	r3, #32
 8007f2e:	d139      	bne.n	8007fa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d101      	bne.n	8007f3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e033      	b.n	8007fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2224      	movs	r2, #36	@ 0x24
 8007f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0201 	bic.w	r2, r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007f6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	021b      	lsls	r3, r3, #8
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0201 	orr.w	r2, r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2220      	movs	r2, #32
 8007f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e000      	b.n	8007fa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007fa4:	2302      	movs	r3, #2
  }
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
	...

08007fb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d141      	bne.n	8008046 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fce:	d131      	bne.n	8008034 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fd0:	4b47      	ldr	r3, [pc, #284]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fd6:	4a46      	ldr	r2, [pc, #280]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007fe0:	4b43      	ldr	r3, [pc, #268]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007fe8:	4a41      	ldr	r2, [pc, #260]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007fee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ff0:	4b40      	ldr	r3, [pc, #256]	@ (80080f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2232      	movs	r2, #50	@ 0x32
 8007ff6:	fb02 f303 	mul.w	r3, r2, r3
 8007ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80080f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8008000:	0c9b      	lsrs	r3, r3, #18
 8008002:	3301      	adds	r3, #1
 8008004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008006:	e002      	b.n	800800e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3b01      	subs	r3, #1
 800800c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800800e:	4b38      	ldr	r3, [pc, #224]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800801a:	d102      	bne.n	8008022 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f2      	bne.n	8008008 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008022:	4b33      	ldr	r3, [pc, #204]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800802a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800802e:	d158      	bne.n	80080e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e057      	b.n	80080e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008034:	4b2e      	ldr	r3, [pc, #184]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800803a:	4a2d      	ldr	r2, [pc, #180]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800803c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008040:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008044:	e04d      	b.n	80080e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800804c:	d141      	bne.n	80080d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800804e:	4b28      	ldr	r3, [pc, #160]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800805a:	d131      	bne.n	80080c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800805c:	4b24      	ldr	r3, [pc, #144]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800805e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008062:	4a23      	ldr	r2, [pc, #140]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008068:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800806c:	4b20      	ldr	r3, [pc, #128]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008074:	4a1e      	ldr	r2, [pc, #120]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800807a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800807c:	4b1d      	ldr	r3, [pc, #116]	@ (80080f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2232      	movs	r2, #50	@ 0x32
 8008082:	fb02 f303 	mul.w	r3, r2, r3
 8008086:	4a1c      	ldr	r2, [pc, #112]	@ (80080f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008088:	fba2 2303 	umull	r2, r3, r2, r3
 800808c:	0c9b      	lsrs	r3, r3, #18
 800808e:	3301      	adds	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008092:	e002      	b.n	800809a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	3b01      	subs	r3, #1
 8008098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800809a:	4b15      	ldr	r3, [pc, #84]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080a6:	d102      	bne.n	80080ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1f2      	bne.n	8008094 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80080ae:	4b10      	ldr	r3, [pc, #64]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080ba:	d112      	bne.n	80080e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e011      	b.n	80080e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80080c0:	4b0b      	ldr	r3, [pc, #44]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080c6:	4a0a      	ldr	r2, [pc, #40]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80080d0:	e007      	b.n	80080e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80080d2:	4b07      	ldr	r3, [pc, #28]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80080da:	4a05      	ldr	r2, [pc, #20]	@ (80080f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80080e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	40007000 	.word	0x40007000
 80080f4:	20000000 	.word	0x20000000
 80080f8:	431bde83 	.word	0x431bde83

080080fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008100:	4b05      	ldr	r3, [pc, #20]	@ (8008118 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	4a04      	ldr	r2, [pc, #16]	@ (8008118 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008106:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800810a:	6093      	str	r3, [r2, #8]
}
 800810c:	bf00      	nop
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	40007000 	.word	0x40007000

0800811c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b088      	sub	sp, #32
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e2fe      	b.n	800872c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d075      	beq.n	8008226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800813a:	4b97      	ldr	r3, [pc, #604]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f003 030c 	and.w	r3, r3, #12
 8008142:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008144:	4b94      	ldr	r3, [pc, #592]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0303 	and.w	r3, r3, #3
 800814c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	2b0c      	cmp	r3, #12
 8008152:	d102      	bne.n	800815a <HAL_RCC_OscConfig+0x3e>
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d002      	beq.n	8008160 <HAL_RCC_OscConfig+0x44>
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	2b08      	cmp	r3, #8
 800815e:	d10b      	bne.n	8008178 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008160:	4b8d      	ldr	r3, [pc, #564]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d05b      	beq.n	8008224 <HAL_RCC_OscConfig+0x108>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d157      	bne.n	8008224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e2d9      	b.n	800872c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008180:	d106      	bne.n	8008190 <HAL_RCC_OscConfig+0x74>
 8008182:	4b85      	ldr	r3, [pc, #532]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a84      	ldr	r2, [pc, #528]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 8008188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	e01d      	b.n	80081cc <HAL_RCC_OscConfig+0xb0>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008198:	d10c      	bne.n	80081b4 <HAL_RCC_OscConfig+0x98>
 800819a:	4b7f      	ldr	r3, [pc, #508]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a7e      	ldr	r2, [pc, #504]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80081a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80081a4:	6013      	str	r3, [r2, #0]
 80081a6:	4b7c      	ldr	r3, [pc, #496]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a7b      	ldr	r2, [pc, #492]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80081ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	e00b      	b.n	80081cc <HAL_RCC_OscConfig+0xb0>
 80081b4:	4b78      	ldr	r3, [pc, #480]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a77      	ldr	r2, [pc, #476]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80081ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081be:	6013      	str	r3, [r2, #0]
 80081c0:	4b75      	ldr	r3, [pc, #468]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a74      	ldr	r2, [pc, #464]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80081c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d013      	beq.n	80081fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d4:	f7fa fe0e 	bl	8002df4 <HAL_GetTick>
 80081d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081da:	e008      	b.n	80081ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081dc:	f7fa fe0a 	bl	8002df4 <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b64      	cmp	r3, #100	@ 0x64
 80081e8:	d901      	bls.n	80081ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e29e      	b.n	800872c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081ee:	4b6a      	ldr	r3, [pc, #424]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0f0      	beq.n	80081dc <HAL_RCC_OscConfig+0xc0>
 80081fa:	e014      	b.n	8008226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fc:	f7fa fdfa 	bl	8002df4 <HAL_GetTick>
 8008200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008202:	e008      	b.n	8008216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008204:	f7fa fdf6 	bl	8002df4 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b64      	cmp	r3, #100	@ 0x64
 8008210:	d901      	bls.n	8008216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e28a      	b.n	800872c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008216:	4b60      	ldr	r3, [pc, #384]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1f0      	bne.n	8008204 <HAL_RCC_OscConfig+0xe8>
 8008222:	e000      	b.n	8008226 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b00      	cmp	r3, #0
 8008230:	d075      	beq.n	800831e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008232:	4b59      	ldr	r3, [pc, #356]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f003 030c 	and.w	r3, r3, #12
 800823a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800823c:	4b56      	ldr	r3, [pc, #344]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	2b0c      	cmp	r3, #12
 800824a:	d102      	bne.n	8008252 <HAL_RCC_OscConfig+0x136>
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d002      	beq.n	8008258 <HAL_RCC_OscConfig+0x13c>
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	2b04      	cmp	r3, #4
 8008256:	d11f      	bne.n	8008298 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008258:	4b4f      	ldr	r3, [pc, #316]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008260:	2b00      	cmp	r3, #0
 8008262:	d005      	beq.n	8008270 <HAL_RCC_OscConfig+0x154>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e25d      	b.n	800872c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008270:	4b49      	ldr	r3, [pc, #292]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	061b      	lsls	r3, r3, #24
 800827e:	4946      	ldr	r1, [pc, #280]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 8008280:	4313      	orrs	r3, r2
 8008282:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008284:	4b45      	ldr	r3, [pc, #276]	@ (800839c <HAL_RCC_OscConfig+0x280>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4618      	mov	r0, r3
 800828a:	f7f9 f96f 	bl	800156c <HAL_InitTick>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d043      	beq.n	800831c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e249      	b.n	800872c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d023      	beq.n	80082e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082a0:	4b3d      	ldr	r3, [pc, #244]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a3c      	ldr	r2, [pc, #240]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80082a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ac:	f7fa fda2 	bl	8002df4 <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082b2:	e008      	b.n	80082c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082b4:	f7fa fd9e 	bl	8002df4 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e232      	b.n	800872c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082c6:	4b34      	ldr	r3, [pc, #208]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0f0      	beq.n	80082b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082d2:	4b31      	ldr	r3, [pc, #196]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	061b      	lsls	r3, r3, #24
 80082e0:	492d      	ldr	r1, [pc, #180]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	604b      	str	r3, [r1, #4]
 80082e6:	e01a      	b.n	800831e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 80082ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f4:	f7fa fd7e 	bl	8002df4 <HAL_GetTick>
 80082f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80082fa:	e008      	b.n	800830e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082fc:	f7fa fd7a 	bl	8002df4 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	2b02      	cmp	r3, #2
 8008308:	d901      	bls.n	800830e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e20e      	b.n	800872c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800830e:	4b22      	ldr	r3, [pc, #136]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1f0      	bne.n	80082fc <HAL_RCC_OscConfig+0x1e0>
 800831a:	e000      	b.n	800831e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800831c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 0308 	and.w	r3, r3, #8
 8008326:	2b00      	cmp	r3, #0
 8008328:	d041      	beq.n	80083ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d01c      	beq.n	800836c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008332:	4b19      	ldr	r3, [pc, #100]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 8008334:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008338:	4a17      	ldr	r2, [pc, #92]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 800833a:	f043 0301 	orr.w	r3, r3, #1
 800833e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008342:	f7fa fd57 	bl	8002df4 <HAL_GetTick>
 8008346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008348:	e008      	b.n	800835c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800834a:	f7fa fd53 	bl	8002df4 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d901      	bls.n	800835c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e1e7      	b.n	800872c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800835c:	4b0e      	ldr	r3, [pc, #56]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 800835e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008362:	f003 0302 	and.w	r3, r3, #2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0ef      	beq.n	800834a <HAL_RCC_OscConfig+0x22e>
 800836a:	e020      	b.n	80083ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800836c:	4b0a      	ldr	r3, [pc, #40]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 800836e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008372:	4a09      	ldr	r2, [pc, #36]	@ (8008398 <HAL_RCC_OscConfig+0x27c>)
 8008374:	f023 0301 	bic.w	r3, r3, #1
 8008378:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800837c:	f7fa fd3a 	bl	8002df4 <HAL_GetTick>
 8008380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008382:	e00d      	b.n	80083a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008384:	f7fa fd36 	bl	8002df4 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b02      	cmp	r3, #2
 8008390:	d906      	bls.n	80083a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e1ca      	b.n	800872c <HAL_RCC_OscConfig+0x610>
 8008396:	bf00      	nop
 8008398:	40021000 	.word	0x40021000
 800839c:	2000004c 	.word	0x2000004c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80083a0:	4b8c      	ldr	r3, [pc, #560]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 80083a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083a6:	f003 0302 	and.w	r3, r3, #2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1ea      	bne.n	8008384 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0304 	and.w	r3, r3, #4
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 80a6 	beq.w	8008508 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083bc:	2300      	movs	r3, #0
 80083be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80083c0:	4b84      	ldr	r3, [pc, #528]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 80083c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <HAL_RCC_OscConfig+0x2b4>
 80083cc:	2301      	movs	r3, #1
 80083ce:	e000      	b.n	80083d2 <HAL_RCC_OscConfig+0x2b6>
 80083d0:	2300      	movs	r3, #0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00d      	beq.n	80083f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083d6:	4b7f      	ldr	r3, [pc, #508]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 80083d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083da:	4a7e      	ldr	r2, [pc, #504]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 80083dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80083e2:	4b7c      	ldr	r3, [pc, #496]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 80083e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80083ee:	2301      	movs	r3, #1
 80083f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083f2:	4b79      	ldr	r3, [pc, #484]	@ (80085d8 <HAL_RCC_OscConfig+0x4bc>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d118      	bne.n	8008430 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083fe:	4b76      	ldr	r3, [pc, #472]	@ (80085d8 <HAL_RCC_OscConfig+0x4bc>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a75      	ldr	r2, [pc, #468]	@ (80085d8 <HAL_RCC_OscConfig+0x4bc>)
 8008404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800840a:	f7fa fcf3 	bl	8002df4 <HAL_GetTick>
 800840e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008410:	e008      	b.n	8008424 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008412:	f7fa fcef 	bl	8002df4 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d901      	bls.n	8008424 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e183      	b.n	800872c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008424:	4b6c      	ldr	r3, [pc, #432]	@ (80085d8 <HAL_RCC_OscConfig+0x4bc>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0f0      	beq.n	8008412 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d108      	bne.n	800844a <HAL_RCC_OscConfig+0x32e>
 8008438:	4b66      	ldr	r3, [pc, #408]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 800843a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800843e:	4a65      	ldr	r2, [pc, #404]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 8008440:	f043 0301 	orr.w	r3, r3, #1
 8008444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008448:	e024      	b.n	8008494 <HAL_RCC_OscConfig+0x378>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	2b05      	cmp	r3, #5
 8008450:	d110      	bne.n	8008474 <HAL_RCC_OscConfig+0x358>
 8008452:	4b60      	ldr	r3, [pc, #384]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 8008454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008458:	4a5e      	ldr	r2, [pc, #376]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 800845a:	f043 0304 	orr.w	r3, r3, #4
 800845e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008462:	4b5c      	ldr	r3, [pc, #368]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 8008464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008468:	4a5a      	ldr	r2, [pc, #360]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 800846a:	f043 0301 	orr.w	r3, r3, #1
 800846e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008472:	e00f      	b.n	8008494 <HAL_RCC_OscConfig+0x378>
 8008474:	4b57      	ldr	r3, [pc, #348]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 8008476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800847a:	4a56      	ldr	r2, [pc, #344]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 800847c:	f023 0301 	bic.w	r3, r3, #1
 8008480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008484:	4b53      	ldr	r3, [pc, #332]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 8008486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800848a:	4a52      	ldr	r2, [pc, #328]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 800848c:	f023 0304 	bic.w	r3, r3, #4
 8008490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d016      	beq.n	80084ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800849c:	f7fa fcaa 	bl	8002df4 <HAL_GetTick>
 80084a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084a2:	e00a      	b.n	80084ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084a4:	f7fa fca6 	bl	8002df4 <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e138      	b.n	800872c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084ba:	4b46      	ldr	r3, [pc, #280]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 80084bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c0:	f003 0302 	and.w	r3, r3, #2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d0ed      	beq.n	80084a4 <HAL_RCC_OscConfig+0x388>
 80084c8:	e015      	b.n	80084f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ca:	f7fa fc93 	bl	8002df4 <HAL_GetTick>
 80084ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80084d0:	e00a      	b.n	80084e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084d2:	f7fa fc8f 	bl	8002df4 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d901      	bls.n	80084e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e121      	b.n	800872c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80084e8:	4b3a      	ldr	r3, [pc, #232]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 80084ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1ed      	bne.n	80084d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80084f6:	7ffb      	ldrb	r3, [r7, #31]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d105      	bne.n	8008508 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084fc:	4b35      	ldr	r3, [pc, #212]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 80084fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008500:	4a34      	ldr	r2, [pc, #208]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 8008502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008506:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0320 	and.w	r3, r3, #32
 8008510:	2b00      	cmp	r3, #0
 8008512:	d03c      	beq.n	800858e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01c      	beq.n	8008556 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800851c:	4b2d      	ldr	r3, [pc, #180]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 800851e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008522:	4a2c      	ldr	r2, [pc, #176]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 8008524:	f043 0301 	orr.w	r3, r3, #1
 8008528:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852c:	f7fa fc62 	bl	8002df4 <HAL_GetTick>
 8008530:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008532:	e008      	b.n	8008546 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008534:	f7fa fc5e 	bl	8002df4 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e0f2      	b.n	800872c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008546:	4b23      	ldr	r3, [pc, #140]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 8008548:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0ef      	beq.n	8008534 <HAL_RCC_OscConfig+0x418>
 8008554:	e01b      	b.n	800858e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008556:	4b1f      	ldr	r3, [pc, #124]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 8008558:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800855c:	4a1d      	ldr	r2, [pc, #116]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 800855e:	f023 0301 	bic.w	r3, r3, #1
 8008562:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008566:	f7fa fc45 	bl	8002df4 <HAL_GetTick>
 800856a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800856c:	e008      	b.n	8008580 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800856e:	f7fa fc41 	bl	8002df4 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d901      	bls.n	8008580 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e0d5      	b.n	800872c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008580:	4b14      	ldr	r3, [pc, #80]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 8008582:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1ef      	bne.n	800856e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 80c9 	beq.w	800872a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008598:	4b0e      	ldr	r3, [pc, #56]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f003 030c 	and.w	r3, r3, #12
 80085a0:	2b0c      	cmp	r3, #12
 80085a2:	f000 8083 	beq.w	80086ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d15e      	bne.n	800866c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085ae:	4b09      	ldr	r3, [pc, #36]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a08      	ldr	r2, [pc, #32]	@ (80085d4 <HAL_RCC_OscConfig+0x4b8>)
 80085b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ba:	f7fa fc1b 	bl	8002df4 <HAL_GetTick>
 80085be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085c0:	e00c      	b.n	80085dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085c2:	f7fa fc17 	bl	8002df4 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d905      	bls.n	80085dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e0ab      	b.n	800872c <HAL_RCC_OscConfig+0x610>
 80085d4:	40021000 	.word	0x40021000
 80085d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085dc:	4b55      	ldr	r3, [pc, #340]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1ec      	bne.n	80085c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085e8:	4b52      	ldr	r3, [pc, #328]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	4b52      	ldr	r3, [pc, #328]	@ (8008738 <HAL_RCC_OscConfig+0x61c>)
 80085ee:	4013      	ands	r3, r2
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6a11      	ldr	r1, [r2, #32]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80085f8:	3a01      	subs	r2, #1
 80085fa:	0112      	lsls	r2, r2, #4
 80085fc:	4311      	orrs	r1, r2
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008602:	0212      	lsls	r2, r2, #8
 8008604:	4311      	orrs	r1, r2
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800860a:	0852      	lsrs	r2, r2, #1
 800860c:	3a01      	subs	r2, #1
 800860e:	0552      	lsls	r2, r2, #21
 8008610:	4311      	orrs	r1, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008616:	0852      	lsrs	r2, r2, #1
 8008618:	3a01      	subs	r2, #1
 800861a:	0652      	lsls	r2, r2, #25
 800861c:	4311      	orrs	r1, r2
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008622:	06d2      	lsls	r2, r2, #27
 8008624:	430a      	orrs	r2, r1
 8008626:	4943      	ldr	r1, [pc, #268]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 8008628:	4313      	orrs	r3, r2
 800862a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800862c:	4b41      	ldr	r3, [pc, #260]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a40      	ldr	r2, [pc, #256]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 8008632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008636:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008638:	4b3e      	ldr	r3, [pc, #248]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	4a3d      	ldr	r2, [pc, #244]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 800863e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008642:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008644:	f7fa fbd6 	bl	8002df4 <HAL_GetTick>
 8008648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800864c:	f7fa fbd2 	bl	8002df4 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e066      	b.n	800872c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800865e:	4b35      	ldr	r3, [pc, #212]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0f0      	beq.n	800864c <HAL_RCC_OscConfig+0x530>
 800866a:	e05e      	b.n	800872a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800866c:	4b31      	ldr	r3, [pc, #196]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a30      	ldr	r2, [pc, #192]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 8008672:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008678:	f7fa fbbc 	bl	8002df4 <HAL_GetTick>
 800867c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800867e:	e008      	b.n	8008692 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008680:	f7fa fbb8 	bl	8002df4 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	2b02      	cmp	r3, #2
 800868c:	d901      	bls.n	8008692 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e04c      	b.n	800872c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008692:	4b28      	ldr	r3, [pc, #160]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1f0      	bne.n	8008680 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800869e:	4b25      	ldr	r3, [pc, #148]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	4924      	ldr	r1, [pc, #144]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 80086a4:	4b25      	ldr	r3, [pc, #148]	@ (800873c <HAL_RCC_OscConfig+0x620>)
 80086a6:	4013      	ands	r3, r2
 80086a8:	60cb      	str	r3, [r1, #12]
 80086aa:	e03e      	b.n	800872a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	69db      	ldr	r3, [r3, #28]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d101      	bne.n	80086b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e039      	b.n	800872c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80086b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008734 <HAL_RCC_OscConfig+0x618>)
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f003 0203 	and.w	r2, r3, #3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d12c      	bne.n	8008726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d6:	3b01      	subs	r3, #1
 80086d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086da:	429a      	cmp	r2, r3
 80086dc:	d123      	bne.n	8008726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d11b      	bne.n	8008726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d113      	bne.n	8008726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008708:	085b      	lsrs	r3, r3, #1
 800870a:	3b01      	subs	r3, #1
 800870c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800870e:	429a      	cmp	r2, r3
 8008710:	d109      	bne.n	8008726 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800871c:	085b      	lsrs	r3, r3, #1
 800871e:	3b01      	subs	r3, #1
 8008720:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008722:	429a      	cmp	r2, r3
 8008724:	d001      	beq.n	800872a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3720      	adds	r7, #32
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	40021000 	.word	0x40021000
 8008738:	019f800c 	.word	0x019f800c
 800873c:	feeefffc 	.word	0xfeeefffc

08008740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800874a:	2300      	movs	r3, #0
 800874c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e11e      	b.n	8008996 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008758:	4b91      	ldr	r3, [pc, #580]	@ (80089a0 <HAL_RCC_ClockConfig+0x260>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 030f 	and.w	r3, r3, #15
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d910      	bls.n	8008788 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008766:	4b8e      	ldr	r3, [pc, #568]	@ (80089a0 <HAL_RCC_ClockConfig+0x260>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f023 020f 	bic.w	r2, r3, #15
 800876e:	498c      	ldr	r1, [pc, #560]	@ (80089a0 <HAL_RCC_ClockConfig+0x260>)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	4313      	orrs	r3, r2
 8008774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008776:	4b8a      	ldr	r3, [pc, #552]	@ (80089a0 <HAL_RCC_ClockConfig+0x260>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 030f 	and.w	r3, r3, #15
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	429a      	cmp	r2, r3
 8008782:	d001      	beq.n	8008788 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e106      	b.n	8008996 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b00      	cmp	r3, #0
 8008792:	d073      	beq.n	800887c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2b03      	cmp	r3, #3
 800879a:	d129      	bne.n	80087f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800879c:	4b81      	ldr	r3, [pc, #516]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e0f4      	b.n	8008996 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80087ac:	f000 f9d0 	bl	8008b50 <RCC_GetSysClockFreqFromPLLSource>
 80087b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	4a7c      	ldr	r2, [pc, #496]	@ (80089a8 <HAL_RCC_ClockConfig+0x268>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d93f      	bls.n	800883a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80087ba:	4b7a      	ldr	r3, [pc, #488]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d009      	beq.n	80087da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d033      	beq.n	800883a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d12f      	bne.n	800883a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80087da:	4b72      	ldr	r3, [pc, #456]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087e2:	4a70      	ldr	r2, [pc, #448]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 80087e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80087ea:	2380      	movs	r3, #128	@ 0x80
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	e024      	b.n	800883a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d107      	bne.n	8008808 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087f8:	4b6a      	ldr	r3, [pc, #424]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d109      	bne.n	8008818 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e0c6      	b.n	8008996 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008808:	4b66      	ldr	r3, [pc, #408]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e0be      	b.n	8008996 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008818:	f000 f8ce 	bl	80089b8 <HAL_RCC_GetSysClockFreq>
 800881c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	4a61      	ldr	r2, [pc, #388]	@ (80089a8 <HAL_RCC_ClockConfig+0x268>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d909      	bls.n	800883a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008826:	4b5f      	ldr	r3, [pc, #380]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800882e:	4a5d      	ldr	r2, [pc, #372]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 8008830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008834:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008836:	2380      	movs	r3, #128	@ 0x80
 8008838:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800883a:	4b5a      	ldr	r3, [pc, #360]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f023 0203 	bic.w	r2, r3, #3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	4957      	ldr	r1, [pc, #348]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 8008848:	4313      	orrs	r3, r2
 800884a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800884c:	f7fa fad2 	bl	8002df4 <HAL_GetTick>
 8008850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008852:	e00a      	b.n	800886a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008854:	f7fa face 	bl	8002df4 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008862:	4293      	cmp	r3, r2
 8008864:	d901      	bls.n	800886a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e095      	b.n	8008996 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800886a:	4b4e      	ldr	r3, [pc, #312]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f003 020c 	and.w	r2, r3, #12
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	429a      	cmp	r2, r3
 800887a:	d1eb      	bne.n	8008854 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b00      	cmp	r3, #0
 8008886:	d023      	beq.n	80088d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d005      	beq.n	80088a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008894:	4b43      	ldr	r3, [pc, #268]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	4a42      	ldr	r2, [pc, #264]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 800889a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800889e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0308 	and.w	r3, r3, #8
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80088ac:	4b3d      	ldr	r3, [pc, #244]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80088b4:	4a3b      	ldr	r2, [pc, #236]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 80088b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80088ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088bc:	4b39      	ldr	r3, [pc, #228]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	4936      	ldr	r1, [pc, #216]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	608b      	str	r3, [r1, #8]
 80088ce:	e008      	b.n	80088e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2b80      	cmp	r3, #128	@ 0x80
 80088d4:	d105      	bne.n	80088e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80088d6:	4b33      	ldr	r3, [pc, #204]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	4a32      	ldr	r2, [pc, #200]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 80088dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088e2:	4b2f      	ldr	r3, [pc, #188]	@ (80089a0 <HAL_RCC_ClockConfig+0x260>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d21d      	bcs.n	800892c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088f0:	4b2b      	ldr	r3, [pc, #172]	@ (80089a0 <HAL_RCC_ClockConfig+0x260>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f023 020f 	bic.w	r2, r3, #15
 80088f8:	4929      	ldr	r1, [pc, #164]	@ (80089a0 <HAL_RCC_ClockConfig+0x260>)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008900:	f7fa fa78 	bl	8002df4 <HAL_GetTick>
 8008904:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008906:	e00a      	b.n	800891e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008908:	f7fa fa74 	bl	8002df4 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008916:	4293      	cmp	r3, r2
 8008918:	d901      	bls.n	800891e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e03b      	b.n	8008996 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800891e:	4b20      	ldr	r3, [pc, #128]	@ (80089a0 <HAL_RCC_ClockConfig+0x260>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 030f 	and.w	r3, r3, #15
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	429a      	cmp	r2, r3
 800892a:	d1ed      	bne.n	8008908 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	d008      	beq.n	800894a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008938:	4b1a      	ldr	r3, [pc, #104]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	4917      	ldr	r1, [pc, #92]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 8008946:	4313      	orrs	r3, r2
 8008948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0308 	and.w	r3, r3, #8
 8008952:	2b00      	cmp	r3, #0
 8008954:	d009      	beq.n	800896a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008956:	4b13      	ldr	r3, [pc, #76]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	490f      	ldr	r1, [pc, #60]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 8008966:	4313      	orrs	r3, r2
 8008968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800896a:	f000 f825 	bl	80089b8 <HAL_RCC_GetSysClockFreq>
 800896e:	4602      	mov	r2, r0
 8008970:	4b0c      	ldr	r3, [pc, #48]	@ (80089a4 <HAL_RCC_ClockConfig+0x264>)
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	091b      	lsrs	r3, r3, #4
 8008976:	f003 030f 	and.w	r3, r3, #15
 800897a:	490c      	ldr	r1, [pc, #48]	@ (80089ac <HAL_RCC_ClockConfig+0x26c>)
 800897c:	5ccb      	ldrb	r3, [r1, r3]
 800897e:	f003 031f 	and.w	r3, r3, #31
 8008982:	fa22 f303 	lsr.w	r3, r2, r3
 8008986:	4a0a      	ldr	r2, [pc, #40]	@ (80089b0 <HAL_RCC_ClockConfig+0x270>)
 8008988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800898a:	4b0a      	ldr	r3, [pc, #40]	@ (80089b4 <HAL_RCC_ClockConfig+0x274>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4618      	mov	r0, r3
 8008990:	f7f8 fdec 	bl	800156c <HAL_InitTick>
 8008994:	4603      	mov	r3, r0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	40022000 	.word	0x40022000
 80089a4:	40021000 	.word	0x40021000
 80089a8:	04c4b400 	.word	0x04c4b400
 80089ac:	0800d544 	.word	0x0800d544
 80089b0:	20000000 	.word	0x20000000
 80089b4:	2000004c 	.word	0x2000004c

080089b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80089be:	4b2c      	ldr	r3, [pc, #176]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 030c 	and.w	r3, r3, #12
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d102      	bne.n	80089d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80089ca:	4b2a      	ldr	r3, [pc, #168]	@ (8008a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 80089cc:	613b      	str	r3, [r7, #16]
 80089ce:	e047      	b.n	8008a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80089d0:	4b27      	ldr	r3, [pc, #156]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f003 030c 	and.w	r3, r3, #12
 80089d8:	2b08      	cmp	r3, #8
 80089da:	d102      	bne.n	80089e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80089dc:	4b26      	ldr	r3, [pc, #152]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 80089de:	613b      	str	r3, [r7, #16]
 80089e0:	e03e      	b.n	8008a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80089e2:	4b23      	ldr	r3, [pc, #140]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f003 030c 	and.w	r3, r3, #12
 80089ea:	2b0c      	cmp	r3, #12
 80089ec:	d136      	bne.n	8008a5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80089ee:	4b20      	ldr	r3, [pc, #128]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80089f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	091b      	lsrs	r3, r3, #4
 80089fe:	f003 030f 	and.w	r3, r3, #15
 8008a02:	3301      	adds	r3, #1
 8008a04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d10c      	bne.n	8008a26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a14:	4a16      	ldr	r2, [pc, #88]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a16:	68d2      	ldr	r2, [r2, #12]
 8008a18:	0a12      	lsrs	r2, r2, #8
 8008a1a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008a1e:	fb02 f303 	mul.w	r3, r2, r3
 8008a22:	617b      	str	r3, [r7, #20]
      break;
 8008a24:	e00c      	b.n	8008a40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008a26:	4a13      	ldr	r2, [pc, #76]	@ (8008a74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2e:	4a10      	ldr	r2, [pc, #64]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a30:	68d2      	ldr	r2, [r2, #12]
 8008a32:	0a12      	lsrs	r2, r2, #8
 8008a34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008a38:	fb02 f303 	mul.w	r3, r2, r3
 8008a3c:	617b      	str	r3, [r7, #20]
      break;
 8008a3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008a40:	4b0b      	ldr	r3, [pc, #44]	@ (8008a70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	0e5b      	lsrs	r3, r3, #25
 8008a46:	f003 0303 	and.w	r3, r3, #3
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a58:	613b      	str	r3, [r7, #16]
 8008a5a:	e001      	b.n	8008a60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008a60:	693b      	ldr	r3, [r7, #16]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	371c      	adds	r7, #28
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	40021000 	.word	0x40021000
 8008a74:	00f42400 	.word	0x00f42400
 8008a78:	016e3600 	.word	0x016e3600

08008a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a80:	4b03      	ldr	r3, [pc, #12]	@ (8008a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a82:	681b      	ldr	r3, [r3, #0]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	20000000 	.word	0x20000000

08008a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008a98:	f7ff fff0 	bl	8008a7c <HAL_RCC_GetHCLKFreq>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	4b06      	ldr	r3, [pc, #24]	@ (8008ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	0a1b      	lsrs	r3, r3, #8
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	4904      	ldr	r1, [pc, #16]	@ (8008abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008aaa:	5ccb      	ldrb	r3, [r1, r3]
 8008aac:	f003 031f 	and.w	r3, r3, #31
 8008ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	40021000 	.word	0x40021000
 8008abc:	0800d554 	.word	0x0800d554

08008ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008ac4:	f7ff ffda 	bl	8008a7c <HAL_RCC_GetHCLKFreq>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	4b06      	ldr	r3, [pc, #24]	@ (8008ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	0adb      	lsrs	r3, r3, #11
 8008ad0:	f003 0307 	and.w	r3, r3, #7
 8008ad4:	4904      	ldr	r1, [pc, #16]	@ (8008ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ad6:	5ccb      	ldrb	r3, [r1, r3]
 8008ad8:	f003 031f 	and.w	r3, r3, #31
 8008adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	40021000 	.word	0x40021000
 8008ae8:	0800d554 	.word	0x0800d554

08008aec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	220f      	movs	r2, #15
 8008afa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008afc:	4b12      	ldr	r3, [pc, #72]	@ (8008b48 <HAL_RCC_GetClockConfig+0x5c>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f003 0203 	and.w	r2, r3, #3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008b08:	4b0f      	ldr	r3, [pc, #60]	@ (8008b48 <HAL_RCC_GetClockConfig+0x5c>)
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008b14:	4b0c      	ldr	r3, [pc, #48]	@ (8008b48 <HAL_RCC_GetClockConfig+0x5c>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008b20:	4b09      	ldr	r3, [pc, #36]	@ (8008b48 <HAL_RCC_GetClockConfig+0x5c>)
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	08db      	lsrs	r3, r3, #3
 8008b26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008b2e:	4b07      	ldr	r3, [pc, #28]	@ (8008b4c <HAL_RCC_GetClockConfig+0x60>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 020f 	and.w	r2, r3, #15
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	601a      	str	r2, [r3, #0]
}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	40021000 	.word	0x40021000
 8008b4c:	40022000 	.word	0x40022000

08008b50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b56:	4b1e      	ldr	r3, [pc, #120]	@ (8008bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b60:	4b1b      	ldr	r3, [pc, #108]	@ (8008bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	091b      	lsrs	r3, r3, #4
 8008b66:	f003 030f 	and.w	r3, r3, #15
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d10c      	bne.n	8008b8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b74:	4a17      	ldr	r2, [pc, #92]	@ (8008bd4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7c:	4a14      	ldr	r2, [pc, #80]	@ (8008bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b7e:	68d2      	ldr	r2, [r2, #12]
 8008b80:	0a12      	lsrs	r2, r2, #8
 8008b82:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008b86:	fb02 f303 	mul.w	r3, r2, r3
 8008b8a:	617b      	str	r3, [r7, #20]
    break;
 8008b8c:	e00c      	b.n	8008ba8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b8e:	4a12      	ldr	r2, [pc, #72]	@ (8008bd8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b96:	4a0e      	ldr	r2, [pc, #56]	@ (8008bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b98:	68d2      	ldr	r2, [r2, #12]
 8008b9a:	0a12      	lsrs	r2, r2, #8
 8008b9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008ba0:	fb02 f303 	mul.w	r3, r2, r3
 8008ba4:	617b      	str	r3, [r7, #20]
    break;
 8008ba6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008ba8:	4b09      	ldr	r3, [pc, #36]	@ (8008bd0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	0e5b      	lsrs	r3, r3, #25
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008bc2:	687b      	ldr	r3, [r7, #4]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	371c      	adds	r7, #28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	40021000 	.word	0x40021000
 8008bd4:	016e3600 	.word	0x016e3600
 8008bd8:	00f42400 	.word	0x00f42400

08008bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008be4:	2300      	movs	r3, #0
 8008be6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008be8:	2300      	movs	r3, #0
 8008bea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 8098 	beq.w	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bfe:	4b43      	ldr	r3, [pc, #268]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10d      	bne.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c0a:	4b40      	ldr	r3, [pc, #256]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c0e:	4a3f      	ldr	r2, [pc, #252]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c16:	4b3d      	ldr	r3, [pc, #244]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c1e:	60bb      	str	r3, [r7, #8]
 8008c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c22:	2301      	movs	r3, #1
 8008c24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c26:	4b3a      	ldr	r3, [pc, #232]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a39      	ldr	r2, [pc, #228]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c32:	f7fa f8df 	bl	8002df4 <HAL_GetTick>
 8008c36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c38:	e009      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c3a:	f7fa f8db 	bl	8002df4 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d902      	bls.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	74fb      	strb	r3, [r7, #19]
        break;
 8008c4c:	e005      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c4e:	4b30      	ldr	r3, [pc, #192]	@ (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0ef      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008c5a:	7cfb      	ldrb	r3, [r7, #19]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d159      	bne.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008c60:	4b2a      	ldr	r3, [pc, #168]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d01e      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d019      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008c7c:	4b23      	ldr	r3, [pc, #140]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c88:	4b20      	ldr	r3, [pc, #128]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c98:	4b1c      	ldr	r3, [pc, #112]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ca4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008ca8:	4a18      	ldr	r2, [pc, #96]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d016      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cba:	f7fa f89b 	bl	8002df4 <HAL_GetTick>
 8008cbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cc0:	e00b      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cc2:	f7fa f897 	bl	8002df4 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d902      	bls.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	74fb      	strb	r3, [r7, #19]
            break;
 8008cd8:	e006      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cda:	4b0c      	ldr	r3, [pc, #48]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d0ec      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008ce8:	7cfb      	ldrb	r3, [r7, #19]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10b      	bne.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008cee:	4b07      	ldr	r3, [pc, #28]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cfc:	4903      	ldr	r1, [pc, #12]	@ (8008d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008d04:	e008      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d06:	7cfb      	ldrb	r3, [r7, #19]
 8008d08:	74bb      	strb	r3, [r7, #18]
 8008d0a:	e005      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008d0c:	40021000 	.word	0x40021000
 8008d10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d14:	7cfb      	ldrb	r3, [r7, #19]
 8008d16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d18:	7c7b      	ldrb	r3, [r7, #17]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d105      	bne.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d1e:	4ba7      	ldr	r3, [pc, #668]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d22:	4aa6      	ldr	r2, [pc, #664]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00a      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008d36:	4ba1      	ldr	r3, [pc, #644]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d3c:	f023 0203 	bic.w	r2, r3, #3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	499d      	ldr	r1, [pc, #628]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0302 	and.w	r3, r3, #2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00a      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008d58:	4b98      	ldr	r3, [pc, #608]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d5e:	f023 020c 	bic.w	r2, r3, #12
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	4995      	ldr	r1, [pc, #596]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0304 	and.w	r3, r3, #4
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00a      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008d7a:	4b90      	ldr	r3, [pc, #576]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d80:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	498c      	ldr	r1, [pc, #560]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0308 	and.w	r3, r3, #8
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00a      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008d9c:	4b87      	ldr	r3, [pc, #540]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008da2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	4984      	ldr	r1, [pc, #528]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dac:	4313      	orrs	r3, r2
 8008dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0310 	and.w	r3, r3, #16
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00a      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	497b      	ldr	r1, [pc, #492]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0320 	and.w	r3, r3, #32
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00a      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008de0:	4b76      	ldr	r3, [pc, #472]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008de6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	4973      	ldr	r1, [pc, #460]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00a      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e02:	4b6e      	ldr	r3, [pc, #440]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e08:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	496a      	ldr	r1, [pc, #424]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00a      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e24:	4b65      	ldr	r3, [pc, #404]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a1b      	ldr	r3, [r3, #32]
 8008e32:	4962      	ldr	r1, [pc, #392]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e34:	4313      	orrs	r3, r2
 8008e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00a      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e46:	4b5d      	ldr	r3, [pc, #372]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e4c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e54:	4959      	ldr	r1, [pc, #356]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00a      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e68:	4b54      	ldr	r3, [pc, #336]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e6e:	f023 0203 	bic.w	r2, r3, #3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e76:	4951      	ldr	r1, [pc, #324]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e98:	4948      	ldr	r1, [pc, #288]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d015      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008eac:	4b43      	ldr	r3, [pc, #268]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eba:	4940      	ldr	r1, [pc, #256]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008eca:	d105      	bne.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	4a3a      	ldr	r2, [pc, #232]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ed6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d015      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008ee4:	4b35      	ldr	r3, [pc, #212]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ef2:	4932      	ldr	r1, [pc, #200]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008efe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f02:	d105      	bne.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f04:	4b2d      	ldr	r3, [pc, #180]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	4a2c      	ldr	r2, [pc, #176]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f0e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d015      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f1c:	4b27      	ldr	r3, [pc, #156]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f22:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2a:	4924      	ldr	r1, [pc, #144]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f3a:	d105      	bne.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	4a1e      	ldr	r2, [pc, #120]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d015      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f54:	4b19      	ldr	r3, [pc, #100]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f62:	4916      	ldr	r1, [pc, #88]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f72:	d105      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f74:	4b11      	ldr	r3, [pc, #68]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	4a10      	ldr	r2, [pc, #64]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d019      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9a:	4908      	ldr	r1, [pc, #32]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008faa:	d109      	bne.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fac:	4b03      	ldr	r3, [pc, #12]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	4a02      	ldr	r2, [pc, #8]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fb6:	60d3      	str	r3, [r2, #12]
 8008fb8:	e002      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008fba:	bf00      	nop
 8008fbc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d015      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008fcc:	4b29      	ldr	r3, [pc, #164]	@ (8009074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fd2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fda:	4926      	ldr	r1, [pc, #152]	@ (8009074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fea:	d105      	bne.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008fec:	4b21      	ldr	r3, [pc, #132]	@ (8009074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	4a20      	ldr	r2, [pc, #128]	@ (8009074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ff6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d015      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009004:	4b1b      	ldr	r3, [pc, #108]	@ (8009074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800900a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009012:	4918      	ldr	r1, [pc, #96]	@ (8009074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009014:	4313      	orrs	r3, r2
 8009016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800901e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009022:	d105      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009024:	4b13      	ldr	r3, [pc, #76]	@ (8009074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	4a12      	ldr	r2, [pc, #72]	@ (8009074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800902a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800902e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d015      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800903c:	4b0d      	ldr	r3, [pc, #52]	@ (8009074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800903e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009042:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800904a:	490a      	ldr	r1, [pc, #40]	@ (8009074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800904c:	4313      	orrs	r3, r2
 800904e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009056:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800905a:	d105      	bne.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800905c:	4b05      	ldr	r3, [pc, #20]	@ (8009074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	4a04      	ldr	r2, [pc, #16]	@ (8009074 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009066:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009068:	7cbb      	ldrb	r3, [r7, #18]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3718      	adds	r7, #24
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40021000 	.word	0x40021000

08009078 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e09d      	b.n	80091c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800908e:	2b00      	cmp	r3, #0
 8009090:	d108      	bne.n	80090a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800909a:	d009      	beq.n	80090b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	61da      	str	r2, [r3, #28]
 80090a2:	e005      	b.n	80090b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d106      	bne.n	80090d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f7f8 f9da 	bl	8001484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2202      	movs	r2, #2
 80090d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090f0:	d902      	bls.n	80090f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	e002      	b.n	80090fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80090f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80090fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009106:	d007      	beq.n	8009118 <HAL_SPI_Init+0xa0>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009110:	d002      	beq.n	8009118 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009128:	431a      	orrs	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	431a      	orrs	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	431a      	orrs	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009146:	431a      	orrs	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009150:	431a      	orrs	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800915a:	ea42 0103 	orr.w	r1, r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009162:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	699b      	ldr	r3, [r3, #24]
 8009172:	0c1b      	lsrs	r3, r3, #16
 8009174:	f003 0204 	and.w	r2, r3, #4
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917c:	f003 0310 	and.w	r3, r3, #16
 8009180:	431a      	orrs	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009186:	f003 0308 	and.w	r3, r3, #8
 800918a:	431a      	orrs	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009194:	ea42 0103 	orr.w	r1, r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	69da      	ldr	r2, [r3, #28]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80091b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
	...

080091d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10e      	bne.n	8009210 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d009      	beq.n	8009210 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009202:	2b00      	cmp	r3, #0
 8009204:	d004      	beq.n	8009210 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	4798      	blx	r3
    return;
 800920e:	e0ce      	b.n	80093ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d009      	beq.n	800922e <HAL_SPI_IRQHandler+0x5e>
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	4798      	blx	r3
    return;
 800922c:	e0bf      	b.n	80093ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	f003 0320 	and.w	r3, r3, #32
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10a      	bne.n	800924e <HAL_SPI_IRQHandler+0x7e>
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800923e:	2b00      	cmp	r3, #0
 8009240:	d105      	bne.n	800924e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 80b0 	beq.w	80093ae <HAL_SPI_IRQHandler+0x1de>
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 80aa 	beq.w	80093ae <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009260:	2b00      	cmp	r3, #0
 8009262:	d023      	beq.n	80092ac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b03      	cmp	r3, #3
 800926e:	d011      	beq.n	8009294 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009274:	f043 0204 	orr.w	r2, r3, #4
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800927c:	2300      	movs	r3, #0
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	617b      	str	r3, [r7, #20]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	e00b      	b.n	80092ac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009294:	2300      	movs	r3, #0
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	613b      	str	r3, [r7, #16]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	613b      	str	r3, [r7, #16]
 80092a8:	693b      	ldr	r3, [r7, #16]
        return;
 80092aa:	e080      	b.n	80093ae <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d014      	beq.n	80092e0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ba:	f043 0201 	orr.w	r2, r3, #1
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80092c2:	2300      	movs	r3, #0
 80092c4:	60fb      	str	r3, [r7, #12]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00c      	beq.n	8009304 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ee:	f043 0208 	orr.w	r2, r3, #8
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80092f6:	2300      	movs	r3, #0
 80092f8:	60bb      	str	r3, [r7, #8]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	60bb      	str	r3, [r7, #8]
 8009302:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009308:	2b00      	cmp	r3, #0
 800930a:	d04f      	beq.n	80093ac <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800931a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d104      	bne.n	8009338 <HAL_SPI_IRQHandler+0x168>
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	f003 0301 	and.w	r3, r3, #1
 8009334:	2b00      	cmp	r3, #0
 8009336:	d034      	beq.n	80093a2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 0203 	bic.w	r2, r2, #3
 8009346:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800934c:	2b00      	cmp	r3, #0
 800934e:	d011      	beq.n	8009374 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009354:	4a17      	ldr	r2, [pc, #92]	@ (80093b4 <HAL_SPI_IRQHandler+0x1e4>)
 8009356:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800935c:	4618      	mov	r0, r3
 800935e:	f7fb fe86 	bl	800506e <HAL_DMA_Abort_IT>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800936c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009378:	2b00      	cmp	r3, #0
 800937a:	d016      	beq.n	80093aa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009380:	4a0c      	ldr	r2, [pc, #48]	@ (80093b4 <HAL_SPI_IRQHandler+0x1e4>)
 8009382:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009388:	4618      	mov	r0, r3
 800938a:	f7fb fe70 	bl	800506e <HAL_DMA_Abort_IT>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00a      	beq.n	80093aa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009398:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80093a0:	e003      	b.n	80093aa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f808 	bl	80093b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80093a8:	e000      	b.n	80093ac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80093aa:	bf00      	nop
    return;
 80093ac:	bf00      	nop
  }
}
 80093ae:	3720      	adds	r7, #32
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	080093cd 	.word	0x080093cd

080093b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f7ff ffe5 	bl	80093b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093ee:	bf00      	nop
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b082      	sub	sp, #8
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e049      	b.n	800949c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	d106      	bne.n	8009422 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f841 	bl	80094a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2202      	movs	r2, #2
 8009426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	3304      	adds	r3, #4
 8009432:	4619      	mov	r1, r3
 8009434:	4610      	mov	r0, r2
 8009436:	f000 fcad 	bl	8009d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2201      	movs	r2, #1
 8009466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d001      	beq.n	80094d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e054      	b.n	800957a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68da      	ldr	r2, [r3, #12]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f042 0201 	orr.w	r2, r2, #1
 80094e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a26      	ldr	r2, [pc, #152]	@ (8009588 <HAL_TIM_Base_Start_IT+0xd0>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d022      	beq.n	8009538 <HAL_TIM_Base_Start_IT+0x80>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094fa:	d01d      	beq.n	8009538 <HAL_TIM_Base_Start_IT+0x80>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a22      	ldr	r2, [pc, #136]	@ (800958c <HAL_TIM_Base_Start_IT+0xd4>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d018      	beq.n	8009538 <HAL_TIM_Base_Start_IT+0x80>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a21      	ldr	r2, [pc, #132]	@ (8009590 <HAL_TIM_Base_Start_IT+0xd8>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d013      	beq.n	8009538 <HAL_TIM_Base_Start_IT+0x80>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a1f      	ldr	r2, [pc, #124]	@ (8009594 <HAL_TIM_Base_Start_IT+0xdc>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d00e      	beq.n	8009538 <HAL_TIM_Base_Start_IT+0x80>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a1e      	ldr	r2, [pc, #120]	@ (8009598 <HAL_TIM_Base_Start_IT+0xe0>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d009      	beq.n	8009538 <HAL_TIM_Base_Start_IT+0x80>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a1c      	ldr	r2, [pc, #112]	@ (800959c <HAL_TIM_Base_Start_IT+0xe4>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d004      	beq.n	8009538 <HAL_TIM_Base_Start_IT+0x80>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a1b      	ldr	r2, [pc, #108]	@ (80095a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d115      	bne.n	8009564 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	4b19      	ldr	r3, [pc, #100]	@ (80095a4 <HAL_TIM_Base_Start_IT+0xec>)
 8009540:	4013      	ands	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b06      	cmp	r3, #6
 8009548:	d015      	beq.n	8009576 <HAL_TIM_Base_Start_IT+0xbe>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009550:	d011      	beq.n	8009576 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f042 0201 	orr.w	r2, r2, #1
 8009560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009562:	e008      	b.n	8009576 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f042 0201 	orr.w	r2, r2, #1
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	e000      	b.n	8009578 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009576:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	40012c00 	.word	0x40012c00
 800958c:	40000400 	.word	0x40000400
 8009590:	40000800 	.word	0x40000800
 8009594:	40000c00 	.word	0x40000c00
 8009598:	40013400 	.word	0x40013400
 800959c:	40014000 	.word	0x40014000
 80095a0:	40015000 	.word	0x40015000
 80095a4:	00010007 	.word	0x00010007

080095a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e049      	b.n	800964e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d106      	bne.n	80095d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7f8 f942 	bl	8001858 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2202      	movs	r2, #2
 80095d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f000 fbd4 	bl	8009d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2201      	movs	r2, #1
 80095f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
	...

08009658 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d104      	bne.n	8009676 <HAL_TIM_IC_Start_IT+0x1e>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009672:	b2db      	uxtb	r3, r3
 8009674:	e023      	b.n	80096be <HAL_TIM_IC_Start_IT+0x66>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b04      	cmp	r3, #4
 800967a:	d104      	bne.n	8009686 <HAL_TIM_IC_Start_IT+0x2e>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009682:	b2db      	uxtb	r3, r3
 8009684:	e01b      	b.n	80096be <HAL_TIM_IC_Start_IT+0x66>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b08      	cmp	r3, #8
 800968a:	d104      	bne.n	8009696 <HAL_TIM_IC_Start_IT+0x3e>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009692:	b2db      	uxtb	r3, r3
 8009694:	e013      	b.n	80096be <HAL_TIM_IC_Start_IT+0x66>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b0c      	cmp	r3, #12
 800969a:	d104      	bne.n	80096a6 <HAL_TIM_IC_Start_IT+0x4e>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	e00b      	b.n	80096be <HAL_TIM_IC_Start_IT+0x66>
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b10      	cmp	r3, #16
 80096aa:	d104      	bne.n	80096b6 <HAL_TIM_IC_Start_IT+0x5e>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	e003      	b.n	80096be <HAL_TIM_IC_Start_IT+0x66>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d104      	bne.n	80096d0 <HAL_TIM_IC_Start_IT+0x78>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	e013      	b.n	80096f8 <HAL_TIM_IC_Start_IT+0xa0>
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2b04      	cmp	r3, #4
 80096d4:	d104      	bne.n	80096e0 <HAL_TIM_IC_Start_IT+0x88>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	e00b      	b.n	80096f8 <HAL_TIM_IC_Start_IT+0xa0>
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2b08      	cmp	r3, #8
 80096e4:	d104      	bne.n	80096f0 <HAL_TIM_IC_Start_IT+0x98>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	e003      	b.n	80096f8 <HAL_TIM_IC_Start_IT+0xa0>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d102      	bne.n	8009706 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009700:	7b7b      	ldrb	r3, [r7, #13]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d001      	beq.n	800970a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e0e2      	b.n	80098d0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d104      	bne.n	800971a <HAL_TIM_IC_Start_IT+0xc2>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2202      	movs	r2, #2
 8009714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009718:	e023      	b.n	8009762 <HAL_TIM_IC_Start_IT+0x10a>
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b04      	cmp	r3, #4
 800971e:	d104      	bne.n	800972a <HAL_TIM_IC_Start_IT+0xd2>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2202      	movs	r2, #2
 8009724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009728:	e01b      	b.n	8009762 <HAL_TIM_IC_Start_IT+0x10a>
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2b08      	cmp	r3, #8
 800972e:	d104      	bne.n	800973a <HAL_TIM_IC_Start_IT+0xe2>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2202      	movs	r2, #2
 8009734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009738:	e013      	b.n	8009762 <HAL_TIM_IC_Start_IT+0x10a>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b0c      	cmp	r3, #12
 800973e:	d104      	bne.n	800974a <HAL_TIM_IC_Start_IT+0xf2>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2202      	movs	r2, #2
 8009744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009748:	e00b      	b.n	8009762 <HAL_TIM_IC_Start_IT+0x10a>
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2b10      	cmp	r3, #16
 800974e:	d104      	bne.n	800975a <HAL_TIM_IC_Start_IT+0x102>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2202      	movs	r2, #2
 8009754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009758:	e003      	b.n	8009762 <HAL_TIM_IC_Start_IT+0x10a>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2202      	movs	r2, #2
 800975e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d104      	bne.n	8009772 <HAL_TIM_IC_Start_IT+0x11a>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009770:	e013      	b.n	800979a <HAL_TIM_IC_Start_IT+0x142>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b04      	cmp	r3, #4
 8009776:	d104      	bne.n	8009782 <HAL_TIM_IC_Start_IT+0x12a>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009780:	e00b      	b.n	800979a <HAL_TIM_IC_Start_IT+0x142>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b08      	cmp	r3, #8
 8009786:	d104      	bne.n	8009792 <HAL_TIM_IC_Start_IT+0x13a>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009790:	e003      	b.n	800979a <HAL_TIM_IC_Start_IT+0x142>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2202      	movs	r2, #2
 8009796:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b0c      	cmp	r3, #12
 800979e:	d841      	bhi.n	8009824 <HAL_TIM_IC_Start_IT+0x1cc>
 80097a0:	a201      	add	r2, pc, #4	@ (adr r2, 80097a8 <HAL_TIM_IC_Start_IT+0x150>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	080097dd 	.word	0x080097dd
 80097ac:	08009825 	.word	0x08009825
 80097b0:	08009825 	.word	0x08009825
 80097b4:	08009825 	.word	0x08009825
 80097b8:	080097ef 	.word	0x080097ef
 80097bc:	08009825 	.word	0x08009825
 80097c0:	08009825 	.word	0x08009825
 80097c4:	08009825 	.word	0x08009825
 80097c8:	08009801 	.word	0x08009801
 80097cc:	08009825 	.word	0x08009825
 80097d0:	08009825 	.word	0x08009825
 80097d4:	08009825 	.word	0x08009825
 80097d8:	08009813 	.word	0x08009813
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68da      	ldr	r2, [r3, #12]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f042 0202 	orr.w	r2, r2, #2
 80097ea:	60da      	str	r2, [r3, #12]
      break;
 80097ec:	e01d      	b.n	800982a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68da      	ldr	r2, [r3, #12]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f042 0204 	orr.w	r2, r2, #4
 80097fc:	60da      	str	r2, [r3, #12]
      break;
 80097fe:	e014      	b.n	800982a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68da      	ldr	r2, [r3, #12]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0208 	orr.w	r2, r2, #8
 800980e:	60da      	str	r2, [r3, #12]
      break;
 8009810:	e00b      	b.n	800982a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68da      	ldr	r2, [r3, #12]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f042 0210 	orr.w	r2, r2, #16
 8009820:	60da      	str	r2, [r3, #12]
      break;
 8009822:	e002      	b.n	800982a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	73fb      	strb	r3, [r7, #15]
      break;
 8009828:	bf00      	nop
  }

  if (status == HAL_OK)
 800982a:	7bfb      	ldrb	r3, [r7, #15]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d14e      	bne.n	80098ce <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2201      	movs	r2, #1
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	4618      	mov	r0, r3
 800983a:	f000 fc89 	bl	800a150 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a25      	ldr	r2, [pc, #148]	@ (80098d8 <HAL_TIM_IC_Start_IT+0x280>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d022      	beq.n	800988e <HAL_TIM_IC_Start_IT+0x236>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009850:	d01d      	beq.n	800988e <HAL_TIM_IC_Start_IT+0x236>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a21      	ldr	r2, [pc, #132]	@ (80098dc <HAL_TIM_IC_Start_IT+0x284>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d018      	beq.n	800988e <HAL_TIM_IC_Start_IT+0x236>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a1f      	ldr	r2, [pc, #124]	@ (80098e0 <HAL_TIM_IC_Start_IT+0x288>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d013      	beq.n	800988e <HAL_TIM_IC_Start_IT+0x236>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a1e      	ldr	r2, [pc, #120]	@ (80098e4 <HAL_TIM_IC_Start_IT+0x28c>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d00e      	beq.n	800988e <HAL_TIM_IC_Start_IT+0x236>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a1c      	ldr	r2, [pc, #112]	@ (80098e8 <HAL_TIM_IC_Start_IT+0x290>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d009      	beq.n	800988e <HAL_TIM_IC_Start_IT+0x236>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a1b      	ldr	r2, [pc, #108]	@ (80098ec <HAL_TIM_IC_Start_IT+0x294>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d004      	beq.n	800988e <HAL_TIM_IC_Start_IT+0x236>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a19      	ldr	r2, [pc, #100]	@ (80098f0 <HAL_TIM_IC_Start_IT+0x298>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d115      	bne.n	80098ba <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	689a      	ldr	r2, [r3, #8]
 8009894:	4b17      	ldr	r3, [pc, #92]	@ (80098f4 <HAL_TIM_IC_Start_IT+0x29c>)
 8009896:	4013      	ands	r3, r2
 8009898:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2b06      	cmp	r3, #6
 800989e:	d015      	beq.n	80098cc <HAL_TIM_IC_Start_IT+0x274>
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098a6:	d011      	beq.n	80098cc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f042 0201 	orr.w	r2, r2, #1
 80098b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098b8:	e008      	b.n	80098cc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f042 0201 	orr.w	r2, r2, #1
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	e000      	b.n	80098ce <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	40012c00 	.word	0x40012c00
 80098dc:	40000400 	.word	0x40000400
 80098e0:	40000800 	.word	0x40000800
 80098e4:	40000c00 	.word	0x40000c00
 80098e8:	40013400 	.word	0x40013400
 80098ec:	40014000 	.word	0x40014000
 80098f0:	40015000 	.word	0x40015000
 80098f4:	00010007 	.word	0x00010007

080098f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f003 0302 	and.w	r3, r3, #2
 8009916:	2b00      	cmp	r3, #0
 8009918:	d020      	beq.n	800995c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f003 0302 	and.w	r3, r3, #2
 8009920:	2b00      	cmp	r3, #0
 8009922:	d01b      	beq.n	800995c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f06f 0202 	mvn.w	r2, #2
 800992c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	f003 0303 	and.w	r3, r3, #3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7f8 fd74 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 8009948:	e005      	b.n	8009956 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fa04 	bl	8009d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fa0b 	bl	8009d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f003 0304 	and.w	r3, r3, #4
 8009962:	2b00      	cmp	r3, #0
 8009964:	d020      	beq.n	80099a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f003 0304 	and.w	r3, r3, #4
 800996c:	2b00      	cmp	r3, #0
 800996e:	d01b      	beq.n	80099a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f06f 0204 	mvn.w	r2, #4
 8009978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2202      	movs	r2, #2
 800997e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7f8 fd4e 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 8009994:	e005      	b.n	80099a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f9de 	bl	8009d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f9e5 	bl	8009d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	f003 0308 	and.w	r3, r3, #8
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d020      	beq.n	80099f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f003 0308 	and.w	r3, r3, #8
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d01b      	beq.n	80099f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f06f 0208 	mvn.w	r2, #8
 80099c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2204      	movs	r2, #4
 80099ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7f8 fd28 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 80099e0:	e005      	b.n	80099ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f9b8 	bl	8009d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f9bf 	bl	8009d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f003 0310 	and.w	r3, r3, #16
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d020      	beq.n	8009a40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f003 0310 	and.w	r3, r3, #16
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01b      	beq.n	8009a40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f06f 0210 	mvn.w	r2, #16
 8009a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2208      	movs	r2, #8
 8009a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d003      	beq.n	8009a2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7f8 fd02 	bl	8002430 <HAL_TIM_IC_CaptureCallback>
 8009a2c:	e005      	b.n	8009a3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f992 	bl	8009d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f999 	bl	8009d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00c      	beq.n	8009a64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d007      	beq.n	8009a64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f06f 0201 	mvn.w	r2, #1
 8009a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7f7 fcba 	bl	80013d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d104      	bne.n	8009a78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00c      	beq.n	8009a92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d007      	beq.n	8009a92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fc25 	bl	800a2dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00c      	beq.n	8009ab6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fc1d 	bl	800a2f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00c      	beq.n	8009ada <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d007      	beq.n	8009ada <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f953 	bl	8009d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	f003 0320 	and.w	r3, r3, #32
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00c      	beq.n	8009afe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d007      	beq.n	8009afe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f06f 0220 	mvn.w	r2, #32
 8009af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fbe5 	bl	800a2c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00c      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d007      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fbf1 	bl	800a304 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00c      	beq.n	8009b46 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fbe9 	bl	800a318 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00c      	beq.n	8009b6a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d007      	beq.n	8009b6a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fbe1 	bl	800a32c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00c      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fbd9 	bl	800a340 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b8e:	bf00      	nop
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b086      	sub	sp, #24
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d101      	bne.n	8009bb4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009bb0:	2302      	movs	r3, #2
 8009bb2:	e088      	b.n	8009cc6 <HAL_TIM_IC_ConfigChannel+0x130>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d11b      	bne.n	8009bfa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009bd2:	f000 f993 	bl	8009efc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	699a      	ldr	r2, [r3, #24]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 020c 	bic.w	r2, r2, #12
 8009be4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	6999      	ldr	r1, [r3, #24]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	689a      	ldr	r2, [r3, #8]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	619a      	str	r2, [r3, #24]
 8009bf8:	e060      	b.n	8009cbc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b04      	cmp	r3, #4
 8009bfe:	d11c      	bne.n	8009c3a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009c10:	f000 f9e8 	bl	8009fe4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	699a      	ldr	r2, [r3, #24]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009c22:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6999      	ldr	r1, [r3, #24]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	021a      	lsls	r2, r3, #8
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	430a      	orrs	r2, r1
 8009c36:	619a      	str	r2, [r3, #24]
 8009c38:	e040      	b.n	8009cbc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b08      	cmp	r3, #8
 8009c3e:	d11b      	bne.n	8009c78 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009c50:	f000 fa05 	bl	800a05e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	69da      	ldr	r2, [r3, #28]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f022 020c 	bic.w	r2, r2, #12
 8009c62:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	69d9      	ldr	r1, [r3, #28]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	689a      	ldr	r2, [r3, #8]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	61da      	str	r2, [r3, #28]
 8009c76:	e021      	b.n	8009cbc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b0c      	cmp	r3, #12
 8009c7c:	d11c      	bne.n	8009cb8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009c8e:	f000 fa22 	bl	800a0d6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	69da      	ldr	r2, [r3, #28]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009ca0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	69d9      	ldr	r1, [r3, #28]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	021a      	lsls	r2, r3, #8
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	61da      	str	r2, [r3, #28]
 8009cb6:	e001      	b.n	8009cbc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b0c      	cmp	r3, #12
 8009ce2:	d831      	bhi.n	8009d48 <HAL_TIM_ReadCapturedValue+0x78>
 8009ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8009cec <HAL_TIM_ReadCapturedValue+0x1c>)
 8009ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cea:	bf00      	nop
 8009cec:	08009d21 	.word	0x08009d21
 8009cf0:	08009d49 	.word	0x08009d49
 8009cf4:	08009d49 	.word	0x08009d49
 8009cf8:	08009d49 	.word	0x08009d49
 8009cfc:	08009d2b 	.word	0x08009d2b
 8009d00:	08009d49 	.word	0x08009d49
 8009d04:	08009d49 	.word	0x08009d49
 8009d08:	08009d49 	.word	0x08009d49
 8009d0c:	08009d35 	.word	0x08009d35
 8009d10:	08009d49 	.word	0x08009d49
 8009d14:	08009d49 	.word	0x08009d49
 8009d18:	08009d49 	.word	0x08009d49
 8009d1c:	08009d3f 	.word	0x08009d3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d26:	60fb      	str	r3, [r7, #12]

      break;
 8009d28:	e00f      	b.n	8009d4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d30:	60fb      	str	r3, [r7, #12]

      break;
 8009d32:	e00a      	b.n	8009d4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d3a:	60fb      	str	r3, [r7, #12]

      break;
 8009d3c:	e005      	b.n	8009d4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d44:	60fb      	str	r3, [r7, #12]

      break;
 8009d46:	e000      	b.n	8009d4a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009d48:	bf00      	nop
  }

  return tmpreg;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a4c      	ldr	r2, [pc, #304]	@ (8009ed8 <TIM_Base_SetConfig+0x144>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d017      	beq.n	8009ddc <TIM_Base_SetConfig+0x48>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009db2:	d013      	beq.n	8009ddc <TIM_Base_SetConfig+0x48>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a49      	ldr	r2, [pc, #292]	@ (8009edc <TIM_Base_SetConfig+0x148>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d00f      	beq.n	8009ddc <TIM_Base_SetConfig+0x48>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a48      	ldr	r2, [pc, #288]	@ (8009ee0 <TIM_Base_SetConfig+0x14c>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d00b      	beq.n	8009ddc <TIM_Base_SetConfig+0x48>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a47      	ldr	r2, [pc, #284]	@ (8009ee4 <TIM_Base_SetConfig+0x150>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d007      	beq.n	8009ddc <TIM_Base_SetConfig+0x48>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a46      	ldr	r2, [pc, #280]	@ (8009ee8 <TIM_Base_SetConfig+0x154>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d003      	beq.n	8009ddc <TIM_Base_SetConfig+0x48>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a45      	ldr	r2, [pc, #276]	@ (8009eec <TIM_Base_SetConfig+0x158>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d108      	bne.n	8009dee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a39      	ldr	r2, [pc, #228]	@ (8009ed8 <TIM_Base_SetConfig+0x144>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d023      	beq.n	8009e3e <TIM_Base_SetConfig+0xaa>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dfc:	d01f      	beq.n	8009e3e <TIM_Base_SetConfig+0xaa>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a36      	ldr	r2, [pc, #216]	@ (8009edc <TIM_Base_SetConfig+0x148>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d01b      	beq.n	8009e3e <TIM_Base_SetConfig+0xaa>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a35      	ldr	r2, [pc, #212]	@ (8009ee0 <TIM_Base_SetConfig+0x14c>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d017      	beq.n	8009e3e <TIM_Base_SetConfig+0xaa>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a34      	ldr	r2, [pc, #208]	@ (8009ee4 <TIM_Base_SetConfig+0x150>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d013      	beq.n	8009e3e <TIM_Base_SetConfig+0xaa>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a33      	ldr	r2, [pc, #204]	@ (8009ee8 <TIM_Base_SetConfig+0x154>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d00f      	beq.n	8009e3e <TIM_Base_SetConfig+0xaa>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a33      	ldr	r2, [pc, #204]	@ (8009ef0 <TIM_Base_SetConfig+0x15c>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d00b      	beq.n	8009e3e <TIM_Base_SetConfig+0xaa>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a32      	ldr	r2, [pc, #200]	@ (8009ef4 <TIM_Base_SetConfig+0x160>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d007      	beq.n	8009e3e <TIM_Base_SetConfig+0xaa>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a31      	ldr	r2, [pc, #196]	@ (8009ef8 <TIM_Base_SetConfig+0x164>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d003      	beq.n	8009e3e <TIM_Base_SetConfig+0xaa>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a2c      	ldr	r2, [pc, #176]	@ (8009eec <TIM_Base_SetConfig+0x158>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d108      	bne.n	8009e50 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	695b      	ldr	r3, [r3, #20]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a18      	ldr	r2, [pc, #96]	@ (8009ed8 <TIM_Base_SetConfig+0x144>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d013      	beq.n	8009ea4 <TIM_Base_SetConfig+0x110>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ee8 <TIM_Base_SetConfig+0x154>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d00f      	beq.n	8009ea4 <TIM_Base_SetConfig+0x110>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a1a      	ldr	r2, [pc, #104]	@ (8009ef0 <TIM_Base_SetConfig+0x15c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d00b      	beq.n	8009ea4 <TIM_Base_SetConfig+0x110>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a19      	ldr	r2, [pc, #100]	@ (8009ef4 <TIM_Base_SetConfig+0x160>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d007      	beq.n	8009ea4 <TIM_Base_SetConfig+0x110>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a18      	ldr	r2, [pc, #96]	@ (8009ef8 <TIM_Base_SetConfig+0x164>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d003      	beq.n	8009ea4 <TIM_Base_SetConfig+0x110>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a13      	ldr	r2, [pc, #76]	@ (8009eec <TIM_Base_SetConfig+0x158>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d103      	bne.n	8009eac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	691a      	ldr	r2, [r3, #16]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d105      	bne.n	8009eca <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	f023 0201 	bic.w	r2, r3, #1
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	611a      	str	r2, [r3, #16]
  }
}
 8009eca:	bf00      	nop
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	40012c00 	.word	0x40012c00
 8009edc:	40000400 	.word	0x40000400
 8009ee0:	40000800 	.word	0x40000800
 8009ee4:	40000c00 	.word	0x40000c00
 8009ee8:	40013400 	.word	0x40013400
 8009eec:	40015000 	.word	0x40015000
 8009ef0:	40014000 	.word	0x40014000
 8009ef4:	40014400 	.word	0x40014400
 8009ef8:	40014800 	.word	0x40014800

08009efc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6a1b      	ldr	r3, [r3, #32]
 8009f14:	f023 0201 	bic.w	r2, r3, #1
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	4a28      	ldr	r2, [pc, #160]	@ (8009fc8 <TIM_TI1_SetConfig+0xcc>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d01b      	beq.n	8009f62 <TIM_TI1_SetConfig+0x66>
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f30:	d017      	beq.n	8009f62 <TIM_TI1_SetConfig+0x66>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	4a25      	ldr	r2, [pc, #148]	@ (8009fcc <TIM_TI1_SetConfig+0xd0>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d013      	beq.n	8009f62 <TIM_TI1_SetConfig+0x66>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	4a24      	ldr	r2, [pc, #144]	@ (8009fd0 <TIM_TI1_SetConfig+0xd4>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d00f      	beq.n	8009f62 <TIM_TI1_SetConfig+0x66>
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	4a23      	ldr	r2, [pc, #140]	@ (8009fd4 <TIM_TI1_SetConfig+0xd8>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d00b      	beq.n	8009f62 <TIM_TI1_SetConfig+0x66>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	4a22      	ldr	r2, [pc, #136]	@ (8009fd8 <TIM_TI1_SetConfig+0xdc>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d007      	beq.n	8009f62 <TIM_TI1_SetConfig+0x66>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4a21      	ldr	r2, [pc, #132]	@ (8009fdc <TIM_TI1_SetConfig+0xe0>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d003      	beq.n	8009f62 <TIM_TI1_SetConfig+0x66>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	4a20      	ldr	r2, [pc, #128]	@ (8009fe0 <TIM_TI1_SetConfig+0xe4>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d101      	bne.n	8009f66 <TIM_TI1_SetConfig+0x6a>
 8009f62:	2301      	movs	r3, #1
 8009f64:	e000      	b.n	8009f68 <TIM_TI1_SetConfig+0x6c>
 8009f66:	2300      	movs	r3, #0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d008      	beq.n	8009f7e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f023 0303 	bic.w	r3, r3, #3
 8009f72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	617b      	str	r3, [r7, #20]
 8009f7c:	e003      	b.n	8009f86 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f043 0301 	orr.w	r3, r3, #1
 8009f84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	011b      	lsls	r3, r3, #4
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f023 030a 	bic.w	r3, r3, #10
 8009fa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	f003 030a 	and.w	r3, r3, #10
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	621a      	str	r2, [r3, #32]
}
 8009fba:	bf00      	nop
 8009fbc:	371c      	adds	r7, #28
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	40012c00 	.word	0x40012c00
 8009fcc:	40000400 	.word	0x40000400
 8009fd0:	40000800 	.word	0x40000800
 8009fd4:	40000c00 	.word	0x40000c00
 8009fd8:	40013400 	.word	0x40013400
 8009fdc:	40014000 	.word	0x40014000
 8009fe0:	40015000 	.word	0x40015000

08009fe4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a1b      	ldr	r3, [r3, #32]
 8009ffc:	f023 0210 	bic.w	r2, r3, #16
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	021b      	lsls	r3, r3, #8
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	4313      	orrs	r3, r2
 800a01a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	031b      	lsls	r3, r3, #12
 800a028:	b29b      	uxth	r3, r3
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a036:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a040:	697a      	ldr	r2, [r7, #20]
 800a042:	4313      	orrs	r3, r2
 800a044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	621a      	str	r2, [r3, #32]
}
 800a052:	bf00      	nop
 800a054:	371c      	adds	r7, #28
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a05e:	b480      	push	{r7}
 800a060:	b087      	sub	sp, #28
 800a062:	af00      	add	r7, sp, #0
 800a064:	60f8      	str	r0, [r7, #12]
 800a066:	60b9      	str	r1, [r7, #8]
 800a068:	607a      	str	r2, [r7, #4]
 800a06a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	f023 0303 	bic.w	r3, r3, #3
 800a08a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4313      	orrs	r3, r2
 800a092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a09a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	011b      	lsls	r3, r3, #4
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a0ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	621a      	str	r2, [r3, #32]
}
 800a0ca:	bf00      	nop
 800a0cc:	371c      	adds	r7, #28
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b087      	sub	sp, #28
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	607a      	str	r2, [r7, #4]
 800a0e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a102:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	021b      	lsls	r3, r3, #8
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a114:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	031b      	lsls	r3, r3, #12
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	4313      	orrs	r3, r2
 800a120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a128:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	031b      	lsls	r3, r3, #12
 800a12e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	4313      	orrs	r3, r2
 800a136:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	621a      	str	r2, [r3, #32]
}
 800a144:	bf00      	nop
 800a146:	371c      	adds	r7, #28
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	f003 031f 	and.w	r3, r3, #31
 800a162:	2201      	movs	r2, #1
 800a164:	fa02 f303 	lsl.w	r3, r2, r3
 800a168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6a1a      	ldr	r2, [r3, #32]
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	43db      	mvns	r3, r3
 800a172:	401a      	ands	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6a1a      	ldr	r2, [r3, #32]
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f003 031f 	and.w	r3, r3, #31
 800a182:	6879      	ldr	r1, [r7, #4]
 800a184:	fa01 f303 	lsl.w	r3, r1, r3
 800a188:	431a      	orrs	r2, r3
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	621a      	str	r2, [r3, #32]
}
 800a18e:	bf00      	nop
 800a190:	371c      	adds	r7, #28
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
	...

0800a19c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d101      	bne.n	800a1b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	e074      	b.n	800a29e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a34      	ldr	r2, [pc, #208]	@ (800a2ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d009      	beq.n	800a1f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a33      	ldr	r2, [pc, #204]	@ (800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d004      	beq.n	800a1f2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a31      	ldr	r2, [pc, #196]	@ (800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d108      	bne.n	800a204 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a1f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	4313      	orrs	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a20a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a20e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	4313      	orrs	r3, r2
 800a218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a21      	ldr	r2, [pc, #132]	@ (800a2ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d022      	beq.n	800a272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a234:	d01d      	beq.n	800a272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d018      	beq.n	800a272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a1d      	ldr	r2, [pc, #116]	@ (800a2bc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d013      	beq.n	800a272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a1c      	ldr	r2, [pc, #112]	@ (800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d00e      	beq.n	800a272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a15      	ldr	r2, [pc, #84]	@ (800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d009      	beq.n	800a272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a18      	ldr	r2, [pc, #96]	@ (800a2c4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d004      	beq.n	800a272 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a11      	ldr	r2, [pc, #68]	@ (800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d10c      	bne.n	800a28c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a278:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	4313      	orrs	r3, r2
 800a282:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3714      	adds	r7, #20
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	40012c00 	.word	0x40012c00
 800a2b0:	40013400 	.word	0x40013400
 800a2b4:	40015000 	.word	0x40015000
 800a2b8:	40000400 	.word	0x40000400
 800a2bc:	40000800 	.word	0x40000800
 800a2c0:	40000c00 	.word	0x40000c00
 800a2c4:	40014000 	.word	0x40014000

0800a2c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	e042      	b.n	800a3ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d106      	bne.n	800a37e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7f7 fb01 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2224      	movs	r2, #36	@ 0x24
 800a382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f022 0201 	bic.w	r2, r2, #1
 800a394:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fb24 	bl	800a9ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f825 	bl	800a3f4 <UART_SetConfig>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d101      	bne.n	800a3b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e01b      	b.n	800a3ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a3c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a3d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f042 0201 	orr.w	r2, r2, #1
 800a3e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fba3 	bl	800ab30 <UART_CheckIdleState>
 800a3ea:	4603      	mov	r3, r0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3f8:	b08c      	sub	sp, #48	@ 0x30
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	689a      	ldr	r2, [r3, #8]
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	431a      	orrs	r2, r3
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	431a      	orrs	r2, r3
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	4313      	orrs	r3, r2
 800a41a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	4baa      	ldr	r3, [pc, #680]	@ (800a6cc <UART_SetConfig+0x2d8>)
 800a424:	4013      	ands	r3, r2
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	6812      	ldr	r2, [r2, #0]
 800a42a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a42c:	430b      	orrs	r3, r1
 800a42e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	68da      	ldr	r2, [r3, #12]
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	430a      	orrs	r2, r1
 800a444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a9f      	ldr	r2, [pc, #636]	@ (800a6d0 <UART_SetConfig+0x2dc>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d004      	beq.n	800a460 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a45c:	4313      	orrs	r3, r2
 800a45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a46a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	6812      	ldr	r2, [r2, #0]
 800a472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a474:	430b      	orrs	r3, r1
 800a476:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47e:	f023 010f 	bic.w	r1, r3, #15
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a90      	ldr	r2, [pc, #576]	@ (800a6d4 <UART_SetConfig+0x2e0>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d125      	bne.n	800a4e4 <UART_SetConfig+0xf0>
 800a498:	4b8f      	ldr	r3, [pc, #572]	@ (800a6d8 <UART_SetConfig+0x2e4>)
 800a49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	2b03      	cmp	r3, #3
 800a4a4:	d81a      	bhi.n	800a4dc <UART_SetConfig+0xe8>
 800a4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4ac <UART_SetConfig+0xb8>)
 800a4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ac:	0800a4bd 	.word	0x0800a4bd
 800a4b0:	0800a4cd 	.word	0x0800a4cd
 800a4b4:	0800a4c5 	.word	0x0800a4c5
 800a4b8:	0800a4d5 	.word	0x0800a4d5
 800a4bc:	2301      	movs	r3, #1
 800a4be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4c2:	e116      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4ca:	e112      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a4cc:	2304      	movs	r3, #4
 800a4ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4d2:	e10e      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a4d4:	2308      	movs	r3, #8
 800a4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4da:	e10a      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a4dc:	2310      	movs	r3, #16
 800a4de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4e2:	e106      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a7c      	ldr	r2, [pc, #496]	@ (800a6dc <UART_SetConfig+0x2e8>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d138      	bne.n	800a560 <UART_SetConfig+0x16c>
 800a4ee:	4b7a      	ldr	r3, [pc, #488]	@ (800a6d8 <UART_SetConfig+0x2e4>)
 800a4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4f4:	f003 030c 	and.w	r3, r3, #12
 800a4f8:	2b0c      	cmp	r3, #12
 800a4fa:	d82d      	bhi.n	800a558 <UART_SetConfig+0x164>
 800a4fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a504 <UART_SetConfig+0x110>)
 800a4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a502:	bf00      	nop
 800a504:	0800a539 	.word	0x0800a539
 800a508:	0800a559 	.word	0x0800a559
 800a50c:	0800a559 	.word	0x0800a559
 800a510:	0800a559 	.word	0x0800a559
 800a514:	0800a549 	.word	0x0800a549
 800a518:	0800a559 	.word	0x0800a559
 800a51c:	0800a559 	.word	0x0800a559
 800a520:	0800a559 	.word	0x0800a559
 800a524:	0800a541 	.word	0x0800a541
 800a528:	0800a559 	.word	0x0800a559
 800a52c:	0800a559 	.word	0x0800a559
 800a530:	0800a559 	.word	0x0800a559
 800a534:	0800a551 	.word	0x0800a551
 800a538:	2300      	movs	r3, #0
 800a53a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a53e:	e0d8      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a540:	2302      	movs	r3, #2
 800a542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a546:	e0d4      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a548:	2304      	movs	r3, #4
 800a54a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a54e:	e0d0      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a550:	2308      	movs	r3, #8
 800a552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a556:	e0cc      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a558:	2310      	movs	r3, #16
 800a55a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a55e:	e0c8      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a5e      	ldr	r2, [pc, #376]	@ (800a6e0 <UART_SetConfig+0x2ec>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d125      	bne.n	800a5b6 <UART_SetConfig+0x1c2>
 800a56a:	4b5b      	ldr	r3, [pc, #364]	@ (800a6d8 <UART_SetConfig+0x2e4>)
 800a56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a570:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a574:	2b30      	cmp	r3, #48	@ 0x30
 800a576:	d016      	beq.n	800a5a6 <UART_SetConfig+0x1b2>
 800a578:	2b30      	cmp	r3, #48	@ 0x30
 800a57a:	d818      	bhi.n	800a5ae <UART_SetConfig+0x1ba>
 800a57c:	2b20      	cmp	r3, #32
 800a57e:	d00a      	beq.n	800a596 <UART_SetConfig+0x1a2>
 800a580:	2b20      	cmp	r3, #32
 800a582:	d814      	bhi.n	800a5ae <UART_SetConfig+0x1ba>
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <UART_SetConfig+0x19a>
 800a588:	2b10      	cmp	r3, #16
 800a58a:	d008      	beq.n	800a59e <UART_SetConfig+0x1aa>
 800a58c:	e00f      	b.n	800a5ae <UART_SetConfig+0x1ba>
 800a58e:	2300      	movs	r3, #0
 800a590:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a594:	e0ad      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a596:	2302      	movs	r3, #2
 800a598:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a59c:	e0a9      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a59e:	2304      	movs	r3, #4
 800a5a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5a4:	e0a5      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a5a6:	2308      	movs	r3, #8
 800a5a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ac:	e0a1      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a5ae:	2310      	movs	r3, #16
 800a5b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5b4:	e09d      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a4a      	ldr	r2, [pc, #296]	@ (800a6e4 <UART_SetConfig+0x2f0>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d125      	bne.n	800a60c <UART_SetConfig+0x218>
 800a5c0:	4b45      	ldr	r3, [pc, #276]	@ (800a6d8 <UART_SetConfig+0x2e4>)
 800a5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a5ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5cc:	d016      	beq.n	800a5fc <UART_SetConfig+0x208>
 800a5ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5d0:	d818      	bhi.n	800a604 <UART_SetConfig+0x210>
 800a5d2:	2b80      	cmp	r3, #128	@ 0x80
 800a5d4:	d00a      	beq.n	800a5ec <UART_SetConfig+0x1f8>
 800a5d6:	2b80      	cmp	r3, #128	@ 0x80
 800a5d8:	d814      	bhi.n	800a604 <UART_SetConfig+0x210>
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d002      	beq.n	800a5e4 <UART_SetConfig+0x1f0>
 800a5de:	2b40      	cmp	r3, #64	@ 0x40
 800a5e0:	d008      	beq.n	800a5f4 <UART_SetConfig+0x200>
 800a5e2:	e00f      	b.n	800a604 <UART_SetConfig+0x210>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ea:	e082      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5f2:	e07e      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a5f4:	2304      	movs	r3, #4
 800a5f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5fa:	e07a      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a5fc:	2308      	movs	r3, #8
 800a5fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a602:	e076      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a604:	2310      	movs	r3, #16
 800a606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a60a:	e072      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a35      	ldr	r2, [pc, #212]	@ (800a6e8 <UART_SetConfig+0x2f4>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d12a      	bne.n	800a66c <UART_SetConfig+0x278>
 800a616:	4b30      	ldr	r3, [pc, #192]	@ (800a6d8 <UART_SetConfig+0x2e4>)
 800a618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a61c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a624:	d01a      	beq.n	800a65c <UART_SetConfig+0x268>
 800a626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a62a:	d81b      	bhi.n	800a664 <UART_SetConfig+0x270>
 800a62c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a630:	d00c      	beq.n	800a64c <UART_SetConfig+0x258>
 800a632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a636:	d815      	bhi.n	800a664 <UART_SetConfig+0x270>
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d003      	beq.n	800a644 <UART_SetConfig+0x250>
 800a63c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a640:	d008      	beq.n	800a654 <UART_SetConfig+0x260>
 800a642:	e00f      	b.n	800a664 <UART_SetConfig+0x270>
 800a644:	2300      	movs	r3, #0
 800a646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a64a:	e052      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a64c:	2302      	movs	r3, #2
 800a64e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a652:	e04e      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a654:	2304      	movs	r3, #4
 800a656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a65a:	e04a      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a65c:	2308      	movs	r3, #8
 800a65e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a662:	e046      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a664:	2310      	movs	r3, #16
 800a666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a66a:	e042      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a17      	ldr	r2, [pc, #92]	@ (800a6d0 <UART_SetConfig+0x2dc>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d13a      	bne.n	800a6ec <UART_SetConfig+0x2f8>
 800a676:	4b18      	ldr	r3, [pc, #96]	@ (800a6d8 <UART_SetConfig+0x2e4>)
 800a678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a67c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a680:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a684:	d01a      	beq.n	800a6bc <UART_SetConfig+0x2c8>
 800a686:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a68a:	d81b      	bhi.n	800a6c4 <UART_SetConfig+0x2d0>
 800a68c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a690:	d00c      	beq.n	800a6ac <UART_SetConfig+0x2b8>
 800a692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a696:	d815      	bhi.n	800a6c4 <UART_SetConfig+0x2d0>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d003      	beq.n	800a6a4 <UART_SetConfig+0x2b0>
 800a69c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6a0:	d008      	beq.n	800a6b4 <UART_SetConfig+0x2c0>
 800a6a2:	e00f      	b.n	800a6c4 <UART_SetConfig+0x2d0>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6aa:	e022      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6b2:	e01e      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ba:	e01a      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a6bc:	2308      	movs	r3, #8
 800a6be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6c2:	e016      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a6c4:	2310      	movs	r3, #16
 800a6c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ca:	e012      	b.n	800a6f2 <UART_SetConfig+0x2fe>
 800a6cc:	cfff69f3 	.word	0xcfff69f3
 800a6d0:	40008000 	.word	0x40008000
 800a6d4:	40013800 	.word	0x40013800
 800a6d8:	40021000 	.word	0x40021000
 800a6dc:	40004400 	.word	0x40004400
 800a6e0:	40004800 	.word	0x40004800
 800a6e4:	40004c00 	.word	0x40004c00
 800a6e8:	40005000 	.word	0x40005000
 800a6ec:	2310      	movs	r3, #16
 800a6ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4aae      	ldr	r2, [pc, #696]	@ (800a9b0 <UART_SetConfig+0x5bc>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	f040 8097 	bne.w	800a82c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a702:	2b08      	cmp	r3, #8
 800a704:	d823      	bhi.n	800a74e <UART_SetConfig+0x35a>
 800a706:	a201      	add	r2, pc, #4	@ (adr r2, 800a70c <UART_SetConfig+0x318>)
 800a708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70c:	0800a731 	.word	0x0800a731
 800a710:	0800a74f 	.word	0x0800a74f
 800a714:	0800a739 	.word	0x0800a739
 800a718:	0800a74f 	.word	0x0800a74f
 800a71c:	0800a73f 	.word	0x0800a73f
 800a720:	0800a74f 	.word	0x0800a74f
 800a724:	0800a74f 	.word	0x0800a74f
 800a728:	0800a74f 	.word	0x0800a74f
 800a72c:	0800a747 	.word	0x0800a747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a730:	f7fe f9b0 	bl	8008a94 <HAL_RCC_GetPCLK1Freq>
 800a734:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a736:	e010      	b.n	800a75a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a738:	4b9e      	ldr	r3, [pc, #632]	@ (800a9b4 <UART_SetConfig+0x5c0>)
 800a73a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a73c:	e00d      	b.n	800a75a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a73e:	f7fe f93b 	bl	80089b8 <HAL_RCC_GetSysClockFreq>
 800a742:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a744:	e009      	b.n	800a75a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a746:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a74a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a74c:	e005      	b.n	800a75a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a74e:	2300      	movs	r3, #0
 800a750:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a758:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f000 8130 	beq.w	800a9c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a766:	4a94      	ldr	r2, [pc, #592]	@ (800a9b8 <UART_SetConfig+0x5c4>)
 800a768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a76c:	461a      	mov	r2, r3
 800a76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a770:	fbb3 f3f2 	udiv	r3, r3, r2
 800a774:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	4613      	mov	r3, r2
 800a77c:	005b      	lsls	r3, r3, #1
 800a77e:	4413      	add	r3, r2
 800a780:	69ba      	ldr	r2, [r7, #24]
 800a782:	429a      	cmp	r2, r3
 800a784:	d305      	bcc.n	800a792 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d903      	bls.n	800a79a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a798:	e113      	b.n	800a9c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79c:	2200      	movs	r2, #0
 800a79e:	60bb      	str	r3, [r7, #8]
 800a7a0:	60fa      	str	r2, [r7, #12]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a6:	4a84      	ldr	r2, [pc, #528]	@ (800a9b8 <UART_SetConfig+0x5c4>)
 800a7a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	603b      	str	r3, [r7, #0]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7bc:	f7f5 fe4c 	bl	8000458 <__aeabi_uldivmod>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	f04f 0200 	mov.w	r2, #0
 800a7cc:	f04f 0300 	mov.w	r3, #0
 800a7d0:	020b      	lsls	r3, r1, #8
 800a7d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7d6:	0202      	lsls	r2, r0, #8
 800a7d8:	6979      	ldr	r1, [r7, #20]
 800a7da:	6849      	ldr	r1, [r1, #4]
 800a7dc:	0849      	lsrs	r1, r1, #1
 800a7de:	2000      	movs	r0, #0
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	eb12 0804 	adds.w	r8, r2, r4
 800a7e8:	eb43 0905 	adc.w	r9, r3, r5
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	469a      	mov	sl, r3
 800a7f4:	4693      	mov	fp, r2
 800a7f6:	4652      	mov	r2, sl
 800a7f8:	465b      	mov	r3, fp
 800a7fa:	4640      	mov	r0, r8
 800a7fc:	4649      	mov	r1, r9
 800a7fe:	f7f5 fe2b 	bl	8000458 <__aeabi_uldivmod>
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	4613      	mov	r3, r2
 800a808:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a80a:	6a3b      	ldr	r3, [r7, #32]
 800a80c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a810:	d308      	bcc.n	800a824 <UART_SetConfig+0x430>
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a818:	d204      	bcs.n	800a824 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	6a3a      	ldr	r2, [r7, #32]
 800a820:	60da      	str	r2, [r3, #12]
 800a822:	e0ce      	b.n	800a9c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a82a:	e0ca      	b.n	800a9c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a834:	d166      	bne.n	800a904 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a836:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a83a:	2b08      	cmp	r3, #8
 800a83c:	d827      	bhi.n	800a88e <UART_SetConfig+0x49a>
 800a83e:	a201      	add	r2, pc, #4	@ (adr r2, 800a844 <UART_SetConfig+0x450>)
 800a840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a844:	0800a869 	.word	0x0800a869
 800a848:	0800a871 	.word	0x0800a871
 800a84c:	0800a879 	.word	0x0800a879
 800a850:	0800a88f 	.word	0x0800a88f
 800a854:	0800a87f 	.word	0x0800a87f
 800a858:	0800a88f 	.word	0x0800a88f
 800a85c:	0800a88f 	.word	0x0800a88f
 800a860:	0800a88f 	.word	0x0800a88f
 800a864:	0800a887 	.word	0x0800a887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a868:	f7fe f914 	bl	8008a94 <HAL_RCC_GetPCLK1Freq>
 800a86c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a86e:	e014      	b.n	800a89a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a870:	f7fe f926 	bl	8008ac0 <HAL_RCC_GetPCLK2Freq>
 800a874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a876:	e010      	b.n	800a89a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a878:	4b4e      	ldr	r3, [pc, #312]	@ (800a9b4 <UART_SetConfig+0x5c0>)
 800a87a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a87c:	e00d      	b.n	800a89a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a87e:	f7fe f89b 	bl	80089b8 <HAL_RCC_GetSysClockFreq>
 800a882:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a884:	e009      	b.n	800a89a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a88a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a88c:	e005      	b.n	800a89a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a898:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 8090 	beq.w	800a9c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a6:	4a44      	ldr	r2, [pc, #272]	@ (800a9b8 <UART_SetConfig+0x5c4>)
 800a8a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8b4:	005a      	lsls	r2, r3, #1
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	085b      	lsrs	r3, r3, #1
 800a8bc:	441a      	add	r2, r3
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8c8:	6a3b      	ldr	r3, [r7, #32]
 800a8ca:	2b0f      	cmp	r3, #15
 800a8cc:	d916      	bls.n	800a8fc <UART_SetConfig+0x508>
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8d4:	d212      	bcs.n	800a8fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8d6:	6a3b      	ldr	r3, [r7, #32]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	f023 030f 	bic.w	r3, r3, #15
 800a8de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	085b      	lsrs	r3, r3, #1
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	8bfb      	ldrh	r3, [r7, #30]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	8bfa      	ldrh	r2, [r7, #30]
 800a8f8:	60da      	str	r2, [r3, #12]
 800a8fa:	e062      	b.n	800a9c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a902:	e05e      	b.n	800a9c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a904:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a908:	2b08      	cmp	r3, #8
 800a90a:	d828      	bhi.n	800a95e <UART_SetConfig+0x56a>
 800a90c:	a201      	add	r2, pc, #4	@ (adr r2, 800a914 <UART_SetConfig+0x520>)
 800a90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a912:	bf00      	nop
 800a914:	0800a939 	.word	0x0800a939
 800a918:	0800a941 	.word	0x0800a941
 800a91c:	0800a949 	.word	0x0800a949
 800a920:	0800a95f 	.word	0x0800a95f
 800a924:	0800a94f 	.word	0x0800a94f
 800a928:	0800a95f 	.word	0x0800a95f
 800a92c:	0800a95f 	.word	0x0800a95f
 800a930:	0800a95f 	.word	0x0800a95f
 800a934:	0800a957 	.word	0x0800a957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a938:	f7fe f8ac 	bl	8008a94 <HAL_RCC_GetPCLK1Freq>
 800a93c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a93e:	e014      	b.n	800a96a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a940:	f7fe f8be 	bl	8008ac0 <HAL_RCC_GetPCLK2Freq>
 800a944:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a946:	e010      	b.n	800a96a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a948:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b4 <UART_SetConfig+0x5c0>)
 800a94a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a94c:	e00d      	b.n	800a96a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a94e:	f7fe f833 	bl	80089b8 <HAL_RCC_GetSysClockFreq>
 800a952:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a954:	e009      	b.n	800a96a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a95a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a95c:	e005      	b.n	800a96a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a95e:	2300      	movs	r3, #0
 800a960:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a968:	bf00      	nop
    }

    if (pclk != 0U)
 800a96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d028      	beq.n	800a9c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a974:	4a10      	ldr	r2, [pc, #64]	@ (800a9b8 <UART_SetConfig+0x5c4>)
 800a976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a97a:	461a      	mov	r2, r3
 800a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	085b      	lsrs	r3, r3, #1
 800a988:	441a      	add	r2, r3
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a992:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	2b0f      	cmp	r3, #15
 800a998:	d910      	bls.n	800a9bc <UART_SetConfig+0x5c8>
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9a0:	d20c      	bcs.n	800a9bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a9a2:	6a3b      	ldr	r3, [r7, #32]
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	60da      	str	r2, [r3, #12]
 800a9ac:	e009      	b.n	800a9c2 <UART_SetConfig+0x5ce>
 800a9ae:	bf00      	nop
 800a9b0:	40008000 	.word	0x40008000
 800a9b4:	00f42400 	.word	0x00f42400
 800a9b8:	0800d574 	.word	0x0800d574
      }
      else
      {
        ret = HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a9de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3730      	adds	r7, #48	@ 0x30
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a9ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f8:	f003 0308 	and.w	r3, r3, #8
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00a      	beq.n	800aa16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	430a      	orrs	r2, r1
 800aa14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa1a:	f003 0301 	and.w	r3, r3, #1
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00a      	beq.n	800aa38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	430a      	orrs	r2, r1
 800aa36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa3c:	f003 0302 	and.w	r3, r3, #2
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00a      	beq.n	800aa5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	430a      	orrs	r2, r1
 800aa58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa5e:	f003 0304 	and.w	r3, r3, #4
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00a      	beq.n	800aa7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa80:	f003 0310 	and.w	r3, r3, #16
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00a      	beq.n	800aa9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	430a      	orrs	r2, r1
 800aa9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaa2:	f003 0320 	and.w	r3, r3, #32
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00a      	beq.n	800aac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	430a      	orrs	r2, r1
 800aabe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d01a      	beq.n	800ab02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	430a      	orrs	r2, r1
 800aae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aaea:	d10a      	bne.n	800ab02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	430a      	orrs	r2, r1
 800ab00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00a      	beq.n	800ab24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	430a      	orrs	r2, r1
 800ab22:	605a      	str	r2, [r3, #4]
  }
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b098      	sub	sp, #96	@ 0x60
 800ab34:	af02      	add	r7, sp, #8
 800ab36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab40:	f7f8 f958 	bl	8002df4 <HAL_GetTick>
 800ab44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0308 	and.w	r3, r3, #8
 800ab50:	2b08      	cmp	r3, #8
 800ab52:	d12f      	bne.n	800abb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f88e 	bl	800ac84 <UART_WaitOnFlagUntilTimeout>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d022      	beq.n	800abb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab76:	e853 3f00 	ldrex	r3, [r3]
 800ab7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab82:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	461a      	mov	r2, r3
 800ab8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab8e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab94:	e841 2300 	strex	r3, r2, [r1]
 800ab98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1e6      	bne.n	800ab6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2220      	movs	r2, #32
 800aba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e063      	b.n	800ac7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 0304 	and.w	r3, r3, #4
 800abbe:	2b04      	cmp	r3, #4
 800abc0:	d149      	bne.n	800ac56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abca:	2200      	movs	r2, #0
 800abcc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f857 	bl	800ac84 <UART_WaitOnFlagUntilTimeout>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d03c      	beq.n	800ac56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe4:	e853 3f00 	ldrex	r3, [r3]
 800abe8:	623b      	str	r3, [r7, #32]
   return(result);
 800abea:	6a3b      	ldr	r3, [r7, #32]
 800abec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	461a      	mov	r2, r3
 800abf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abfa:	633b      	str	r3, [r7, #48]	@ 0x30
 800abfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac02:	e841 2300 	strex	r3, r2, [r1]
 800ac06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1e6      	bne.n	800abdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	3308      	adds	r3, #8
 800ac14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	e853 3f00 	ldrex	r3, [r3]
 800ac1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f023 0301 	bic.w	r3, r3, #1
 800ac24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3308      	adds	r3, #8
 800ac2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac2e:	61fa      	str	r2, [r7, #28]
 800ac30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac32:	69b9      	ldr	r1, [r7, #24]
 800ac34:	69fa      	ldr	r2, [r7, #28]
 800ac36:	e841 2300 	strex	r3, r2, [r1]
 800ac3a:	617b      	str	r3, [r7, #20]
   return(result);
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1e5      	bne.n	800ac0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2220      	movs	r2, #32
 800ac46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e012      	b.n	800ac7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2220      	movs	r2, #32
 800ac5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2220      	movs	r2, #32
 800ac62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3758      	adds	r7, #88	@ 0x58
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	603b      	str	r3, [r7, #0]
 800ac90:	4613      	mov	r3, r2
 800ac92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac94:	e04f      	b.n	800ad36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9c:	d04b      	beq.n	800ad36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac9e:	f7f8 f8a9 	bl	8002df4 <HAL_GetTick>
 800aca2:	4602      	mov	r2, r0
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	69ba      	ldr	r2, [r7, #24]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d302      	bcc.n	800acb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800acb4:	2303      	movs	r3, #3
 800acb6:	e04e      	b.n	800ad56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0304 	and.w	r3, r3, #4
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d037      	beq.n	800ad36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2b80      	cmp	r3, #128	@ 0x80
 800acca:	d034      	beq.n	800ad36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2b40      	cmp	r3, #64	@ 0x40
 800acd0:	d031      	beq.n	800ad36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	69db      	ldr	r3, [r3, #28]
 800acd8:	f003 0308 	and.w	r3, r3, #8
 800acdc:	2b08      	cmp	r3, #8
 800acde:	d110      	bne.n	800ad02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2208      	movs	r2, #8
 800ace6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f000 f838 	bl	800ad5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2208      	movs	r2, #8
 800acf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	e029      	b.n	800ad56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	69db      	ldr	r3, [r3, #28]
 800ad08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad10:	d111      	bne.n	800ad36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 f81e 	bl	800ad5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2220      	movs	r2, #32
 800ad26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e00f      	b.n	800ad56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	69da      	ldr	r2, [r3, #28]
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	4013      	ands	r3, r2
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	bf0c      	ite	eq
 800ad46:	2301      	moveq	r3, #1
 800ad48:	2300      	movne	r3, #0
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	79fb      	ldrb	r3, [r7, #7]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d0a0      	beq.n	800ac96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad5e:	b480      	push	{r7}
 800ad60:	b095      	sub	sp, #84	@ 0x54
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad6e:	e853 3f00 	ldrex	r3, [r3]
 800ad72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	461a      	mov	r2, r3
 800ad82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad84:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad8c:	e841 2300 	strex	r3, r2, [r1]
 800ad90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1e6      	bne.n	800ad66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3308      	adds	r3, #8
 800ad9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada0:	6a3b      	ldr	r3, [r7, #32]
 800ada2:	e853 3f00 	ldrex	r3, [r3]
 800ada6:	61fb      	str	r3, [r7, #28]
   return(result);
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800adae:	f023 0301 	bic.w	r3, r3, #1
 800adb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	3308      	adds	r3, #8
 800adba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800adbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adc4:	e841 2300 	strex	r3, r2, [r1]
 800adc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800adca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1e3      	bne.n	800ad98 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800add4:	2b01      	cmp	r3, #1
 800add6:	d118      	bne.n	800ae0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	f023 0310 	bic.w	r3, r3, #16
 800adec:	647b      	str	r3, [r7, #68]	@ 0x44
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adf6:	61bb      	str	r3, [r7, #24]
 800adf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6979      	ldr	r1, [r7, #20]
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	613b      	str	r3, [r7, #16]
   return(result);
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e6      	bne.n	800add8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ae1e:	bf00      	nop
 800ae20:	3754      	adds	r7, #84	@ 0x54
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b085      	sub	sp, #20
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d101      	bne.n	800ae40 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	e027      	b.n	800ae90 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2224      	movs	r2, #36	@ 0x24
 800ae4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f022 0201 	bic.w	r2, r2, #1
 800ae66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ae6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2220      	movs	r2, #32
 800ae82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d101      	bne.n	800aeb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e02d      	b.n	800af10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2224      	movs	r2, #36	@ 0x24
 800aec0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f022 0201 	bic.w	r2, r2, #1
 800aeda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	430a      	orrs	r2, r1
 800aeee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f84f 	bl	800af94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2220      	movs	r2, #32
 800af02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d101      	bne.n	800af30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af2c:	2302      	movs	r3, #2
 800af2e:	e02d      	b.n	800af8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2224      	movs	r2, #36	@ 0x24
 800af3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f022 0201 	bic.w	r2, r2, #1
 800af56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	430a      	orrs	r2, r1
 800af6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f811 	bl	800af94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2220      	movs	r2, #32
 800af7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d108      	bne.n	800afb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800afb4:	e031      	b.n	800b01a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800afb6:	2308      	movs	r3, #8
 800afb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800afba:	2308      	movs	r3, #8
 800afbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	0e5b      	lsrs	r3, r3, #25
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	f003 0307 	and.w	r3, r3, #7
 800afcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	0f5b      	lsrs	r3, r3, #29
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afde:	7bbb      	ldrb	r3, [r7, #14]
 800afe0:	7b3a      	ldrb	r2, [r7, #12]
 800afe2:	4911      	ldr	r1, [pc, #68]	@ (800b028 <UARTEx_SetNbDataToProcess+0x94>)
 800afe4:	5c8a      	ldrb	r2, [r1, r2]
 800afe6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800afea:	7b3a      	ldrb	r2, [r7, #12]
 800afec:	490f      	ldr	r1, [pc, #60]	@ (800b02c <UARTEx_SetNbDataToProcess+0x98>)
 800afee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aff0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800affc:	7bfb      	ldrb	r3, [r7, #15]
 800affe:	7b7a      	ldrb	r2, [r7, #13]
 800b000:	4909      	ldr	r1, [pc, #36]	@ (800b028 <UARTEx_SetNbDataToProcess+0x94>)
 800b002:	5c8a      	ldrb	r2, [r1, r2]
 800b004:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b008:	7b7a      	ldrb	r2, [r7, #13]
 800b00a:	4908      	ldr	r1, [pc, #32]	@ (800b02c <UARTEx_SetNbDataToProcess+0x98>)
 800b00c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b00e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b012:	b29a      	uxth	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b01a:	bf00      	nop
 800b01c:	3714      	adds	r7, #20
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	0800d58c 	.word	0x0800d58c
 800b02c:	0800d594 	.word	0x0800d594

0800b030 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b096      	sub	sp, #88	@ 0x58
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	607a      	str	r2, [r7, #4]
 800b03c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	3303      	adds	r3, #3
 800b042:	f023 0303 	bic.w	r3, r3, #3
 800b046:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b048:	f3ef 8310 	mrs	r3, PRIMASK
 800b04c:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 800b04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800b050:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b052:	b672      	cpsid	i
#endif
    return(int_posture);
 800b054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800b056:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b058:	4b55      	ldr	r3, [pc, #340]	@ (800b1b0 <_tx_byte_allocate+0x180>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800b05e:	2300      	movs	r3, #0
 800b060:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b066:	621a      	str	r2, [r3, #32]
 800b068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b06a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06e:	f383 8810 	msr	PRIMASK, r3
}
 800b072:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800b074:	6879      	ldr	r1, [r7, #4]
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f000 f9b2 	bl	800b3e0 <_tx_byte_pool_search>
 800b07c:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b07e:	f3ef 8310 	mrs	r3, PRIMASK
 800b082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800b084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800b086:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b088:	b672      	cpsid	i
    return(int_posture);
 800b08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800b08c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800b08e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800b094:	2301      	movs	r3, #1
 800b096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b098:	e006      	b.n	800b0a8 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6a1b      	ldr	r3, [r3, #32]
 800b09e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d101      	bne.n	800b0a8 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800b0a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0d9      	beq.n	800b062 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0b2:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800b0b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d008      	beq.n	800b0cc <_tx_byte_allocate+0x9c>
 800b0ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0bc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	f383 8810 	msr	PRIMASK, r3
}
 800b0c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0ca:	e06c      	b.n	800b1a6 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d061      	beq.n	800b196 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800b0d2:	4b38      	ldr	r3, [pc, #224]	@ (800b1b4 <_tx_byte_allocate+0x184>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d007      	beq.n	800b0ea <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800b0da:	2310      	movs	r3, #16
 800b0dc:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0e0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	f383 8810 	msr	PRIMASK, r3
}
 800b0e8:	e05d      	b.n	800b1a6 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800b0ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0ec:	4a32      	ldr	r2, [pc, #200]	@ (800b1b8 <_tx_byte_allocate+0x188>)
 800b0ee:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800b0f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800b0f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800b0fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800b102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b104:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b108:	1c5a      	adds	r2, r3, #1
 800b10a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b10c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b114:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b122:	2b00      	cmp	r3, #0
 800b124:	d109      	bne.n	800b13a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b12a:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b12c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b12e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b130:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800b132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b136:	675a      	str	r2, [r3, #116]	@ 0x74
 800b138:	e011      	b.n	800b15e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b142:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b144:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b14a:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b14c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b14e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b150:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b154:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b156:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b15a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b15c:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800b15e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b160:	2209      	movs	r2, #9
 800b162:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b166:	2201      	movs	r2, #1
 800b168:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b16a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b170:	4b10      	ldr	r3, [pc, #64]	@ (800b1b4 <_tx_byte_allocate+0x184>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3301      	adds	r3, #1
 800b176:	4a0f      	ldr	r2, [pc, #60]	@ (800b1b4 <_tx_byte_allocate+0x184>)
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b17c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	f383 8810 	msr	PRIMASK, r3
}
 800b184:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800b186:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800b188:	f000 ff96 	bl	800c0b8 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800b18c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b18e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b192:	653b      	str	r3, [r7, #80]	@ 0x50
 800b194:	e007      	b.n	800b1a6 <_tx_byte_allocate+0x176>
 800b196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b198:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	f383 8810 	msr	PRIMASK, r3
}
 800b1a0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800b1a2:	2310      	movs	r3, #16
 800b1a4:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800b1a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3758      	adds	r7, #88	@ 0x58
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	20010a0c 	.word	0x20010a0c
 800b1b4:	20010aa4 	.word	0x20010aa4
 800b1b8:	0800b1bd 	.word	0x0800b1bd

0800b1bc <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b08e      	sub	sp, #56	@ 0x38
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b1c6:	f3ef 8310 	mrs	r3, PRIMASK
 800b1ca:	623b      	str	r3, [r7, #32]
    return(posture);
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b1ce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b1d0:	b672      	cpsid	i
    return(int_posture);
 800b1d2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800b1d4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b1da:	4a33      	ldr	r2, [pc, #204]	@ (800b2a8 <_tx_byte_pool_cleanup+0xec>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d158      	bne.n	800b292 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d152      	bne.n	800b292 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1f0:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d04c      	beq.n	800b292 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a2b      	ldr	r2, [pc, #172]	@ (800b2ac <_tx_byte_pool_cleanup+0xf0>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d147      	bne.n	800b292 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800b202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b206:	2b00      	cmp	r3, #0
 800b208:	d043      	beq.n	800b292 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800b210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b214:	1e5a      	subs	r2, r3, #1
 800b216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b218:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b21e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b222:	2b00      	cmp	r3, #0
 800b224:	d103      	bne.n	800b22e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800b226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b228:	2200      	movs	r2, #0
 800b22a:	625a      	str	r2, [r3, #36]	@ 0x24
 800b22c:	e013      	b.n	800b256 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b232:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b238:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b23c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b23e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b244:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d102      	bne.n	800b256 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800b250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b254:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b25a:	2b09      	cmp	r3, #9
 800b25c:	d119      	bne.n	800b292 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2210      	movs	r2, #16
 800b262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b266:	4b12      	ldr	r3, [pc, #72]	@ (800b2b0 <_tx_byte_pool_cleanup+0xf4>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	3301      	adds	r3, #1
 800b26c:	4a10      	ldr	r2, [pc, #64]	@ (800b2b0 <_tx_byte_pool_cleanup+0xf4>)
 800b26e:	6013      	str	r3, [r2, #0]
 800b270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b272:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	f383 8810 	msr	PRIMASK, r3
}
 800b27a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fe1b 	bl	800beb8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b282:	f3ef 8310 	mrs	r3, PRIMASK
 800b286:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b288:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b28a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b28c:	b672      	cpsid	i
    return(int_posture);
 800b28e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b290:	637b      	str	r3, [r7, #52]	@ 0x34
 800b292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b294:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f383 8810 	msr	PRIMASK, r3
}
 800b29c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b29e:	bf00      	nop
 800b2a0:	3738      	adds	r7, #56	@ 0x38
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	0800b1bd 	.word	0x0800b1bd
 800b2ac:	42595445 	.word	0x42595445
 800b2b0:	20010aa4 	.word	0x20010aa4

0800b2b4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b08e      	sub	sp, #56	@ 0x38
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
 800b2c0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b2c2:	2234      	movs	r2, #52	@ 0x34
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f002 f84c 	bl	800d364 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	f023 0303 	bic.w	r3, r3, #3
 800b2d2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	f1a3 0208 	sub.w	r2, r3, #8
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2202      	movs	r2, #2
 800b300:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b306:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	4413      	add	r3, r2
 800b30c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b30e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b310:	3b04      	subs	r3, #4
 800b312:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b31a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800b31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b31e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b320:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b324:	3b04      	subs	r3, #4
 800b326:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b32a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800b33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b33c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b33e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b346:	3304      	adds	r3, #4
 800b348:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b34a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b34c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b350:	4a1f      	ldr	r2, [pc, #124]	@ (800b3d0 <_tx_byte_pool_create+0x11c>)
 800b352:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b35a:	f3ef 8310 	mrs	r3, PRIMASK
 800b35e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b360:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b362:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b364:	b672      	cpsid	i
    return(int_posture);
 800b366:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b368:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	4a19      	ldr	r2, [pc, #100]	@ (800b3d4 <_tx_byte_pool_create+0x120>)
 800b36e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b370:	4b19      	ldr	r3, [pc, #100]	@ (800b3d8 <_tx_byte_pool_create+0x124>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d109      	bne.n	800b38c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b378:	4a18      	ldr	r2, [pc, #96]	@ (800b3dc <_tx_byte_pool_create+0x128>)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	631a      	str	r2, [r3, #48]	@ 0x30
 800b38a:	e011      	b.n	800b3b0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b38c:	4b13      	ldr	r3, [pc, #76]	@ (800b3dc <_tx_byte_pool_create+0x128>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b396:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	69fa      	ldr	r2, [r7, #28]
 800b3a8:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6a3a      	ldr	r2, [r7, #32]
 800b3ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b3b0:	4b09      	ldr	r3, [pc, #36]	@ (800b3d8 <_tx_byte_pool_create+0x124>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	4a08      	ldr	r2, [pc, #32]	@ (800b3d8 <_tx_byte_pool_create+0x124>)
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3bc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f383 8810 	msr	PRIMASK, r3
}
 800b3c4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3738      	adds	r7, #56	@ 0x38
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	ffffeeee 	.word	0xffffeeee
 800b3d4:	42595445 	.word	0x42595445
 800b3d8:	20010a00 	.word	0x20010a00
 800b3dc:	200109fc 	.word	0x200109fc

0800b3e0 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b097      	sub	sp, #92	@ 0x5c
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b3f2:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800b3f6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3f8:	b672      	cpsid	i
    return(int_posture);
 800b3fa:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800b3fc:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	689a      	ldr	r2, [r3, #8]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	3b02      	subs	r3, #2
 800b408:	00db      	lsls	r3, r3, #3
 800b40a:	4413      	add	r3, r2
 800b40c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b412:	429a      	cmp	r2, r3
 800b414:	d308      	bcc.n	800b428 <_tx_byte_pool_search+0x48>
 800b416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b418:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	f383 8810 	msr	PRIMASK, r3
}
 800b420:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800b422:	2300      	movs	r3, #0
 800b424:	653b      	str	r3, [r7, #80]	@ 0x50
 800b426:	e0dd      	b.n	800b5e4 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800b428:	4b72      	ldr	r3, [pc, #456]	@ (800b5f4 <_tx_byte_pool_search+0x214>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b432:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	695b      	ldr	r3, [r3, #20]
 800b438:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	3301      	adds	r3, #1
 800b440:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800b442:	2300      	movs	r3, #0
 800b444:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b448:	3304      	adds	r3, #4
 800b44a:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44e:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a68      	ldr	r2, [pc, #416]	@ (800b5f8 <_tx_byte_pool_search+0x218>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d143      	bne.n	800b4e2 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800b45a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d104      	bne.n	800b46a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b464:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800b466:	2301      	movs	r3, #1
 800b468:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b46a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b46c:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800b46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b47c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b47e:	3b08      	subs	r3, #8
 800b480:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800b482:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d257      	bcs.n	800b53a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800b48a:	2300      	movs	r3, #0
 800b48c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b490:	3304      	adds	r3, #4
 800b492:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b496:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a56      	ldr	r2, [pc, #344]	@ (800b5f8 <_tx_byte_pool_search+0x218>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d113      	bne.n	800b4ca <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800b4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ac:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	1e5a      	subs	r2, r3, #1
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d114      	bne.n	800b4ec <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b4c6:	615a      	str	r2, [r3, #20]
 800b4c8:	e010      	b.n	800b4ec <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 800b4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800b4d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d008      	beq.n	800b4ec <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800b4da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4e0:	e004      	b.n	800b4ec <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b4e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4e4:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800b4ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d002      	beq.n	800b4f8 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800b4f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4fa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	f383 8810 	msr	PRIMASK, r3
}
 800b502:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b504:	f3ef 8310 	mrs	r3, PRIMASK
 800b508:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b50a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b50c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b50e:	b672      	cpsid	i
    return(int_posture);
 800b510:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800b512:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a1b      	ldr	r3, [r3, #32]
 800b518:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d009      	beq.n	800b532 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	3301      	adds	r3, #1
 800b52a:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b530:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800b532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b534:	2b00      	cmp	r3, #0
 800b536:	d186      	bne.n	800b446 <_tx_byte_pool_search+0x66>
 800b538:	e000      	b.n	800b53c <_tx_byte_pool_search+0x15c>
                    break;
 800b53a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800b53c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d048      	beq.n	800b5d4 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800b542:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	2b13      	cmp	r3, #19
 800b54a:	d91e      	bls.n	800b58a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	3308      	adds	r3, #8
 800b550:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b552:	4413      	add	r3, r2
 800b554:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b558:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b55a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b55c:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800b55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b564:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b568:	3304      	adds	r3, #4
 800b56a:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56e:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800b570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b572:	4a21      	ldr	r2, [pc, #132]	@ (800b5f8 <_tx_byte_pool_search+0x218>)
 800b574:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	1c5a      	adds	r2, r3, #1
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800b580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b584:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b58a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b58c:	3304      	adds	r3, #4
 800b58e:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b592:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	689a      	ldr	r2, [r3, #8]
 800b59e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	f1a3 0208 	sub.w	r2, r3, #8
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d105      	bne.n	800b5c0 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b5b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5b6:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	615a      	str	r2, [r3, #20]
 800b5c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f383 8810 	msr	PRIMASK, r3
}
 800b5ca:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b5cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5ce:	3308      	adds	r3, #8
 800b5d0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5d2:	e007      	b.n	800b5e4 <_tx_byte_pool_search+0x204>
 800b5d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5d6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	f383 8810 	msr	PRIMASK, r3
}
 800b5de:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800b5e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	375c      	adds	r7, #92	@ 0x5c
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	20010a0c 	.word	0x20010a0c
 800b5f8:	ffffeeee 	.word	0xffffeeee

0800b5fc <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800b600:	f000 fb18 	bl	800bc34 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800b604:	f001 f880 	bl	800c708 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800b608:	4b12      	ldr	r3, [pc, #72]	@ (800b654 <_tx_initialize_high_level+0x58>)
 800b60a:	2200      	movs	r2, #0
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	4b12      	ldr	r3, [pc, #72]	@ (800b658 <_tx_initialize_high_level+0x5c>)
 800b610:	2200      	movs	r2, #0
 800b612:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800b614:	4b11      	ldr	r3, [pc, #68]	@ (800b65c <_tx_initialize_high_level+0x60>)
 800b616:	2200      	movs	r2, #0
 800b618:	601a      	str	r2, [r3, #0]
 800b61a:	4b11      	ldr	r3, [pc, #68]	@ (800b660 <_tx_initialize_high_level+0x64>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800b620:	4b10      	ldr	r3, [pc, #64]	@ (800b664 <_tx_initialize_high_level+0x68>)
 800b622:	2200      	movs	r2, #0
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	4b10      	ldr	r3, [pc, #64]	@ (800b668 <_tx_initialize_high_level+0x6c>)
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800b62c:	4b0f      	ldr	r3, [pc, #60]	@ (800b66c <_tx_initialize_high_level+0x70>)
 800b62e:	2200      	movs	r2, #0
 800b630:	601a      	str	r2, [r3, #0]
 800b632:	4b0f      	ldr	r3, [pc, #60]	@ (800b670 <_tx_initialize_high_level+0x74>)
 800b634:	2200      	movs	r2, #0
 800b636:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800b638:	4b0e      	ldr	r3, [pc, #56]	@ (800b674 <_tx_initialize_high_level+0x78>)
 800b63a:	2200      	movs	r2, #0
 800b63c:	601a      	str	r2, [r3, #0]
 800b63e:	4b0e      	ldr	r3, [pc, #56]	@ (800b678 <_tx_initialize_high_level+0x7c>)
 800b640:	2200      	movs	r2, #0
 800b642:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800b644:	4b0d      	ldr	r3, [pc, #52]	@ (800b67c <_tx_initialize_high_level+0x80>)
 800b646:	2200      	movs	r2, #0
 800b648:	601a      	str	r2, [r3, #0]
 800b64a:	4b0d      	ldr	r3, [pc, #52]	@ (800b680 <_tx_initialize_high_level+0x84>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	601a      	str	r2, [r3, #0]
#endif
}
 800b650:	bf00      	nop
 800b652:	bd80      	pop	{r7, pc}
 800b654:	200109d4 	.word	0x200109d4
 800b658:	200109d8 	.word	0x200109d8
 800b65c:	200109dc 	.word	0x200109dc
 800b660:	200109e0 	.word	0x200109e0
 800b664:	200109e4 	.word	0x200109e4
 800b668:	200109e8 	.word	0x200109e8
 800b66c:	200109f4 	.word	0x200109f4
 800b670:	200109f8 	.word	0x200109f8
 800b674:	200109fc 	.word	0x200109fc
 800b678:	20010a00 	.word	0x20010a00
 800b67c:	200109ec 	.word	0x200109ec
 800b680:	200109f0 	.word	0x200109f0

0800b684 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800b688:	4b10      	ldr	r3, [pc, #64]	@ (800b6cc <_tx_initialize_kernel_enter+0x48>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800b690:	d00c      	beq.n	800b6ac <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b692:	4b0e      	ldr	r3, [pc, #56]	@ (800b6cc <_tx_initialize_kernel_enter+0x48>)
 800b694:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800b698:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800b69a:	f7f4 fdc1 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800b69e:	f7ff ffad 	bl	800b5fc <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800b6a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b6d0 <_tx_initialize_kernel_enter+0x4c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	4a09      	ldr	r2, [pc, #36]	@ (800b6d0 <_tx_initialize_kernel_enter+0x4c>)
 800b6aa:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800b6ac:	4b07      	ldr	r3, [pc, #28]	@ (800b6cc <_tx_initialize_kernel_enter+0x48>)
 800b6ae:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800b6b2:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800b6b4:	4b07      	ldr	r3, [pc, #28]	@ (800b6d4 <_tx_initialize_kernel_enter+0x50>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7f5 f845 	bl	8000748 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800b6be:	4b03      	ldr	r3, [pc, #12]	@ (800b6cc <_tx_initialize_kernel_enter+0x48>)
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800b6c4:	f7f4 fdec 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b6c8:	bf00      	nop
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	20000054 	.word	0x20000054
 800b6d0:	20010aa4 	.word	0x20010aa4
 800b6d4:	20010a04 	.word	0x20010a04

0800b6d8 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b08e      	sub	sp, #56	@ 0x38
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6e2:	f3ef 8310 	mrs	r3, PRIMASK
 800b6e6:	623b      	str	r3, [r7, #32]
    return(posture);
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b6ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6ec:	b672      	cpsid	i
    return(int_posture);
 800b6ee:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800b6f0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b6f6:	4a33      	ldr	r2, [pc, #204]	@ (800b7c4 <_tx_semaphore_cleanup+0xec>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d158      	bne.n	800b7ae <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d152      	bne.n	800b7ae <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b70c:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800b70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b710:	2b00      	cmp	r3, #0
 800b712:	d04c      	beq.n	800b7ae <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800b714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a2b      	ldr	r2, [pc, #172]	@ (800b7c8 <_tx_semaphore_cleanup+0xf0>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d147      	bne.n	800b7ae <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800b71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d043      	beq.n	800b7ae <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800b72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b72e:	691b      	ldr	r3, [r3, #16]
 800b730:	1e5a      	subs	r2, r3, #1
 800b732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b734:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800b736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d103      	bne.n	800b74a <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b744:	2200      	movs	r2, #0
 800b746:	60da      	str	r2, [r3, #12]
 800b748:	e013      	b.n	800b772 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b74e:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b754:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b75a:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b760:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800b762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d102      	bne.n	800b772 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b770:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b776:	2b06      	cmp	r3, #6
 800b778:	d119      	bne.n	800b7ae <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	220d      	movs	r2, #13
 800b77e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b782:	4b12      	ldr	r3, [pc, #72]	@ (800b7cc <_tx_semaphore_cleanup+0xf4>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3301      	adds	r3, #1
 800b788:	4a10      	ldr	r2, [pc, #64]	@ (800b7cc <_tx_semaphore_cleanup+0xf4>)
 800b78a:	6013      	str	r3, [r2, #0]
 800b78c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b78e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	f383 8810 	msr	PRIMASK, r3
}
 800b796:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fb8d 	bl	800beb8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b79e:	f3ef 8310 	mrs	r3, PRIMASK
 800b7a2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b7a4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b7a6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b7a8:	b672      	cpsid	i
    return(int_posture);
 800b7aa:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b7ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f383 8810 	msr	PRIMASK, r3
}
 800b7b8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b7ba:	bf00      	nop
 800b7bc:	3738      	adds	r7, #56	@ 0x38
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	0800b6d9 	.word	0x0800b6d9
 800b7c8:	53454d41 	.word	0x53454d41
 800b7cc:	20010aa4 	.word	0x20010aa4

0800b7d0 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b08a      	sub	sp, #40	@ 0x28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800b7dc:	221c      	movs	r2, #28
 800b7de:	2100      	movs	r1, #0
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f001 fdbf 	bl	800d364 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b7f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b7f6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b7f8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b7fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b7fc:	b672      	cpsid	i
    return(int_posture);
 800b7fe:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800b800:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	4a18      	ldr	r2, [pc, #96]	@ (800b868 <_tx_semaphore_create+0x98>)
 800b806:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800b808:	4b18      	ldr	r3, [pc, #96]	@ (800b86c <_tx_semaphore_create+0x9c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d109      	bne.n	800b824 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800b810:	4a17      	ldr	r2, [pc, #92]	@ (800b870 <_tx_semaphore_create+0xa0>)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	68fa      	ldr	r2, [r7, #12]
 800b81a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	619a      	str	r2, [r3, #24]
 800b822:	e011      	b.n	800b848 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800b824:	4b12      	ldr	r3, [pc, #72]	@ (800b870 <_tx_semaphore_create+0xa0>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800b830:	6a3b      	ldr	r3, [r7, #32]
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	69fa      	ldr	r2, [r7, #28]
 800b840:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6a3a      	ldr	r2, [r7, #32]
 800b846:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800b848:	4b08      	ldr	r3, [pc, #32]	@ (800b86c <_tx_semaphore_create+0x9c>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3301      	adds	r3, #1
 800b84e:	4a07      	ldr	r2, [pc, #28]	@ (800b86c <_tx_semaphore_create+0x9c>)
 800b850:	6013      	str	r3, [r2, #0]
 800b852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b854:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	f383 8810 	msr	PRIMASK, r3
}
 800b85c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b85e:	2300      	movs	r3, #0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3728      	adds	r7, #40	@ 0x28
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	53454d41 	.word	0x53454d41
 800b86c:	200109d8 	.word	0x200109d8
 800b870:	200109d4 	.word	0x200109d4

0800b874 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b08e      	sub	sp, #56	@ 0x38
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800b87e:	2300      	movs	r3, #0
 800b880:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b882:	f3ef 8310 	mrs	r3, PRIMASK
 800b886:	623b      	str	r3, [r7, #32]
    return(posture);
 800b888:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b88a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b88c:	b672      	cpsid	i
    return(int_posture);
 800b88e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800b890:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00a      	beq.n	800b8b0 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	1e5a      	subs	r2, r3, #1
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	609a      	str	r2, [r3, #8]
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	f383 8810 	msr	PRIMASK, r3
}
 800b8ae:	e068      	b.n	800b982 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d05d      	beq.n	800b972 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b8b6:	4b35      	ldr	r3, [pc, #212]	@ (800b98c <_tx_semaphore_get+0x118>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d008      	beq.n	800b8d0 <_tx_semaphore_get+0x5c>
 800b8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f383 8810 	msr	PRIMASK, r3
}
 800b8c8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800b8ca:	230d      	movs	r3, #13
 800b8cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8ce:	e058      	b.n	800b982 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800b8d0:	4b2f      	ldr	r3, [pc, #188]	@ (800b990 <_tx_semaphore_get+0x11c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800b8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8d8:	4a2e      	ldr	r2, [pc, #184]	@ (800b994 <_tx_semaphore_get+0x120>)
 800b8da:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800b8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800b8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b8e8:	1c5a      	adds	r2, r3, #1
 800b8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d109      	bne.n	800b90c <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8fc:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800b8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b900:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b902:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800b904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b908:	675a      	str	r2, [r3, #116]	@ 0x74
 800b90a:	e011      	b.n	800b930 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b916:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b91c:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b922:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b928:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b92c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b92e:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	1c5a      	adds	r2, r3, #1
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800b93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b93c:	2206      	movs	r2, #6
 800b93e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b942:	2201      	movs	r2, #1
 800b944:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b948:	683a      	ldr	r2, [r7, #0]
 800b94a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b94c:	4b0f      	ldr	r3, [pc, #60]	@ (800b98c <_tx_semaphore_get+0x118>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	3301      	adds	r3, #1
 800b952:	4a0e      	ldr	r2, [pc, #56]	@ (800b98c <_tx_semaphore_get+0x118>)
 800b954:	6013      	str	r3, [r2, #0]
 800b956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b958:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	f383 8810 	msr	PRIMASK, r3
}
 800b960:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b962:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b964:	f000 fba8 	bl	800c0b8 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b96a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b96e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b970:	e007      	b.n	800b982 <_tx_semaphore_get+0x10e>
 800b972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b974:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f383 8810 	msr	PRIMASK, r3
}
 800b97c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800b97e:	230d      	movs	r3, #13
 800b980:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800b982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b984:	4618      	mov	r0, r3
 800b986:	3738      	adds	r7, #56	@ 0x38
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	20010aa4 	.word	0x20010aa4
 800b990:	20010a0c 	.word	0x20010a0c
 800b994:	0800b6d9 	.word	0x0800b6d9

0800b998 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b08c      	sub	sp, #48	@ 0x30
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9a0:	f3ef 8310 	mrs	r3, PRIMASK
 800b9a4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b9a6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b9a8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9aa:	b672      	cpsid	i
    return(int_posture);
 800b9ac:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800b9ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800b9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10a      	bne.n	800b9d2 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	609a      	str	r2, [r3, #8]
 800b9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	f383 8810 	msr	PRIMASK, r3
}
 800b9d0:	e033      	b.n	800ba3a <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800b9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800b9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d103      	bne.n	800b9ec <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	60da      	str	r2, [r3, #12]
 800b9ea:	e00e      	b.n	800ba0a <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9f0:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a3a      	ldr	r2, [r7, #32]
 800b9f6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9fc:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b9fe:	6a3b      	ldr	r3, [r7, #32]
 800ba00:	69fa      	ldr	r2, [r7, #28]
 800ba02:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	6a3a      	ldr	r2, [r7, #32]
 800ba08:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba0e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ba10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba12:	2200      	movs	r2, #0
 800ba14:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ba16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800ba1e:	4b09      	ldr	r3, [pc, #36]	@ (800ba44 <_tx_semaphore_put+0xac>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3301      	adds	r3, #1
 800ba24:	4a07      	ldr	r2, [pc, #28]	@ (800ba44 <_tx_semaphore_put+0xac>)
 800ba26:	6013      	str	r3, [r2, #0]
 800ba28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f383 8810 	msr	PRIMASK, r3
}
 800ba32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800ba34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba36:	f000 fa3f 	bl	800beb8 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3730      	adds	r7, #48	@ 0x30
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	20010aa4 	.word	0x20010aa4

0800ba48 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b092      	sub	sp, #72	@ 0x48
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
 800ba54:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800ba56:	2300      	movs	r3, #0
 800ba58:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800ba5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba5c:	21ef      	movs	r1, #239	@ 0xef
 800ba5e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ba60:	f001 fc80 	bl	800d364 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800ba64:	22b0      	movs	r2, #176	@ 0xb0
 800ba66:	2100      	movs	r1, #0
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f001 fc7b 	bl	800d364 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba84:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba8a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba90:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ba96:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ba9e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800baa4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2220      	movs	r2, #32
 800baaa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800baae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800bab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bab4:	3b01      	subs	r3, #1
 800bab6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bab8:	4413      	add	r3, r2
 800baba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bac0:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800bac2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d007      	beq.n	800bada <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2200      	movs	r2, #0
 800bace:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800bad8:	e006      	b.n	800bae8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bade:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bae4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2203      	movs	r2, #3
 800baec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	4a48      	ldr	r2, [pc, #288]	@ (800bc14 <_tx_thread_create+0x1cc>)
 800baf2:	655a      	str	r2, [r3, #84]	@ 0x54
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800bafa:	4947      	ldr	r1, [pc, #284]	@ (800bc18 <_tx_thread_create+0x1d0>)
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f7f4 fc2f 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb02:	f3ef 8310 	mrs	r3, PRIMASK
 800bb06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800bb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800bb0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb0c:	b672      	cpsid	i
    return(int_posture);
 800bb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800bb10:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	4a41      	ldr	r2, [pc, #260]	@ (800bc1c <_tx_thread_create+0x1d4>)
 800bb16:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800bb18:	4b41      	ldr	r3, [pc, #260]	@ (800bc20 <_tx_thread_create+0x1d8>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d10b      	bne.n	800bb38 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800bb20:	4a40      	ldr	r2, [pc, #256]	@ (800bc24 <_tx_thread_create+0x1dc>)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800bb36:	e016      	b.n	800bb66 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800bb38:	4b3a      	ldr	r3, [pc, #232]	@ (800bc24 <_tx_thread_create+0x1dc>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800bb3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb44:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800bb46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800bb66:	4b2e      	ldr	r3, [pc, #184]	@ (800bc20 <_tx_thread_create+0x1d8>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	4a2c      	ldr	r2, [pc, #176]	@ (800bc20 <_tx_thread_create+0x1d8>)
 800bb6e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bb70:	4b2d      	ldr	r3, [pc, #180]	@ (800bc28 <_tx_thread_create+0x1e0>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3301      	adds	r3, #1
 800bb76:	4a2c      	ldr	r2, [pc, #176]	@ (800bc28 <_tx_thread_create+0x1e0>)
 800bb78:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800bb7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d129      	bne.n	800bbd4 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bb80:	f3ef 8305 	mrs	r3, IPSR
 800bb84:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800bb86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800bb88:	4b28      	ldr	r3, [pc, #160]	@ (800bc2c <_tx_thread_create+0x1e4>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bb92:	d30d      	bcc.n	800bbb0 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800bb94:	4b26      	ldr	r3, [pc, #152]	@ (800bc30 <_tx_thread_create+0x1e8>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800bb9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d009      	beq.n	800bbb4 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800bba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bba4:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800bba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbac:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bbae:	e001      	b.n	800bbb4 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbb8:	6a3b      	ldr	r3, [r7, #32]
 800bbba:	f383 8810 	msr	PRIMASK, r3
}
 800bbbe:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f000 f979 	bl	800beb8 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800bbc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d01e      	beq.n	800bc0a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800bbcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bbd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 800bbd2:	e01a      	b.n	800bc0a <_tx_thread_create+0x1c2>
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	f383 8810 	msr	PRIMASK, r3
}
 800bbde:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bbe0:	f3ef 8310 	mrs	r3, PRIMASK
 800bbe4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bbe6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bbe8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbea:	b672      	cpsid	i
    return(int_posture);
 800bbec:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800bbee:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800bbf0:	4b0d      	ldr	r3, [pc, #52]	@ (800bc28 <_tx_thread_create+0x1e0>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	4a0c      	ldr	r2, [pc, #48]	@ (800bc28 <_tx_thread_create+0x1e0>)
 800bbf8:	6013      	str	r3, [r2, #0]
 800bbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	f383 8810 	msr	PRIMASK, r3
}
 800bc04:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bc06:	f000 f91d 	bl	800be44 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3748      	adds	r7, #72	@ 0x48
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	0800c38d 	.word	0x0800c38d
 800bc18:	0800bcad 	.word	0x0800bcad
 800bc1c:	54485244 	.word	0x54485244
 800bc20:	20010a18 	.word	0x20010a18
 800bc24:	20010a14 	.word	0x20010a14
 800bc28:	20010aa4 	.word	0x20010aa4
 800bc2c:	20000054 	.word	0x20000054
 800bc30:	20010a10 	.word	0x20010a10

0800bc34 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800bc38:	4b12      	ldr	r3, [pc, #72]	@ (800bc84 <_tx_thread_initialize+0x50>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800bc3e:	4b12      	ldr	r3, [pc, #72]	@ (800bc88 <_tx_thread_initialize+0x54>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800bc44:	4b11      	ldr	r3, [pc, #68]	@ (800bc8c <_tx_thread_initialize+0x58>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800bc4a:	4b11      	ldr	r3, [pc, #68]	@ (800bc90 <_tx_thread_initialize+0x5c>)
 800bc4c:	2220      	movs	r2, #32
 800bc4e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800bc50:	2280      	movs	r2, #128	@ 0x80
 800bc52:	2100      	movs	r1, #0
 800bc54:	480f      	ldr	r0, [pc, #60]	@ (800bc94 <_tx_thread_initialize+0x60>)
 800bc56:	f001 fb85 	bl	800d364 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800bc5a:	4b0f      	ldr	r3, [pc, #60]	@ (800bc98 <_tx_thread_initialize+0x64>)
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800bc60:	4b0e      	ldr	r3, [pc, #56]	@ (800bc9c <_tx_thread_initialize+0x68>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800bc66:	4b0e      	ldr	r3, [pc, #56]	@ (800bca0 <_tx_thread_initialize+0x6c>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800bc6c:	4b0d      	ldr	r3, [pc, #52]	@ (800bca4 <_tx_thread_initialize+0x70>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800bc72:	4b0d      	ldr	r3, [pc, #52]	@ (800bca8 <_tx_thread_initialize+0x74>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800bc7a:	4a0b      	ldr	r2, [pc, #44]	@ (800bca8 <_tx_thread_initialize+0x74>)
 800bc7c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800bc7e:	bf00      	nop
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	20010a0c 	.word	0x20010a0c
 800bc88:	20010a10 	.word	0x20010a10
 800bc8c:	20010a1c 	.word	0x20010a1c
 800bc90:	20010a20 	.word	0x20010a20
 800bc94:	20010a24 	.word	0x20010a24
 800bc98:	20010a14 	.word	0x20010a14
 800bc9c:	20010a18 	.word	0x20010a18
 800bca0:	20010aa4 	.word	0x20010aa4
 800bca4:	20010aa8 	.word	0x20010aa8
 800bca8:	20010aac 	.word	0x20010aac

0800bcac <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b088      	sub	sp, #32
 800bcb0:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800bcb2:	4b21      	ldr	r3, [pc, #132]	@ (800bd38 <_tx_thread_shell_entry+0x8c>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcbc:	69fa      	ldr	r2, [r7, #28]
 800bcbe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800bcc4:	4b1d      	ldr	r3, [pc, #116]	@ (800bd3c <_tx_thread_shell_entry+0x90>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d003      	beq.n	800bcd4 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800bccc:	4b1b      	ldr	r3, [pc, #108]	@ (800bd3c <_tx_thread_shell_entry+0x90>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	69f8      	ldr	r0, [r7, #28]
 800bcd2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcd4:	f3ef 8310 	mrs	r3, PRIMASK
 800bcd8:	607b      	str	r3, [r7, #4]
    return(posture);
 800bcda:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800bcdc:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcde:	b672      	cpsid	i
    return(int_posture);
 800bce0:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800bce2:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	2201      	movs	r2, #1
 800bce8:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	2201      	movs	r2, #1
 800bcee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bcf6:	4b12      	ldr	r3, [pc, #72]	@ (800bd40 <_tx_thread_shell_entry+0x94>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	4a10      	ldr	r2, [pc, #64]	@ (800bd40 <_tx_thread_shell_entry+0x94>)
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	f383 8810 	msr	PRIMASK, r3
}
 800bd0a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800bd0c:	f3ef 8314 	mrs	r3, CONTROL
 800bd10:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800bd12:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800bd14:	617b      	str	r3, [r7, #20]
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	f023 0304 	bic.w	r3, r3, #4
 800bd1c:	617b      	str	r3, [r7, #20]
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	f383 8814 	msr	CONTROL, r3
}
 800bd28:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800bd2a:	69f8      	ldr	r0, [r7, #28]
 800bd2c:	f000 f9c4 	bl	800c0b8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800bd30:	bf00      	nop
 800bd32:	3720      	adds	r7, #32
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	20010a0c 	.word	0x20010a0c
 800bd3c:	20010aa8 	.word	0x20010aa8
 800bd40:	20010aa4 	.word	0x20010aa4

0800bd44 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b08e      	sub	sp, #56	@ 0x38
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd4c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd50:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800bd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800bd54:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd56:	b672      	cpsid	i
    return(int_posture);
 800bd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800bd5a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800bd5c:	4b35      	ldr	r3, [pc, #212]	@ (800be34 <_tx_thread_sleep+0xf0>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800bd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d108      	bne.n	800bd7a <_tx_thread_sleep+0x36>
 800bd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	f383 8810 	msr	PRIMASK, r3
}
 800bd72:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800bd74:	2313      	movs	r3, #19
 800bd76:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd78:	e056      	b.n	800be28 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd7a:	f3ef 8305 	mrs	r3, IPSR
 800bd7e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800bd80:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bd82:	4b2d      	ldr	r3, [pc, #180]	@ (800be38 <_tx_thread_sleep+0xf4>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d008      	beq.n	800bd9e <_tx_thread_sleep+0x5a>
 800bd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	f383 8810 	msr	PRIMASK, r3
}
 800bd96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800bd98:	2313      	movs	r3, #19
 800bd9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd9c:	e044      	b.n	800be28 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800bd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda0:	4a26      	ldr	r2, [pc, #152]	@ (800be3c <_tx_thread_sleep+0xf8>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d108      	bne.n	800bdb8 <_tx_thread_sleep+0x74>
 800bda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f383 8810 	msr	PRIMASK, r3
}
 800bdb0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800bdb2:	2313      	movs	r3, #19
 800bdb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdb6:	e037      	b.n	800be28 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d108      	bne.n	800bdd0 <_tx_thread_sleep+0x8c>
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	f383 8810 	msr	PRIMASK, r3
}
 800bdc8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdce:	e02b      	b.n	800be28 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800bdd0:	4b1b      	ldr	r3, [pc, #108]	@ (800be40 <_tx_thread_sleep+0xfc>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d008      	beq.n	800bdea <_tx_thread_sleep+0xa6>
 800bdd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdda:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f383 8810 	msr	PRIMASK, r3
}
 800bde2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800bde4:	2313      	movs	r3, #19
 800bde6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bde8:	e01e      	b.n	800be28 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800bdea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdec:	2204      	movs	r2, #4
 800bdee:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800bdf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800bdfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800be04:	4b0e      	ldr	r3, [pc, #56]	@ (800be40 <_tx_thread_sleep+0xfc>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3301      	adds	r3, #1
 800be0a:	4a0d      	ldr	r2, [pc, #52]	@ (800be40 <_tx_thread_sleep+0xfc>)
 800be0c:	6013      	str	r3, [r2, #0]
 800be0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be10:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	f383 8810 	msr	PRIMASK, r3
}
 800be18:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800be1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be1c:	f000 f94c 	bl	800c0b8 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800be20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be26:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800be28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3738      	adds	r7, #56	@ 0x38
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	20010a0c 	.word	0x20010a0c
 800be38:	20000054 	.word	0x20000054
 800be3c:	20010b54 	.word	0x20010b54
 800be40:	20010aa4 	.word	0x20010aa4

0800be44 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800be44:	b480      	push	{r7}
 800be46:	b089      	sub	sp, #36	@ 0x24
 800be48:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800be4a:	4b17      	ldr	r3, [pc, #92]	@ (800bea8 <_tx_thread_system_preempt_check+0x64>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d121      	bne.n	800be9a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800be56:	4b15      	ldr	r3, [pc, #84]	@ (800beac <_tx_thread_system_preempt_check+0x68>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800be5c:	4b14      	ldr	r3, [pc, #80]	@ (800beb0 <_tx_thread_system_preempt_check+0x6c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800be62:	69ba      	ldr	r2, [r7, #24]
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	429a      	cmp	r2, r3
 800be68:	d017      	beq.n	800be9a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800be6a:	4b12      	ldr	r3, [pc, #72]	@ (800beb4 <_tx_thread_system_preempt_check+0x70>)
 800be6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be70:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be72:	f3ef 8305 	mrs	r3, IPSR
 800be76:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800be78:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10c      	bne.n	800be98 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be7e:	f3ef 8310 	mrs	r3, PRIMASK
 800be82:	60fb      	str	r3, [r7, #12]
    return(posture);
 800be84:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800be86:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800be88:	b662      	cpsie	i
}
 800be8a:	bf00      	nop
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f383 8810 	msr	PRIMASK, r3
}
 800be96:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800be98:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800be9a:	bf00      	nop
 800be9c:	3724      	adds	r7, #36	@ 0x24
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	20010aa4 	.word	0x20010aa4
 800beac:	20010a0c 	.word	0x20010a0c
 800beb0:	20010a10 	.word	0x20010a10
 800beb4:	e000ed04 	.word	0xe000ed04

0800beb8 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b096      	sub	sp, #88	@ 0x58
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bec0:	f3ef 8310 	mrs	r3, PRIMASK
 800bec4:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800bec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800bec8:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800beca:	b672      	cpsid	i
    return(int_posture);
 800becc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800bece:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d005      	beq.n	800bee4 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	334c      	adds	r3, #76	@ 0x4c
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 fcf1 	bl	800c8c4 <_tx_timer_system_deactivate>
 800bee2:	e002      	b.n	800beea <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800beea:	4b6c      	ldr	r3, [pc, #432]	@ (800c09c <_tx_thread_system_resume+0x1e4>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3b01      	subs	r3, #1
 800bef0:	4a6a      	ldr	r2, [pc, #424]	@ (800c09c <_tx_thread_system_resume+0x1e4>)
 800bef2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f040 8083 	bne.w	800c004 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 8097 	beq.w	800c036 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d172      	bne.n	800bff6 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf1a:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800bf1c:	4a60      	ldr	r2, [pc, #384]	@ (800c0a0 <_tx_thread_system_resume+0x1e8>)
 800bf1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf24:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800bf26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d154      	bne.n	800bfd6 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800bf2c:	495c      	ldr	r1, [pc, #368]	@ (800c0a0 <_tx_thread_system_resume+0x1e8>)
 800bf2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800bf42:	2201      	movs	r2, #1
 800bf44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf46:	fa02 f303 	lsl.w	r3, r2, r3
 800bf4a:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800bf4c:	4b55      	ldr	r3, [pc, #340]	@ (800c0a4 <_tx_thread_system_resume+0x1ec>)
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf52:	4313      	orrs	r3, r2
 800bf54:	4a53      	ldr	r2, [pc, #332]	@ (800c0a4 <_tx_thread_system_resume+0x1ec>)
 800bf56:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800bf58:	4b53      	ldr	r3, [pc, #332]	@ (800c0a8 <_tx_thread_system_resume+0x1f0>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d269      	bcs.n	800c036 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800bf62:	4a51      	ldr	r2, [pc, #324]	@ (800c0a8 <_tx_thread_system_resume+0x1f0>)
 800bf64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf66:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800bf68:	4b50      	ldr	r3, [pc, #320]	@ (800c0ac <_tx_thread_system_resume+0x1f4>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800bf6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d103      	bne.n	800bf7c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800bf74:	4a4d      	ldr	r2, [pc, #308]	@ (800c0ac <_tx_thread_system_resume+0x1f4>)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6013      	str	r3, [r2, #0]
 800bf7a:	e05c      	b.n	800c036 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800bf7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d257      	bcs.n	800c036 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800bf86:	4a49      	ldr	r2, [pc, #292]	@ (800c0ac <_tx_thread_system_resume+0x1f4>)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6013      	str	r3, [r2, #0]
 800bf8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf92:	f383 8810 	msr	PRIMASK, r3
}
 800bf96:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bf98:	4b40      	ldr	r3, [pc, #256]	@ (800c09c <_tx_thread_system_resume+0x1e4>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800bf9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d174      	bne.n	800c08e <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bfa4:	4b42      	ldr	r3, [pc, #264]	@ (800c0b0 <_tx_thread_system_resume+0x1f8>)
 800bfa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfaa:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bfac:	f3ef 8305 	mrs	r3, IPSR
 800bfb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800bfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d10c      	bne.n	800bfd2 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfb8:	f3ef 8310 	mrs	r3, PRIMASK
 800bfbc:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800bfc0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bfc2:	b662      	cpsie	i
}
 800bfc4:	bf00      	nop
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	f383 8810 	msr	PRIMASK, r3
}
 800bfd0:	bf00      	nop
}
 800bfd2:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800bfd4:	e05b      	b.n	800c08e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800bfd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfda:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800bfdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800bfe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfec:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bff2:	621a      	str	r2, [r3, #32]
 800bff4:	e01f      	b.n	800c036 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2203      	movs	r2, #3
 800c000:	631a      	str	r2, [r3, #48]	@ 0x30
 800c002:	e018      	b.n	800c036 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d014      	beq.n	800c036 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c010:	2b02      	cmp	r3, #2
 800c012:	d010      	beq.n	800c036 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d106      	bne.n	800c02a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	631a      	str	r2, [r3, #48]	@ 0x30
 800c028:	e005      	b.n	800c036 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2203      	movs	r2, #3
 800c034:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c036:	4b1f      	ldr	r3, [pc, #124]	@ (800c0b4 <_tx_thread_system_resume+0x1fc>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c03c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c03e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	f383 8810 	msr	PRIMASK, r3
}
 800c046:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c048:	4b18      	ldr	r3, [pc, #96]	@ (800c0ac <_tx_thread_system_resume+0x1f4>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c04e:	429a      	cmp	r2, r3
 800c050:	d020      	beq.n	800c094 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c052:	4b12      	ldr	r3, [pc, #72]	@ (800c09c <_tx_thread_system_resume+0x1e4>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800c058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d11a      	bne.n	800c094 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c05e:	4b14      	ldr	r3, [pc, #80]	@ (800c0b0 <_tx_thread_system_resume+0x1f8>)
 800c060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c064:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c066:	f3ef 8305 	mrs	r3, IPSR
 800c06a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c06c:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10f      	bne.n	800c092 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c072:	f3ef 8310 	mrs	r3, PRIMASK
 800c076:	613b      	str	r3, [r7, #16]
    return(posture);
 800c078:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800c07a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c07c:	b662      	cpsie	i
}
 800c07e:	bf00      	nop
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	f383 8810 	msr	PRIMASK, r3
}
 800c08a:	bf00      	nop
}
 800c08c:	e001      	b.n	800c092 <_tx_thread_system_resume+0x1da>
                                return;
 800c08e:	bf00      	nop
 800c090:	e000      	b.n	800c094 <_tx_thread_system_resume+0x1dc>
 800c092:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800c094:	3758      	adds	r7, #88	@ 0x58
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	20010aa4 	.word	0x20010aa4
 800c0a0:	20010a24 	.word	0x20010a24
 800c0a4:	20010a1c 	.word	0x20010a1c
 800c0a8:	20010a20 	.word	0x20010a20
 800c0ac:	20010a10 	.word	0x20010a10
 800c0b0:	e000ed04 	.word	0xe000ed04
 800c0b4:	20010a0c 	.word	0x20010a0c

0800c0b8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b09e      	sub	sp, #120	@ 0x78
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c0c0:	4b81      	ldr	r3, [pc, #516]	@ (800c2c8 <_tx_thread_system_suspend+0x210>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c0c6:	f3ef 8310 	mrs	r3, PRIMASK
 800c0ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800c0cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800c0ce:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800c0d0:	b672      	cpsid	i
    return(int_posture);
 800c0d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800c0d4:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d112      	bne.n	800c104 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0e2:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800c0e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d008      	beq.n	800c0fc <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800c0ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f0:	d004      	beq.n	800c0fc <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	334c      	adds	r3, #76	@ 0x4c
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f000 fb82 	bl	800c800 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	69db      	ldr	r3, [r3, #28]
 800c100:	4a72      	ldr	r2, [pc, #456]	@ (800c2cc <_tx_thread_system_suspend+0x214>)
 800c102:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800c104:	4b72      	ldr	r3, [pc, #456]	@ (800c2d0 <_tx_thread_system_suspend+0x218>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	3b01      	subs	r3, #1
 800c10a:	4a71      	ldr	r2, [pc, #452]	@ (800c2d0 <_tx_thread_system_suspend+0x218>)
 800c10c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c112:	2b01      	cmp	r3, #1
 800c114:	f040 80a6 	bne.w	800c264 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c122:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a1b      	ldr	r3, [r3, #32]
 800c128:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800c12a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d015      	beq.n	800c15e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c136:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800c138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c13a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c13c:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800c13e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c140:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c142:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800c144:	4a63      	ldr	r2, [pc, #396]	@ (800c2d4 <_tx_thread_system_suspend+0x21c>)
 800c146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d157      	bne.n	800c202 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800c152:	4960      	ldr	r1, [pc, #384]	@ (800c2d4 <_tx_thread_system_suspend+0x21c>)
 800c154:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c156:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c15c:	e051      	b.n	800c202 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800c15e:	4a5d      	ldr	r2, [pc, #372]	@ (800c2d4 <_tx_thread_system_suspend+0x21c>)
 800c160:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c162:	2100      	movs	r1, #0
 800c164:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800c168:	2201      	movs	r2, #1
 800c16a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c16c:	fa02 f303 	lsl.w	r3, r2, r3
 800c170:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800c172:	4b59      	ldr	r3, [pc, #356]	@ (800c2d8 <_tx_thread_system_suspend+0x220>)
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c178:	43db      	mvns	r3, r3
 800c17a:	4013      	ands	r3, r2
 800c17c:	4a56      	ldr	r2, [pc, #344]	@ (800c2d8 <_tx_thread_system_suspend+0x220>)
 800c17e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800c180:	2300      	movs	r3, #0
 800c182:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800c184:	4b54      	ldr	r3, [pc, #336]	@ (800c2d8 <_tx_thread_system_suspend+0x220>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800c18a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d12b      	bne.n	800c1e8 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c190:	4b52      	ldr	r3, [pc, #328]	@ (800c2dc <_tx_thread_system_suspend+0x224>)
 800c192:	2220      	movs	r2, #32
 800c194:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800c196:	4b52      	ldr	r3, [pc, #328]	@ (800c2e0 <_tx_thread_system_suspend+0x228>)
 800c198:	2200      	movs	r2, #0
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c19e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1a2:	f383 8810 	msr	PRIMASK, r3
}
 800c1a6:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c1a8:	4b49      	ldr	r3, [pc, #292]	@ (800c2d0 <_tx_thread_system_suspend+0x218>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800c1ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f040 8081 	bne.w	800c2b8 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c1b6:	4b4b      	ldr	r3, [pc, #300]	@ (800c2e4 <_tx_thread_system_suspend+0x22c>)
 800c1b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1bc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1be:	f3ef 8305 	mrs	r3, IPSR
 800c1c2:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800c1c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10c      	bne.n	800c1e4 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c1ca:	f3ef 8310 	mrs	r3, PRIMASK
 800c1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800c1d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800c1d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c1d4:	b662      	cpsie	i
}
 800c1d6:	bf00      	nop
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1da:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1de:	f383 8810 	msr	PRIMASK, r3
}
 800c1e2:	bf00      	nop
}
 800c1e4:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800c1e6:	e067      	b.n	800c2b8 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800c1e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1ea:	fa93 f3a3 	rbit	r3, r3
 800c1ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1f2:	fab3 f383 	clz	r3, r3
 800c1f6:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800c1f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c1fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c1fc:	4413      	add	r3, r2
 800c1fe:	4a37      	ldr	r2, [pc, #220]	@ (800c2dc <_tx_thread_system_suspend+0x224>)
 800c200:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800c202:	4b37      	ldr	r3, [pc, #220]	@ (800c2e0 <_tx_thread_system_suspend+0x228>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d12b      	bne.n	800c264 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c20c:	4b33      	ldr	r3, [pc, #204]	@ (800c2dc <_tx_thread_system_suspend+0x224>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a30      	ldr	r2, [pc, #192]	@ (800c2d4 <_tx_thread_system_suspend+0x21c>)
 800c212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c216:	4a32      	ldr	r2, [pc, #200]	@ (800c2e0 <_tx_thread_system_suspend+0x228>)
 800c218:	6013      	str	r3, [r2, #0]
 800c21a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c21c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c220:	f383 8810 	msr	PRIMASK, r3
}
 800c224:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c226:	4b2a      	ldr	r3, [pc, #168]	@ (800c2d0 <_tx_thread_system_suspend+0x218>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800c22c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d144      	bne.n	800c2bc <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c232:	4b2c      	ldr	r3, [pc, #176]	@ (800c2e4 <_tx_thread_system_suspend+0x22c>)
 800c234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c238:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c23a:	f3ef 8305 	mrs	r3, IPSR
 800c23e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800c240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10c      	bne.n	800c260 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c246:	f3ef 8310 	mrs	r3, PRIMASK
 800c24a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800c24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800c24e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c250:	b662      	cpsie	i
}
 800c252:	bf00      	nop
 800c254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c256:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c258:	6a3b      	ldr	r3, [r7, #32]
 800c25a:	f383 8810 	msr	PRIMASK, r3
}
 800c25e:	bf00      	nop
}
 800c260:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800c262:	e02b      	b.n	800c2bc <_tx_thread_system_suspend+0x204>
 800c264:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c266:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	f383 8810 	msr	PRIMASK, r3
}
 800c26e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c270:	4b1b      	ldr	r3, [pc, #108]	@ (800c2e0 <_tx_thread_system_suspend+0x228>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c276:	429a      	cmp	r2, r3
 800c278:	d022      	beq.n	800c2c0 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c27a:	4b15      	ldr	r3, [pc, #84]	@ (800c2d0 <_tx_thread_system_suspend+0x218>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800c280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c282:	2b00      	cmp	r3, #0
 800c284:	d11c      	bne.n	800c2c0 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c286:	4b17      	ldr	r3, [pc, #92]	@ (800c2e4 <_tx_thread_system_suspend+0x22c>)
 800c288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c28c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c28e:	f3ef 8305 	mrs	r3, IPSR
 800c292:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c294:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10c      	bne.n	800c2b4 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c29a:	f3ef 8310 	mrs	r3, PRIMASK
 800c29e:	617b      	str	r3, [r7, #20]
    return(posture);
 800c2a0:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800c2a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c2a4:	b662      	cpsie	i
}
 800c2a6:	bf00      	nop
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f383 8810 	msr	PRIMASK, r3
}
 800c2b2:	bf00      	nop
}
 800c2b4:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800c2b6:	e003      	b.n	800c2c0 <_tx_thread_system_suspend+0x208>
                return;
 800c2b8:	bf00      	nop
 800c2ba:	e002      	b.n	800c2c2 <_tx_thread_system_suspend+0x20a>
            return;
 800c2bc:	bf00      	nop
 800c2be:	e000      	b.n	800c2c2 <_tx_thread_system_suspend+0x20a>
    return;
 800c2c0:	bf00      	nop
}
 800c2c2:	3778      	adds	r7, #120	@ 0x78
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	20010a0c 	.word	0x20010a0c
 800c2cc:	20011010 	.word	0x20011010
 800c2d0:	20010aa4 	.word	0x20010aa4
 800c2d4:	20010a24 	.word	0x20010a24
 800c2d8:	20010a1c 	.word	0x20010a1c
 800c2dc:	20010a20 	.word	0x20010a20
 800c2e0:	20010a10 	.word	0x20010a10
 800c2e4:	e000ed04 	.word	0xe000ed04

0800c2e8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c2ee:	4b21      	ldr	r3, [pc, #132]	@ (800c374 <_tx_thread_time_slice+0x8c>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2f4:	f3ef 8310 	mrs	r3, PRIMASK
 800c2f8:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800c2fc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2fe:	b672      	cpsid	i
    return(int_posture);
 800c300:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800c302:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c304:	4b1c      	ldr	r3, [pc, #112]	@ (800c378 <_tx_thread_time_slice+0x90>)
 800c306:	2200      	movs	r2, #0
 800c308:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d024      	beq.n	800c35a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c314:	2b00      	cmp	r3, #0
 800c316:	d120      	bne.n	800c35a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	69da      	ldr	r2, [r3, #28]
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	699b      	ldr	r3, [r3, #24]
 800c324:	4a15      	ldr	r2, [pc, #84]	@ (800c37c <_tx_thread_time_slice+0x94>)
 800c326:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	6a1b      	ldr	r3, [r3, #32]
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d013      	beq.n	800c35a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d10d      	bne.n	800c35a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	6a12      	ldr	r2, [r2, #32]
 800c346:	490e      	ldr	r1, [pc, #56]	@ (800c380 <_tx_thread_time_slice+0x98>)
 800c348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c34c:	4b0d      	ldr	r3, [pc, #52]	@ (800c384 <_tx_thread_time_slice+0x9c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a0b      	ldr	r2, [pc, #44]	@ (800c380 <_tx_thread_time_slice+0x98>)
 800c352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c356:	4a0c      	ldr	r2, [pc, #48]	@ (800c388 <_tx_thread_time_slice+0xa0>)
 800c358:	6013      	str	r3, [r2, #0]
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f383 8810 	msr	PRIMASK, r3
}
 800c364:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800c366:	bf00      	nop
 800c368:	371c      	adds	r7, #28
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	20010a0c 	.word	0x20010a0c
 800c378:	20010ab4 	.word	0x20010ab4
 800c37c:	20011010 	.word	0x20011010
 800c380:	20010a24 	.word	0x20010a24
 800c384:	20010a20 	.word	0x20010a20
 800c388:	20010a10 	.word	0x20010a10

0800c38c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b08a      	sub	sp, #40	@ 0x28
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c398:	f3ef 8310 	mrs	r3, PRIMASK
 800c39c:	617b      	str	r3, [r7, #20]
    return(posture);
 800c39e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c3a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c3a2:	b672      	cpsid	i
    return(int_posture);
 800c3a4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800c3a6:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	d10e      	bne.n	800c3ce <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800c3b0:	4b13      	ldr	r3, [pc, #76]	@ (800c400 <_tx_thread_timeout+0x74>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	4a12      	ldr	r2, [pc, #72]	@ (800c400 <_tx_thread_timeout+0x74>)
 800c3b8:	6013      	str	r3, [r2, #0]
 800c3ba:	6a3b      	ldr	r3, [r7, #32]
 800c3bc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f383 8810 	msr	PRIMASK, r3
}
 800c3c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c3c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c3c8:	f7ff fd76 	bl	800beb8 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800c3cc:	e013      	b.n	800c3f6 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3d2:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c3da:	61bb      	str	r3, [r7, #24]
 800c3dc:	6a3b      	ldr	r3, [r7, #32]
 800c3de:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	f383 8810 	msr	PRIMASK, r3
}
 800c3e6:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d003      	beq.n	800c3f6 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	69b9      	ldr	r1, [r7, #24]
 800c3f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c3f4:	4798      	blx	r3
}
 800c3f6:	bf00      	nop
 800c3f8:	3728      	adds	r7, #40	@ 0x28
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	20010aa4 	.word	0x20010aa4

0800c404 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b088      	sub	sp, #32
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c40c:	f3ef 8310 	mrs	r3, PRIMASK
 800c410:	617b      	str	r3, [r7, #20]
    return(posture);
 800c412:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c414:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c416:	b672      	cpsid	i
    return(int_posture);
 800c418:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800c41a:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a1b      	ldr	r3, [r3, #32]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d002      	beq.n	800c42a <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800c424:	2317      	movs	r3, #23
 800c426:	61fb      	str	r3, [r7, #28]
 800c428:	e00d      	b.n	800c446 <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d102      	bne.n	800c438 <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 800c432:	2317      	movs	r3, #23
 800c434:	61fb      	str	r3, [r7, #28]
 800c436:	e006      	b.n	800c446 <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	3308      	adds	r3, #8
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 f9df 	bl	800c800 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 800c442:	2300      	movs	r3, #0
 800c444:	61fb      	str	r3, [r7, #28]
 800c446:	69bb      	ldr	r3, [r7, #24]
 800c448:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f383 8810 	msr	PRIMASK, r3
}
 800c450:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800c452:	69fb      	ldr	r3, [r7, #28]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3720      	adds	r7, #32
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <_tx_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800c45c:	b480      	push	{r7}
 800c45e:	b089      	sub	sp, #36	@ 0x24
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c468:	f3ef 8310 	mrs	r3, PRIMASK
 800c46c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c46e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c470:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c472:	b672      	cpsid	i
    return(int_posture);
 800c474:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800c476:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_TIMER_CHANGE_INSERT

    /* Determine if the timer is active.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head == TX_NULL)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6a1b      	ldr	r3, [r3, #32]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d105      	bne.n	800c48c <_tx_timer_change+0x30>
    {

        /* Setup the new expiration fields.  */
        timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	609a      	str	r2, [r3, #8]
        timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	60da      	str	r2, [r3, #12]
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	f383 8810 	msr	PRIMASK, r3
}
 800c496:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3724      	adds	r7, #36	@ 0x24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr
	...

0800c4a8 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08a      	sub	sp, #40	@ 0x28
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800c4b6:	222c      	movs	r2, #44	@ 0x2c
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f000 ff52 	bl	800d364 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4ca:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4d0:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c4de:	f3ef 8310 	mrs	r3, PRIMASK
 800c4e2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c4e4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c4e6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c4e8:	b672      	cpsid	i
    return(int_posture);
 800c4ea:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800c4ec:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	4a1c      	ldr	r2, [pc, #112]	@ (800c564 <_tx_timer_create+0xbc>)
 800c4f2:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800c4f4:	4b1c      	ldr	r3, [pc, #112]	@ (800c568 <_tx_timer_create+0xc0>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d109      	bne.n	800c510 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800c4fc:	4a1b      	ldr	r2, [pc, #108]	@ (800c56c <_tx_timer_create+0xc4>)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	625a      	str	r2, [r3, #36]	@ 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	629a      	str	r2, [r3, #40]	@ 0x28
 800c50e:	e011      	b.n	800c534 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800c510:	4b16      	ldr	r3, [pc, #88]	@ (800c56c <_tx_timer_create+0xc4>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800c516:	6a3b      	ldr	r3, [r7, #32]
 800c518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c51a:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800c51c:	6a3b      	ldr	r3, [r7, #32]
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	629a      	str	r2, [r3, #40]	@ 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	69fa      	ldr	r2, [r7, #28]
 800c52c:	629a      	str	r2, [r3, #40]	@ 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6a3a      	ldr	r2, [r7, #32]
 800c532:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800c534:	4b0c      	ldr	r3, [pc, #48]	@ (800c568 <_tx_timer_create+0xc0>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	3301      	adds	r3, #1
 800c53a:	4a0b      	ldr	r2, [pc, #44]	@ (800c568 <_tx_timer_create+0xc0>)
 800c53c:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800c53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c540:	2b01      	cmp	r3, #1
 800c542:	d104      	bne.n	800c54e <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	3308      	adds	r3, #8
 800c548:	4618      	mov	r0, r3
 800c54a:	f000 f959 	bl	800c800 <_tx_timer_system_activate>
 800c54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c550:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	f383 8810 	msr	PRIMASK, r3
}
 800c558:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3728      	adds	r7, #40	@ 0x28
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	4154494d 	.word	0x4154494d
 800c568:	20010b4c 	.word	0x20010b4c
 800c56c:	20010b48 	.word	0x20010b48

0800c570 <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 800c570:	b480      	push	{r7}
 800c572:	b08d      	sub	sp, #52	@ 0x34
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;


    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	3308      	adds	r3, #8
 800c57c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c57e:	f3ef 8310 	mrs	r3, PRIMASK
 800c582:	613b      	str	r3, [r7, #16]
    return(posture);
 800c584:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800c586:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c588:	b672      	cpsid	i
    return(int_posture);
 800c58a:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 800c58c:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 800c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c590:	699b      	ldr	r3, [r3, #24]
 800c592:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d07f      	beq.n	800c69a <_tx_timer_deactivate+0x12a>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 800c59a:	2300      	movs	r3, #0
 800c59c:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 800c59e:	4b45      	ldr	r3, [pc, #276]	@ (800c6b4 <_tx_timer_deactivate+0x144>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	69fa      	ldr	r2, [r7, #28]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d306      	bcc.n	800c5b6 <_tx_timer_deactivate+0x46>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800c5a8:	4b43      	ldr	r3, [pc, #268]	@ (800c6b8 <_tx_timer_deactivate+0x148>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	69fa      	ldr	r2, [r7, #28]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d201      	bcs.n	800c5b6 <_tx_timer_deactivate+0x46>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
        }

        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 800c5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d12e      	bne.n	800c61a <_tx_timer_deactivate+0xaa>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 800c5bc:	4b3f      	ldr	r3, [pc, #252]	@ (800c6bc <_tx_timer_deactivate+0x14c>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	69fa      	ldr	r2, [r7, #28]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d307      	bcc.n	800c5d6 <_tx_timer_deactivate+0x66>
            {

                /* Calculate ticks left to expiration - just the difference between this
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 800c5c6:	4b3d      	ldr	r3, [pc, #244]	@ (800c6bc <_tx_timer_deactivate+0x14c>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	69fa      	ldr	r2, [r7, #28]
 800c5cc:	1ad3      	subs	r3, r2, r3
 800c5ce:	109b      	asrs	r3, r3, #2
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5d4:	e010      	b.n	800c5f8 <_tx_timer_deactivate+0x88>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 800c5d6:	4b37      	ldr	r3, [pc, #220]	@ (800c6b4 <_tx_timer_deactivate+0x144>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	69fa      	ldr	r2, [r7, #28]
 800c5dc:	1ad3      	subs	r3, r2, r3
 800c5de:	109b      	asrs	r3, r3, #2
 800c5e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 800c5e2:	4b35      	ldr	r3, [pc, #212]	@ (800c6b8 <_tx_timer_deactivate+0x148>)
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	4b35      	ldr	r3, [pc, #212]	@ (800c6bc <_tx_timer_deactivate+0x14c>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	109b      	asrs	r3, r3, #2
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f2:	4413      	add	r3, r2
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b20      	cmp	r3, #32
 800c5fe:	d908      	bls.n	800c612 <_tx_timer_deactivate+0xa2>
            {

                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 800c600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c606:	4413      	add	r3, r2
 800c608:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =
 800c60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60e:	601a      	str	r2, [r3, #0]
 800c610:	e01c      	b.n	800c64c <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 800c612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c616:	601a      	str	r2, [r3, #0]
 800c618:	e018      	b.n	800c64c <_tx_timer_deactivate+0xdc>
        }
        else
        {

            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 800c61a:	4b29      	ldr	r3, [pc, #164]	@ (800c6c0 <_tx_timer_deactivate+0x150>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c620:	429a      	cmp	r2, r3
 800c622:	d00f      	beq.n	800c644 <_tx_timer_deactivate+0xd4>
            {

                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b20      	cmp	r3, #32
 800c62a:	d906      	bls.n	800c63a <_tx_timer_deactivate+0xca>
                {

                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800c62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =
 800c634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	e008      	b.n	800c64c <_tx_timer_deactivate+0xdc>
                }
                else
                {

                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800c63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c640:	601a      	str	r2, [r3, #0]
 800c642:	e003      	b.n	800c64c <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800c644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c646:	685a      	ldr	r2, [r3, #4]
 800c648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 800c64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64e:	691b      	ldr	r3, [r3, #16]
 800c650:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 800c652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	429a      	cmp	r2, r3
 800c658:	d108      	bne.n	800c66c <_tx_timer_deactivate+0xfc>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c660:	429a      	cmp	r2, r3
 800c662:	d117      	bne.n	800c694 <_tx_timer_deactivate+0x124>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	2200      	movs	r2, #0
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	e013      	b.n	800c694 <_tx_timer_deactivate+0x124>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 800c66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	69ba      	ldr	r2, [r7, #24]
 800c67c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c684:	429a      	cmp	r2, r3
 800c686:	d105      	bne.n	800c694 <_tx_timer_deactivate+0x124>
            {

                /* Update the next timer in the list with the list head
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	69fa      	ldr	r2, [r7, #28]
 800c68c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	69ba      	ldr	r2, [r7, #24]
 800c692:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800c694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c696:	2200      	movs	r2, #0
 800c698:	619a      	str	r2, [r3, #24]
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	f383 8810 	msr	PRIMASK, r3
}
 800c6a4:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3734      	adds	r7, #52	@ 0x34
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr
 800c6b4:	20010b38 	.word	0x20010b38
 800c6b8:	20010b3c 	.word	0x20010b3c
 800c6bc:	20010b40 	.word	0x20010b40
 800c6c0:	20010b50 	.word	0x20010b50

0800c6c4 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c6ca:	f3ef 8310 	mrs	r3, PRIMASK
 800c6ce:	607b      	str	r3, [r7, #4]
    return(posture);
 800c6d0:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800c6d2:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c6d4:	b672      	cpsid	i
    return(int_posture);
 800c6d6:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800c6d8:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800c6da:	4b09      	ldr	r3, [pc, #36]	@ (800c700 <_tx_timer_expiration_process+0x3c>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	4a07      	ldr	r2, [pc, #28]	@ (800c700 <_tx_timer_expiration_process+0x3c>)
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	f383 8810 	msr	PRIMASK, r3
}
 800c6ee:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800c6f0:	4804      	ldr	r0, [pc, #16]	@ (800c704 <_tx_timer_expiration_process+0x40>)
 800c6f2:	f7ff fbe1 	bl	800beb8 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c6f6:	bf00      	nop
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	20010aa4 	.word	0x20010aa4
 800c704:	20010b54 	.word	0x20010b54

0800c708 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800c708:	b590      	push	{r4, r7, lr}
 800c70a:	b089      	sub	sp, #36	@ 0x24
 800c70c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800c70e:	4b28      	ldr	r3, [pc, #160]	@ (800c7b0 <_tx_timer_initialize+0xa8>)
 800c710:	2200      	movs	r2, #0
 800c712:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800c714:	4b27      	ldr	r3, [pc, #156]	@ (800c7b4 <_tx_timer_initialize+0xac>)
 800c716:	2200      	movs	r2, #0
 800c718:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c71a:	4b27      	ldr	r3, [pc, #156]	@ (800c7b8 <_tx_timer_initialize+0xb0>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800c720:	4b26      	ldr	r3, [pc, #152]	@ (800c7bc <_tx_timer_initialize+0xb4>)
 800c722:	2200      	movs	r2, #0
 800c724:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800c726:	4b26      	ldr	r3, [pc, #152]	@ (800c7c0 <_tx_timer_initialize+0xb8>)
 800c728:	2200      	movs	r2, #0
 800c72a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800c72c:	2280      	movs	r2, #128	@ 0x80
 800c72e:	2100      	movs	r1, #0
 800c730:	4824      	ldr	r0, [pc, #144]	@ (800c7c4 <_tx_timer_initialize+0xbc>)
 800c732:	f000 fe17 	bl	800d364 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800c736:	4b24      	ldr	r3, [pc, #144]	@ (800c7c8 <_tx_timer_initialize+0xc0>)
 800c738:	4a22      	ldr	r2, [pc, #136]	@ (800c7c4 <_tx_timer_initialize+0xbc>)
 800c73a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800c73c:	4b23      	ldr	r3, [pc, #140]	@ (800c7cc <_tx_timer_initialize+0xc4>)
 800c73e:	4a21      	ldr	r2, [pc, #132]	@ (800c7c4 <_tx_timer_initialize+0xbc>)
 800c740:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800c742:	4b23      	ldr	r3, [pc, #140]	@ (800c7d0 <_tx_timer_initialize+0xc8>)
 800c744:	4a23      	ldr	r2, [pc, #140]	@ (800c7d4 <_tx_timer_initialize+0xcc>)
 800c746:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800c748:	4b21      	ldr	r3, [pc, #132]	@ (800c7d0 <_tx_timer_initialize+0xc8>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3304      	adds	r3, #4
 800c74e:	4a20      	ldr	r2, [pc, #128]	@ (800c7d0 <_tx_timer_initialize+0xc8>)
 800c750:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800c752:	4b21      	ldr	r3, [pc, #132]	@ (800c7d8 <_tx_timer_initialize+0xd0>)
 800c754:	4a21      	ldr	r2, [pc, #132]	@ (800c7dc <_tx_timer_initialize+0xd4>)
 800c756:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800c758:	4b21      	ldr	r3, [pc, #132]	@ (800c7e0 <_tx_timer_initialize+0xd8>)
 800c75a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c75e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800c760:	4b20      	ldr	r3, [pc, #128]	@ (800c7e4 <_tx_timer_initialize+0xdc>)
 800c762:	2200      	movs	r2, #0
 800c764:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800c766:	4b1c      	ldr	r3, [pc, #112]	@ (800c7d8 <_tx_timer_initialize+0xd0>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a1d      	ldr	r2, [pc, #116]	@ (800c7e0 <_tx_timer_initialize+0xd8>)
 800c76c:	6812      	ldr	r2, [r2, #0]
 800c76e:	491d      	ldr	r1, [pc, #116]	@ (800c7e4 <_tx_timer_initialize+0xdc>)
 800c770:	6809      	ldr	r1, [r1, #0]
 800c772:	481c      	ldr	r0, [pc, #112]	@ (800c7e4 <_tx_timer_initialize+0xdc>)
 800c774:	6800      	ldr	r0, [r0, #0]
 800c776:	2400      	movs	r4, #0
 800c778:	9405      	str	r4, [sp, #20]
 800c77a:	2400      	movs	r4, #0
 800c77c:	9404      	str	r4, [sp, #16]
 800c77e:	9003      	str	r0, [sp, #12]
 800c780:	9102      	str	r1, [sp, #8]
 800c782:	9201      	str	r2, [sp, #4]
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	4b18      	ldr	r3, [pc, #96]	@ (800c7e8 <_tx_timer_initialize+0xe0>)
 800c788:	4a18      	ldr	r2, [pc, #96]	@ (800c7ec <_tx_timer_initialize+0xe4>)
 800c78a:	4919      	ldr	r1, [pc, #100]	@ (800c7f0 <_tx_timer_initialize+0xe8>)
 800c78c:	4819      	ldr	r0, [pc, #100]	@ (800c7f4 <_tx_timer_initialize+0xec>)
 800c78e:	f7ff f95b 	bl	800ba48 <_tx_thread_create>
 800c792:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1e5      	bne.n	800c766 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800c79a:	4b17      	ldr	r3, [pc, #92]	@ (800c7f8 <_tx_timer_initialize+0xf0>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800c7a0:	4b16      	ldr	r3, [pc, #88]	@ (800c7fc <_tx_timer_initialize+0xf4>)
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800c7a6:	bf00      	nop
 800c7a8:	370c      	adds	r7, #12
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd90      	pop	{r4, r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20010ab0 	.word	0x20010ab0
 800c7b4:	20011010 	.word	0x20011010
 800c7b8:	20010ab4 	.word	0x20010ab4
 800c7bc:	20010b44 	.word	0x20010b44
 800c7c0:	20010b50 	.word	0x20010b50
 800c7c4:	20010ab8 	.word	0x20010ab8
 800c7c8:	20010b38 	.word	0x20010b38
 800c7cc:	20010b40 	.word	0x20010b40
 800c7d0:	20010b3c 	.word	0x20010b3c
 800c7d4:	20010b34 	.word	0x20010b34
 800c7d8:	20010c04 	.word	0x20010c04
 800c7dc:	20010c10 	.word	0x20010c10
 800c7e0:	20010c08 	.word	0x20010c08
 800c7e4:	20010c0c 	.word	0x20010c0c
 800c7e8:	4154494d 	.word	0x4154494d
 800c7ec:	0800c935 	.word	0x0800c935
 800c7f0:	0800d530 	.word	0x0800d530
 800c7f4:	20010b54 	.word	0x20010b54
 800c7f8:	20010b48 	.word	0x20010b48
 800c7fc:	20010b4c 	.word	0x20010b4c

0800c800 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c800:	b480      	push	{r7}
 800c802:	b089      	sub	sp, #36	@ 0x24
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d04a      	beq.n	800c8aa <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c81a:	d046      	beq.n	800c8aa <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d142      	bne.n	800c8aa <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2b20      	cmp	r3, #32
 800c828:	d902      	bls.n	800c830 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800c82a:	231f      	movs	r3, #31
 800c82c:	61bb      	str	r3, [r7, #24]
 800c82e:	e002      	b.n	800c836 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	3b01      	subs	r3, #1
 800c834:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800c836:	4b20      	ldr	r3, [pc, #128]	@ (800c8b8 <_tx_timer_system_activate+0xb8>)
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	69bb      	ldr	r3, [r7, #24]
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	4413      	add	r3, r2
 800c840:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800c842:	4b1e      	ldr	r3, [pc, #120]	@ (800c8bc <_tx_timer_system_activate+0xbc>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	69fa      	ldr	r2, [r7, #28]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d30b      	bcc.n	800c864 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800c84c:	4b1b      	ldr	r3, [pc, #108]	@ (800c8bc <_tx_timer_system_activate+0xbc>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	69fa      	ldr	r2, [r7, #28]
 800c852:	1ad3      	subs	r3, r2, r3
 800c854:	109b      	asrs	r3, r3, #2
 800c856:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800c858:	4b19      	ldr	r3, [pc, #100]	@ (800c8c0 <_tx_timer_system_activate+0xc0>)
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	009b      	lsls	r3, r3, #2
 800c860:	4413      	add	r3, r2
 800c862:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d109      	bne.n	800c880 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	601a      	str	r2, [r3, #0]
 800c87e:	e011      	b.n	800c8a4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	695b      	ldr	r3, [r3, #20]
 800c88a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	68fa      	ldr	r2, [r7, #12]
 800c89c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	69fa      	ldr	r2, [r7, #28]
 800c8a8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800c8aa:	bf00      	nop
 800c8ac:	3724      	adds	r7, #36	@ 0x24
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	20010b40 	.word	0x20010b40
 800c8bc:	20010b3c 	.word	0x20010b3c
 800c8c0:	20010b38 	.word	0x20010b38

0800c8c4 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b087      	sub	sp, #28
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d026      	beq.n	800c926 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d108      	bne.n	800c8f8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d117      	bne.n	800c920 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	601a      	str	r2, [r3, #0]
 800c8f6:	e013      	b.n	800c920 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	695b      	ldr	r3, [r3, #20]
 800c8fc:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	429a      	cmp	r2, r3
 800c912:	d105      	bne.n	800c920 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	619a      	str	r2, [r3, #24]
    }
}
 800c926:	bf00      	nop
 800c928:	371c      	adds	r7, #28
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
	...

0800c934 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b098      	sub	sp, #96	@ 0x60
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800c93c:	2300      	movs	r3, #0
 800c93e:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a73      	ldr	r2, [pc, #460]	@ (800cb10 <_tx_timer_thread_entry+0x1dc>)
 800c944:	4293      	cmp	r3, r2
 800c946:	f040 80de 	bne.w	800cb06 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c94a:	f3ef 8310 	mrs	r3, PRIMASK
 800c94e:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800c950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800c952:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c954:	b672      	cpsid	i
    return(int_posture);
 800c956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800c958:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800c95a:	4b6e      	ldr	r3, [pc, #440]	@ (800cb14 <_tx_timer_thread_entry+0x1e0>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f107 020c 	add.w	r2, r7, #12
 800c96e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800c970:	4b68      	ldr	r3, [pc, #416]	@ (800cb14 <_tx_timer_thread_entry+0x1e0>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2200      	movs	r2, #0
 800c976:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800c978:	4b66      	ldr	r3, [pc, #408]	@ (800cb14 <_tx_timer_thread_entry+0x1e0>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	3304      	adds	r3, #4
 800c97e:	4a65      	ldr	r2, [pc, #404]	@ (800cb14 <_tx_timer_thread_entry+0x1e0>)
 800c980:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800c982:	4b64      	ldr	r3, [pc, #400]	@ (800cb14 <_tx_timer_thread_entry+0x1e0>)
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	4b64      	ldr	r3, [pc, #400]	@ (800cb18 <_tx_timer_thread_entry+0x1e4>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d103      	bne.n	800c996 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800c98e:	4b63      	ldr	r3, [pc, #396]	@ (800cb1c <_tx_timer_thread_entry+0x1e8>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a60      	ldr	r2, [pc, #384]	@ (800cb14 <_tx_timer_thread_entry+0x1e0>)
 800c994:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800c996:	4b62      	ldr	r3, [pc, #392]	@ (800cb20 <_tx_timer_thread_entry+0x1ec>)
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]
 800c99c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c99e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a2:	f383 8810 	msr	PRIMASK, r3
}
 800c9a6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9a8:	f3ef 8310 	mrs	r3, PRIMASK
 800c9ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800c9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800c9b0:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800c9b2:	b672      	cpsid	i
    return(int_posture);
 800c9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800c9b6:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800c9b8:	e07f      	b.n	800caba <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800c9c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c9ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d102      	bne.n	800c9d6 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	60fb      	str	r3, [r7, #12]
 800c9d4:	e00e      	b.n	800c9f4 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800c9d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9d8:	695b      	ldr	r3, [r3, #20]
 800c9da:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c9dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9e0:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c9e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9e6:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800c9e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9ea:	f107 020c 	add.w	r2, r7, #12
 800c9ee:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800c9f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9f2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c9f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b20      	cmp	r3, #32
 800c9fa:	d911      	bls.n	800ca20 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800c9fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800ca04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca06:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ca0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca0e:	f107 0208 	add.w	r2, r7, #8
 800ca12:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800ca14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca18:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800ca1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca1c:	60bb      	str	r3, [r7, #8]
 800ca1e:	e01a      	b.n	800ca56 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800ca20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800ca26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800ca2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca2e:	685a      	ldr	r2, [r3, #4]
 800ca30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca32:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800ca34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d009      	beq.n	800ca50 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ca3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca3e:	f107 0208 	add.w	r2, r7, #8
 800ca42:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800ca44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca48:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800ca4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca4c:	60bb      	str	r3, [r7, #8]
 800ca4e:	e002      	b.n	800ca56 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ca50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca52:	2200      	movs	r2, #0
 800ca54:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800ca56:	4a33      	ldr	r2, [pc, #204]	@ (800cb24 <_tx_timer_thread_entry+0x1f0>)
 800ca58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca5a:	6013      	str	r3, [r2, #0]
 800ca5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca62:	f383 8810 	msr	PRIMASK, r3
}
 800ca66:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800ca68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d002      	beq.n	800ca74 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800ca6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca70:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ca72:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca74:	f3ef 8310 	mrs	r3, PRIMASK
 800ca78:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800ca7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800ca7c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca7e:	b672      	cpsid	i
    return(int_posture);
 800ca80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800ca82:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800ca84:	4b27      	ldr	r3, [pc, #156]	@ (800cb24 <_tx_timer_thread_entry+0x1f0>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d105      	bne.n	800ca9e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800ca92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca94:	2200      	movs	r2, #0
 800ca96:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800ca98:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ca9a:	f7ff feb1 	bl	800c800 <_tx_timer_system_activate>
 800ca9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800caa0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	f383 8810 	msr	PRIMASK, r3
}
 800caa8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800caaa:	f3ef 8310 	mrs	r3, PRIMASK
 800caae:	623b      	str	r3, [r7, #32]
    return(posture);
 800cab0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cab2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cab4:	b672      	cpsid	i
    return(int_posture);
 800cab6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800cab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f47f af7c 	bne.w	800c9ba <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800cac2:	4b17      	ldr	r3, [pc, #92]	@ (800cb20 <_tx_timer_thread_entry+0x1ec>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d116      	bne.n	800caf8 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800caca:	4b17      	ldr	r3, [pc, #92]	@ (800cb28 <_tx_timer_thread_entry+0x1f4>)
 800cacc:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800cace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cad0:	2203      	movs	r2, #3
 800cad2:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cad6:	2201      	movs	r2, #1
 800cad8:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800cada:	4b14      	ldr	r3, [pc, #80]	@ (800cb2c <_tx_timer_thread_entry+0x1f8>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	3301      	adds	r3, #1
 800cae0:	4a12      	ldr	r2, [pc, #72]	@ (800cb2c <_tx_timer_thread_entry+0x1f8>)
 800cae2:	6013      	str	r3, [r2, #0]
 800cae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cae6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	f383 8810 	msr	PRIMASK, r3
}
 800caee:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800caf0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800caf2:	f7ff fae1 	bl	800c0b8 <_tx_thread_system_suspend>
 800caf6:	e728      	b.n	800c94a <_tx_timer_thread_entry+0x16>
 800caf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cafa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	f383 8810 	msr	PRIMASK, r3
}
 800cb02:	bf00      	nop
            TX_DISABLE
 800cb04:	e721      	b.n	800c94a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800cb06:	bf00      	nop
 800cb08:	3760      	adds	r7, #96	@ 0x60
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	4154494d 	.word	0x4154494d
 800cb14:	20010b40 	.word	0x20010b40
 800cb18:	20010b3c 	.word	0x20010b3c
 800cb1c:	20010b38 	.word	0x20010b38
 800cb20:	20010b44 	.word	0x20010b44
 800cb24:	20010b50 	.word	0x20010b50
 800cb28:	20010b54 	.word	0x20010b54
 800cb2c:	20010aa4 	.word	0x20010aa4

0800cb30 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b08a      	sub	sp, #40	@ 0x28
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
 800cb3c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d102      	bne.n	800cb4e <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cb48:	2302      	movs	r3, #2
 800cb4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb4c:	e029      	b.n	800cba2 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a2d      	ldr	r2, [pc, #180]	@ (800cc08 <_txe_byte_allocate+0xd8>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d002      	beq.n	800cb5e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cb58:	2302      	movs	r3, #2
 800cb5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb5c:	e021      	b.n	800cba2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d102      	bne.n	800cb6a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800cb64:	2303      	movs	r3, #3
 800cb66:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb68:	e01b      	b.n	800cba2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d102      	bne.n	800cb76 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800cb70:	2305      	movs	r3, #5
 800cb72:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb74:	e015      	b.n	800cba2 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	69db      	ldr	r3, [r3, #28]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d902      	bls.n	800cb86 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800cb80:	2305      	movs	r3, #5
 800cb82:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb84:	e00d      	b.n	800cba2 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00a      	beq.n	800cba2 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cb8c:	f3ef 8305 	mrs	r3, IPSR
 800cb90:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800cb92:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cb94:	4b1d      	ldr	r3, [pc, #116]	@ (800cc0c <_txe_byte_allocate+0xdc>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d001      	beq.n	800cba2 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800cb9e:	2304      	movs	r3, #4
 800cba0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800cba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d108      	bne.n	800cbba <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800cba8:	4b19      	ldr	r3, [pc, #100]	@ (800cc10 <_txe_byte_allocate+0xe0>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800cbae:	6a3b      	ldr	r3, [r7, #32]
 800cbb0:	4a18      	ldr	r2, [pc, #96]	@ (800cc14 <_txe_byte_allocate+0xe4>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d101      	bne.n	800cbba <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800cbb6:	2313      	movs	r3, #19
 800cbb8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800cbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d114      	bne.n	800cbea <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cbc0:	f3ef 8305 	mrs	r3, IPSR
 800cbc4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800cbc6:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cbc8:	4b10      	ldr	r3, [pc, #64]	@ (800cc0c <_txe_byte_allocate+0xdc>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00b      	beq.n	800cbea <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cbd2:	f3ef 8305 	mrs	r3, IPSR
 800cbd6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cbd8:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cbda:	4b0c      	ldr	r3, [pc, #48]	@ (800cc0c <_txe_byte_allocate+0xdc>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800cbe4:	d201      	bcs.n	800cbea <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cbe6:	2313      	movs	r3, #19
 800cbe8:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d106      	bne.n	800cbfe <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	68b9      	ldr	r1, [r7, #8]
 800cbf6:	68f8      	ldr	r0, [r7, #12]
 800cbf8:	f7fe fa1a 	bl	800b030 <_tx_byte_allocate>
 800cbfc:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800cbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3728      	adds	r7, #40	@ 0x28
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	42595445 	.word	0x42595445
 800cc0c:	20000054 	.word	0x20000054
 800cc10:	20010a0c 	.word	0x20010a0c
 800cc14:	20010b54 	.word	0x20010b54

0800cc18 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b092      	sub	sp, #72	@ 0x48
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cc26:	2300      	movs	r3, #0
 800cc28:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d102      	bne.n	800cc36 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cc30:	2302      	movs	r3, #2
 800cc32:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc34:	e075      	b.n	800cd22 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800cc36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc38:	2b34      	cmp	r3, #52	@ 0x34
 800cc3a:	d002      	beq.n	800cc42 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc40:	e06f      	b.n	800cd22 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc42:	f3ef 8310 	mrs	r3, PRIMASK
 800cc46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800cc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800cc4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc4c:	b672      	cpsid	i
    return(int_posture);
 800cc4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cc50:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cc52:	4b3b      	ldr	r3, [pc, #236]	@ (800cd40 <_txe_byte_pool_create+0x128>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	3301      	adds	r3, #1
 800cc58:	4a39      	ldr	r2, [pc, #228]	@ (800cd40 <_txe_byte_pool_create+0x128>)
 800cc5a:	6013      	str	r3, [r2, #0]
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc5e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc62:	f383 8810 	msr	PRIMASK, r3
}
 800cc66:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800cc68:	4b36      	ldr	r3, [pc, #216]	@ (800cd44 <_txe_byte_pool_create+0x12c>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800cc6e:	2300      	movs	r3, #0
 800cc70:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc72:	e009      	b.n	800cc88 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d00b      	beq.n	800cc94 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800cc7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800cc82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc84:	3301      	adds	r3, #1
 800cc86:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc88:	4b2f      	ldr	r3, [pc, #188]	@ (800cd48 <_txe_byte_pool_create+0x130>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d3f0      	bcc.n	800cc74 <_txe_byte_pool_create+0x5c>
 800cc92:	e000      	b.n	800cc96 <_txe_byte_pool_create+0x7e>
                break;
 800cc94:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc96:	f3ef 8310 	mrs	r3, PRIMASK
 800cc9a:	623b      	str	r3, [r7, #32]
    return(posture);
 800cc9c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cc9e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cca0:	b672      	cpsid	i
    return(int_posture);
 800cca2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cca4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cca6:	4b26      	ldr	r3, [pc, #152]	@ (800cd40 <_txe_byte_pool_create+0x128>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	4a24      	ldr	r2, [pc, #144]	@ (800cd40 <_txe_byte_pool_create+0x128>)
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb6:	f383 8810 	msr	PRIMASK, r3
}
 800ccba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ccbc:	f7ff f8c2 	bl	800be44 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d102      	bne.n	800ccce <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800ccc8:	2302      	movs	r3, #2
 800ccca:	647b      	str	r3, [r7, #68]	@ 0x44
 800cccc:	e029      	b.n	800cd22 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d102      	bne.n	800ccda <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800ccd4:	2303      	movs	r3, #3
 800ccd6:	647b      	str	r3, [r7, #68]	@ 0x44
 800ccd8:	e023      	b.n	800cd22 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	2b63      	cmp	r3, #99	@ 0x63
 800ccde:	d802      	bhi.n	800cce6 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800cce0:	2305      	movs	r3, #5
 800cce2:	647b      	str	r3, [r7, #68]	@ 0x44
 800cce4:	e01d      	b.n	800cd22 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800cce6:	4b19      	ldr	r3, [pc, #100]	@ (800cd4c <_txe_byte_pool_create+0x134>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800ccec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccee:	4a18      	ldr	r2, [pc, #96]	@ (800cd50 <_txe_byte_pool_create+0x138>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d101      	bne.n	800ccf8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ccf4:	2313      	movs	r3, #19
 800ccf6:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ccf8:	f3ef 8305 	mrs	r3, IPSR
 800ccfc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ccfe:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cd00:	4b14      	ldr	r3, [pc, #80]	@ (800cd54 <_txe_byte_pool_create+0x13c>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d00b      	beq.n	800cd22 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cd0a:	f3ef 8305 	mrs	r3, IPSR
 800cd0e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cd10:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cd12:	4b10      	ldr	r3, [pc, #64]	@ (800cd54 <_txe_byte_pool_create+0x13c>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4313      	orrs	r3, r2
 800cd18:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800cd1c:	d201      	bcs.n	800cd22 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800cd1e:	2313      	movs	r3, #19
 800cd20:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cd22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d106      	bne.n	800cd36 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	68b9      	ldr	r1, [r7, #8]
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	f7fe fac0 	bl	800b2b4 <_tx_byte_pool_create>
 800cd34:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800cd36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3748      	adds	r7, #72	@ 0x48
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	20010aa4 	.word	0x20010aa4
 800cd44:	200109fc 	.word	0x200109fc
 800cd48:	20010a00 	.word	0x20010a00
 800cd4c:	20010a0c 	.word	0x20010a0c
 800cd50:	20010b54 	.word	0x20010b54
 800cd54:	20000054 	.word	0x20000054

0800cd58 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b092      	sub	sp, #72	@ 0x48
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
 800cd64:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cd66:	2300      	movs	r3, #0
 800cd68:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d102      	bne.n	800cd76 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cd70:	230c      	movs	r3, #12
 800cd72:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd74:	e054      	b.n	800ce20 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	2b1c      	cmp	r3, #28
 800cd7a:	d002      	beq.n	800cd82 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cd7c:	230c      	movs	r3, #12
 800cd7e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd80:	e04e      	b.n	800ce20 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd82:	f3ef 8310 	mrs	r3, PRIMASK
 800cd86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800cd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800cd8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd8c:	b672      	cpsid	i
    return(int_posture);
 800cd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cd90:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cd92:	4b36      	ldr	r3, [pc, #216]	@ (800ce6c <_txe_semaphore_create+0x114>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	3301      	adds	r3, #1
 800cd98:	4a34      	ldr	r2, [pc, #208]	@ (800ce6c <_txe_semaphore_create+0x114>)
 800cd9a:	6013      	str	r3, [r2, #0]
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda2:	f383 8810 	msr	PRIMASK, r3
}
 800cda6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800cda8:	4b31      	ldr	r3, [pc, #196]	@ (800ce70 <_txe_semaphore_create+0x118>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800cdae:	2300      	movs	r3, #0
 800cdb0:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdb2:	e009      	b.n	800cdc8 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d00b      	beq.n	800cdd4 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800cdbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdbe:	695b      	ldr	r3, [r3, #20]
 800cdc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800cdc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdc8:	4b2a      	ldr	r3, [pc, #168]	@ (800ce74 <_txe_semaphore_create+0x11c>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d3f0      	bcc.n	800cdb4 <_txe_semaphore_create+0x5c>
 800cdd2:	e000      	b.n	800cdd6 <_txe_semaphore_create+0x7e>
                break;
 800cdd4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdd6:	f3ef 8310 	mrs	r3, PRIMASK
 800cdda:	623b      	str	r3, [r7, #32]
    return(posture);
 800cddc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cdde:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cde0:	b672      	cpsid	i
    return(int_posture);
 800cde2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cde4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cde6:	4b21      	ldr	r3, [pc, #132]	@ (800ce6c <_txe_semaphore_create+0x114>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	3b01      	subs	r3, #1
 800cdec:	4a1f      	ldr	r2, [pc, #124]	@ (800ce6c <_txe_semaphore_create+0x114>)
 800cdee:	6013      	str	r3, [r2, #0]
 800cdf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf6:	f383 8810 	msr	PRIMASK, r3
}
 800cdfa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cdfc:	f7ff f822 	bl	800be44 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d102      	bne.n	800ce0e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800ce08:	230c      	movs	r3, #12
 800ce0a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce0c:	e008      	b.n	800ce20 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ce0e:	4b1a      	ldr	r3, [pc, #104]	@ (800ce78 <_txe_semaphore_create+0x120>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800ce14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce16:	4a19      	ldr	r2, [pc, #100]	@ (800ce7c <_txe_semaphore_create+0x124>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d101      	bne.n	800ce20 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ce1c:	2313      	movs	r3, #19
 800ce1e:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ce20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d114      	bne.n	800ce50 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce26:	f3ef 8305 	mrs	r3, IPSR
 800ce2a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ce2c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ce2e:	4b14      	ldr	r3, [pc, #80]	@ (800ce80 <_txe_semaphore_create+0x128>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00b      	beq.n	800ce50 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce38:	f3ef 8305 	mrs	r3, IPSR
 800ce3c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ce3e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ce40:	4b0f      	ldr	r3, [pc, #60]	@ (800ce80 <_txe_semaphore_create+0x128>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4313      	orrs	r3, r2
 800ce46:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800ce4a:	d201      	bcs.n	800ce50 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ce4c:	2313      	movs	r3, #19
 800ce4e:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ce50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d105      	bne.n	800ce62 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	68b9      	ldr	r1, [r7, #8]
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f7fe fcb8 	bl	800b7d0 <_tx_semaphore_create>
 800ce60:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800ce62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3748      	adds	r7, #72	@ 0x48
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	20010aa4 	.word	0x20010aa4
 800ce70:	200109d4 	.word	0x200109d4
 800ce74:	200109d8 	.word	0x200109d8
 800ce78:	20010a0c 	.word	0x20010a0c
 800ce7c:	20010b54 	.word	0x20010b54
 800ce80:	20000054 	.word	0x20000054

0800ce84 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b086      	sub	sp, #24
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d102      	bne.n	800ce9e <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800ce98:	230c      	movs	r3, #12
 800ce9a:	617b      	str	r3, [r7, #20]
 800ce9c:	e01f      	b.n	800cede <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4a15      	ldr	r2, [pc, #84]	@ (800cef8 <_txe_semaphore_get+0x74>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d002      	beq.n	800ceae <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cea8:	230c      	movs	r3, #12
 800ceaa:	617b      	str	r3, [r7, #20]
 800ceac:	e017      	b.n	800cede <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d014      	beq.n	800cede <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ceb4:	f3ef 8305 	mrs	r3, IPSR
 800ceb8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800ceba:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cebc:	4b0f      	ldr	r3, [pc, #60]	@ (800cefc <_txe_semaphore_get+0x78>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4313      	orrs	r3, r2
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800cec6:	2304      	movs	r3, #4
 800cec8:	617b      	str	r3, [r7, #20]
 800ceca:	e008      	b.n	800cede <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800cecc:	4b0c      	ldr	r3, [pc, #48]	@ (800cf00 <_txe_semaphore_get+0x7c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	4a0b      	ldr	r2, [pc, #44]	@ (800cf04 <_txe_semaphore_get+0x80>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d101      	bne.n	800cede <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800ceda:	2304      	movs	r3, #4
 800cedc:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d104      	bne.n	800ceee <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800cee4:	6839      	ldr	r1, [r7, #0]
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7fe fcc4 	bl	800b874 <_tx_semaphore_get>
 800ceec:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800ceee:	697b      	ldr	r3, [r7, #20]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3718      	adds	r7, #24
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	53454d41 	.word	0x53454d41
 800cefc:	20000054 	.word	0x20000054
 800cf00:	20010a0c 	.word	0x20010a0c
 800cf04:	20010b54 	.word	0x20010b54

0800cf08 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d102      	bne.n	800cf1c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cf16:	230c      	movs	r3, #12
 800cf18:	60fb      	str	r3, [r7, #12]
 800cf1a:	e00b      	b.n	800cf34 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a07      	ldr	r2, [pc, #28]	@ (800cf40 <_txe_semaphore_put+0x38>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d002      	beq.n	800cf2c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cf26:	230c      	movs	r3, #12
 800cf28:	60fb      	str	r3, [r7, #12]
 800cf2a:	e003      	b.n	800cf34 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f7fe fd33 	bl	800b998 <_tx_semaphore_put>
 800cf32:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800cf34:	68fb      	ldr	r3, [r7, #12]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3710      	adds	r7, #16
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	53454d41 	.word	0x53454d41

0800cf44 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b09a      	sub	sp, #104	@ 0x68
 800cf48:	af06      	add	r7, sp, #24
 800cf4a:	60f8      	str	r0, [r7, #12]
 800cf4c:	60b9      	str	r1, [r7, #8]
 800cf4e:	607a      	str	r2, [r7, #4]
 800cf50:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cf52:	2300      	movs	r3, #0
 800cf54:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d102      	bne.n	800cf62 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800cf5c:	230e      	movs	r3, #14
 800cf5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf60:	e0bb      	b.n	800d0da <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800cf62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf64:	2bb0      	cmp	r3, #176	@ 0xb0
 800cf66:	d002      	beq.n	800cf6e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800cf68:	230e      	movs	r3, #14
 800cf6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf6c:	e0b5      	b.n	800d0da <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf6e:	f3ef 8310 	mrs	r3, PRIMASK
 800cf72:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800cf74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800cf76:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf78:	b672      	cpsid	i
    return(int_posture);
 800cf7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cf7c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cf7e:	4b64      	ldr	r3, [pc, #400]	@ (800d110 <_txe_thread_create+0x1cc>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3301      	adds	r3, #1
 800cf84:	4a62      	ldr	r2, [pc, #392]	@ (800d110 <_txe_thread_create+0x1cc>)
 800cf86:	6013      	str	r3, [r2, #0]
 800cf88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8e:	f383 8810 	msr	PRIMASK, r3
}
 800cf92:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800cf94:	2300      	movs	r3, #0
 800cf96:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800cf98:	4b5e      	ldr	r3, [pc, #376]	@ (800d114 <_txe_thread_create+0x1d0>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cf9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfa0:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800cfa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cfa8:	4413      	add	r3, r2
 800cfaa:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800cfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfae:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfb4:	e02b      	b.n	800d00e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d101      	bne.n	800cfc2 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800cfc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d028      	beq.n	800d01a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800cfc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d308      	bcc.n	800cfe4 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800cfd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfd4:	691b      	ldr	r3, [r3, #16]
 800cfd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d203      	bcs.n	800cfe4 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800cfe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d308      	bcc.n	800d000 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800cfee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d203      	bcs.n	800d000 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800cff8:	2300      	movs	r3, #0
 800cffa:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800cffc:	2301      	movs	r3, #1
 800cffe:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800d000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d006:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d00a:	3301      	adds	r3, #1
 800d00c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d00e:	4b42      	ldr	r3, [pc, #264]	@ (800d118 <_txe_thread_create+0x1d4>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d014:	429a      	cmp	r2, r3
 800d016:	d3ce      	bcc.n	800cfb6 <_txe_thread_create+0x72>
 800d018:	e000      	b.n	800d01c <_txe_thread_create+0xd8>
                break;
 800d01a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d01c:	f3ef 8310 	mrs	r3, PRIMASK
 800d020:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d022:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d024:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d026:	b672      	cpsid	i
    return(int_posture);
 800d028:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d02a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d02c:	4b38      	ldr	r3, [pc, #224]	@ (800d110 <_txe_thread_create+0x1cc>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	3b01      	subs	r3, #1
 800d032:	4a37      	ldr	r2, [pc, #220]	@ (800d110 <_txe_thread_create+0x1cc>)
 800d034:	6013      	str	r3, [r2, #0]
 800d036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d038:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d03a:	6a3b      	ldr	r3, [r7, #32]
 800d03c:	f383 8810 	msr	PRIMASK, r3
}
 800d040:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d042:	f7fe feff 	bl	800be44 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d102      	bne.n	800d054 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800d04e:	230e      	movs	r3, #14
 800d050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d052:	e042      	b.n	800d0da <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800d054:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d056:	2b00      	cmp	r3, #0
 800d058:	d102      	bne.n	800d060 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d05a:	2303      	movs	r3, #3
 800d05c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d05e:	e03c      	b.n	800d0da <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d102      	bne.n	800d06c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d066:	2303      	movs	r3, #3
 800d068:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d06a:	e036      	b.n	800d0da <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800d06c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d06e:	2bc7      	cmp	r3, #199	@ 0xc7
 800d070:	d802      	bhi.n	800d078 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800d072:	2305      	movs	r3, #5
 800d074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d076:	e030      	b.n	800d0da <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800d078:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d07a:	2b1f      	cmp	r3, #31
 800d07c:	d902      	bls.n	800d084 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800d07e:	230f      	movs	r3, #15
 800d080:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d082:	e02a      	b.n	800d0da <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800d084:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d086:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d088:	429a      	cmp	r2, r3
 800d08a:	d902      	bls.n	800d092 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800d08c:	2318      	movs	r3, #24
 800d08e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d090:	e023      	b.n	800d0da <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800d092:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d094:	2b01      	cmp	r3, #1
 800d096:	d902      	bls.n	800d09e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800d098:	2310      	movs	r3, #16
 800d09a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d09c:	e01d      	b.n	800d0da <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800d09e:	4b1f      	ldr	r3, [pc, #124]	@ (800d11c <_txe_thread_create+0x1d8>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a6:	4a1e      	ldr	r2, [pc, #120]	@ (800d120 <_txe_thread_create+0x1dc>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d101      	bne.n	800d0b0 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d0ac:	2313      	movs	r3, #19
 800d0ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d0b0:	f3ef 8305 	mrs	r3, IPSR
 800d0b4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d0b6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d0b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d124 <_txe_thread_create+0x1e0>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00b      	beq.n	800d0da <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d0c2:	f3ef 8305 	mrs	r3, IPSR
 800d0c6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d0c8:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d0ca:	4b16      	ldr	r3, [pc, #88]	@ (800d124 <_txe_thread_create+0x1e0>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d0d4:	d201      	bcs.n	800d0da <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d0d6:	2313      	movs	r3, #19
 800d0d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d0da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d112      	bne.n	800d106 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800d0e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d0e2:	9305      	str	r3, [sp, #20]
 800d0e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d0e6:	9304      	str	r3, [sp, #16]
 800d0e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0ea:	9303      	str	r3, [sp, #12]
 800d0ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d0ee:	9302      	str	r3, [sp, #8]
 800d0f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0f2:	9301      	str	r3, [sp, #4]
 800d0f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	68b9      	ldr	r1, [r7, #8]
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f7fe fca2 	bl	800ba48 <_tx_thread_create>
 800d104:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800d106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3750      	adds	r7, #80	@ 0x50
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	20010aa4 	.word	0x20010aa4
 800d114:	20010a14 	.word	0x20010a14
 800d118:	20010a18 	.word	0x20010a18
 800d11c:	20010a0c 	.word	0x20010a0c
 800d120:	20010b54 	.word	0x20010b54
 800d124:	20000054 	.word	0x20000054

0800d128 <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d102      	bne.n	800d13c <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d136:	2315      	movs	r3, #21
 800d138:	60fb      	str	r3, [r7, #12]
 800d13a:	e00b      	b.n	800d154 <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a07      	ldr	r2, [pc, #28]	@ (800d160 <_txe_timer_activate+0x38>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d002      	beq.n	800d14c <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d146:	2315      	movs	r3, #21
 800d148:	60fb      	str	r3, [r7, #12]
 800d14a:	e003      	b.n	800d154 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7ff f959 	bl	800c404 <_tx_timer_activate>
 800d152:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d154:	68fb      	ldr	r3, [r7, #12]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	4154494d 	.word	0x4154494d

0800d164 <_txe_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b086      	sub	sp, #24
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d102      	bne.n	800d17c <_txe_timer_change+0x18>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d176:	2315      	movs	r3, #21
 800d178:	617b      	str	r3, [r7, #20]
 800d17a:	e020      	b.n	800d1be <_txe_timer_change+0x5a>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a11      	ldr	r2, [pc, #68]	@ (800d1c8 <_txe_timer_change+0x64>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d002      	beq.n	800d18c <_txe_timer_change+0x28>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d186:	2315      	movs	r3, #21
 800d188:	617b      	str	r3, [r7, #20]
 800d18a:	e018      	b.n	800d1be <_txe_timer_change+0x5a>
    }

    /* Check for an illegal initial tick value.  */
    else if (initial_ticks == ((ULONG) 0))
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d102      	bne.n	800d198 <_txe_timer_change+0x34>
    {

        /* Invalid initial tick value, return appropriate error code.  */
        status =  TX_TICK_ERROR;
 800d192:	2316      	movs	r3, #22
 800d194:	617b      	str	r3, [r7, #20]
 800d196:	e012      	b.n	800d1be <_txe_timer_change+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d198:	f3ef 8305 	mrs	r3, IPSR
 800d19c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d19e:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d1a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d1cc <_txe_timer_change+0x68>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d1aa:	d302      	bcc.n	800d1b2 <_txe_timer_change+0x4e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800d1ac:	2313      	movs	r3, #19
 800d1ae:	617b      	str	r3, [r7, #20]
 800d1b0:	e005      	b.n	800d1be <_txe_timer_change+0x5a>
    }
    else
    {

        /* Call actual application timer function.  */
        status =  _tx_timer_change(timer_ptr, initial_ticks, reschedule_ticks);
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	68b9      	ldr	r1, [r7, #8]
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f7ff f950 	bl	800c45c <_tx_timer_change>
 800d1bc:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800d1be:	697b      	ldr	r3, [r7, #20]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3718      	adds	r7, #24
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	4154494d 	.word	0x4154494d
 800d1cc:	20000054 	.word	0x20000054

0800d1d0 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b096      	sub	sp, #88	@ 0x58
 800d1d4:	af04      	add	r7, sp, #16
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	607a      	str	r2, [r7, #4]
 800d1dc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d102      	bne.n	800d1ee <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d1e8:	2315      	movs	r3, #21
 800d1ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1ec:	e059      	b.n	800d2a2 <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800d1ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1f0:	2b2c      	cmp	r3, #44	@ 0x2c
 800d1f2:	d002      	beq.n	800d1fa <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d1f4:	2315      	movs	r3, #21
 800d1f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1f8:	e053      	b.n	800d2a2 <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d1fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d1fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800d200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800d202:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d204:	b672      	cpsid	i
    return(int_posture);
 800d206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d208:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d20a:	4b41      	ldr	r3, [pc, #260]	@ (800d310 <_txe_timer_create+0x140>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	3301      	adds	r3, #1
 800d210:	4a3f      	ldr	r2, [pc, #252]	@ (800d310 <_txe_timer_create+0x140>)
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d216:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21a:	f383 8810 	msr	PRIMASK, r3
}
 800d21e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800d220:	4b3c      	ldr	r3, [pc, #240]	@ (800d314 <_txe_timer_create+0x144>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800d226:	2300      	movs	r3, #0
 800d228:	643b      	str	r3, [r7, #64]	@ 0x40
 800d22a:	e009      	b.n	800d240 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d230:	429a      	cmp	r2, r3
 800d232:	d00b      	beq.n	800d24c <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800d234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800d23a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d23c:	3301      	adds	r3, #1
 800d23e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d240:	4b35      	ldr	r3, [pc, #212]	@ (800d318 <_txe_timer_create+0x148>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d246:	429a      	cmp	r2, r3
 800d248:	d3f0      	bcc.n	800d22c <_txe_timer_create+0x5c>
 800d24a:	e000      	b.n	800d24e <_txe_timer_create+0x7e>
                break;
 800d24c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d24e:	f3ef 8310 	mrs	r3, PRIMASK
 800d252:	623b      	str	r3, [r7, #32]
    return(posture);
 800d254:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d256:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d258:	b672      	cpsid	i
    return(int_posture);
 800d25a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d25c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d25e:	4b2c      	ldr	r3, [pc, #176]	@ (800d310 <_txe_timer_create+0x140>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	3b01      	subs	r3, #1
 800d264:	4a2a      	ldr	r2, [pc, #168]	@ (800d310 <_txe_timer_create+0x140>)
 800d266:	6013      	str	r3, [r2, #0]
 800d268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d26a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26e:	f383 8810 	msr	PRIMASK, r3
}
 800d272:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d274:	f7fe fde6 	bl	800be44 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d102      	bne.n	800d286 <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800d280:	2315      	movs	r3, #21
 800d282:	647b      	str	r3, [r7, #68]	@ 0x44
 800d284:	e00d      	b.n	800d2a2 <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800d286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d102      	bne.n	800d292 <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800d28c:	2316      	movs	r3, #22
 800d28e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d290:	e007      	b.n	800d2a2 <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800d292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d294:	2b01      	cmp	r3, #1
 800d296:	d004      	beq.n	800d2a2 <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800d298:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d001      	beq.n	800d2a2 <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800d29e:	2317      	movs	r3, #23
 800d2a0:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d2a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d11d      	bne.n	800d2e4 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800d2a8:	4b1c      	ldr	r3, [pc, #112]	@ (800d31c <_txe_timer_create+0x14c>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800d2ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2b0:	4a1b      	ldr	r2, [pc, #108]	@ (800d320 <_txe_timer_create+0x150>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d101      	bne.n	800d2ba <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800d2b6:	2313      	movs	r3, #19
 800d2b8:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2ba:	f3ef 8305 	mrs	r3, IPSR
 800d2be:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d2c0:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d2c2:	4b18      	ldr	r3, [pc, #96]	@ (800d324 <_txe_timer_create+0x154>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d00b      	beq.n	800d2e4 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2cc:	f3ef 8305 	mrs	r3, IPSR
 800d2d0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d2d2:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d2d4:	4b13      	ldr	r3, [pc, #76]	@ (800d324 <_txe_timer_create+0x154>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d2de:	d201      	bcs.n	800d2e4 <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d2e0:	2313      	movs	r3, #19
 800d2e2:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d2e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10c      	bne.n	800d304 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800d2ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2ec:	9302      	str	r3, [sp, #8]
 800d2ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2f0:	9301      	str	r3, [sp, #4]
 800d2f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	68b9      	ldr	r1, [r7, #8]
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f7ff f8d3 	bl	800c4a8 <_tx_timer_create>
 800d302:	6478      	str	r0, [r7, #68]	@ 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800d304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800d306:	4618      	mov	r0, r3
 800d308:	3748      	adds	r7, #72	@ 0x48
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	20010aa4 	.word	0x20010aa4
 800d314:	20010b48 	.word	0x20010b48
 800d318:	20010b4c 	.word	0x20010b4c
 800d31c:	20010a0c 	.word	0x20010a0c
 800d320:	20010b54 	.word	0x20010b54
 800d324:	20000054 	.word	0x20000054

0800d328 <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d102      	bne.n	800d33c <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d336:	2315      	movs	r3, #21
 800d338:	60fb      	str	r3, [r7, #12]
 800d33a:	e00b      	b.n	800d354 <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a07      	ldr	r2, [pc, #28]	@ (800d360 <_txe_timer_deactivate+0x38>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d002      	beq.n	800d34c <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d346:	2315      	movs	r3, #21
 800d348:	60fb      	str	r3, [r7, #12]
 800d34a:	e003      	b.n	800d354 <_txe_timer_deactivate+0x2c>
    }
    else
    {

        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f7ff f90f 	bl	800c570 <_tx_timer_deactivate>
 800d352:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d354:	68fb      	ldr	r3, [r7, #12]
}
 800d356:	4618      	mov	r0, r3
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	4154494d 	.word	0x4154494d

0800d364 <memset>:
 800d364:	4402      	add	r2, r0
 800d366:	4603      	mov	r3, r0
 800d368:	4293      	cmp	r3, r2
 800d36a:	d100      	bne.n	800d36e <memset+0xa>
 800d36c:	4770      	bx	lr
 800d36e:	f803 1b01 	strb.w	r1, [r3], #1
 800d372:	e7f9      	b.n	800d368 <memset+0x4>

0800d374 <__libc_init_array>:
 800d374:	b570      	push	{r4, r5, r6, lr}
 800d376:	4d0d      	ldr	r5, [pc, #52]	@ (800d3ac <__libc_init_array+0x38>)
 800d378:	4c0d      	ldr	r4, [pc, #52]	@ (800d3b0 <__libc_init_array+0x3c>)
 800d37a:	1b64      	subs	r4, r4, r5
 800d37c:	10a4      	asrs	r4, r4, #2
 800d37e:	2600      	movs	r6, #0
 800d380:	42a6      	cmp	r6, r4
 800d382:	d109      	bne.n	800d398 <__libc_init_array+0x24>
 800d384:	4d0b      	ldr	r5, [pc, #44]	@ (800d3b4 <__libc_init_array+0x40>)
 800d386:	4c0c      	ldr	r4, [pc, #48]	@ (800d3b8 <__libc_init_array+0x44>)
 800d388:	f000 f818 	bl	800d3bc <_init>
 800d38c:	1b64      	subs	r4, r4, r5
 800d38e:	10a4      	asrs	r4, r4, #2
 800d390:	2600      	movs	r6, #0
 800d392:	42a6      	cmp	r6, r4
 800d394:	d105      	bne.n	800d3a2 <__libc_init_array+0x2e>
 800d396:	bd70      	pop	{r4, r5, r6, pc}
 800d398:	f855 3b04 	ldr.w	r3, [r5], #4
 800d39c:	4798      	blx	r3
 800d39e:	3601      	adds	r6, #1
 800d3a0:	e7ee      	b.n	800d380 <__libc_init_array+0xc>
 800d3a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3a6:	4798      	blx	r3
 800d3a8:	3601      	adds	r6, #1
 800d3aa:	e7f2      	b.n	800d392 <__libc_init_array+0x1e>
 800d3ac:	0800d5a4 	.word	0x0800d5a4
 800d3b0:	0800d5a4 	.word	0x0800d5a4
 800d3b4:	0800d5a4 	.word	0x0800d5a4
 800d3b8:	0800d5a8 	.word	0x0800d5a8

0800d3bc <_init>:
 800d3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3be:	bf00      	nop
 800d3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3c2:	bc08      	pop	{r3}
 800d3c4:	469e      	mov	lr, r3
 800d3c6:	4770      	bx	lr

0800d3c8 <_fini>:
 800d3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ca:	bf00      	nop
 800d3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ce:	bc08      	pop	{r3}
 800d3d0:	469e      	mov	lr, r3
 800d3d2:	4770      	bx	lr
