
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000560c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800583c  0800583c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800583c  0800583c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800583c  0800583c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ccc  20000010  08005854  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cdc  08005854  00020cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b8d9  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d09  00000000  00000000  0003b95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  00040668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001096  00000000  00000000  00041d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bb73  00000000  00000000  00042dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fe70  00000000  00000000  0006e921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00117710  00000000  00000000  0008e791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005700  00000000  00000000  001a5ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f4  00000000  00000000  001ab5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	080057d4 	.word	0x080057d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	080057d4 	.word	0x080057d4

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	; (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	; (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	; (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	; (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	; (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	; (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	200006d0 	.word	0x200006d0
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	; (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	; (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	; (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	; (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	; (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	2000076c 	.word	0x2000076c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	200006d4 	.word	0x200006d4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	200006d8 	.word	0x200006d8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	20000cd8 	.word	0x20000cd8

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	; (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	; (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	; (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	; (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	; (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f004 fd83 	bl	8004f04 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f004 fcf0 	bl	8004de8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	; (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	; (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	; (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20000778 	.word	0x20000778
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	20000cd8 	.word	0x20000cd8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	2000077c 	.word	0x2000077c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20000808 	.word	0x20000808
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	2000080c 	.word	0x2000080c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20000804 	.word	0x20000804
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20000800 	.word	0x20000800
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	2000076c 	.word	0x2000076c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	200006d4 	.word	0x200006d4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	200006d8 	.word	0x200006d8
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af02      	add	r7, sp, #8
 800045e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000464:	2334      	movs	r3, #52	; 0x34
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800046c:	4a0a      	ldr	r2, [pc, #40]	; (8000498 <tx_application_define+0x40>)
 800046e:	490b      	ldr	r1, [pc, #44]	; (800049c <tx_application_define+0x44>)
 8000470:	480b      	ldr	r0, [pc, #44]	; (80004a0 <tx_application_define+0x48>)
 8000472:	f004 fff1 	bl	8005458 <_txe_byte_pool_create>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d109      	bne.n	8000490 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <tx_application_define+0x48>)
 800047e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000480:	68b8      	ldr	r0, [r7, #8]
 8000482:	f000 f9eb 	bl	800085c <App_ThreadX_Init>
 8000486:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d000      	beq.n	8000490 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800048e:	e7fe      	b.n	800048e <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	2000002c 	.word	0x2000002c
 800049c:	080057ec 	.word	0x080057ec
 80004a0:	2000042c 	.word	0x2000042c

080004a4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08c      	sub	sp, #48	; 0x30
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2220      	movs	r2, #32
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f005 f95d 	bl	800577c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004c2:	4b32      	ldr	r3, [pc, #200]	; (800058c <MX_ADC1_Init+0xe8>)
 80004c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80004c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004ca:	4b30      	ldr	r3, [pc, #192]	; (800058c <MX_ADC1_Init+0xe8>)
 80004cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80004d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d2:	4b2e      	ldr	r3, [pc, #184]	; (800058c <MX_ADC1_Init+0xe8>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d8:	4b2c      	ldr	r3, [pc, #176]	; (800058c <MX_ADC1_Init+0xe8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80004de:	4b2b      	ldr	r3, [pc, #172]	; (800058c <MX_ADC1_Init+0xe8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004e4:	4b29      	ldr	r3, [pc, #164]	; (800058c <MX_ADC1_Init+0xe8>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004ea:	4b28      	ldr	r3, [pc, #160]	; (800058c <MX_ADC1_Init+0xe8>)
 80004ec:	2204      	movs	r2, #4
 80004ee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004f0:	4b26      	ldr	r3, [pc, #152]	; (800058c <MX_ADC1_Init+0xe8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <MX_ADC1_Init+0xe8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80004fc:	4b23      	ldr	r3, [pc, #140]	; (800058c <MX_ADC1_Init+0xe8>)
 80004fe:	2201      	movs	r2, #1
 8000500:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000502:	4b22      	ldr	r3, [pc, #136]	; (800058c <MX_ADC1_Init+0xe8>)
 8000504:	2200      	movs	r2, #0
 8000506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050a:	4b20      	ldr	r3, [pc, #128]	; (800058c <MX_ADC1_Init+0xe8>)
 800050c:	2200      	movs	r2, #0
 800050e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000510:	4b1e      	ldr	r3, [pc, #120]	; (800058c <MX_ADC1_Init+0xe8>)
 8000512:	2200      	movs	r2, #0
 8000514:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000516:	4b1d      	ldr	r3, [pc, #116]	; (800058c <MX_ADC1_Init+0xe8>)
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <MX_ADC1_Init+0xe8>)
 8000520:	2200      	movs	r2, #0
 8000522:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <MX_ADC1_Init+0xe8>)
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052c:	4817      	ldr	r0, [pc, #92]	; (800058c <MX_ADC1_Init+0xe8>)
 800052e:	f000 fe4d 	bl	80011cc <HAL_ADC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000538:	f000 fb22 	bl	8000b80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800053c:	2300      	movs	r3, #0
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000544:	4619      	mov	r1, r3
 8000546:	4811      	ldr	r0, [pc, #68]	; (800058c <MX_ADC1_Init+0xe8>)
 8000548:	f001 fc62 	bl	8001e10 <HAL_ADCEx_MultiModeConfigChannel>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000552:	f000 fb15 	bl	8000b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_ADC1_Init+0xec>)
 8000558:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800055a:	2306      	movs	r3, #6
 800055c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000562:	237f      	movs	r3, #127	; 0x7f
 8000564:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000566:	2304      	movs	r3, #4
 8000568:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	4619      	mov	r1, r3
 8000572:	4806      	ldr	r0, [pc, #24]	; (800058c <MX_ADC1_Init+0xe8>)
 8000574:	f000 ffe6 	bl	8001544 <HAL_ADC_ConfigChannel>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800057e:	f000 faff 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	3730      	adds	r7, #48	; 0x30
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000460 	.word	0x20000460
 8000590:	04300002 	.word	0x04300002

08000594 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800059a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2220      	movs	r2, #32
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f005 f8e5 	bl	800577c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005b2:	4b31      	ldr	r3, [pc, #196]	; (8000678 <MX_ADC3_Init+0xe4>)
 80005b4:	4a31      	ldr	r2, [pc, #196]	; (800067c <MX_ADC3_Init+0xe8>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005b8:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <MX_ADC3_Init+0xe4>)
 80005ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <MX_ADC3_Init+0xe4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c6:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <MX_ADC3_Init+0xe4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80005cc:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <MX_ADC3_Init+0xe4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d2:	4b29      	ldr	r3, [pc, #164]	; (8000678 <MX_ADC3_Init+0xe4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d8:	4b27      	ldr	r3, [pc, #156]	; (8000678 <MX_ADC3_Init+0xe4>)
 80005da:	2204      	movs	r2, #4
 80005dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <MX_ADC3_Init+0xe4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <MX_ADC3_Init+0xe4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <MX_ADC3_Init+0xe4>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_ADC3_Init+0xe4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_ADC3_Init+0xe4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_ADC3_Init+0xe4>)
 8000600:	2200      	movs	r2, #0
 8000602:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_ADC3_Init+0xe4>)
 8000606:	2200      	movs	r2, #0
 8000608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_ADC3_Init+0xe4>)
 800060e:	2200      	movs	r2, #0
 8000610:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_ADC3_Init+0xe4>)
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800061a:	4817      	ldr	r0, [pc, #92]	; (8000678 <MX_ADC3_Init+0xe4>)
 800061c:	f000 fdd6 	bl	80011cc <HAL_ADC_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000626:	f000 faab 	bl	8000b80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800062e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000632:	4619      	mov	r1, r3
 8000634:	4810      	ldr	r0, [pc, #64]	; (8000678 <MX_ADC3_Init+0xe4>)
 8000636:	f001 fbeb 	bl	8001e10 <HAL_ADCEx_MultiModeConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000640:	f000 fa9e 	bl	8000b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_ADC3_Init+0xec>)
 8000646:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000648:	2306      	movs	r3, #6
 800064a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000650:	237f      	movs	r3, #127	; 0x7f
 8000652:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000654:	2304      	movs	r3, #4
 8000656:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_ADC3_Init+0xe4>)
 8000662:	f000 ff6f 	bl	8001544 <HAL_ADC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 800066c:	f000 fa88 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	3730      	adds	r7, #48	; 0x30
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200004cc 	.word	0x200004cc
 800067c:	50000400 	.word	0x50000400
 8000680:	04300002 	.word	0x04300002

08000684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b0a4      	sub	sp, #144	; 0x90
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a0:	2254      	movs	r2, #84	; 0x54
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f005 f869 	bl	800577c <memset>
  if(adcHandle->Instance==ADC1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006b2:	d151      	bne.n	8000758 <HAL_ADC_MspInit+0xd4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006be:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fed1 	bl	800346c <HAL_RCCEx_PeriphCLKConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006d0:	f000 fa56 	bl	8000b80 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006d4:	4b5b      	ldr	r3, [pc, #364]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d8:	4a5a      	ldr	r2, [pc, #360]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80006da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e0:	4b58      	ldr	r3, [pc, #352]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ec:	4b55      	ldr	r3, [pc, #340]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	4a54      	ldr	r2, [pc, #336]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f8:	4b52      	ldr	r3, [pc, #328]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	623b      	str	r3, [r7, #32]
 8000702:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b4f      	ldr	r3, [pc, #316]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000708:	4a4e      	ldr	r2, [pc, #312]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000710:	4b4c      	ldr	r3, [pc, #304]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 8000712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	61fb      	str	r3, [r7, #28]
 800071a:	69fb      	ldr	r3, [r7, #28]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800071c:	230f      	movs	r3, #15
 800071e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000720:	2303      	movs	r3, #3
 8000722:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000730:	4619      	mov	r1, r3
 8000732:	4845      	ldr	r0, [pc, #276]	; (8000848 <HAL_ADC_MspInit+0x1c4>)
 8000734:	f001 ff1a 	bl	800256c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000738:	230f      	movs	r3, #15
 800073a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073c:	2303      	movs	r3, #3
 800073e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800074c:	4619      	mov	r1, r3
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f001 ff0b 	bl	800256c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000756:	e071      	b.n	800083c <HAL_ADC_MspInit+0x1b8>
  else if(adcHandle->Instance==ADC3)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a3b      	ldr	r2, [pc, #236]	; (800084c <HAL_ADC_MspInit+0x1c8>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d16c      	bne.n	800083c <HAL_ADC_MspInit+0x1b8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800076c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800076e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fe7a 	bl	800346c <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_ADC_MspInit+0xfe>
      Error_Handler();
 800077e:	f000 f9ff 	bl	8000b80 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000782:	4b30      	ldr	r3, [pc, #192]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a2f      	ldr	r2, [pc, #188]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a29      	ldr	r2, [pc, #164]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b27      	ldr	r3, [pc, #156]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	4b24      	ldr	r3, [pc, #144]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a23      	ldr	r2, [pc, #140]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <HAL_ADC_MspInit+0x1c0>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 80007e2:	f242 0303 	movw	r3, #8195	; 0x2003
 80007e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e8:	2303      	movs	r3, #3
 80007ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007f8:	4619      	mov	r1, r3
 80007fa:	4815      	ldr	r0, [pc, #84]	; (8000850 <HAL_ADC_MspInit+0x1cc>)
 80007fc:	f001 feb6 	bl	800256c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_13;
 8000800:	f44f 530e 	mov.w	r3, #9088	; 0x2380
 8000804:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	2303      	movs	r3, #3
 8000808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000812:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000816:	4619      	mov	r1, r3
 8000818:	480e      	ldr	r0, [pc, #56]	; (8000854 <HAL_ADC_MspInit+0x1d0>)
 800081a:	f001 fea7 	bl	800256c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800081e:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8000822:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000824:	2303      	movs	r3, #3
 8000826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000830:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000834:	4619      	mov	r1, r3
 8000836:	4808      	ldr	r0, [pc, #32]	; (8000858 <HAL_ADC_MspInit+0x1d4>)
 8000838:	f001 fe98 	bl	800256c <HAL_GPIO_Init>
}
 800083c:	bf00      	nop
 800083e:	3790      	adds	r7, #144	; 0x90
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000
 8000848:	48000800 	.word	0x48000800
 800084c:	50000400 	.word	0x50000400
 8000850:	48000400 	.word	0x48000400
 8000854:	48001000 	.word	0x48001000
 8000858:	48000c00 	.word	0x48000c00

0800085c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af08      	add	r7, sp, #32
 8000862:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	613b      	str	r3, [r7, #16]
  CHAR *pointer;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 800086c:	f107 010c 	add.w	r1, r7, #12
 8000870:	2300      	movs	r3, #0
 8000872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000876:	6938      	ldr	r0, [r7, #16]
 8000878:	f004 fd7a 	bl	8005370 <_txe_byte_allocate>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <App_ThreadX_Init+0x2a>
	  return TX_POOL_ERROR;
 8000882:	2302      	movs	r3, #2
 8000884:	e01a      	b.n	80008bc <App_ThreadX_Init+0x60>
  }

  if (tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	22b0      	movs	r2, #176	; 0xb0
 800088a:	9206      	str	r2, [sp, #24]
 800088c:	2201      	movs	r2, #1
 800088e:	9205      	str	r2, [sp, #20]
 8000890:	2200      	movs	r2, #0
 8000892:	9204      	str	r2, [sp, #16]
 8000894:	220a      	movs	r2, #10
 8000896:	9203      	str	r2, [sp, #12]
 8000898:	220a      	movs	r2, #10
 800089a:	9202      	str	r2, [sp, #8]
 800089c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a0:	9201      	str	r2, [sp, #4]
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2300      	movs	r3, #0
 80008a6:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <App_ThreadX_Init+0x68>)
 80008a8:	4907      	ldr	r1, [pc, #28]	; (80008c8 <App_ThreadX_Init+0x6c>)
 80008aa:	4808      	ldr	r0, [pc, #32]	; (80008cc <App_ThreadX_Init+0x70>)
 80008ac:	f004 fe74 	bl	8005598 <_txe_thread_create>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <App_ThreadX_Init+0x5e>
                         TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                         TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS)
    {
      return TX_THREAD_ERROR;
 80008b6:	230e      	movs	r3, #14
 80008b8:	e000      	b.n	80008bc <App_ThreadX_Init+0x60>
    }
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008ba:	697b      	ldr	r3, [r7, #20]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	080008dd 	.word	0x080008dd
 80008c8:	08005800 	.word	0x08005800
 80008cc:	20000538 	.word	0x20000538

080008d0 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008d4:	f003 fe8e 	bl	80045f4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <txMainThreadEntry>:

/* USER CODE BEGIN 1 */
void txMainThreadEntry(ULONG threadInput){
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

	while(1){
 80008e4:	e7fe      	b.n	80008e4 <txMainThreadEntry+0x8>
	...

080008e8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_FDCAN1_Init+0x84>)
 80008ee:	4a20      	ldr	r2, [pc, #128]	; (8000970 <MX_FDCAN1_Init+0x88>)
 80008f0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_FDCAN1_Init+0x84>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_FDCAN1_Init+0x84>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000906:	2200      	movs	r2, #0
 8000908:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_FDCAN1_Init+0x84>)
 800090c:	2200      	movs	r2, #0
 800090e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000912:	2200      	movs	r2, #0
 8000914:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000918:	2210      	movs	r2, #16
 800091a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_FDCAN1_Init+0x84>)
 800091e:	2201      	movs	r2, #1
 8000920:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000924:	2202      	movs	r2, #2
 8000926:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_FDCAN1_Init+0x84>)
 800092a:	2202      	movs	r2, #2
 800092c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000930:	2201      	movs	r2, #1
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000936:	2201      	movs	r2, #1
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_FDCAN1_Init+0x84>)
 800093c:	2201      	movs	r2, #1
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000942:	2201      	movs	r2, #1
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000948:	2200      	movs	r2, #0
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_FDCAN1_Init+0x84>)
 800094e:	2200      	movs	r2, #0
 8000950:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000954:	2200      	movs	r2, #0
 8000956:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_FDCAN1_Init+0x84>)
 800095a:	f001 fc41 	bl	80021e0 <HAL_FDCAN_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000964:	f000 f90c 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200005e8 	.word	0x200005e8
 8000970:	40006400 	.word	0x40006400

08000974 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09e      	sub	sp, #120	; 0x78
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	2254      	movs	r2, #84	; 0x54
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f004 fef1 	bl	800577c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <HAL_FDCAN_MspInit+0xac>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d139      	bne.n	8000a18 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80009aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009ae:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fd59 	bl	800346c <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80009c0:	f000 f8de 	bl	8000b80 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_FDCAN_MspInit+0xb0>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c8:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <HAL_FDCAN_MspInit+0xb0>)
 80009ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ce:	6593      	str	r3, [r2, #88]	; 0x58
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_FDCAN_MspInit+0xb0>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_FDCAN_MspInit+0xb0>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_FDCAN_MspInit+0xb0>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_FDCAN_MspInit+0xb0>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a06:	2309      	movs	r3, #9
 8000a08:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a0e:	4619      	mov	r1, r3
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a14:	f001 fdaa 	bl	800256c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3778      	adds	r7, #120	; 0x78
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40006400 	.word	0x40006400
 8000a24:	40021000 	.word	0x40021000

08000a28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a20      	ldr	r2, [pc, #128]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a1a      	ldr	r2, [pc, #104]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a7c:	f043 0310 	orr.w	r3, r3, #16
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_GPIO_Init+0x8c>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

}
 8000aa6:	bf00      	nop
 8000aa8:	371c      	adds	r7, #28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abc:	f000 f955 	bl	8000d6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac0:	f000 f80b 	bl	8000ada <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac4:	f7ff ffb0 	bl	8000a28 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ac8:	f7ff fcec 	bl	80004a4 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000acc:	f7ff ff0c 	bl	80008e8 <MX_FDCAN1_Init>
  MX_ADC3_Init();
 8000ad0:	f7ff fd60 	bl	8000594 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000ad4:	f7ff fefc 	bl	80008d0 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <main+0x20>

08000ada <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b094      	sub	sp, #80	; 0x50
 8000ade:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae0:	f107 0318 	add.w	r3, r7, #24
 8000ae4:	2238      	movs	r2, #56	; 0x38
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 fe47 	bl	800577c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b00:	f001 feb6 	bl	8002870 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b16:	f107 0318 	add.w	r3, r7, #24
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 ff5c 	bl	80029d8 <HAL_RCC_OscConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b26:	f000 f82b 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 fa5a 	bl	8002ffc <HAL_RCC_ClockConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b4e:	f000 f817 	bl	8000b80 <Error_Handler>
  }
}
 8000b52:	bf00      	nop
 8000b54:	3750      	adds	r7, #80	; 0x50
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b6e:	f000 f915 	bl	8000d9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40001000 	.word	0x40001000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_MspInit+0x4c>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8000bc2:	f000 f91d 	bl	8000e00 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f000 f906 	bl	8000dd8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bcc:	f001 fef4 	bl	80029b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bec:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <HAL_InitTick+0xc4>)
 8000bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf0:	4a2b      	ldr	r2, [pc, #172]	; (8000ca0 <HAL_InitTick+0xc4>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <HAL_InitTick+0xc4>)
 8000bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c04:	f107 020c 	add.w	r2, r7, #12
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fbb4 	bl	800337c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c14:	f002 fb9c 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 8000c18:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1c:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <HAL_InitTick+0xc8>)
 8000c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c22:	0c9b      	lsrs	r3, r3, #18
 8000c24:	3b01      	subs	r3, #1
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_InitTick+0xcc>)
 8000c2a:	4a20      	ldr	r2, [pc, #128]	; (8000cac <HAL_InitTick+0xd0>)
 8000c2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <HAL_InitTick+0xcc>)
 8000c30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c34:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c36:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_InitTick+0xcc>)
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_InitTick+0xcc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_InitTick+0xcc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c48:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <HAL_InitTick+0xcc>)
 8000c4a:	f002 fe5d 	bl	8003908 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d11b      	bne.n	8000c94 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <HAL_InitTick+0xcc>)
 8000c5e:	f002 feb5 	bl	80039cc <HAL_TIM_Base_Start_IT>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d111      	bne.n	8000c94 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c70:	2036      	movs	r0, #54	; 0x36
 8000c72:	f001 faa7 	bl	80021c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d808      	bhi.n	8000c8e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	2036      	movs	r0, #54	; 0x36
 8000c82:	f001 fa85 	bl	8002190 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_InitTick+0xd4>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e002      	b.n	8000c94 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3730      	adds	r7, #48	; 0x30
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	431bde83 	.word	0x431bde83
 8000ca8:	2000064c 	.word	0x2000064c
 8000cac:	40001000 	.word	0x40001000
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <TIM6_DAC_IRQHandler+0x10>)
 8000ce6:	f002 fee9 	bl	8003abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000064c 	.word	0x2000064c

08000cf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <SystemInit+0x20>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <SystemInit+0x20>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d1c:	f7ff ffea 	bl	8000cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d22:	490d      	ldr	r1, [pc, #52]	; (8000d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <LoopForever+0xe>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d38:	4c0a      	ldr	r4, [pc, #40]	; (8000d64 <LoopForever+0x16>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d46:	f004 fd21 	bl	800578c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d4a:	f7ff feb5 	bl	8000ab8 <main>

08000d4e <LoopForever>:

LoopForever:
    b LoopForever
 8000d4e:	e7fe      	b.n	8000d4e <LoopForever>
  ldr   r0, =_estack
 8000d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d5c:	08005844 	.word	0x08005844
  ldr r2, =_sbss
 8000d60:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d64:	20000cdc 	.word	0x20000cdc

08000d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC1_2_IRQHandler>

08000d6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f001 fa00 	bl	800217a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f7ff ff2e 	bl	8000bdc <HAL_InitTick>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	e001      	b.n	8000d90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d8c:	f7ff fefe 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d90:	79fb      	ldrb	r3, [r7, #7]

}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_IncTick+0x1c>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_IncTick+0x20>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <HAL_IncTick+0x1c>)
 8000dac:	6013      	str	r3, [r2, #0]
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	20000698 	.word	0x20000698
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000698 	.word	0x20000698

08000dd8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f023 0202 	bic.w	r2, r3, #2
 8000de8:	4904      	ldr	r1, [pc, #16]	; (8000dfc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	600b      	str	r3, [r1, #0]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40010030 	.word	0x40010030

08000e00 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8000e0a:	f023 0301 	bic.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40010030 	.word	0x40010030

08000e20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	609a      	str	r2, [r3, #8]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3360      	adds	r3, #96	; 0x60
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <LL_ADC_SetOffset+0x44>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ec0:	bf00      	nop
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	03fff000 	.word	0x03fff000

08000ed0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3360      	adds	r3, #96	; 0x60
 8000ede:	461a      	mov	r2, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3360      	adds	r3, #96	; 0x60
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	431a      	orrs	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f26:	bf00      	nop
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b087      	sub	sp, #28
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3360      	adds	r3, #96	; 0x60
 8000f42:	461a      	mov	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	431a      	orrs	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f5c:	bf00      	nop
 8000f5e:	371c      	adds	r7, #28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3360      	adds	r3, #96	; 0x60
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f92:	bf00      	nop
 8000f94:	371c      	adds	r7, #28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	615a      	str	r2, [r3, #20]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3330      	adds	r3, #48	; 0x30
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	4413      	add	r3, r2
 8000fe2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	f003 031f 	and.w	r3, r3, #31
 8000fee:	211f      	movs	r1, #31
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	0e9b      	lsrs	r3, r3, #26
 8000ffc:	f003 011f 	and.w	r1, r3, #31
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	f003 031f 	and.w	r3, r3, #31
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	431a      	orrs	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001010:	bf00      	nop
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3314      	adds	r3, #20
 800102c:	461a      	mov	r2, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	0e5b      	lsrs	r3, r3, #25
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	4413      	add	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	0d1b      	lsrs	r3, r3, #20
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	2107      	movs	r1, #7
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	401a      	ands	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	0d1b      	lsrs	r3, r3, #20
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	431a      	orrs	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800108c:	43db      	mvns	r3, r3
 800108e:	401a      	ands	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0318 	and.w	r3, r3, #24
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001098:	40d9      	lsrs	r1, r3
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	400b      	ands	r3, r1
 800109e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010a2:	431a      	orrs	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	0007ffff 	.word	0x0007ffff

080010bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6093      	str	r3, [r2, #8]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010f4:	d101      	bne.n	80010fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001118:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800111c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001144:	d101      	bne.n	800114a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <LL_ADC_IsEnabled+0x18>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <LL_ADC_IsEnabled+0x1a>
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	2b04      	cmp	r3, #4
 8001190:	d101      	bne.n	8001196 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b08      	cmp	r3, #8
 80011b6:	d101      	bne.n	80011bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e1a9      	b.n	800153a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d109      	bne.n	8001208 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff fa45 	bl	8000684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff67 	bl	80010e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d004      	beq.n	8001222 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff4d 	bl	80010bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff82 	bl	8001130 <LL_ADC_IsInternalRegulatorEnabled>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d115      	bne.n	800125e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff66 	bl	8001108 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800123c:	4b9c      	ldr	r3, [pc, #624]	; (80014b0 <HAL_ADC_Init+0x2e4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	099b      	lsrs	r3, r3, #6
 8001242:	4a9c      	ldr	r2, [pc, #624]	; (80014b4 <HAL_ADC_Init+0x2e8>)
 8001244:	fba2 2303 	umull	r2, r3, r2, r3
 8001248:	099b      	lsrs	r3, r3, #6
 800124a:	3301      	adds	r3, #1
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001250:	e002      	b.n	8001258 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3b01      	subs	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f9      	bne.n	8001252 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff64 	bl	8001130 <LL_ADC_IsInternalRegulatorEnabled>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10d      	bne.n	800128a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001272:	f043 0210 	orr.w	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	f043 0201 	orr.w	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff75 	bl	800117e <LL_ADC_REG_IsConversionOngoing>
 8001294:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f040 8142 	bne.w	8001528 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 813e 	bne.w	8001528 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012b4:	f043 0202 	orr.w	r2, r3, #2
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff49 	bl	8001158 <LL_ADC_IsEnabled>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d141      	bne.n	8001350 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d4:	d004      	beq.n	80012e0 <HAL_ADC_Init+0x114>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a77      	ldr	r2, [pc, #476]	; (80014b8 <HAL_ADC_Init+0x2ec>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d10f      	bne.n	8001300 <HAL_ADC_Init+0x134>
 80012e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012e4:	f7ff ff38 	bl	8001158 <LL_ADC_IsEnabled>
 80012e8:	4604      	mov	r4, r0
 80012ea:	4873      	ldr	r0, [pc, #460]	; (80014b8 <HAL_ADC_Init+0x2ec>)
 80012ec:	f7ff ff34 	bl	8001158 <LL_ADC_IsEnabled>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4323      	orrs	r3, r4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf0c      	ite	eq
 80012f8:	2301      	moveq	r3, #1
 80012fa:	2300      	movne	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	e012      	b.n	8001326 <HAL_ADC_Init+0x15a>
 8001300:	486e      	ldr	r0, [pc, #440]	; (80014bc <HAL_ADC_Init+0x2f0>)
 8001302:	f7ff ff29 	bl	8001158 <LL_ADC_IsEnabled>
 8001306:	4604      	mov	r4, r0
 8001308:	486d      	ldr	r0, [pc, #436]	; (80014c0 <HAL_ADC_Init+0x2f4>)
 800130a:	f7ff ff25 	bl	8001158 <LL_ADC_IsEnabled>
 800130e:	4603      	mov	r3, r0
 8001310:	431c      	orrs	r4, r3
 8001312:	486c      	ldr	r0, [pc, #432]	; (80014c4 <HAL_ADC_Init+0x2f8>)
 8001314:	f7ff ff20 	bl	8001158 <LL_ADC_IsEnabled>
 8001318:	4603      	mov	r3, r0
 800131a:	4323      	orrs	r3, r4
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d012      	beq.n	8001350 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001332:	d004      	beq.n	800133e <HAL_ADC_Init+0x172>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a5f      	ldr	r2, [pc, #380]	; (80014b8 <HAL_ADC_Init+0x2ec>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_ADC_Init+0x176>
 800133e:	4a62      	ldr	r2, [pc, #392]	; (80014c8 <HAL_ADC_Init+0x2fc>)
 8001340:	e000      	b.n	8001344 <HAL_ADC_Init+0x178>
 8001342:	4a62      	ldr	r2, [pc, #392]	; (80014cc <HAL_ADC_Init+0x300>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4619      	mov	r1, r3
 800134a:	4610      	mov	r0, r2
 800134c:	f7ff fd68 	bl	8000e20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7f5b      	ldrb	r3, [r3, #29]
 8001354:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800135a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001360:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001366:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800136e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800137a:	2b01      	cmp	r3, #1
 800137c:	d106      	bne.n	800138c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	3b01      	subs	r3, #1
 8001384:	045b      	lsls	r3, r3, #17
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <HAL_ADC_Init+0x304>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	69b9      	ldr	r1, [r7, #24]
 80013b8:	430b      	orrs	r3, r1
 80013ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fee4 	bl	80011a4 <LL_ADC_INJ_IsConversionOngoing>
 80013dc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d17f      	bne.n	80014e4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d17c      	bne.n	80014e4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013ee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013f6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001406:	f023 0302 	bic.w	r3, r3, #2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	430b      	orrs	r3, r1
 8001412:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d017      	beq.n	800144c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	691a      	ldr	r2, [r3, #16]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800142a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001434:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6911      	ldr	r1, [r2, #16]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	430b      	orrs	r3, r1
 8001446:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800144a:	e013      	b.n	8001474 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	691a      	ldr	r2, [r3, #16]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800145a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800146c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001470:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800147a:	2b01      	cmp	r3, #1
 800147c:	d12a      	bne.n	80014d4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001494:	4311      	orrs	r1, r2
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800149a:	4311      	orrs	r1, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a0:	430a      	orrs	r2, r1
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0201 	orr.w	r2, r2, #1
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	e019      	b.n	80014e4 <HAL_ADC_Init+0x318>
 80014b0:	20000000 	.word	0x20000000
 80014b4:	053e2d63 	.word	0x053e2d63
 80014b8:	50000100 	.word	0x50000100
 80014bc:	50000400 	.word	0x50000400
 80014c0:	50000500 	.word	0x50000500
 80014c4:	50000600 	.word	0x50000600
 80014c8:	50000300 	.word	0x50000300
 80014cc:	50000700 	.word	0x50000700
 80014d0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10c      	bne.n	8001506 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f023 010f 	bic.w	r1, r3, #15
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	1e5a      	subs	r2, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
 8001504:	e007      	b.n	8001516 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 020f 	bic.w	r2, r2, #15
 8001514:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	f023 0303 	bic.w	r3, r3, #3
 800151e:	f043 0201 	orr.w	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	65da      	str	r2, [r3, #92]	; 0x5c
 8001526:	e007      	b.n	8001538 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152c:	f043 0210 	orr.w	r2, r3, #16
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001538:	7ffb      	ldrb	r3, [r7, #31]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	bf00      	nop

08001544 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b0b6      	sub	sp, #216	; 0xd8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800155e:	2b01      	cmp	r3, #1
 8001560:	d102      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x24>
 8001562:	2302      	movs	r3, #2
 8001564:	f000 bc13 	b.w	8001d8e <HAL_ADC_ConfigChannel+0x84a>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fe02 	bl	800117e <LL_ADC_REG_IsConversionOngoing>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	f040 83f3 	bne.w	8001d68 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	6859      	ldr	r1, [r3, #4]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	f7ff fd18 	bl	8000fc4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fdf0 	bl	800117e <LL_ADC_REG_IsConversionOngoing>
 800159e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fdfc 	bl	80011a4 <LL_ADC_INJ_IsConversionOngoing>
 80015ac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f040 81d9 	bne.w	800196c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f040 81d4 	bne.w	800196c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015cc:	d10f      	bne.n	80015ee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fd1f 	bl	800101c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fcd9 	bl	8000f9e <LL_ADC_SetSamplingTimeCommonConfig>
 80015ec:	e00e      	b.n	800160c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6819      	ldr	r1, [r3, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	461a      	mov	r2, r3
 80015fc:	f7ff fd0e 	bl	800101c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fcc9 	bl	8000f9e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	695a      	ldr	r2, [r3, #20]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	08db      	lsrs	r3, r3, #3
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b04      	cmp	r3, #4
 800162c:	d022      	beq.n	8001674 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6919      	ldr	r1, [r3, #16]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800163e:	f7ff fc23 	bl	8000e88 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6919      	ldr	r1, [r3, #16]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	461a      	mov	r2, r3
 8001650:	f7ff fc6f 	bl	8000f32 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001660:	2b01      	cmp	r3, #1
 8001662:	d102      	bne.n	800166a <HAL_ADC_ConfigChannel+0x126>
 8001664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001668:	e000      	b.n	800166c <HAL_ADC_ConfigChannel+0x128>
 800166a:	2300      	movs	r3, #0
 800166c:	461a      	mov	r2, r3
 800166e:	f7ff fc7b 	bl	8000f68 <LL_ADC_SetOffsetSaturation>
 8001672:	e17b      	b.n	800196c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fc28 	bl	8000ed0 <LL_ADC_GetOffsetChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10a      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x15c>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fc1d 	bl	8000ed0 <LL_ADC_GetOffsetChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	0e9b      	lsrs	r3, r3, #26
 800169a:	f003 021f 	and.w	r2, r3, #31
 800169e:	e01e      	b.n	80016de <HAL_ADC_ConfigChannel+0x19a>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fc12 	bl	8000ed0 <LL_ADC_GetOffsetChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80016ce:	2320      	movs	r3, #32
 80016d0:	e004      	b.n	80016dc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80016d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d105      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x1b2>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0e9b      	lsrs	r3, r3, #26
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	e018      	b.n	8001728 <HAL_ADC_ConfigChannel+0x1e4>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800170a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800170e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001712:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800171a:	2320      	movs	r3, #32
 800171c:	e004      	b.n	8001728 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800171e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001728:	429a      	cmp	r2, r3
 800172a:	d106      	bne.n	800173a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fbe1 	bl	8000efc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2101      	movs	r1, #1
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fbc5 	bl	8000ed0 <LL_ADC_GetOffsetChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x222>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fbba 	bl	8000ed0 <LL_ADC_GetOffsetChannel>
 800175c:	4603      	mov	r3, r0
 800175e:	0e9b      	lsrs	r3, r3, #26
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	e01e      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x260>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2101      	movs	r1, #1
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fbaf 	bl	8000ed0 <LL_ADC_GetOffsetChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001784:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800178c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001794:	2320      	movs	r3, #32
 8001796:	e004      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x278>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0e9b      	lsrs	r3, r3, #26
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	e018      	b.n	80017ee <HAL_ADC_ConfigChannel+0x2aa>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80017d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80017d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80017e0:	2320      	movs	r3, #32
 80017e2:	e004      	b.n	80017ee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80017e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d106      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2200      	movs	r2, #0
 80017f8:	2101      	movs	r1, #1
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fb7e 	bl	8000efc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2102      	movs	r1, #2
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fb62 	bl	8000ed0 <LL_ADC_GetOffsetChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10a      	bne.n	800182c <HAL_ADC_ConfigChannel+0x2e8>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2102      	movs	r1, #2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fb57 	bl	8000ed0 <LL_ADC_GetOffsetChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	0e9b      	lsrs	r3, r3, #26
 8001826:	f003 021f 	and.w	r2, r3, #31
 800182a:	e01e      	b.n	800186a <HAL_ADC_ConfigChannel+0x326>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2102      	movs	r1, #2
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fb4c 	bl	8000ed0 <LL_ADC_GetOffsetChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001842:	fa93 f3a3 	rbit	r3, r3
 8001846:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800184a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800184e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001852:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800185a:	2320      	movs	r3, #32
 800185c:	e004      	b.n	8001868 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800185e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001872:	2b00      	cmp	r3, #0
 8001874:	d105      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x33e>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	0e9b      	lsrs	r3, r3, #26
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	e016      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x36c>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800188e:	fa93 f3a3 	rbit	r3, r3
 8001892:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001894:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800189a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80018a2:	2320      	movs	r3, #32
 80018a4:	e004      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80018a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d106      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2200      	movs	r2, #0
 80018ba:	2102      	movs	r1, #2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fb1d 	bl	8000efc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2103      	movs	r1, #3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fb01 	bl	8000ed0 <LL_ADC_GetOffsetChannel>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10a      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x3aa>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2103      	movs	r1, #3
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff faf6 	bl	8000ed0 <LL_ADC_GetOffsetChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	0e9b      	lsrs	r3, r3, #26
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	e017      	b.n	800191e <HAL_ADC_ConfigChannel+0x3da>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2103      	movs	r1, #3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff faeb 	bl	8000ed0 <LL_ADC_GetOffsetChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001908:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800190a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001910:	2320      	movs	r3, #32
 8001912:	e003      	b.n	800191c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001926:	2b00      	cmp	r3, #0
 8001928:	d105      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x3f2>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0e9b      	lsrs	r3, r3, #26
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	e011      	b.n	800195a <HAL_ADC_ConfigChannel+0x416>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001946:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800194e:	2320      	movs	r3, #32
 8001950:	e003      	b.n	800195a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800195a:	429a      	cmp	r2, r3
 800195c:	d106      	bne.n	800196c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	2103      	movs	r1, #3
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fac8 	bl	8000efc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fbf1 	bl	8001158 <LL_ADC_IsEnabled>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 813d 	bne.w	8001bf8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	461a      	mov	r2, r3
 800198c:	f7ff fb72 	bl	8001074 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4aa2      	ldr	r2, [pc, #648]	; (8001c20 <HAL_ADC_ConfigChannel+0x6dc>)
 8001996:	4293      	cmp	r3, r2
 8001998:	f040 812e 	bne.w	8001bf8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10b      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x480>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	3301      	adds	r3, #1
 80019b4:	f003 031f 	and.w	r3, r3, #31
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	bf94      	ite	ls
 80019bc:	2301      	movls	r3, #1
 80019be:	2300      	movhi	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	e019      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x4b4>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80019d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80019d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80019dc:	2320      	movs	r3, #32
 80019de:	e003      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80019e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3301      	adds	r3, #1
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	2b09      	cmp	r3, #9
 80019f0:	bf94      	ite	ls
 80019f2:	2301      	movls	r3, #1
 80019f4:	2300      	movhi	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d079      	beq.n	8001af0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d107      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x4d4>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	3301      	adds	r3, #1
 8001a10:	069b      	lsls	r3, r3, #26
 8001a12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a16:	e015      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x500>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a28:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001a30:	2320      	movs	r3, #32
 8001a32:	e003      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	069b      	lsls	r3, r3, #26
 8001a40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d109      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x520>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0e9b      	lsrs	r3, r3, #26
 8001a56:	3301      	adds	r3, #1
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	e017      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x550>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6c:	fa93 f3a3 	rbit	r3, r3
 8001a70:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a74:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	e003      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f003 031f 	and.w	r3, r3, #31
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	ea42 0103 	orr.w	r1, r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10a      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x576>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0e9b      	lsrs	r3, r3, #26
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	051b      	lsls	r3, r3, #20
 8001ab8:	e018      	b.n	8001aec <HAL_ADC_ConfigChannel+0x5a8>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	e003      	b.n	8001ade <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad8:	fab3 f383 	clz	r3, r3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aec:	430b      	orrs	r3, r1
 8001aee:	e07e      	b.n	8001bee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d107      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x5c8>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0e9b      	lsrs	r3, r3, #26
 8001b02:	3301      	adds	r3, #1
 8001b04:	069b      	lsls	r3, r3, #26
 8001b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b0a:	e015      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x5f4>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001b24:	2320      	movs	r3, #32
 8001b26:	e003      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	069b      	lsls	r3, r3, #26
 8001b34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x614>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	0e9b      	lsrs	r3, r3, #26
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	2101      	movs	r1, #1
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	e017      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x644>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	61fb      	str	r3, [r7, #28]
  return result;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001b70:	2320      	movs	r3, #32
 8001b72:	e003      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	ea42 0103 	orr.w	r1, r2, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x670>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b1e      	subs	r3, #30
 8001bac:	051b      	lsls	r3, r3, #20
 8001bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	e01b      	b.n	8001bec <HAL_ADC_ConfigChannel+0x6a8>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	613b      	str	r3, [r7, #16]
  return result;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	e003      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f003 021f 	and.w	r2, r3, #31
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	3b1e      	subs	r3, #30
 8001be6:	051b      	lsls	r3, r3, #20
 8001be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7ff fa12 	bl	800101c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_ADC_ConfigChannel+0x6e0>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80be 	beq.w	8001d82 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c0e:	d004      	beq.n	8001c1a <HAL_ADC_ConfigChannel+0x6d6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_ADC_ConfigChannel+0x6e4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d10a      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x6ec>
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <HAL_ADC_ConfigChannel+0x6e8>)
 8001c1c:	e009      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x6ee>
 8001c1e:	bf00      	nop
 8001c20:	407f0000 	.word	0x407f0000
 8001c24:	80080000 	.word	0x80080000
 8001c28:	50000100 	.word	0x50000100
 8001c2c:	50000300 	.word	0x50000300
 8001c30:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <HAL_ADC_ConfigChannel+0x854>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f91a 	bl	8000e6c <LL_ADC_GetCommonPathInternalCh>
 8001c38:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <HAL_ADC_ConfigChannel+0x858>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_ADC_ConfigChannel+0x70c>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <HAL_ADC_ConfigChannel+0x85c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d13a      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d134      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c64:	d005      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x72e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a4e      	ldr	r2, [pc, #312]	; (8001da4 <HAL_ADC_ConfigChannel+0x860>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	f040 8085 	bne.w	8001d7c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c7a:	d004      	beq.n	8001c86 <HAL_ADC_ConfigChannel+0x742>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a49      	ldr	r2, [pc, #292]	; (8001da8 <HAL_ADC_ConfigChannel+0x864>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x746>
 8001c86:	4a49      	ldr	r2, [pc, #292]	; (8001dac <HAL_ADC_ConfigChannel+0x868>)
 8001c88:	e000      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x748>
 8001c8a:	4a43      	ldr	r2, [pc, #268]	; (8001d98 <HAL_ADC_ConfigChannel+0x854>)
 8001c8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c94:	4619      	mov	r1, r3
 8001c96:	4610      	mov	r0, r2
 8001c98:	f7ff f8d5 	bl	8000e46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c9c:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <HAL_ADC_ConfigChannel+0x86c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	099b      	lsrs	r3, r3, #6
 8001ca2:	4a44      	ldr	r2, [pc, #272]	; (8001db4 <HAL_ADC_ConfigChannel+0x870>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cb6:	e002      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f9      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cc4:	e05a      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a3b      	ldr	r2, [pc, #236]	; (8001db8 <HAL_ADC_ConfigChannel+0x874>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d125      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d11f      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a31      	ldr	r2, [pc, #196]	; (8001da8 <HAL_ADC_ConfigChannel+0x864>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d104      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x7ac>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a34      	ldr	r2, [pc, #208]	; (8001dbc <HAL_ADC_ConfigChannel+0x878>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d047      	beq.n	8001d80 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf8:	d004      	beq.n	8001d04 <HAL_ADC_ConfigChannel+0x7c0>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <HAL_ADC_ConfigChannel+0x864>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x7c4>
 8001d04:	4a29      	ldr	r2, [pc, #164]	; (8001dac <HAL_ADC_ConfigChannel+0x868>)
 8001d06:	e000      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x7c6>
 8001d08:	4a23      	ldr	r2, [pc, #140]	; (8001d98 <HAL_ADC_ConfigChannel+0x854>)
 8001d0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d12:	4619      	mov	r1, r3
 8001d14:	4610      	mov	r0, r2
 8001d16:	f7ff f896 	bl	8000e46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d1a:	e031      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a27      	ldr	r2, [pc, #156]	; (8001dc0 <HAL_ADC_ConfigChannel+0x87c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d12d      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d127      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_ADC_ConfigChannel+0x864>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d022      	beq.n	8001d82 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d44:	d004      	beq.n	8001d50 <HAL_ADC_ConfigChannel+0x80c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <HAL_ADC_ConfigChannel+0x864>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x810>
 8001d50:	4a16      	ldr	r2, [pc, #88]	; (8001dac <HAL_ADC_ConfigChannel+0x868>)
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x812>
 8001d54:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <HAL_ADC_ConfigChannel+0x854>)
 8001d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4610      	mov	r0, r2
 8001d62:	f7ff f870 	bl	8000e46 <LL_ADC_SetCommonPathInternalCh>
 8001d66:	e00c      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	f043 0220 	orr.w	r2, r3, #32
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001d7a:	e002      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d7c:	bf00      	nop
 8001d7e:	e000      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001d8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	37d8      	adds	r7, #216	; 0xd8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	50000700 	.word	0x50000700
 8001d9c:	c3210000 	.word	0xc3210000
 8001da0:	90c00010 	.word	0x90c00010
 8001da4:	50000600 	.word	0x50000600
 8001da8:	50000100 	.word	0x50000100
 8001dac:	50000300 	.word	0x50000300
 8001db0:	20000000 	.word	0x20000000
 8001db4:	053e2d63 	.word	0x053e2d63
 8001db8:	c7520000 	.word	0xc7520000
 8001dbc:	50000500 	.word	0x50000500
 8001dc0:	cb840000 	.word	0xcb840000

08001dc4 <LL_ADC_IsEnabled>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <LL_ADC_IsEnabled+0x18>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <LL_ADC_IsEnabled+0x1a>
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_ADC_REG_IsConversionOngoing>:
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d101      	bne.n	8001e02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b0a1      	sub	sp, #132	; 0x84
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e0e7      	b.n	8001ffe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001e36:	2300      	movs	r3, #0
 8001e38:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e46:	d102      	bne.n	8001e4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e48:	4b6f      	ldr	r3, [pc, #444]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	e009      	b.n	8001e62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a6e      	ldr	r2, [pc, #440]	; (800200c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d102      	bne.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8001e58:	4b6d      	ldr	r3, [pc, #436]	; (8002010 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	e001      	b.n	8001e62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10b      	bne.n	8001e80 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	f043 0220 	orr.w	r2, r3, #32
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0be      	b.n	8001ffe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ffb1 	bl	8001dea <LL_ADC_REG_IsConversionOngoing>
 8001e88:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ffab 	bl	8001dea <LL_ADC_REG_IsConversionOngoing>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 80a0 	bne.w	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001e9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 809c 	bne.w	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eac:	d004      	beq.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a55      	ldr	r2, [pc, #340]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001eb8:	4b56      	ldr	r3, [pc, #344]	; (8002014 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8001eba:	e000      	b.n	8001ebe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001ebc:	4b56      	ldr	r3, [pc, #344]	; (8002018 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8001ebe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d04b      	beq.n	8001f60 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eda:	035b      	lsls	r3, r3, #13
 8001edc:	430b      	orrs	r3, r1
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ee2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eec:	d004      	beq.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a45      	ldr	r2, [pc, #276]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d10f      	bne.n	8001f18 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8001ef8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001efc:	f7ff ff62 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f00:	4604      	mov	r4, r0
 8001f02:	4841      	ldr	r0, [pc, #260]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001f04:	f7ff ff5e 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4323      	orrs	r3, r4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e012      	b.n	8001f3e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8001f18:	483c      	ldr	r0, [pc, #240]	; (800200c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001f1a:	f7ff ff53 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f1e:	4604      	mov	r4, r0
 8001f20:	483b      	ldr	r0, [pc, #236]	; (8002010 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001f22:	f7ff ff4f 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f26:	4603      	mov	r3, r0
 8001f28:	431c      	orrs	r4, r3
 8001f2a:	483c      	ldr	r0, [pc, #240]	; (800201c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001f2c:	f7ff ff4a 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4323      	orrs	r3, r4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d056      	beq.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f4a:	f023 030f 	bic.w	r3, r3, #15
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	6811      	ldr	r1, [r2, #0]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	6892      	ldr	r2, [r2, #8]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f5c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001f5e:	e047      	b.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f74:	d004      	beq.n	8001f80 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a23      	ldr	r2, [pc, #140]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d10f      	bne.n	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8001f80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f84:	f7ff ff1e 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	481f      	ldr	r0, [pc, #124]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001f8c:	f7ff ff1a 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4323      	orrs	r3, r4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	e012      	b.n	8001fc6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8001fa0:	481a      	ldr	r0, [pc, #104]	; (800200c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001fa2:	f7ff ff0f 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	4819      	ldr	r0, [pc, #100]	; (8002010 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001faa:	f7ff ff0b 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	431c      	orrs	r4, r3
 8001fb2:	481a      	ldr	r0, [pc, #104]	; (800201c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001fb4:	f7ff ff06 	bl	8001dc4 <LL_ADC_IsEnabled>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4323      	orrs	r3, r4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d012      	beq.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fd2:	f023 030f 	bic.w	r3, r3, #15
 8001fd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fd8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001fda:	e009      	b.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe0:	f043 0220 	orr.w	r2, r3, #32
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001fee:	e000      	b.n	8001ff2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001ff0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001ffa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3784      	adds	r7, #132	; 0x84
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	bf00      	nop
 8002008:	50000100 	.word	0x50000100
 800200c:	50000400 	.word	0x50000400
 8002010:	50000500 	.word	0x50000500
 8002014:	50000300 	.word	0x50000300
 8002018:	50000700 	.word	0x50000700
 800201c:	50000600 	.word	0x50000600

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4907      	ldr	r1, [pc, #28]	; (80020bc <__NVIC_EnableIRQ+0x38>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100

080020c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db0a      	blt.n	80020ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	490c      	ldr	r1, [pc, #48]	; (800210c <__NVIC_SetPriority+0x4c>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e8:	e00a      	b.n	8002100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4908      	ldr	r1, [pc, #32]	; (8002110 <__NVIC_SetPriority+0x50>)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3b04      	subs	r3, #4
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	761a      	strb	r2, [r3, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf28      	it	cs
 8002132:	2304      	movcs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3304      	adds	r3, #4
 800213a:	2b06      	cmp	r3, #6
 800213c:	d902      	bls.n	8002144 <NVIC_EncodePriority+0x30>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b03      	subs	r3, #3
 8002142:	e000      	b.n	8002146 <NVIC_EncodePriority+0x32>
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43d9      	mvns	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4313      	orrs	r3, r2
         );
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ff4c 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800219e:	f7ff ff63 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68b9      	ldr	r1, [r7, #8]
 80021a8:	6978      	ldr	r0, [r7, #20]
 80021aa:	f7ff ffb3 	bl	8002114 <NVIC_EncodePriority>
 80021ae:	4602      	mov	r2, r0
 80021b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff82 	bl	80020c0 <__NVIC_SetPriority>
}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ff56 	bl	8002084 <__NVIC_EnableIRQ>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e147      	b.n	8002482 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fbb4 	bl	8000974 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0210 	bic.w	r2, r2, #16
 800221a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800221c:	f7fe fdd0 	bl	8000dc0 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002222:	e012      	b.n	800224a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002224:	f7fe fdcc 	bl	8000dc0 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b0a      	cmp	r3, #10
 8002230:	d90b      	bls.n	800224a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2203      	movs	r2, #3
 8002242:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e11b      	b.n	8002482 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b08      	cmp	r3, #8
 8002256:	d0e5      	beq.n	8002224 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002268:	f7fe fdaa 	bl	8000dc0 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800226e:	e012      	b.n	8002296 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002270:	f7fe fda6 	bl	8000dc0 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b0a      	cmp	r3, #10
 800227c:	d90b      	bls.n	8002296 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2203      	movs	r2, #3
 800228e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0f5      	b.n	8002482 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0e5      	beq.n	8002270 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0202 	orr.w	r2, r2, #2
 80022b2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a74      	ldr	r2, [pc, #464]	; (800248c <HAL_FDCAN_Init+0x2ac>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d103      	bne.n	80022c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80022be:	4a74      	ldr	r2, [pc, #464]	; (8002490 <HAL_FDCAN_Init+0x2b0>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7c1b      	ldrb	r3, [r3, #16]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d108      	bne.n	80022e0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699a      	ldr	r2, [r3, #24]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022dc:	619a      	str	r2, [r3, #24]
 80022de:	e007      	b.n	80022f0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ee:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7c5b      	ldrb	r3, [r3, #17]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d108      	bne.n	800230a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002306:	619a      	str	r2, [r3, #24]
 8002308:	e007      	b.n	800231a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002318:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7c9b      	ldrb	r3, [r3, #18]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d108      	bne.n	8002334 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699a      	ldr	r2, [r3, #24]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002330:	619a      	str	r2, [r3, #24]
 8002332:	e007      	b.n	8002344 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002342:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699a      	ldr	r2, [r3, #24]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002368:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0210 	bic.w	r2, r2, #16
 8002378:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d108      	bne.n	8002394 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699a      	ldr	r2, [r3, #24]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0204 	orr.w	r2, r2, #4
 8002390:	619a      	str	r2, [r3, #24]
 8002392:	e02c      	b.n	80023ee <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d028      	beq.n	80023ee <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d01c      	beq.n	80023de <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023b2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0210 	orr.w	r2, r2, #16
 80023c2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d110      	bne.n	80023ee <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0220 	orr.w	r2, r2, #32
 80023da:	619a      	str	r2, [r3, #24]
 80023dc:	e007      	b.n	80023ee <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699a      	ldr	r2, [r3, #24]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0220 	orr.w	r2, r2, #32
 80023ec:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80023fe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002406:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	3b01      	subs	r3, #1
 8002410:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002416:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002418:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002422:	d115      	bne.n	8002450 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	3b01      	subs	r3, #1
 8002430:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002432:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	3b01      	subs	r3, #1
 800243a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800243c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	3b01      	subs	r3, #1
 8002446:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800244c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800244e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f814 	bl	8002494 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40006400 	.word	0x40006400
 8002490:	40006500 	.word	0x40006500

08002494 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800249c:	4b30      	ldr	r3, [pc, #192]	; (8002560 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800249e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2f      	ldr	r2, [pc, #188]	; (8002564 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d103      	bne.n	80024b2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80024b0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a2c      	ldr	r2, [pc, #176]	; (8002568 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d103      	bne.n	80024c4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80024c2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024d2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024da:	041a      	lsls	r2, r3, #16
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024f8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	061a      	lsls	r2, r3, #24
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e005      	b.n	8002546 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3304      	adds	r3, #4
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	429a      	cmp	r2, r3
 8002550:	d3f3      	bcc.n	800253a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002552:	bf00      	nop
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	4000a400 	.word	0x4000a400
 8002564:	40006800 	.word	0x40006800
 8002568:	40006c00 	.word	0x40006c00

0800256c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800257a:	e15a      	b.n	8002832 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	2101      	movs	r1, #1
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	4013      	ands	r3, r2
 800258a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 814c 	beq.w	800282c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d005      	beq.n	80025ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d130      	bne.n	800260e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025e2:	2201      	movs	r2, #1
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f003 0201 	and.w	r2, r3, #1
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b03      	cmp	r3, #3
 8002618:	d017      	beq.n	800264a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d123      	bne.n	800269e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	08da      	lsrs	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3208      	adds	r2, #8
 8002698:	6939      	ldr	r1, [r7, #16]
 800269a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0203 	and.w	r2, r3, #3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80a6 	beq.w	800282c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e0:	4b5b      	ldr	r3, [pc, #364]	; (8002850 <HAL_GPIO_Init+0x2e4>)
 80026e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e4:	4a5a      	ldr	r2, [pc, #360]	; (8002850 <HAL_GPIO_Init+0x2e4>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6613      	str	r3, [r2, #96]	; 0x60
 80026ec:	4b58      	ldr	r3, [pc, #352]	; (8002850 <HAL_GPIO_Init+0x2e4>)
 80026ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f8:	4a56      	ldr	r2, [pc, #344]	; (8002854 <HAL_GPIO_Init+0x2e8>)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	3302      	adds	r3, #2
 8002700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	220f      	movs	r2, #15
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002722:	d01f      	beq.n	8002764 <HAL_GPIO_Init+0x1f8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a4c      	ldr	r2, [pc, #304]	; (8002858 <HAL_GPIO_Init+0x2ec>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d019      	beq.n	8002760 <HAL_GPIO_Init+0x1f4>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a4b      	ldr	r2, [pc, #300]	; (800285c <HAL_GPIO_Init+0x2f0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d013      	beq.n	800275c <HAL_GPIO_Init+0x1f0>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a4a      	ldr	r2, [pc, #296]	; (8002860 <HAL_GPIO_Init+0x2f4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00d      	beq.n	8002758 <HAL_GPIO_Init+0x1ec>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a49      	ldr	r2, [pc, #292]	; (8002864 <HAL_GPIO_Init+0x2f8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d007      	beq.n	8002754 <HAL_GPIO_Init+0x1e8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a48      	ldr	r2, [pc, #288]	; (8002868 <HAL_GPIO_Init+0x2fc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d101      	bne.n	8002750 <HAL_GPIO_Init+0x1e4>
 800274c:	2305      	movs	r3, #5
 800274e:	e00a      	b.n	8002766 <HAL_GPIO_Init+0x1fa>
 8002750:	2306      	movs	r3, #6
 8002752:	e008      	b.n	8002766 <HAL_GPIO_Init+0x1fa>
 8002754:	2304      	movs	r3, #4
 8002756:	e006      	b.n	8002766 <HAL_GPIO_Init+0x1fa>
 8002758:	2303      	movs	r3, #3
 800275a:	e004      	b.n	8002766 <HAL_GPIO_Init+0x1fa>
 800275c:	2302      	movs	r3, #2
 800275e:	e002      	b.n	8002766 <HAL_GPIO_Init+0x1fa>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <HAL_GPIO_Init+0x1fa>
 8002764:	2300      	movs	r3, #0
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	f002 0203 	and.w	r2, r2, #3
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	4093      	lsls	r3, r2
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002776:	4937      	ldr	r1, [pc, #220]	; (8002854 <HAL_GPIO_Init+0x2e8>)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	3302      	adds	r3, #2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002784:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_GPIO_Init+0x300>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027a8:	4a30      	ldr	r2, [pc, #192]	; (800286c <HAL_GPIO_Init+0x300>)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ae:	4b2f      	ldr	r3, [pc, #188]	; (800286c <HAL_GPIO_Init+0x300>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027d2:	4a26      	ldr	r2, [pc, #152]	; (800286c <HAL_GPIO_Init+0x300>)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80027d8:	4b24      	ldr	r3, [pc, #144]	; (800286c <HAL_GPIO_Init+0x300>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <HAL_GPIO_Init+0x300>)
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <HAL_GPIO_Init+0x300>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43db      	mvns	r3, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002826:	4a11      	ldr	r2, [pc, #68]	; (800286c <HAL_GPIO_Init+0x300>)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	3301      	adds	r3, #1
 8002830:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f ae9d 	bne.w	800257c <HAL_GPIO_Init+0x10>
  }
}
 8002842:	bf00      	nop
 8002844:	bf00      	nop
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000
 8002858:	48000400 	.word	0x48000400
 800285c:	48000800 	.word	0x48000800
 8002860:	48000c00 	.word	0x48000c00
 8002864:	48001000 	.word	0x48001000
 8002868:	48001400 	.word	0x48001400
 800286c:	40010400 	.word	0x40010400

08002870 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d141      	bne.n	8002902 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800287e:	4b4b      	ldr	r3, [pc, #300]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288a:	d131      	bne.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800288c:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002892:	4a46      	ldr	r2, [pc, #280]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800289c:	4b43      	ldr	r3, [pc, #268]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028a4:	4a41      	ldr	r2, [pc, #260]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028ac:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2232      	movs	r2, #50	; 0x32
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	4a3f      	ldr	r2, [pc, #252]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	0c9b      	lsrs	r3, r3, #18
 80028be:	3301      	adds	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028c2:	e002      	b.n	80028ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ca:	4b38      	ldr	r3, [pc, #224]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d6:	d102      	bne.n	80028de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f2      	bne.n	80028c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028de:	4b33      	ldr	r3, [pc, #204]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ea:	d158      	bne.n	800299e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e057      	b.n	80029a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028f0:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f6:	4a2d      	ldr	r2, [pc, #180]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002900:	e04d      	b.n	800299e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002908:	d141      	bne.n	800298e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800290a:	4b28      	ldr	r3, [pc, #160]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002916:	d131      	bne.n	800297c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800291a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800291e:	4a23      	ldr	r2, [pc, #140]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002924:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002928:	4b20      	ldr	r3, [pc, #128]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002930:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002936:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2232      	movs	r2, #50	; 0x32
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	4a1c      	ldr	r2, [pc, #112]	; (80029b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	0c9b      	lsrs	r3, r3, #18
 800294a:	3301      	adds	r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800294e:	e002      	b.n	8002956 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	3b01      	subs	r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002962:	d102      	bne.n	800296a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f2      	bne.n	8002950 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002976:	d112      	bne.n	800299e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e011      	b.n	80029a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800297e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800298c:	e007      	b.n	800299e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800298e:	4b07      	ldr	r3, [pc, #28]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002996:	4a05      	ldr	r2, [pc, #20]	; (80029ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002998:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800299c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	40007000 	.word	0x40007000
 80029b0:	20000000 	.word	0x20000000
 80029b4:	431bde83 	.word	0x431bde83

080029b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80029c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c6:	6093      	str	r3, [r2, #8]
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40007000 	.word	0x40007000

080029d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e2fe      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d075      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f6:	4b97      	ldr	r3, [pc, #604]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a00:	4b94      	ldr	r3, [pc, #592]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b0c      	cmp	r3, #12
 8002a0e:	d102      	bne.n	8002a16 <HAL_RCC_OscConfig+0x3e>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d002      	beq.n	8002a1c <HAL_RCC_OscConfig+0x44>
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d10b      	bne.n	8002a34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	4b8d      	ldr	r3, [pc, #564]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d05b      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x108>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d157      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e2d9      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3c:	d106      	bne.n	8002a4c <HAL_RCC_OscConfig+0x74>
 8002a3e:	4b85      	ldr	r3, [pc, #532]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a84      	ldr	r2, [pc, #528]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e01d      	b.n	8002a88 <HAL_RCC_OscConfig+0xb0>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x98>
 8002a56:	4b7f      	ldr	r3, [pc, #508]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7e      	ldr	r2, [pc, #504]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b7c      	ldr	r3, [pc, #496]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a7b      	ldr	r2, [pc, #492]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0xb0>
 8002a70:	4b78      	ldr	r3, [pc, #480]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a77      	ldr	r2, [pc, #476]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b75      	ldr	r3, [pc, #468]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a74      	ldr	r2, [pc, #464]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d013      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe f996 	bl	8000dc0 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe f992 	bl	8000dc0 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e29e      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aaa:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0xc0>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe f982 	bl	8000dc0 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe f97e 	bl	8000dc0 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e28a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ad2:	4b60      	ldr	r3, [pc, #384]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0xe8>
 8002ade:	e000      	b.n	8002ae2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d075      	beq.n	8002bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aee:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af8:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d102      	bne.n	8002b0e <HAL_RCC_OscConfig+0x136>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d002      	beq.n	8002b14 <HAL_RCC_OscConfig+0x13c>
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d11f      	bne.n	8002b54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b14:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_OscConfig+0x154>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e25d      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	4946      	ldr	r1, [pc, #280]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b40:	4b45      	ldr	r3, [pc, #276]	; (8002c58 <HAL_RCC_OscConfig+0x280>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe f849 	bl	8000bdc <HAL_InitTick>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d043      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e249      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d023      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b5c:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a3c      	ldr	r2, [pc, #240]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe f92a 	bl	8000dc0 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b70:	f7fe f926 	bl	8000dc0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e232      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b82:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8e:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	061b      	lsls	r3, r3, #24
 8002b9c:	492d      	ldr	r1, [pc, #180]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
 8002ba2:	e01a      	b.n	8002bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a2a      	ldr	r2, [pc, #168]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fe f906 	bl	8000dc0 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb8:	f7fe f902 	bl	8000dc0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e20e      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bca:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x1e0>
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d041      	beq.n	8002c6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01c      	beq.n	8002c28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf4:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfe:	f7fe f8df 	bl	8000dc0 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c06:	f7fe f8db 	bl	8000dc0 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e1e7      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0ef      	beq.n	8002c06 <HAL_RCC_OscConfig+0x22e>
 8002c26:	e020      	b.n	8002c6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2e:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7fe f8c2 	bl	8000dc0 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c3e:	e00d      	b.n	8002c5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c40:	f7fe f8be 	bl	8000dc0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d906      	bls.n	8002c5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1ca      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c5c:	4b8c      	ldr	r3, [pc, #560]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1ea      	bne.n	8002c40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80a6 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c7c:	4b84      	ldr	r3, [pc, #528]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_OscConfig+0x2b4>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <HAL_RCC_OscConfig+0x2b6>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00d      	beq.n	8002cae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	4a7e      	ldr	r2, [pc, #504]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c9e:	4b7c      	ldr	r3, [pc, #496]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002caa:	2301      	movs	r3, #1
 8002cac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cae:	4b79      	ldr	r3, [pc, #484]	; (8002e94 <HAL_RCC_OscConfig+0x4bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d118      	bne.n	8002cec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cba:	4b76      	ldr	r3, [pc, #472]	; (8002e94 <HAL_RCC_OscConfig+0x4bc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a75      	ldr	r2, [pc, #468]	; (8002e94 <HAL_RCC_OscConfig+0x4bc>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe f87b 	bl	8000dc0 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cce:	f7fe f877 	bl	8000dc0 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e183      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce0:	4b6c      	ldr	r3, [pc, #432]	; (8002e94 <HAL_RCC_OscConfig+0x4bc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d108      	bne.n	8002d06 <HAL_RCC_OscConfig+0x32e>
 8002cf4:	4b66      	ldr	r3, [pc, #408]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	4a65      	ldr	r2, [pc, #404]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d04:	e024      	b.n	8002d50 <HAL_RCC_OscConfig+0x378>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b05      	cmp	r3, #5
 8002d0c:	d110      	bne.n	8002d30 <HAL_RCC_OscConfig+0x358>
 8002d0e:	4b60      	ldr	r3, [pc, #384]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d14:	4a5e      	ldr	r2, [pc, #376]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002d16:	f043 0304 	orr.w	r3, r3, #4
 8002d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d1e:	4b5c      	ldr	r3, [pc, #368]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d24:	4a5a      	ldr	r2, [pc, #360]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d2e:	e00f      	b.n	8002d50 <HAL_RCC_OscConfig+0x378>
 8002d30:	4b57      	ldr	r3, [pc, #348]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	4a56      	ldr	r2, [pc, #344]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d40:	4b53      	ldr	r3, [pc, #332]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	4a52      	ldr	r2, [pc, #328]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d016      	beq.n	8002d86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe f832 	bl	8000dc0 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fe f82e 	bl	8000dc0 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e138      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d76:	4b46      	ldr	r3, [pc, #280]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ed      	beq.n	8002d60 <HAL_RCC_OscConfig+0x388>
 8002d84:	e015      	b.n	8002db2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d86:	f7fe f81b 	bl	8000dc0 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe f817 	bl	8000dc0 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e121      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002da4:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1ed      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d105      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db8:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	4a34      	ldr	r2, [pc, #208]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d03c      	beq.n	8002e4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01c      	beq.n	8002e12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002dda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dde:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fd ffea 	bl	8000dc0 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002df0:	f7fd ffe6 	bl	8000dc0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0f2      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ef      	beq.n	8002df0 <HAL_RCC_OscConfig+0x418>
 8002e10:	e01b      	b.n	8002e4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e12:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e18:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
 8002e1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7fd ffcd 	bl	8000dc0 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e2a:	f7fd ffc9 	bl	8000dc0 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0d5      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002e3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1ef      	bne.n	8002e2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80c9 	beq.w	8002fe6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	f000 8083 	beq.w	8002f68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d15e      	bne.n	8002f28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <HAL_RCC_OscConfig+0x4b8>)
 8002e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fd ffa3 	bl	8000dc0 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7c:	e00c      	b.n	8002e98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fd ff9f 	bl	8000dc0 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d905      	bls.n	8002e98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0ab      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e98:	4b55      	ldr	r3, [pc, #340]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1ec      	bne.n	8002e7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea4:	4b52      	ldr	r3, [pc, #328]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	4b52      	ldr	r3, [pc, #328]	; (8002ff4 <HAL_RCC_OscConfig+0x61c>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6a11      	ldr	r1, [r2, #32]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eb4:	3a01      	subs	r2, #1
 8002eb6:	0112      	lsls	r2, r2, #4
 8002eb8:	4311      	orrs	r1, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002ebe:	0212      	lsls	r2, r2, #8
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ec6:	0852      	lsrs	r2, r2, #1
 8002ec8:	3a01      	subs	r2, #1
 8002eca:	0552      	lsls	r2, r2, #21
 8002ecc:	4311      	orrs	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ed2:	0852      	lsrs	r2, r2, #1
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	0652      	lsls	r2, r2, #25
 8002ed8:	4311      	orrs	r1, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ede:	06d2      	lsls	r2, r2, #27
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	4943      	ldr	r1, [pc, #268]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee8:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a40      	ldr	r2, [pc, #256]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef4:	4b3e      	ldr	r3, [pc, #248]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4a3d      	ldr	r2, [pc, #244]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fd ff5e 	bl	8000dc0 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fd ff5a 	bl	8000dc0 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e066      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1a:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x530>
 8002f26:	e05e      	b.n	8002fe6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f28:	4b31      	ldr	r3, [pc, #196]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a30      	ldr	r2, [pc, #192]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fd ff44 	bl	8000dc0 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fd ff40 	bl	8000dc0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e04c      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f4e:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002f5a:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	4924      	ldr	r1, [pc, #144]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002f60:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <HAL_RCC_OscConfig+0x620>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	60cb      	str	r3, [r1, #12]
 8002f66:	e03e      	b.n	8002fe6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e039      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002f74:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <HAL_RCC_OscConfig+0x618>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f003 0203 	and.w	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d12c      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	3b01      	subs	r3, #1
 8002f94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d123      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d11b      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d113      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d109      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	019f800c 	.word	0x019f800c
 8002ff8:	feeefffc 	.word	0xfeeefffc

08002ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e11e      	b.n	8003252 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b91      	ldr	r3, [pc, #580]	; (800325c <HAL_RCC_ClockConfig+0x260>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d910      	bls.n	8003044 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b8e      	ldr	r3, [pc, #568]	; (800325c <HAL_RCC_ClockConfig+0x260>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 020f 	bic.w	r2, r3, #15
 800302a:	498c      	ldr	r1, [pc, #560]	; (800325c <HAL_RCC_ClockConfig+0x260>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b8a      	ldr	r3, [pc, #552]	; (800325c <HAL_RCC_ClockConfig+0x260>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e106      	b.n	8003252 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d073      	beq.n	8003138 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d129      	bne.n	80030ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003058:	4b81      	ldr	r3, [pc, #516]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0f4      	b.n	8003252 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003068:	f000 f9ba 	bl	80033e0 <RCC_GetSysClockFreqFromPLLSource>
 800306c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4a7c      	ldr	r2, [pc, #496]	; (8003264 <HAL_RCC_ClockConfig+0x268>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d93f      	bls.n	80030f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003076:	4b7a      	ldr	r3, [pc, #488]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800308a:	2b00      	cmp	r3, #0
 800308c:	d033      	beq.n	80030f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003092:	2b00      	cmp	r3, #0
 8003094:	d12f      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003096:	4b72      	ldr	r3, [pc, #456]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800309e:	4a70      	ldr	r2, [pc, #448]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 80030a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e024      	b.n	80030f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b4:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0c6      	b.n	8003252 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c4:	4b66      	ldr	r3, [pc, #408]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0be      	b.n	8003252 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80030d4:	f000 f8ce 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4a61      	ldr	r2, [pc, #388]	; (8003264 <HAL_RCC_ClockConfig+0x268>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d909      	bls.n	80030f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030e2:	4b5f      	ldr	r3, [pc, #380]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ea:	4a5d      	ldr	r2, [pc, #372]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 80030ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f6:	4b5a      	ldr	r3, [pc, #360]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f023 0203 	bic.w	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4957      	ldr	r1, [pc, #348]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003104:	4313      	orrs	r3, r2
 8003106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003108:	f7fd fe5a 	bl	8000dc0 <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	e00a      	b.n	8003126 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003110:	f7fd fe56 	bl	8000dc0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e095      	b.n	8003252 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	4b4e      	ldr	r3, [pc, #312]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 020c 	and.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	429a      	cmp	r2, r3
 8003136:	d1eb      	bne.n	8003110 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d023      	beq.n	800318c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003150:	4b43      	ldr	r3, [pc, #268]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4a42      	ldr	r2, [pc, #264]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003156:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800315a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003168:	4b3d      	ldr	r3, [pc, #244]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003170:	4a3b      	ldr	r2, [pc, #236]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003172:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003176:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003178:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4936      	ldr	r1, [pc, #216]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
 800318a:	e008      	b.n	800319e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b80      	cmp	r3, #128	; 0x80
 8003190:	d105      	bne.n	800319e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003192:	4b33      	ldr	r3, [pc, #204]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	4a32      	ldr	r2, [pc, #200]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003198:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800319c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800319e:	4b2f      	ldr	r3, [pc, #188]	; (800325c <HAL_RCC_ClockConfig+0x260>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d21d      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCC_ClockConfig+0x260>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 020f 	bic.w	r2, r3, #15
 80031b4:	4929      	ldr	r1, [pc, #164]	; (800325c <HAL_RCC_ClockConfig+0x260>)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031bc:	f7fd fe00 	bl	8000dc0 <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	e00a      	b.n	80031da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c4:	f7fd fdfc 	bl	8000dc0 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e03b      	b.n	8003252 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_RCC_ClockConfig+0x260>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1ed      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4917      	ldr	r1, [pc, #92]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003212:	4b13      	ldr	r3, [pc, #76]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490f      	ldr	r1, [pc, #60]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003226:	f000 f825 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <HAL_RCC_ClockConfig+0x264>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490c      	ldr	r1, [pc, #48]	; (8003268 <HAL_RCC_ClockConfig+0x26c>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <HAL_RCC_ClockConfig+0x270>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_RCC_ClockConfig+0x274>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd fcc6 	bl	8000bdc <HAL_InitTick>
 8003250:	4603      	mov	r3, r0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40022000 	.word	0x40022000
 8003260:	40021000 	.word	0x40021000
 8003264:	04c4b400 	.word	0x04c4b400
 8003268:	08005824 	.word	0x08005824
 800326c:	20000000 	.word	0x20000000
 8003270:	20000004 	.word	0x20000004

08003274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800327a:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_RCC_GetSysClockFreq+0xb8>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b04      	cmp	r3, #4
 8003284:	d102      	bne.n	800328c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003286:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	e047      	b.n	800331c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800328c:	4b27      	ldr	r3, [pc, #156]	; (800332c <HAL_RCC_GetSysClockFreq+0xb8>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b08      	cmp	r3, #8
 8003296:	d102      	bne.n	800329e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003298:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_RCC_GetSysClockFreq+0xc0>)
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	e03e      	b.n	800331c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800329e:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b0c      	cmp	r3, #12
 80032a8:	d136      	bne.n	8003318 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3301      	adds	r3, #1
 80032c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d10c      	bne.n	80032e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032c8:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	4a16      	ldr	r2, [pc, #88]	; (800332c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d2:	68d2      	ldr	r2, [r2, #12]
 80032d4:	0a12      	lsrs	r2, r2, #8
 80032d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	617b      	str	r3, [r7, #20]
      break;
 80032e0:	e00c      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032e2:	4a13      	ldr	r2, [pc, #76]	; (8003330 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	4a10      	ldr	r2, [pc, #64]	; (800332c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ec:	68d2      	ldr	r2, [r2, #12]
 80032ee:	0a12      	lsrs	r2, r2, #8
 80032f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032f4:	fb02 f303 	mul.w	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]
      break;
 80032fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	0e5b      	lsrs	r3, r3, #25
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	3301      	adds	r3, #1
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	e001      	b.n	800331c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800331c:	693b      	ldr	r3, [r7, #16]
}
 800331e:	4618      	mov	r0, r3
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	00f42400 	.word	0x00f42400
 8003334:	007a1200 	.word	0x007a1200

08003338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <HAL_RCC_GetHCLKFreq+0x14>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20000000 	.word	0x20000000

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003354:	f7ff fff0 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4904      	ldr	r1, [pc, #16]	; (8003378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	08005834 	.word	0x08005834

0800337c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	220f      	movs	r2, #15
 800338a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_RCC_GetClockConfig+0x5c>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0203 	and.w	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <HAL_RCC_GetClockConfig+0x5c>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <HAL_RCC_GetClockConfig+0x5c>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <HAL_RCC_GetClockConfig+0x5c>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	08db      	lsrs	r3, r3, #3
 80033b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80033be:	4b07      	ldr	r3, [pc, #28]	; (80033dc <HAL_RCC_GetClockConfig+0x60>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	601a      	str	r2, [r3, #0]
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40022000 	.word	0x40022000

080033e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033e6:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033f0:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3301      	adds	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b03      	cmp	r3, #3
 8003402:	d10c      	bne.n	800341e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003404:	4a17      	ldr	r2, [pc, #92]	; (8003464 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800340e:	68d2      	ldr	r2, [r2, #12]
 8003410:	0a12      	lsrs	r2, r2, #8
 8003412:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	617b      	str	r3, [r7, #20]
    break;
 800341c:	e00c      	b.n	8003438 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800341e:	4a12      	ldr	r2, [pc, #72]	; (8003468 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	fbb2 f3f3 	udiv	r3, r2, r3
 8003426:	4a0e      	ldr	r2, [pc, #56]	; (8003460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003428:	68d2      	ldr	r2, [r2, #12]
 800342a:	0a12      	lsrs	r2, r2, #8
 800342c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
    break;
 8003436:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	0e5b      	lsrs	r3, r3, #25
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	3301      	adds	r3, #1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003450:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003452:	687b      	ldr	r3, [r7, #4]
}
 8003454:	4618      	mov	r0, r3
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40021000 	.word	0x40021000
 8003464:	007a1200 	.word	0x007a1200
 8003468:	00f42400 	.word	0x00f42400

0800346c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003474:	2300      	movs	r3, #0
 8003476:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003478:	2300      	movs	r3, #0
 800347a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8098 	beq.w	80035ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348a:	2300      	movs	r3, #0
 800348c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348e:	4b43      	ldr	r3, [pc, #268]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10d      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	4b40      	ldr	r3, [pc, #256]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800349c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349e:	4a3f      	ldr	r2, [pc, #252]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a4:	6593      	str	r3, [r2, #88]	; 0x58
 80034a6:	4b3d      	ldr	r3, [pc, #244]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034b2:	2301      	movs	r3, #1
 80034b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b6:	4b3a      	ldr	r3, [pc, #232]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a39      	ldr	r2, [pc, #228]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034c2:	f7fd fc7d 	bl	8000dc0 <HAL_GetTick>
 80034c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034c8:	e009      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ca:	f7fd fc79 	bl	8000dc0 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d902      	bls.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	74fb      	strb	r3, [r7, #19]
        break;
 80034dc:	e005      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034de:	4b30      	ldr	r3, [pc, #192]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0ef      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d159      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034f0:	4b2a      	ldr	r3, [pc, #168]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d01e      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	429a      	cmp	r2, r3
 800350a:	d019      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800350c:	4b23      	ldr	r3, [pc, #140]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003516:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003518:	4b20      	ldr	r3, [pc, #128]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	4a1f      	ldr	r2, [pc, #124]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003528:	4b1c      	ldr	r3, [pc, #112]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	4a1b      	ldr	r2, [pc, #108]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003538:	4a18      	ldr	r2, [pc, #96]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d016      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7fd fc39 	bl	8000dc0 <HAL_GetTick>
 800354e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003550:	e00b      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fd fc35 	bl	8000dc0 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d902      	bls.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	74fb      	strb	r3, [r7, #19]
            break;
 8003568:	e006      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ec      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003578:	7cfb      	ldrb	r3, [r7, #19]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800357e:	4b07      	ldr	r3, [pc, #28]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358c:	4903      	ldr	r1, [pc, #12]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003594:	e008      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003596:	7cfb      	ldrb	r3, [r7, #19]
 8003598:	74bb      	strb	r3, [r7, #18]
 800359a:	e005      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035a8:	7c7b      	ldrb	r3, [r7, #17]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d105      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ae:	4ba7      	ldr	r3, [pc, #668]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	4aa6      	ldr	r2, [pc, #664]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035c6:	4ba1      	ldr	r3, [pc, #644]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f023 0203 	bic.w	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	499d      	ldr	r1, [pc, #628]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035e8:	4b98      	ldr	r3, [pc, #608]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f023 020c 	bic.w	r2, r3, #12
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	4995      	ldr	r1, [pc, #596]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800360a:	4b90      	ldr	r3, [pc, #576]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	498c      	ldr	r1, [pc, #560]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800362c:	4b87      	ldr	r3, [pc, #540]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	4984      	ldr	r1, [pc, #528]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800364e:	4b7f      	ldr	r3, [pc, #508]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	497b      	ldr	r1, [pc, #492]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003670:	4b76      	ldr	r3, [pc, #472]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	4973      	ldr	r1, [pc, #460]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003692:	4b6e      	ldr	r3, [pc, #440]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	496a      	ldr	r1, [pc, #424]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036b4:	4b65      	ldr	r3, [pc, #404]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4962      	ldr	r1, [pc, #392]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036d6:	4b5d      	ldr	r3, [pc, #372]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	4959      	ldr	r1, [pc, #356]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036f8:	4b54      	ldr	r3, [pc, #336]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036fe:	f023 0203 	bic.w	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	4951      	ldr	r1, [pc, #324]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800371a:	4b4c      	ldr	r3, [pc, #304]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	4948      	ldr	r1, [pc, #288]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d015      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800373c:	4b43      	ldr	r3, [pc, #268]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	4940      	ldr	r1, [pc, #256]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375a:	d105      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800375c:	4b3b      	ldr	r3, [pc, #236]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4a3a      	ldr	r2, [pc, #232]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003766:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003770:	2b00      	cmp	r3, #0
 8003772:	d015      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003774:	4b35      	ldr	r3, [pc, #212]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003782:	4932      	ldr	r1, [pc, #200]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003792:	d105      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003794:	4b2d      	ldr	r3, [pc, #180]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a2c      	ldr	r2, [pc, #176]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800379a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800379e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d015      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	4924      	ldr	r1, [pc, #144]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ca:	d105      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037cc:	4b1f      	ldr	r3, [pc, #124]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4a1e      	ldr	r2, [pc, #120]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d015      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037e4:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	4916      	ldr	r1, [pc, #88]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003802:	d105      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4a10      	ldr	r2, [pc, #64]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800380a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800380e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d019      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	4908      	ldr	r1, [pc, #32]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800383a:	d109      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a02      	ldr	r2, [pc, #8]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003846:	60d3      	str	r3, [r2, #12]
 8003848:	e002      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d015      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800385c:	4b29      	ldr	r3, [pc, #164]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4926      	ldr	r1, [pc, #152]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800387a:	d105      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800387c:	4b21      	ldr	r3, [pc, #132]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4a20      	ldr	r2, [pc, #128]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003886:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d015      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003894:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a2:	4918      	ldr	r1, [pc, #96]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b2:	d105      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a12      	ldr	r2, [pc, #72]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038be:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038cc:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038da:	490a      	ldr	r1, [pc, #40]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038ea:	d105      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4a04      	ldr	r2, [pc, #16]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80038f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80038f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000

08003908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e049      	b.n	80039ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f841 	bl	80039b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f000 fa30 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d001      	beq.n	80039e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e054      	b.n	8003a8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a26      	ldr	r2, [pc, #152]	; (8003a9c <HAL_TIM_Base_Start_IT+0xd0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d022      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a0e:	d01d      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d018      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a21      	ldr	r2, [pc, #132]	; (8003aa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d013      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1f      	ldr	r2, [pc, #124]	; (8003aa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00e      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1e      	ldr	r2, [pc, #120]	; (8003aac <HAL_TIM_Base_Start_IT+0xe0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d009      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x80>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d115      	bne.n	8003a78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <HAL_TIM_Base_Start_IT+0xec>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b06      	cmp	r3, #6
 8003a5c:	d015      	beq.n	8003a8a <HAL_TIM_Base_Start_IT+0xbe>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d011      	beq.n	8003a8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a76:	e008      	b.n	8003a8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	e000      	b.n	8003a8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40000800 	.word	0x40000800
 8003aa8:	40000c00 	.word	0x40000c00
 8003aac:	40013400 	.word	0x40013400
 8003ab0:	40014000 	.word	0x40014000
 8003ab4:	40015000 	.word	0x40015000
 8003ab8:	00010007 	.word	0x00010007

08003abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d020      	beq.n	8003b20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01b      	beq.n	8003b20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0202 	mvn.w	r2, #2
 8003af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f931 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f923 	bl	8003d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f934 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d020      	beq.n	8003b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01b      	beq.n	8003b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0204 	mvn.w	r2, #4
 8003b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f90b 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8fd 	bl	8003d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f90e 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d020      	beq.n	8003bb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01b      	beq.n	8003bb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0208 	mvn.w	r2, #8
 8003b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f8e5 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
 8003ba4:	e005      	b.n	8003bb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8d7 	bl	8003d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f8e8 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d020      	beq.n	8003c04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d01b      	beq.n	8003c04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0210 	mvn.w	r2, #16
 8003bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8bf 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
 8003bf0:	e005      	b.n	8003bfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8b1 	bl	8003d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f8c2 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00c      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0201 	mvn.w	r2, #1
 8003c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fc ff9a 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d104      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00c      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f969 	bl	8003f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00c      	beq.n	8003c7a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f961 	bl	8003f3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00c      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d007      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f87c 	bl	8003d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00c      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0220 	mvn.w	r2, #32
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f929 	bl	8003f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00c      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f935 	bl	8003f50 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00c      	beq.n	8003d0a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f92d 	bl	8003f64 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00c      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f925 	bl	8003f78 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00c      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f91d 	bl	8003f8c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a4c      	ldr	r2, [pc, #304]	; (8003ef0 <TIM_Base_SetConfig+0x144>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d017      	beq.n	8003df4 <TIM_Base_SetConfig+0x48>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d013      	beq.n	8003df4 <TIM_Base_SetConfig+0x48>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a49      	ldr	r2, [pc, #292]	; (8003ef4 <TIM_Base_SetConfig+0x148>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00f      	beq.n	8003df4 <TIM_Base_SetConfig+0x48>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a48      	ldr	r2, [pc, #288]	; (8003ef8 <TIM_Base_SetConfig+0x14c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00b      	beq.n	8003df4 <TIM_Base_SetConfig+0x48>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a47      	ldr	r2, [pc, #284]	; (8003efc <TIM_Base_SetConfig+0x150>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d007      	beq.n	8003df4 <TIM_Base_SetConfig+0x48>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a46      	ldr	r2, [pc, #280]	; (8003f00 <TIM_Base_SetConfig+0x154>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <TIM_Base_SetConfig+0x48>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a45      	ldr	r2, [pc, #276]	; (8003f04 <TIM_Base_SetConfig+0x158>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d108      	bne.n	8003e06 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a39      	ldr	r2, [pc, #228]	; (8003ef0 <TIM_Base_SetConfig+0x144>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d023      	beq.n	8003e56 <TIM_Base_SetConfig+0xaa>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e14:	d01f      	beq.n	8003e56 <TIM_Base_SetConfig+0xaa>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a36      	ldr	r2, [pc, #216]	; (8003ef4 <TIM_Base_SetConfig+0x148>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01b      	beq.n	8003e56 <TIM_Base_SetConfig+0xaa>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a35      	ldr	r2, [pc, #212]	; (8003ef8 <TIM_Base_SetConfig+0x14c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d017      	beq.n	8003e56 <TIM_Base_SetConfig+0xaa>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a34      	ldr	r2, [pc, #208]	; (8003efc <TIM_Base_SetConfig+0x150>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <TIM_Base_SetConfig+0xaa>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a33      	ldr	r2, [pc, #204]	; (8003f00 <TIM_Base_SetConfig+0x154>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00f      	beq.n	8003e56 <TIM_Base_SetConfig+0xaa>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a33      	ldr	r2, [pc, #204]	; (8003f08 <TIM_Base_SetConfig+0x15c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00b      	beq.n	8003e56 <TIM_Base_SetConfig+0xaa>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a32      	ldr	r2, [pc, #200]	; (8003f0c <TIM_Base_SetConfig+0x160>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d007      	beq.n	8003e56 <TIM_Base_SetConfig+0xaa>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a31      	ldr	r2, [pc, #196]	; (8003f10 <TIM_Base_SetConfig+0x164>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d003      	beq.n	8003e56 <TIM_Base_SetConfig+0xaa>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a2c      	ldr	r2, [pc, #176]	; (8003f04 <TIM_Base_SetConfig+0x158>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d108      	bne.n	8003e68 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <TIM_Base_SetConfig+0x144>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d013      	beq.n	8003ebc <TIM_Base_SetConfig+0x110>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <TIM_Base_SetConfig+0x154>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00f      	beq.n	8003ebc <TIM_Base_SetConfig+0x110>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a1a      	ldr	r2, [pc, #104]	; (8003f08 <TIM_Base_SetConfig+0x15c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <TIM_Base_SetConfig+0x110>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <TIM_Base_SetConfig+0x160>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <TIM_Base_SetConfig+0x110>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <TIM_Base_SetConfig+0x164>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_Base_SetConfig+0x110>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a13      	ldr	r2, [pc, #76]	; (8003f04 <TIM_Base_SetConfig+0x158>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d103      	bne.n	8003ec4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f023 0201 	bic.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	611a      	str	r2, [r3, #16]
  }
}
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	40000800 	.word	0x40000800
 8003efc:	40000c00 	.word	0x40000c00
 8003f00:	40013400 	.word	0x40013400
 8003f04:	40015000 	.word	0x40015000
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40014400 	.word	0x40014400
 8003f10:	40014800 	.word	0x40014800

08003f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b096      	sub	sp, #88	; 0x58
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3303      	adds	r3, #3
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8003fc0:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8003fc2:	b672      	cpsid	i
#endif
    return(int_posture);
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8003fc6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003fc8:	4b55      	ldr	r3, [pc, #340]	; (8004120 <_tx_byte_allocate+0x180>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd6:	621a      	str	r2, [r3, #32]
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f383 8810 	msr	PRIMASK, r3
}
 8003fe2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f9b2 	bl	8004350 <_tx_byte_pool_search>
 8003fec:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003fee:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8003ff8:	b672      	cpsid	i
    return(int_posture);
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8003ffc:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8003ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8004004:	2301      	movs	r3, #1
 8004006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004008:	e006      	b.n	8004018 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004010:	429a      	cmp	r2, r3
 8004012:	d101      	bne.n	8004018 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8004014:	2301      	movs	r3, #1
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8004018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0d9      	beq.n	8003fd2 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004022:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8004024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004026:	2b00      	cmp	r3, #0
 8004028:	d008      	beq.n	800403c <_tx_byte_allocate+0x9c>
 800402a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f383 8810 	msr	PRIMASK, r3
}
 8004034:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8004036:	2300      	movs	r3, #0
 8004038:	653b      	str	r3, [r7, #80]	; 0x50
 800403a:	e06c      	b.n	8004116 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d061      	beq.n	8004106 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8004042:	4b38      	ldr	r3, [pc, #224]	; (8004124 <_tx_byte_allocate+0x184>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800404a:	2310      	movs	r3, #16
 800404c:	653b      	str	r3, [r7, #80]	; 0x50
 800404e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004050:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f383 8810 	msr	PRIMASK, r3
}
 8004058:	e05d      	b.n	8004116 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800405a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800405c:	4a32      	ldr	r2, [pc, #200]	; (8004128 <_tx_byte_allocate+0x188>)
 800405e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8004060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8004066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800406c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8004072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004074:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8004090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800409a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800409c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800409e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80040a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a6:	675a      	str	r2, [r3, #116]	; 0x74
 80040a8:	e011      	b.n	80040ce <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80040b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040b4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80040b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80040bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040c0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80040c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80040c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040cc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 80040ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d0:	2209      	movs	r2, #9
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80040d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d6:	2201      	movs	r2, #1
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80040da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80040e0:	4b10      	ldr	r3, [pc, #64]	; (8004124 <_tx_byte_allocate+0x184>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3301      	adds	r3, #1
 80040e6:	4a0f      	ldr	r2, [pc, #60]	; (8004124 <_tx_byte_allocate+0x184>)
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ec:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f383 8810 	msr	PRIMASK, r3
}
 80040f4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80040f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80040f8:	f000 fd5e 	bl	8004bb8 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80040fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004102:	653b      	str	r3, [r7, #80]	; 0x50
 8004104:	e007      	b.n	8004116 <_tx_byte_allocate+0x176>
 8004106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004108:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f383 8810 	msr	PRIMASK, r3
}
 8004110:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8004112:	2310      	movs	r3, #16
 8004114:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8004116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8004118:	4618      	mov	r0, r3
 800411a:	3758      	adds	r7, #88	; 0x58
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	200006d4 	.word	0x200006d4
 8004124:	2000076c 	.word	0x2000076c
 8004128:	0800412d 	.word	0x0800412d

0800412c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08e      	sub	sp, #56	; 0x38
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004136:	f3ef 8310 	mrs	r3, PRIMASK
 800413a:	623b      	str	r3, [r7, #32]
    return(posture);
 800413c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800413e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004140:	b672      	cpsid	i
    return(int_posture);
 8004142:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8004144:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414a:	4a33      	ldr	r2, [pc, #204]	; (8004218 <_tx_byte_pool_cleanup+0xec>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d158      	bne.n	8004202 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d152      	bne.n	8004202 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004160:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	2b00      	cmp	r3, #0
 8004166:	d04c      	beq.n	8004202 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a2b      	ldr	r2, [pc, #172]	; (800421c <_tx_byte_pool_cleanup+0xf0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d147      	bne.n	8004202 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	2b00      	cmp	r3, #0
 8004178:	d043      	beq.n	8004202 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	1e5a      	subs	r2, r3, #1
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8004190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d103      	bne.n	800419e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	2200      	movs	r2, #0
 800419a:	625a      	str	r2, [r3, #36]	; 0x24
 800419c:	e013      	b.n	80041c6 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ae:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041b4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d102      	bne.n	80041c6 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	2b09      	cmp	r3, #9
 80041cc:	d119      	bne.n	8004202 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2210      	movs	r2, #16
 80041d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <_tx_byte_pool_cleanup+0xf4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3301      	adds	r3, #1
 80041dc:	4a10      	ldr	r2, [pc, #64]	; (8004220 <_tx_byte_pool_cleanup+0xf4>)
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f383 8810 	msr	PRIMASK, r3
}
 80041ea:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fbe3 	bl	80049b8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80041f2:	f3ef 8310 	mrs	r3, PRIMASK
 80041f6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80041f8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80041fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80041fc:	b672      	cpsid	i
    return(int_posture);
 80041fe:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
 8004202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004204:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f383 8810 	msr	PRIMASK, r3
}
 800420c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800420e:	bf00      	nop
 8004210:	3738      	adds	r7, #56	; 0x38
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	0800412d 	.word	0x0800412d
 800421c:	42595445 	.word	0x42595445
 8004220:	2000076c 	.word	0x2000076c

08004224 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	; 0x38
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8004232:	2234      	movs	r2, #52	; 0x34
 8004234:	2100      	movs	r1, #0
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f001 faa0 	bl	800577c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	f1a3 0208 	sub.w	r2, r3, #8
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2202      	movs	r2, #2
 8004270:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8004276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4413      	add	r3, r2
 800427c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800427e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004280:	3b04      	subs	r3, #4
 8004282:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8004288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004290:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8004292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004294:	3b04      	subs	r3, #4
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8004298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ae:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80042b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b6:	3304      	adds	r3, #4
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80042ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <_tx_byte_pool_create+0x11c>)
 80042c2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80042ca:	f3ef 8310 	mrs	r3, PRIMASK
 80042ce:	61bb      	str	r3, [r7, #24]
    return(posture);
 80042d0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80042d2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80042d4:	b672      	cpsid	i
    return(int_posture);
 80042d6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4a19      	ldr	r2, [pc, #100]	; (8004344 <_tx_byte_pool_create+0x120>)
 80042de:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80042e0:	4b19      	ldr	r3, [pc, #100]	; (8004348 <_tx_byte_pool_create+0x124>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80042e8:	4a18      	ldr	r2, [pc, #96]	; (800434c <_tx_byte_pool_create+0x128>)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30
 80042fa:	e011      	b.n	8004320 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80042fc:	4b13      	ldr	r3, [pc, #76]	; (800434c <_tx_byte_pool_create+0x128>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <_tx_byte_pool_create+0x124>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3301      	adds	r3, #1
 8004326:	4a08      	ldr	r2, [pc, #32]	; (8004348 <_tx_byte_pool_create+0x124>)
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f383 8810 	msr	PRIMASK, r3
}
 8004334:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3738      	adds	r7, #56	; 0x38
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	ffffeeee 	.word	0xffffeeee
 8004344:	42595445 	.word	0x42595445
 8004348:	200006c8 	.word	0x200006c8
 800434c:	200006c4 	.word	0x200006c4

08004350 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8004350:	b480      	push	{r7}
 8004352:	b097      	sub	sp, #92	; 0x5c
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800435a:	2300      	movs	r3, #0
 800435c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800435e:	f3ef 8310 	mrs	r3, PRIMASK
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8004366:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004368:	b672      	cpsid	i
    return(int_posture);
 800436a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800436c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	3b02      	subs	r3, #2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004382:	429a      	cmp	r2, r3
 8004384:	d308      	bcc.n	8004398 <_tx_byte_pool_search+0x48>
 8004386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004388:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f383 8810 	msr	PRIMASK, r3
}
 8004390:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8004392:	2300      	movs	r3, #0
 8004394:	653b      	str	r3, [r7, #80]	; 0x50
 8004396:	e0dd      	b.n	8004554 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8004398:	4b72      	ldr	r3, [pc, #456]	; (8004564 <_tx_byte_pool_search+0x214>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043a2:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 80043b2:	2300      	movs	r3, #0
 80043b4:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80043b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b8:	3304      	adds	r3, #4
 80043ba:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80043bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043be:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80043c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a68      	ldr	r2, [pc, #416]	; (8004568 <_tx_byte_pool_search+0x218>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d143      	bne.n	8004452 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80043ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d104      	bne.n	80043da <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043d4:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80043d6:	2301      	movs	r3, #1
 80043d8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80043da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043dc:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80043e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80043ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ee:	3b08      	subs	r3, #8
 80043f0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 80043f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d257      	bcs.n	80044aa <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 80043fa:	2300      	movs	r3, #0
 80043fc:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	3304      	adds	r3, #4
 8004402:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8004408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a56      	ldr	r2, [pc, #344]	; (8004568 <_tx_byte_pool_search+0x218>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d113      	bne.n	800443a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	1e5a      	subs	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442e:	429a      	cmp	r2, r3
 8004430:	d114      	bne.n	800445c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004436:	615a      	str	r2, [r3, #20]
 8004438:	e010      	b.n	800445c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8004444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800444a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444c:	3b01      	subs	r3, #1
 800444e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004450:	e004      	b.n	800445c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8004452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004454:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800445c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8004462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004464:	3b01      	subs	r3, #1
 8004466:	64bb      	str	r3, [r7, #72]	; 0x48
 8004468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f383 8810 	msr	PRIMASK, r3
}
 8004472:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004474:	f3ef 8310 	mrs	r3, PRIMASK
 8004478:	61bb      	str	r3, [r7, #24]
    return(posture);
 800447a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800447c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800447e:	b672      	cpsid	i
    return(int_posture);
 8004480:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8004482:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800448a:	429a      	cmp	r2, r3
 800448c:	d009      	beq.n	80044a2 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	3301      	adds	r3, #1
 800449a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044a0:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80044a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d186      	bne.n	80043b6 <_tx_byte_pool_search+0x66>
 80044a8:	e000      	b.n	80044ac <_tx_byte_pool_search+0x15c>
                    break;
 80044aa:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80044ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d048      	beq.n	8004544 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80044b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b13      	cmp	r3, #19
 80044ba:	d91e      	bls.n	80044fa <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	3308      	adds	r3, #8
 80044c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044c2:	4413      	add	r3, r2
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80044ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044cc:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80044d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d8:	3304      	adds	r3, #4
 80044da:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80044dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	4a21      	ldr	r2, [pc, #132]	; (8004568 <_tx_byte_pool_search+0x218>)
 80044e4:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80044fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fc:	3304      	adds	r3, #4
 80044fe:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f1a3 0208 	sub.w	r2, r3, #8
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004520:	429a      	cmp	r2, r3
 8004522:	d105      	bne.n	8004530 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8004524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004526:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	615a      	str	r2, [r3, #20]
 8004530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004532:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f383 8810 	msr	PRIMASK, r3
}
 800453a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800453c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453e:	3308      	adds	r3, #8
 8004540:	653b      	str	r3, [r7, #80]	; 0x50
 8004542:	e007      	b.n	8004554 <_tx_byte_pool_search+0x204>
 8004544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004546:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f383 8810 	msr	PRIMASK, r3
}
 800454e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8004554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8004556:	4618      	mov	r0, r3
 8004558:	375c      	adds	r7, #92	; 0x5c
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	200006d4 	.word	0x200006d4
 8004568:	ffffeeee 	.word	0xffffeeee

0800456c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8004570:	f000 f960 	bl	8004834 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8004574:	f000 fce8 	bl	8004f48 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8004578:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <_tx_initialize_high_level+0x58>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <_tx_initialize_high_level+0x5c>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <_tx_initialize_high_level+0x60>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <_tx_initialize_high_level+0x64>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8004590:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <_tx_initialize_high_level+0x68>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <_tx_initialize_high_level+0x6c>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800459c:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <_tx_initialize_high_level+0x70>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <_tx_initialize_high_level+0x74>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80045a8:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <_tx_initialize_high_level+0x78>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <_tx_initialize_high_level+0x7c>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <_tx_initialize_high_level+0x80>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <_tx_initialize_high_level+0x84>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
#endif
}
 80045c0:	bf00      	nop
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	2000069c 	.word	0x2000069c
 80045c8:	200006a0 	.word	0x200006a0
 80045cc:	200006a4 	.word	0x200006a4
 80045d0:	200006a8 	.word	0x200006a8
 80045d4:	200006ac 	.word	0x200006ac
 80045d8:	200006b0 	.word	0x200006b0
 80045dc:	200006bc 	.word	0x200006bc
 80045e0:	200006c0 	.word	0x200006c0
 80045e4:	200006c4 	.word	0x200006c4
 80045e8:	200006c8 	.word	0x200006c8
 80045ec:	200006b4 	.word	0x200006b4
 80045f0:	200006b8 	.word	0x200006b8

080045f4 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80045f8:	4b10      	ldr	r3, [pc, #64]	; (800463c <_tx_initialize_kernel_enter+0x48>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8004600:	d00c      	beq.n	800461c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004602:	4b0e      	ldr	r3, [pc, #56]	; (800463c <_tx_initialize_kernel_enter+0x48>)
 8004604:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004608:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800460a:	f7fb fe09 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800460e:	f7ff ffad 	bl	800456c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8004612:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <_tx_initialize_kernel_enter+0x4c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3301      	adds	r3, #1
 8004618:	4a09      	ldr	r2, [pc, #36]	; (8004640 <_tx_initialize_kernel_enter+0x4c>)
 800461a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <_tx_initialize_kernel_enter+0x48>)
 800461e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004622:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <_tx_initialize_kernel_enter+0x50>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fb ff15 	bl	8000458 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800462e:	4b03      	ldr	r3, [pc, #12]	; (800463c <_tx_initialize_kernel_enter+0x48>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8004634:	f7fb fe34 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004638:	bf00      	nop
 800463a:	bd80      	pop	{r7, pc}
 800463c:	2000000c 	.word	0x2000000c
 8004640:	2000076c 	.word	0x2000076c
 8004644:	200006cc 	.word	0x200006cc

08004648 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b092      	sub	sp, #72	; 0x48
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8004656:	2300      	movs	r3, #0
 8004658:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800465a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800465c:	21ef      	movs	r1, #239	; 0xef
 800465e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004660:	f001 f88c 	bl	800577c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8004664:	22b0      	movs	r2, #176	; 0xb0
 8004666:	2100      	movs	r1, #0
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f001 f887 	bl	800577c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004684:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800468a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004690:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004696:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800469e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046a4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80046ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80046b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b4:	3b01      	subs	r3, #1
 80046b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046b8:	4413      	add	r3, r2
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046c0:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80046c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d007      	beq.n	80046da <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80046d8:	e006      	b.n	80046e8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046de:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2203      	movs	r2, #3
 80046ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a48      	ldr	r2, [pc, #288]	; (8004814 <_tx_thread_create+0x1cc>)
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80046fa:	4947      	ldr	r1, [pc, #284]	; (8004818 <_tx_thread_create+0x1d0>)
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7fb fe2f 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004702:	f3ef 8310 	mrs	r3, PRIMASK
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800470c:	b672      	cpsid	i
    return(int_posture);
 800470e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8004710:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4a41      	ldr	r2, [pc, #260]	; (800481c <_tx_thread_create+0x1d4>)
 8004716:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8004718:	4b41      	ldr	r3, [pc, #260]	; (8004820 <_tx_thread_create+0x1d8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8004720:	4a40      	ldr	r2, [pc, #256]	; (8004824 <_tx_thread_create+0x1dc>)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004736:	e016      	b.n	8004766 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8004738:	4b3a      	ldr	r3, [pc, #232]	; (8004824 <_tx_thread_create+0x1dc>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800473e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004744:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8004746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8004766:	4b2e      	ldr	r3, [pc, #184]	; (8004820 <_tx_thread_create+0x1d8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3301      	adds	r3, #1
 800476c:	4a2c      	ldr	r2, [pc, #176]	; (8004820 <_tx_thread_create+0x1d8>)
 800476e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004770:	4b2d      	ldr	r3, [pc, #180]	; (8004828 <_tx_thread_create+0x1e0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3301      	adds	r3, #1
 8004776:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <_tx_thread_create+0x1e0>)
 8004778:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800477a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800477c:	2b01      	cmp	r3, #1
 800477e:	d129      	bne.n	80047d4 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004780:	f3ef 8305 	mrs	r3, IPSR
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8004786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8004788:	4b28      	ldr	r3, [pc, #160]	; (800482c <_tx_thread_create+0x1e4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4313      	orrs	r3, r2
 800478e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004792:	d30d      	bcc.n	80047b0 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8004794:	4b26      	ldr	r3, [pc, #152]	; (8004830 <_tx_thread_create+0x1e8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800479a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80047a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80047a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80047ae:	e001      	b.n	80047b4 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	647b      	str	r3, [r7, #68]	; 0x44
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	f383 8810 	msr	PRIMASK, r3
}
 80047be:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f8f9 	bl	80049b8 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80047c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01e      	beq.n	800480a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80047cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80047d2:	e01a      	b.n	800480a <_tx_thread_create+0x1c2>
 80047d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f383 8810 	msr	PRIMASK, r3
}
 80047de:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80047e0:	f3ef 8310 	mrs	r3, PRIMASK
 80047e4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80047e6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80047e8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80047ea:	b672      	cpsid	i
    return(int_posture);
 80047ec:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80047ee:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80047f0:	4b0d      	ldr	r3, [pc, #52]	; (8004828 <_tx_thread_create+0x1e0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	4a0c      	ldr	r2, [pc, #48]	; (8004828 <_tx_thread_create+0x1e0>)
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	f383 8810 	msr	PRIMASK, r3
}
 8004804:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004806:	f000 f89d 	bl	8004944 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3748      	adds	r7, #72	; 0x48
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	08004e8d 	.word	0x08004e8d
 8004818:	080048ad 	.word	0x080048ad
 800481c:	54485244 	.word	0x54485244
 8004820:	200006e0 	.word	0x200006e0
 8004824:	200006dc 	.word	0x200006dc
 8004828:	2000076c 	.word	0x2000076c
 800482c:	2000000c 	.word	0x2000000c
 8004830:	200006d8 	.word	0x200006d8

08004834 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8004838:	4b12      	ldr	r3, [pc, #72]	; (8004884 <_tx_thread_initialize+0x50>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800483e:	4b12      	ldr	r3, [pc, #72]	; (8004888 <_tx_thread_initialize+0x54>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <_tx_thread_initialize+0x58>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800484a:	4b11      	ldr	r3, [pc, #68]	; (8004890 <_tx_thread_initialize+0x5c>)
 800484c:	2220      	movs	r2, #32
 800484e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8004850:	2280      	movs	r2, #128	; 0x80
 8004852:	2100      	movs	r1, #0
 8004854:	480f      	ldr	r0, [pc, #60]	; (8004894 <_tx_thread_initialize+0x60>)
 8004856:	f000 ff91 	bl	800577c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800485a:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <_tx_thread_initialize+0x64>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8004860:	4b0e      	ldr	r3, [pc, #56]	; (800489c <_tx_thread_initialize+0x68>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <_tx_thread_initialize+0x6c>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800486c:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <_tx_thread_initialize+0x70>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8004872:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <_tx_thread_initialize+0x74>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800487a:	4a0b      	ldr	r2, [pc, #44]	; (80048a8 <_tx_thread_initialize+0x74>)
 800487c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800487e:	bf00      	nop
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	200006d4 	.word	0x200006d4
 8004888:	200006d8 	.word	0x200006d8
 800488c:	200006e4 	.word	0x200006e4
 8004890:	200006e8 	.word	0x200006e8
 8004894:	200006ec 	.word	0x200006ec
 8004898:	200006dc 	.word	0x200006dc
 800489c:	200006e0 	.word	0x200006e0
 80048a0:	2000076c 	.word	0x2000076c
 80048a4:	20000770 	.word	0x20000770
 80048a8:	20000774 	.word	0x20000774

080048ac <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80048b2:	4b21      	ldr	r3, [pc, #132]	; (8004938 <_tx_thread_shell_entry+0x8c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048c0:	4610      	mov	r0, r2
 80048c2:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80048c4:	4b1d      	ldr	r3, [pc, #116]	; (800493c <_tx_thread_shell_entry+0x90>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <_tx_thread_shell_entry+0x90>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69f8      	ldr	r0, [r7, #28]
 80048d2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80048d4:	f3ef 8310 	mrs	r3, PRIMASK
 80048d8:	607b      	str	r3, [r7, #4]
    return(posture);
 80048da:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80048dc:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80048de:	b672      	cpsid	i
    return(int_posture);
 80048e0:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80048e2:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	2201      	movs	r2, #1
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	2201      	movs	r2, #1
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	2200      	movs	r2, #0
 80048f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <_tx_thread_shell_entry+0x94>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3301      	adds	r3, #1
 80048fc:	4a10      	ldr	r2, [pc, #64]	; (8004940 <_tx_thread_shell_entry+0x94>)
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f383 8810 	msr	PRIMASK, r3
}
 800490a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800490c:	f3ef 8314 	mrs	r3, CONTROL
 8004910:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8004912:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 0304 	bic.w	r3, r3, #4
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f383 8814 	msr	CONTROL, r3
}
 8004928:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800492a:	69f8      	ldr	r0, [r7, #28]
 800492c:	f000 f944 	bl	8004bb8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004930:	bf00      	nop
 8004932:	3720      	adds	r7, #32
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	200006d4 	.word	0x200006d4
 800493c:	20000770 	.word	0x20000770
 8004940:	2000076c 	.word	0x2000076c

08004944 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8004944:	b480      	push	{r7}
 8004946:	b089      	sub	sp, #36	; 0x24
 8004948:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800494a:	4b17      	ldr	r3, [pc, #92]	; (80049a8 <_tx_thread_system_preempt_check+0x64>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d121      	bne.n	800499a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8004956:	4b15      	ldr	r3, [pc, #84]	; (80049ac <_tx_thread_system_preempt_check+0x68>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800495c:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <_tx_thread_system_preempt_check+0x6c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	429a      	cmp	r2, r3
 8004968:	d017      	beq.n	800499a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <_tx_thread_system_preempt_check+0x70>)
 800496c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004970:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004972:	f3ef 8305 	mrs	r3, IPSR
 8004976:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004978:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10c      	bne.n	8004998 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800497e:	f3ef 8310 	mrs	r3, PRIMASK
 8004982:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004984:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8004986:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004988:	b662      	cpsie	i
}
 800498a:	bf00      	nop
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f383 8810 	msr	PRIMASK, r3
}
 8004996:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8004998:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800499a:	bf00      	nop
 800499c:	3724      	adds	r7, #36	; 0x24
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	2000076c 	.word	0x2000076c
 80049ac:	200006d4 	.word	0x200006d4
 80049b0:	200006d8 	.word	0x200006d8
 80049b4:	e000ed04 	.word	0xe000ed04

080049b8 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b096      	sub	sp, #88	; 0x58
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80049c0:	f3ef 8310 	mrs	r3, PRIMASK
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80049c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80049c8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80049ca:	b672      	cpsid	i
    return(int_posture);
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80049ce:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	334c      	adds	r3, #76	; 0x4c
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fb91 	bl	8005104 <_tx_timer_system_deactivate>
 80049e2:	e002      	b.n	80049ea <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80049ea:	4b6c      	ldr	r3, [pc, #432]	; (8004b9c <_tx_thread_system_resume+0x1e4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	4a6a      	ldr	r2, [pc, #424]	; (8004b9c <_tx_thread_system_resume+0x1e4>)
 80049f2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 8083 	bne.w	8004b04 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 8097 	beq.w	8004b36 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d172      	bne.n	8004af6 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8004a1c:	4a60      	ldr	r2, [pc, #384]	; (8004ba0 <_tx_thread_system_resume+0x1e8>)
 8004a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a24:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8004a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d154      	bne.n	8004ad6 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8004a2c:	495c      	ldr	r1, [pc, #368]	; (8004ba0 <_tx_thread_system_resume+0x1e8>)
 8004a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8004a42:	2201      	movs	r2, #1
 8004a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8004a4c:	4b55      	ldr	r3, [pc, #340]	; (8004ba4 <_tx_thread_system_resume+0x1ec>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a52:	4313      	orrs	r3, r2
 8004a54:	4a53      	ldr	r2, [pc, #332]	; (8004ba4 <_tx_thread_system_resume+0x1ec>)
 8004a56:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8004a58:	4b53      	ldr	r3, [pc, #332]	; (8004ba8 <_tx_thread_system_resume+0x1f0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d269      	bcs.n	8004b36 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8004a62:	4a51      	ldr	r2, [pc, #324]	; (8004ba8 <_tx_thread_system_resume+0x1f0>)
 8004a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a66:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8004a68:	4b50      	ldr	r3, [pc, #320]	; (8004bac <_tx_thread_system_resume+0x1f4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8004a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d103      	bne.n	8004a7c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8004a74:	4a4d      	ldr	r2, [pc, #308]	; (8004bac <_tx_thread_system_resume+0x1f4>)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e05c      	b.n	8004b36 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8004a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d257      	bcs.n	8004b36 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8004a86:	4a49      	ldr	r2, [pc, #292]	; (8004bac <_tx_thread_system_resume+0x1f4>)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a92:	f383 8810 	msr	PRIMASK, r3
}
 8004a96:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004a98:	4b40      	ldr	r3, [pc, #256]	; (8004b9c <_tx_thread_system_resume+0x1e4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8004a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d174      	bne.n	8004b8e <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004aa4:	4b42      	ldr	r3, [pc, #264]	; (8004bb0 <_tx_thread_system_resume+0x1f8>)
 8004aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aaa:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004aac:	f3ef 8305 	mrs	r3, IPSR
 8004ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10c      	bne.n	8004ad2 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8004ac0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004ac2:	b662      	cpsie	i
}
 8004ac4:	bf00      	nop
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f383 8810 	msr	PRIMASK, r3
}
 8004ad0:	bf00      	nop
}
 8004ad2:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8004ad4:	e05b      	b.n	8004b8e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8004ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8004adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8004ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004af2:	621a      	str	r2, [r3, #32]
 8004af4:	e01f      	b.n	8004b36 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2203      	movs	r2, #3
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30
 8004b02:	e018      	b.n	8004b36 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d014      	beq.n	8004b36 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d010      	beq.n	8004b36 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
 8004b28:	e005      	b.n	8004b36 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2203      	movs	r2, #3
 8004b34:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004b36:	4b1f      	ldr	r3, [pc, #124]	; (8004bb4 <_tx_thread_system_resume+0x1fc>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f383 8810 	msr	PRIMASK, r3
}
 8004b46:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004b48:	4b18      	ldr	r3, [pc, #96]	; (8004bac <_tx_thread_system_resume+0x1f4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d020      	beq.n	8004b94 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004b52:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <_tx_thread_system_resume+0x1e4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8004b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d11a      	bne.n	8004b94 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004b5e:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <_tx_thread_system_resume+0x1f8>)
 8004b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b64:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004b66:	f3ef 8305 	mrs	r3, IPSR
 8004b6a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004b6c:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10f      	bne.n	8004b92 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b72:	f3ef 8310 	mrs	r3, PRIMASK
 8004b76:	613b      	str	r3, [r7, #16]
    return(posture);
 8004b78:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8004b7a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004b7c:	b662      	cpsie	i
}
 8004b7e:	bf00      	nop
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f383 8810 	msr	PRIMASK, r3
}
 8004b8a:	bf00      	nop
}
 8004b8c:	e001      	b.n	8004b92 <_tx_thread_system_resume+0x1da>
                                return;
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <_tx_thread_system_resume+0x1dc>
 8004b92:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8004b94:	3758      	adds	r7, #88	; 0x58
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	2000076c 	.word	0x2000076c
 8004ba0:	200006ec 	.word	0x200006ec
 8004ba4:	200006e4 	.word	0x200006e4
 8004ba8:	200006e8 	.word	0x200006e8
 8004bac:	200006d8 	.word	0x200006d8
 8004bb0:	e000ed04 	.word	0xe000ed04
 8004bb4:	200006d4 	.word	0x200006d4

08004bb8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b09e      	sub	sp, #120	; 0x78
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004bc0:	4b81      	ldr	r3, [pc, #516]	; (8004dc8 <_tx_thread_system_suspend+0x210>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004bca:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8004bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8004bce:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8004bd0:	b672      	cpsid	i
    return(int_posture);
 8004bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8004bd4:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d112      	bne.n	8004c04 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be2:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d008      	beq.n	8004bfc <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8004bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d004      	beq.n	8004bfc <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	334c      	adds	r3, #76	; 0x4c
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fa22 	bl	8005040 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	4a72      	ldr	r2, [pc, #456]	; (8004dcc <_tx_thread_system_suspend+0x214>)
 8004c02:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004c04:	4b72      	ldr	r3, [pc, #456]	; (8004dd0 <_tx_thread_system_suspend+0x218>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	4a71      	ldr	r2, [pc, #452]	; (8004dd0 <_tx_thread_system_suspend+0x218>)
 8004c0c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	f040 80a6 	bne.w	8004d64 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8004c2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d015      	beq.n	8004c5e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8004c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8004c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c42:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8004c44:	4a63      	ldr	r2, [pc, #396]	; (8004dd4 <_tx_thread_system_suspend+0x21c>)
 8004c46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d157      	bne.n	8004d02 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8004c52:	4960      	ldr	r1, [pc, #384]	; (8004dd4 <_tx_thread_system_suspend+0x21c>)
 8004c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c5c:	e051      	b.n	8004d02 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8004c5e:	4a5d      	ldr	r2, [pc, #372]	; (8004dd4 <_tx_thread_system_suspend+0x21c>)
 8004c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c62:	2100      	movs	r1, #0
 8004c64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8004c72:	4b59      	ldr	r3, [pc, #356]	; (8004dd8 <_tx_thread_system_suspend+0x220>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	4a56      	ldr	r2, [pc, #344]	; (8004dd8 <_tx_thread_system_suspend+0x220>)
 8004c7e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8004c80:	2300      	movs	r3, #0
 8004c82:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8004c84:	4b54      	ldr	r3, [pc, #336]	; (8004dd8 <_tx_thread_system_suspend+0x220>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8004c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d12b      	bne.n	8004ce8 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004c90:	4b52      	ldr	r3, [pc, #328]	; (8004ddc <_tx_thread_system_suspend+0x224>)
 8004c92:	2220      	movs	r2, #32
 8004c94:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8004c96:	4b52      	ldr	r3, [pc, #328]	; (8004de0 <_tx_thread_system_suspend+0x228>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c9e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca2:	f383 8810 	msr	PRIMASK, r3
}
 8004ca6:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004ca8:	4b49      	ldr	r3, [pc, #292]	; (8004dd0 <_tx_thread_system_suspend+0x218>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8004cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 8081 	bne.w	8004db8 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004cb6:	4b4b      	ldr	r3, [pc, #300]	; (8004de4 <_tx_thread_system_suspend+0x22c>)
 8004cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cbc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004cbe:	f3ef 8305 	mrs	r3, IPSR
 8004cc2:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8004cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10c      	bne.n	8004ce4 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004cca:	f3ef 8310 	mrs	r3, PRIMASK
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8004cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8004cd2:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004cd4:	b662      	cpsie	i
}
 8004cd6:	bf00      	nop
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cde:	f383 8810 	msr	PRIMASK, r3
}
 8004ce2:	bf00      	nop
}
 8004ce4:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8004ce6:	e067      	b.n	8004db8 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8004ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cf2:	fab3 f383 	clz	r3, r3
 8004cf6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8004cf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cfc:	4413      	add	r3, r2
 8004cfe:	4a37      	ldr	r2, [pc, #220]	; (8004ddc <_tx_thread_system_suspend+0x224>)
 8004d00:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8004d02:	4b37      	ldr	r3, [pc, #220]	; (8004de0 <_tx_thread_system_suspend+0x228>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d12b      	bne.n	8004d64 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004d0c:	4b33      	ldr	r3, [pc, #204]	; (8004ddc <_tx_thread_system_suspend+0x224>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a30      	ldr	r2, [pc, #192]	; (8004dd4 <_tx_thread_system_suspend+0x21c>)
 8004d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d16:	4a32      	ldr	r2, [pc, #200]	; (8004de0 <_tx_thread_system_suspend+0x228>)
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	f383 8810 	msr	PRIMASK, r3
}
 8004d24:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004d26:	4b2a      	ldr	r3, [pc, #168]	; (8004dd0 <_tx_thread_system_suspend+0x218>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8004d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d144      	bne.n	8004dbc <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004d32:	4b2c      	ldr	r3, [pc, #176]	; (8004de4 <_tx_thread_system_suspend+0x22c>)
 8004d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d38:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004d3a:	f3ef 8305 	mrs	r3, IPSR
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10c      	bne.n	8004d60 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d46:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004d50:	b662      	cpsie	i
}
 8004d52:	bf00      	nop
 8004d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d56:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	f383 8810 	msr	PRIMASK, r3
}
 8004d5e:	bf00      	nop
}
 8004d60:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8004d62:	e02b      	b.n	8004dbc <_tx_thread_system_suspend+0x204>
 8004d64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d66:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004d70:	4b1b      	ldr	r3, [pc, #108]	; (8004de0 <_tx_thread_system_suspend+0x228>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d022      	beq.n	8004dc0 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <_tx_thread_system_suspend+0x218>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8004d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d11c      	bne.n	8004dc0 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004d86:	4b17      	ldr	r3, [pc, #92]	; (8004de4 <_tx_thread_system_suspend+0x22c>)
 8004d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d8c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004d8e:	f3ef 8305 	mrs	r3, IPSR
 8004d92:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8004d94:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10c      	bne.n	8004db4 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d9e:	617b      	str	r3, [r7, #20]
    return(posture);
 8004da0:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8004da2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004da4:	b662      	cpsie	i
}
 8004da6:	bf00      	nop
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f383 8810 	msr	PRIMASK, r3
}
 8004db2:	bf00      	nop
}
 8004db4:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8004db6:	e003      	b.n	8004dc0 <_tx_thread_system_suspend+0x208>
                return;
 8004db8:	bf00      	nop
 8004dba:	e002      	b.n	8004dc2 <_tx_thread_system_suspend+0x20a>
            return;
 8004dbc:	bf00      	nop
 8004dbe:	e000      	b.n	8004dc2 <_tx_thread_system_suspend+0x20a>
    return;
 8004dc0:	bf00      	nop
}
 8004dc2:	3778      	adds	r7, #120	; 0x78
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	200006d4 	.word	0x200006d4
 8004dcc:	20000cd8 	.word	0x20000cd8
 8004dd0:	2000076c 	.word	0x2000076c
 8004dd4:	200006ec 	.word	0x200006ec
 8004dd8:	200006e4 	.word	0x200006e4
 8004ddc:	200006e8 	.word	0x200006e8
 8004de0:	200006d8 	.word	0x200006d8
 8004de4:	e000ed04 	.word	0xe000ed04

08004de8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004dee:	4b21      	ldr	r3, [pc, #132]	; (8004e74 <_tx_thread_time_slice+0x8c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004df4:	f3ef 8310 	mrs	r3, PRIMASK
 8004df8:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8004dfc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004dfe:	b672      	cpsid	i
    return(int_posture);
 8004e00:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8004e02:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004e04:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <_tx_thread_time_slice+0x90>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d024      	beq.n	8004e5a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d120      	bne.n	8004e5a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <_tx_thread_time_slice+0x94>)
 8004e26:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d013      	beq.n	8004e5a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d10d      	bne.n	8004e5a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	6a12      	ldr	r2, [r2, #32]
 8004e46:	490e      	ldr	r1, [pc, #56]	; (8004e80 <_tx_thread_time_slice+0x98>)
 8004e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <_tx_thread_time_slice+0x9c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a0b      	ldr	r2, [pc, #44]	; (8004e80 <_tx_thread_time_slice+0x98>)
 8004e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e56:	4a0c      	ldr	r2, [pc, #48]	; (8004e88 <_tx_thread_time_slice+0xa0>)
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	200006d4 	.word	0x200006d4
 8004e78:	2000077c 	.word	0x2000077c
 8004e7c:	20000cd8 	.word	0x20000cd8
 8004e80:	200006ec 	.word	0x200006ec
 8004e84:	200006e8 	.word	0x200006e8
 8004e88:	200006d8 	.word	0x200006d8

08004e8c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08a      	sub	sp, #40	; 0x28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004e98:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9c:	617b      	str	r3, [r7, #20]
    return(posture);
 8004e9e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8004ea0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004ea2:	b672      	cpsid	i
    return(int_posture);
 8004ea4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8004ea6:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d10e      	bne.n	8004ece <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8004eb0:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <_tx_thread_timeout+0x74>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	4a12      	ldr	r2, [pc, #72]	; (8004f00 <_tx_thread_timeout+0x74>)
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f383 8810 	msr	PRIMASK, r3
}
 8004ec4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8004ec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ec8:	f7ff fd76 	bl	80049b8 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8004ecc:	e013      	b.n	8004ef6 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed2:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f383 8810 	msr	PRIMASK, r3
}
 8004ee6:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	69b9      	ldr	r1, [r7, #24]
 8004ef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ef4:	4798      	blx	r3
}
 8004ef6:	bf00      	nop
 8004ef8:	3728      	adds	r7, #40	; 0x28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	2000076c 	.word	0x2000076c

08004f04 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f0e:	607b      	str	r3, [r7, #4]
    return(posture);
 8004f10:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8004f12:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004f14:	b672      	cpsid	i
    return(int_posture);
 8004f16:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8004f18:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <_tx_timer_expiration_process+0x3c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	4a07      	ldr	r2, [pc, #28]	; (8004f40 <_tx_timer_expiration_process+0x3c>)
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f383 8810 	msr	PRIMASK, r3
}
 8004f2e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8004f30:	4804      	ldr	r0, [pc, #16]	; (8004f44 <_tx_timer_expiration_process+0x40>)
 8004f32:	f7ff fd41 	bl	80049b8 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000076c 	.word	0x2000076c
 8004f44:	2000081c 	.word	0x2000081c

08004f48 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b089      	sub	sp, #36	; 0x24
 8004f4c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8004f4e:	4b28      	ldr	r3, [pc, #160]	; (8004ff0 <_tx_timer_initialize+0xa8>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8004f54:	4b27      	ldr	r3, [pc, #156]	; (8004ff4 <_tx_timer_initialize+0xac>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004f5a:	4b27      	ldr	r3, [pc, #156]	; (8004ff8 <_tx_timer_initialize+0xb0>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8004f60:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <_tx_timer_initialize+0xb4>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8004f66:	4b26      	ldr	r3, [pc, #152]	; (8005000 <_tx_timer_initialize+0xb8>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8004f6c:	2280      	movs	r2, #128	; 0x80
 8004f6e:	2100      	movs	r1, #0
 8004f70:	4824      	ldr	r0, [pc, #144]	; (8005004 <_tx_timer_initialize+0xbc>)
 8004f72:	f000 fc03 	bl	800577c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8004f76:	4b24      	ldr	r3, [pc, #144]	; (8005008 <_tx_timer_initialize+0xc0>)
 8004f78:	4a22      	ldr	r2, [pc, #136]	; (8005004 <_tx_timer_initialize+0xbc>)
 8004f7a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8004f7c:	4b23      	ldr	r3, [pc, #140]	; (800500c <_tx_timer_initialize+0xc4>)
 8004f7e:	4a21      	ldr	r2, [pc, #132]	; (8005004 <_tx_timer_initialize+0xbc>)
 8004f80:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8004f82:	4b23      	ldr	r3, [pc, #140]	; (8005010 <_tx_timer_initialize+0xc8>)
 8004f84:	4a23      	ldr	r2, [pc, #140]	; (8005014 <_tx_timer_initialize+0xcc>)
 8004f86:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8004f88:	4b21      	ldr	r3, [pc, #132]	; (8005010 <_tx_timer_initialize+0xc8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4a20      	ldr	r2, [pc, #128]	; (8005010 <_tx_timer_initialize+0xc8>)
 8004f90:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8004f92:	4b21      	ldr	r3, [pc, #132]	; (8005018 <_tx_timer_initialize+0xd0>)
 8004f94:	4a21      	ldr	r2, [pc, #132]	; (800501c <_tx_timer_initialize+0xd4>)
 8004f96:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8004f98:	4b21      	ldr	r3, [pc, #132]	; (8005020 <_tx_timer_initialize+0xd8>)
 8004f9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f9e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8004fa0:	4b20      	ldr	r3, [pc, #128]	; (8005024 <_tx_timer_initialize+0xdc>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8004fa6:	4b1c      	ldr	r3, [pc, #112]	; (8005018 <_tx_timer_initialize+0xd0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1d      	ldr	r2, [pc, #116]	; (8005020 <_tx_timer_initialize+0xd8>)
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	491d      	ldr	r1, [pc, #116]	; (8005024 <_tx_timer_initialize+0xdc>)
 8004fb0:	6809      	ldr	r1, [r1, #0]
 8004fb2:	481c      	ldr	r0, [pc, #112]	; (8005024 <_tx_timer_initialize+0xdc>)
 8004fb4:	6800      	ldr	r0, [r0, #0]
 8004fb6:	2400      	movs	r4, #0
 8004fb8:	9405      	str	r4, [sp, #20]
 8004fba:	2400      	movs	r4, #0
 8004fbc:	9404      	str	r4, [sp, #16]
 8004fbe:	9003      	str	r0, [sp, #12]
 8004fc0:	9102      	str	r1, [sp, #8]
 8004fc2:	9201      	str	r2, [sp, #4]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	4b18      	ldr	r3, [pc, #96]	; (8005028 <_tx_timer_initialize+0xe0>)
 8004fc8:	4a18      	ldr	r2, [pc, #96]	; (800502c <_tx_timer_initialize+0xe4>)
 8004fca:	4919      	ldr	r1, [pc, #100]	; (8005030 <_tx_timer_initialize+0xe8>)
 8004fcc:	4819      	ldr	r0, [pc, #100]	; (8005034 <_tx_timer_initialize+0xec>)
 8004fce:	f7ff fb3b 	bl	8004648 <_tx_thread_create>
 8004fd2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e5      	bne.n	8004fa6 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8004fda:	4b17      	ldr	r3, [pc, #92]	; (8005038 <_tx_timer_initialize+0xf0>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8004fe0:	4b16      	ldr	r3, [pc, #88]	; (800503c <_tx_timer_initialize+0xf4>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd90      	pop	{r4, r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000778 	.word	0x20000778
 8004ff4:	20000cd8 	.word	0x20000cd8
 8004ff8:	2000077c 	.word	0x2000077c
 8004ffc:	2000080c 	.word	0x2000080c
 8005000:	20000818 	.word	0x20000818
 8005004:	20000780 	.word	0x20000780
 8005008:	20000800 	.word	0x20000800
 800500c:	20000808 	.word	0x20000808
 8005010:	20000804 	.word	0x20000804
 8005014:	200007fc 	.word	0x200007fc
 8005018:	200008cc 	.word	0x200008cc
 800501c:	200008d8 	.word	0x200008d8
 8005020:	200008d0 	.word	0x200008d0
 8005024:	200008d4 	.word	0x200008d4
 8005028:	4154494d 	.word	0x4154494d
 800502c:	08005175 	.word	0x08005175
 8005030:	08005810 	.word	0x08005810
 8005034:	2000081c 	.word	0x2000081c
 8005038:	20000810 	.word	0x20000810
 800503c:	20000814 	.word	0x20000814

08005040 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005040:	b480      	push	{r7}
 8005042:	b089      	sub	sp, #36	; 0x24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d04a      	beq.n	80050ea <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505a:	d046      	beq.n	80050ea <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d142      	bne.n	80050ea <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b20      	cmp	r3, #32
 8005068:	d902      	bls.n	8005070 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800506a:	231f      	movs	r3, #31
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	e002      	b.n	8005076 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	3b01      	subs	r3, #1
 8005074:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8005076:	4b20      	ldr	r3, [pc, #128]	; (80050f8 <_tx_timer_system_activate+0xb8>)
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8005082:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <_tx_timer_system_activate+0xbc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	429a      	cmp	r2, r3
 800508a:	d30b      	bcc.n	80050a4 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800508c:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <_tx_timer_system_activate+0xbc>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	109b      	asrs	r3, r3, #2
 8005096:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8005098:	4b19      	ldr	r3, [pc, #100]	; (8005100 <_tx_timer_system_activate+0xc0>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d109      	bne.n	80050c0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e011      	b.n	80050e4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80050ea:	bf00      	nop
 80050ec:	3724      	adds	r7, #36	; 0x24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20000808 	.word	0x20000808
 80050fc:	20000804 	.word	0x20000804
 8005100:	20000800 	.word	0x20000800

08005104 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d026      	beq.n	8005166 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	429a      	cmp	r2, r3
 8005124:	d108      	bne.n	8005138 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	d117      	bne.n	8005160 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e013      	b.n	8005160 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d105      	bne.n	8005160 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	619a      	str	r2, [r3, #24]
    }
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
	...

08005174 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b098      	sub	sp, #96	; 0x60
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800517c:	2300      	movs	r3, #0
 800517e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a73      	ldr	r2, [pc, #460]	; (8005350 <_tx_timer_thread_entry+0x1dc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	f040 80de 	bne.w	8005346 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800518a:	f3ef 8310 	mrs	r3, PRIMASK
 800518e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8005190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8005194:	b672      	cpsid	i
    return(int_posture);
 8005196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8005198:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800519a:	4b6e      	ldr	r3, [pc, #440]	; (8005354 <_tx_timer_thread_entry+0x1e0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f107 020c 	add.w	r2, r7, #12
 80051ae:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80051b0:	4b68      	ldr	r3, [pc, #416]	; (8005354 <_tx_timer_thread_entry+0x1e0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80051b8:	4b66      	ldr	r3, [pc, #408]	; (8005354 <_tx_timer_thread_entry+0x1e0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3304      	adds	r3, #4
 80051be:	4a65      	ldr	r2, [pc, #404]	; (8005354 <_tx_timer_thread_entry+0x1e0>)
 80051c0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80051c2:	4b64      	ldr	r3, [pc, #400]	; (8005354 <_tx_timer_thread_entry+0x1e0>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b64      	ldr	r3, [pc, #400]	; (8005358 <_tx_timer_thread_entry+0x1e4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d103      	bne.n	80051d6 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80051ce:	4b63      	ldr	r3, [pc, #396]	; (800535c <_tx_timer_thread_entry+0x1e8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a60      	ldr	r2, [pc, #384]	; (8005354 <_tx_timer_thread_entry+0x1e0>)
 80051d4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80051d6:	4b62      	ldr	r3, [pc, #392]	; (8005360 <_tx_timer_thread_entry+0x1ec>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051de:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	f383 8810 	msr	PRIMASK, r3
}
 80051e6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80051e8:	f3ef 8310 	mrs	r3, PRIMASK
 80051ec:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80051f2:	b672      	cpsid	i
    return(int_posture);
 80051f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80051f6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80051f8:	e07f      	b.n	80052fa <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8005204:	2300      	movs	r3, #0
 8005206:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8005208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800520a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800520c:	429a      	cmp	r2, r3
 800520e:	d102      	bne.n	8005216 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e00e      	b.n	8005234 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8005216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800521c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800521e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005220:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005226:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8005228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800522a:	f107 020c 	add.w	r2, r7, #12
 800522e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8005230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005232:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8005234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b20      	cmp	r3, #32
 800523a:	d911      	bls.n	8005260 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800523c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8005244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005246:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800524c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800524e:	f107 0208 	add.w	r2, r7, #8
 8005252:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8005254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005258:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800525a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	e01a      	b.n	8005296 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8005266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800526c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005272:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8005274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d009      	beq.n	8005290 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800527c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527e:	f107 0208 	add.w	r2, r7, #8
 8005282:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8005284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005288:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800528a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	e002      	b.n	8005296 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8005290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005292:	2200      	movs	r2, #0
 8005294:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8005296:	4a33      	ldr	r2, [pc, #204]	; (8005364 <_tx_timer_thread_entry+0x1f0>)
 8005298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	f383 8810 	msr	PRIMASK, r3
}
 80052a6:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80052a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80052ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80052b2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80052b4:	f3ef 8310 	mrs	r3, PRIMASK
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80052be:	b672      	cpsid	i
    return(int_posture);
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80052c2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80052c4:	4b27      	ldr	r3, [pc, #156]	; (8005364 <_tx_timer_thread_entry+0x1f0>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d105      	bne.n	80052de <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80052d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d4:	2200      	movs	r2, #0
 80052d6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80052d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80052da:	f7ff feb1 	bl	8005040 <_tx_timer_system_activate>
 80052de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80052ea:	f3ef 8310 	mrs	r3, PRIMASK
 80052ee:	623b      	str	r3, [r7, #32]
    return(posture);
 80052f0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80052f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80052f4:	b672      	cpsid	i
    return(int_posture);
 80052f6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80052f8:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f47f af7c 	bne.w	80051fa <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <_tx_timer_thread_entry+0x1ec>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d116      	bne.n	8005338 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <_tx_timer_thread_entry+0x1f4>)
 800530c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800530e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005310:	2203      	movs	r2, #3
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005316:	2201      	movs	r2, #1
 8005318:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800531a:	4b14      	ldr	r3, [pc, #80]	; (800536c <_tx_timer_thread_entry+0x1f8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	4a12      	ldr	r2, [pc, #72]	; (800536c <_tx_timer_thread_entry+0x1f8>)
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005326:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f383 8810 	msr	PRIMASK, r3
}
 800532e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005330:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005332:	f7ff fc41 	bl	8004bb8 <_tx_thread_system_suspend>
 8005336:	e728      	b.n	800518a <_tx_timer_thread_entry+0x16>
 8005338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800533a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	f383 8810 	msr	PRIMASK, r3
}
 8005342:	bf00      	nop
            TX_DISABLE
 8005344:	e721      	b.n	800518a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8005346:	bf00      	nop
 8005348:	3760      	adds	r7, #96	; 0x60
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	4154494d 	.word	0x4154494d
 8005354:	20000808 	.word	0x20000808
 8005358:	20000804 	.word	0x20000804
 800535c:	20000800 	.word	0x20000800
 8005360:	2000080c 	.word	0x2000080c
 8005364:	20000818 	.word	0x20000818
 8005368:	2000081c 	.word	0x2000081c
 800536c:	2000076c 	.word	0x2000076c

08005370 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	; 0x28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800537e:	2300      	movs	r3, #0
 8005380:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005388:	2302      	movs	r3, #2
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
 800538c:	e029      	b.n	80053e2 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2d      	ldr	r2, [pc, #180]	; (8005448 <_txe_byte_allocate+0xd8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d002      	beq.n	800539e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005398:	2302      	movs	r3, #2
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
 800539c:	e021      	b.n	80053e2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80053a4:	2303      	movs	r3, #3
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
 80053a8:	e01b      	b.n	80053e2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80053b0:	2305      	movs	r3, #5
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
 80053b4:	e015      	b.n	80053e2 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d902      	bls.n	80053c6 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80053c0:	2305      	movs	r3, #5
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
 80053c4:	e00d      	b.n	80053e2 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80053cc:	f3ef 8305 	mrs	r3, IPSR
 80053d0:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80053d2:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80053d4:	4b1d      	ldr	r3, [pc, #116]	; (800544c <_txe_byte_allocate+0xdc>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4313      	orrs	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80053de:	2304      	movs	r3, #4
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d108      	bne.n	80053fa <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80053e8:	4b19      	ldr	r3, [pc, #100]	; (8005450 <_txe_byte_allocate+0xe0>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	4a18      	ldr	r2, [pc, #96]	; (8005454 <_txe_byte_allocate+0xe4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d101      	bne.n	80053fa <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80053f6:	2313      	movs	r3, #19
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d114      	bne.n	800542a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005400:	f3ef 8305 	mrs	r3, IPSR
 8005404:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005406:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005408:	4b10      	ldr	r3, [pc, #64]	; (800544c <_txe_byte_allocate+0xdc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4313      	orrs	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005412:	f3ef 8305 	mrs	r3, IPSR
 8005416:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005418:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <_txe_byte_allocate+0xdc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4313      	orrs	r3, r2
 8005420:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005424:	d201      	bcs.n	800542a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005426:	2313      	movs	r3, #19
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	d106      	bne.n	800543e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7fe fdb2 	bl	8003fa0 <_tx_byte_allocate>
 800543c:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005440:	4618      	mov	r0, r3
 8005442:	3728      	adds	r7, #40	; 0x28
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	42595445 	.word	0x42595445
 800544c:	2000000c 	.word	0x2000000c
 8005450:	200006d4 	.word	0x200006d4
 8005454:	2000081c 	.word	0x2000081c

08005458 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b092      	sub	sp, #72	; 0x48
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005466:	2300      	movs	r3, #0
 8005468:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d102      	bne.n	8005476 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005470:	2302      	movs	r3, #2
 8005472:	647b      	str	r3, [r7, #68]	; 0x44
 8005474:	e075      	b.n	8005562 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8005476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005478:	2b34      	cmp	r3, #52	; 0x34
 800547a:	d002      	beq.n	8005482 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800547c:	2302      	movs	r3, #2
 800547e:	647b      	str	r3, [r7, #68]	; 0x44
 8005480:	e06f      	b.n	8005562 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005482:	f3ef 8310 	mrs	r3, PRIMASK
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800548c:	b672      	cpsid	i
    return(int_posture);
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005490:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005492:	4b3b      	ldr	r3, [pc, #236]	; (8005580 <_txe_byte_pool_create+0x128>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	4a39      	ldr	r2, [pc, #228]	; (8005580 <_txe_byte_pool_create+0x128>)
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	f383 8810 	msr	PRIMASK, r3
}
 80054a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80054a8:	4b36      	ldr	r3, [pc, #216]	; (8005584 <_txe_byte_pool_create+0x12c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80054ae:	2300      	movs	r3, #0
 80054b0:	643b      	str	r3, [r7, #64]	; 0x40
 80054b2:	e009      	b.n	80054c8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d00b      	beq.n	80054d4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80054bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80054c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c4:	3301      	adds	r3, #1
 80054c6:	643b      	str	r3, [r7, #64]	; 0x40
 80054c8:	4b2f      	ldr	r3, [pc, #188]	; (8005588 <_txe_byte_pool_create+0x130>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d3f0      	bcc.n	80054b4 <_txe_byte_pool_create+0x5c>
 80054d2:	e000      	b.n	80054d6 <_txe_byte_pool_create+0x7e>
                break;
 80054d4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80054d6:	f3ef 8310 	mrs	r3, PRIMASK
 80054da:	623b      	str	r3, [r7, #32]
    return(posture);
 80054dc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80054de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80054e0:	b672      	cpsid	i
    return(int_posture);
 80054e2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80054e4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80054e6:	4b26      	ldr	r3, [pc, #152]	; (8005580 <_txe_byte_pool_create+0x128>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	4a24      	ldr	r2, [pc, #144]	; (8005580 <_txe_byte_pool_create+0x128>)
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	f383 8810 	msr	PRIMASK, r3
}
 80054fa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80054fc:	f7ff fa22 	bl	8004944 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005504:	429a      	cmp	r2, r3
 8005506:	d102      	bne.n	800550e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8005508:	2302      	movs	r3, #2
 800550a:	647b      	str	r3, [r7, #68]	; 0x44
 800550c:	e029      	b.n	8005562 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8005514:	2303      	movs	r3, #3
 8005516:	647b      	str	r3, [r7, #68]	; 0x44
 8005518:	e023      	b.n	8005562 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b63      	cmp	r3, #99	; 0x63
 800551e:	d802      	bhi.n	8005526 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8005520:	2305      	movs	r3, #5
 8005522:	647b      	str	r3, [r7, #68]	; 0x44
 8005524:	e01d      	b.n	8005562 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005526:	4b19      	ldr	r3, [pc, #100]	; (800558c <_txe_byte_pool_create+0x134>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	4a18      	ldr	r2, [pc, #96]	; (8005590 <_txe_byte_pool_create+0x138>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d101      	bne.n	8005538 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005534:	2313      	movs	r3, #19
 8005536:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005538:	f3ef 8305 	mrs	r3, IPSR
 800553c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800553e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005540:	4b14      	ldr	r3, [pc, #80]	; (8005594 <_txe_byte_pool_create+0x13c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4313      	orrs	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00b      	beq.n	8005562 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800554a:	f3ef 8305 	mrs	r3, IPSR
 800554e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005550:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005552:	4b10      	ldr	r3, [pc, #64]	; (8005594 <_txe_byte_pool_create+0x13c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4313      	orrs	r3, r2
 8005558:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800555c:	d201      	bcs.n	8005562 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800555e:	2313      	movs	r3, #19
 8005560:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f7fe fe58 	bl	8004224 <_tx_byte_pool_create>
 8005574:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8005576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005578:	4618      	mov	r0, r3
 800557a:	3748      	adds	r7, #72	; 0x48
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	2000076c 	.word	0x2000076c
 8005584:	200006c4 	.word	0x200006c4
 8005588:	200006c8 	.word	0x200006c8
 800558c:	200006d4 	.word	0x200006d4
 8005590:	2000081c 	.word	0x2000081c
 8005594:	2000000c 	.word	0x2000000c

08005598 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b09a      	sub	sp, #104	; 0x68
 800559c:	af06      	add	r7, sp, #24
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80055a6:	2300      	movs	r3, #0
 80055a8:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80055b0:	230e      	movs	r3, #14
 80055b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b4:	e0bb      	b.n	800572e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80055b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b8:	2bb0      	cmp	r3, #176	; 0xb0
 80055ba:	d002      	beq.n	80055c2 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80055bc:	230e      	movs	r3, #14
 80055be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c0:	e0b5      	b.n	800572e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80055c2:	f3ef 8310 	mrs	r3, PRIMASK
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80055cc:	b672      	cpsid	i
    return(int_posture);
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80055d0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80055d2:	4b64      	ldr	r3, [pc, #400]	; (8005764 <_txe_thread_create+0x1cc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3301      	adds	r3, #1
 80055d8:	4a62      	ldr	r2, [pc, #392]	; (8005764 <_txe_thread_create+0x1cc>)
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80055e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e2:	f383 8810 	msr	PRIMASK, r3
}
 80055e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80055ec:	4b5e      	ldr	r3, [pc, #376]	; (8005768 <_txe_thread_create+0x1d0>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80055f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055f4:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80055f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f8:	3b01      	subs	r3, #1
 80055fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055fc:	4413      	add	r3, r2
 80055fe:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005604:	2300      	movs	r3, #0
 8005606:	647b      	str	r3, [r7, #68]	; 0x44
 8005608:	e02b      	b.n	8005662 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800560e:	429a      	cmp	r2, r3
 8005610:	d101      	bne.n	8005616 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8005612:	2301      	movs	r3, #1
 8005614:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8005616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005618:	2b01      	cmp	r3, #1
 800561a:	d028      	beq.n	800566e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800561c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005622:	429a      	cmp	r2, r3
 8005624:	d308      	bcc.n	8005638 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8005626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800562c:	429a      	cmp	r2, r3
 800562e:	d203      	bcs.n	8005638 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005634:	2301      	movs	r3, #1
 8005636:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8005638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800563e:	429a      	cmp	r2, r3
 8005640:	d308      	bcc.n	8005654 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8005642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005648:	429a      	cmp	r2, r3
 800564a:	d203      	bcs.n	8005654 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005650:	2301      	movs	r3, #1
 8005652:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8005654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800565c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565e:	3301      	adds	r3, #1
 8005660:	647b      	str	r3, [r7, #68]	; 0x44
 8005662:	4b42      	ldr	r3, [pc, #264]	; (800576c <_txe_thread_create+0x1d4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005668:	429a      	cmp	r2, r3
 800566a:	d3ce      	bcc.n	800560a <_txe_thread_create+0x72>
 800566c:	e000      	b.n	8005670 <_txe_thread_create+0xd8>
                break;
 800566e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005670:	f3ef 8310 	mrs	r3, PRIMASK
 8005674:	61fb      	str	r3, [r7, #28]
    return(posture);
 8005676:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8005678:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800567a:	b672      	cpsid	i
    return(int_posture);
 800567c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005680:	4b38      	ldr	r3, [pc, #224]	; (8005764 <_txe_thread_create+0x1cc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3b01      	subs	r3, #1
 8005686:	4a37      	ldr	r2, [pc, #220]	; (8005764 <_txe_thread_create+0x1cc>)
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	f383 8810 	msr	PRIMASK, r3
}
 8005694:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005696:	f7ff f955 	bl	8004944 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800569e:	429a      	cmp	r2, r3
 80056a0:	d102      	bne.n	80056a8 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80056a2:	230e      	movs	r3, #14
 80056a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056a6:	e042      	b.n	800572e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80056a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80056ae:	2303      	movs	r3, #3
 80056b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b2:	e03c      	b.n	800572e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d102      	bne.n	80056c0 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80056ba:	2303      	movs	r3, #3
 80056bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056be:	e036      	b.n	800572e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80056c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c2:	2bc7      	cmp	r3, #199	; 0xc7
 80056c4:	d802      	bhi.n	80056cc <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80056c6:	2305      	movs	r3, #5
 80056c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ca:	e030      	b.n	800572e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80056cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056ce:	2b1f      	cmp	r3, #31
 80056d0:	d902      	bls.n	80056d8 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80056d2:	230f      	movs	r3, #15
 80056d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d6:	e02a      	b.n	800572e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80056d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80056da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056dc:	429a      	cmp	r2, r3
 80056de:	d902      	bls.n	80056e6 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80056e0:	2318      	movs	r3, #24
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e4:	e023      	b.n	800572e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80056e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d902      	bls.n	80056f2 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80056ec:	2310      	movs	r3, #16
 80056ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056f0:	e01d      	b.n	800572e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80056f2:	4b1f      	ldr	r3, [pc, #124]	; (8005770 <_txe_thread_create+0x1d8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	4a1e      	ldr	r2, [pc, #120]	; (8005774 <_txe_thread_create+0x1dc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d101      	bne.n	8005704 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005700:	2313      	movs	r3, #19
 8005702:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005704:	f3ef 8305 	mrs	r3, IPSR
 8005708:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800570a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800570c:	4b1a      	ldr	r3, [pc, #104]	; (8005778 <_txe_thread_create+0x1e0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4313      	orrs	r3, r2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00b      	beq.n	800572e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005716:	f3ef 8305 	mrs	r3, IPSR
 800571a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800571c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800571e:	4b16      	ldr	r3, [pc, #88]	; (8005778 <_txe_thread_create+0x1e0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4313      	orrs	r3, r2
 8005724:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005728:	d201      	bcs.n	800572e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800572a:	2313      	movs	r3, #19
 800572c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800572e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d112      	bne.n	800575a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8005734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005736:	9305      	str	r3, [sp, #20]
 8005738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800573a:	9304      	str	r3, [sp, #16]
 800573c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800573e:	9303      	str	r3, [sp, #12]
 8005740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005742:	9302      	str	r3, [sp, #8]
 8005744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7fe ff78 	bl	8004648 <_tx_thread_create>
 8005758:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800575a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800575c:	4618      	mov	r0, r3
 800575e:	3750      	adds	r7, #80	; 0x50
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	2000076c 	.word	0x2000076c
 8005768:	200006dc 	.word	0x200006dc
 800576c:	200006e0 	.word	0x200006e0
 8005770:	200006d4 	.word	0x200006d4
 8005774:	2000081c 	.word	0x2000081c
 8005778:	2000000c 	.word	0x2000000c

0800577c <memset>:
 800577c:	4402      	add	r2, r0
 800577e:	4603      	mov	r3, r0
 8005780:	4293      	cmp	r3, r2
 8005782:	d100      	bne.n	8005786 <memset+0xa>
 8005784:	4770      	bx	lr
 8005786:	f803 1b01 	strb.w	r1, [r3], #1
 800578a:	e7f9      	b.n	8005780 <memset+0x4>

0800578c <__libc_init_array>:
 800578c:	b570      	push	{r4, r5, r6, lr}
 800578e:	4d0d      	ldr	r5, [pc, #52]	; (80057c4 <__libc_init_array+0x38>)
 8005790:	4c0d      	ldr	r4, [pc, #52]	; (80057c8 <__libc_init_array+0x3c>)
 8005792:	1b64      	subs	r4, r4, r5
 8005794:	10a4      	asrs	r4, r4, #2
 8005796:	2600      	movs	r6, #0
 8005798:	42a6      	cmp	r6, r4
 800579a:	d109      	bne.n	80057b0 <__libc_init_array+0x24>
 800579c:	4d0b      	ldr	r5, [pc, #44]	; (80057cc <__libc_init_array+0x40>)
 800579e:	4c0c      	ldr	r4, [pc, #48]	; (80057d0 <__libc_init_array+0x44>)
 80057a0:	f000 f818 	bl	80057d4 <_init>
 80057a4:	1b64      	subs	r4, r4, r5
 80057a6:	10a4      	asrs	r4, r4, #2
 80057a8:	2600      	movs	r6, #0
 80057aa:	42a6      	cmp	r6, r4
 80057ac:	d105      	bne.n	80057ba <__libc_init_array+0x2e>
 80057ae:	bd70      	pop	{r4, r5, r6, pc}
 80057b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057b4:	4798      	blx	r3
 80057b6:	3601      	adds	r6, #1
 80057b8:	e7ee      	b.n	8005798 <__libc_init_array+0xc>
 80057ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80057be:	4798      	blx	r3
 80057c0:	3601      	adds	r6, #1
 80057c2:	e7f2      	b.n	80057aa <__libc_init_array+0x1e>
 80057c4:	0800583c 	.word	0x0800583c
 80057c8:	0800583c 	.word	0x0800583c
 80057cc:	0800583c 	.word	0x0800583c
 80057d0:	08005840 	.word	0x08005840

080057d4 <_init>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	bf00      	nop
 80057d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057da:	bc08      	pop	{r3}
 80057dc:	469e      	mov	lr, r3
 80057de:	4770      	bx	lr

080057e0 <_fini>:
 80057e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e2:	bf00      	nop
 80057e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e6:	bc08      	pop	{r3}
 80057e8:	469e      	mov	lr, r3
 80057ea:	4770      	bx	lr
