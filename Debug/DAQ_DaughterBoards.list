
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c814  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800c9f4  0800c9f4  0000d9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbac  0800cbac  0000e190  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbac  0800cbac  0000dbac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbb4  0800cbb4  0000e190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbb4  0800cbb4  0000dbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cbb8  0800cbb8  0000dbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  0800cbbc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000110dc  20000190  0800cd4c  0000e190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001126c  0800cd4c  0000e26c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000372d2  00000000  00000000  0000e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008d49  00000000  00000000  00045492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002748  00000000  00000000  0004e1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d28  00000000  00000000  00050928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033cda  00000000  00000000  00052650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000404f3  00000000  00000000  0008632a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001284e6  00000000  00000000  000c681d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001eed03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009888  00000000  00000000  001eed48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f4  00000000  00000000  001f85d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000190 	.word	0x20000190
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c9dc 	.word	0x0800c9dc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000194 	.word	0x20000194
 800021c:	0800c9dc 	.word	0x0800c9dc

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	@ (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	@ (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	@ (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	@ (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	@ (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	20010c60 	.word	0x20010c60
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	0002980f 	.word	0x0002980f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	@ (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	@ (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20010cfc 	.word	0x20010cfc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20010c64 	.word	0x20010c64
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20010c68 	.word	0x20010c68
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	20011268 	.word	0x20011268

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f00b fc73 	bl	800bce4 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f00b fa80 	bl	800b908 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	@ (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	@ (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20010d08 	.word	0x20010d08
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	20011268 	.word	0x20011268
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20010d0c 	.word	0x20010d0c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20010d98 	.word	0x20010d98
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20010d9c 	.word	0x20010d9c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20010d94 	.word	0x20010d94
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20010d90 	.word	0x20010d90
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20010cfc 	.word	0x20010cfc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20010c64 	.word	0x20010c64
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20010c68 	.word	0x20010c68
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <__aeabi_drsub>:
 8000458:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800045c:	e002      	b.n	8000464 <__adddf3>
 800045e:	bf00      	nop

08000460 <__aeabi_dsub>:
 8000460:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000464 <__adddf3>:
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046e:	ea94 0f05 	teq	r4, r5
 8000472:	bf08      	it	eq
 8000474:	ea90 0f02 	teqeq	r0, r2
 8000478:	bf1f      	itttt	ne
 800047a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000482:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000486:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048a:	f000 80e2 	beq.w	8000652 <__adddf3+0x1ee>
 800048e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000492:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000496:	bfb8      	it	lt
 8000498:	426d      	neglt	r5, r5
 800049a:	dd0c      	ble.n	80004b6 <__adddf3+0x52>
 800049c:	442c      	add	r4, r5
 800049e:	ea80 0202 	eor.w	r2, r0, r2
 80004a2:	ea81 0303 	eor.w	r3, r1, r3
 80004a6:	ea82 0000 	eor.w	r0, r2, r0
 80004aa:	ea83 0101 	eor.w	r1, r3, r1
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	2d36      	cmp	r5, #54	@ 0x36
 80004b8:	bf88      	it	hi
 80004ba:	bd30      	pophi	{r4, r5, pc}
 80004bc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x70>
 80004ce:	4240      	negs	r0, r0
 80004d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x84>
 80004e2:	4252      	negs	r2, r2
 80004e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e8:	ea94 0f05 	teq	r4, r5
 80004ec:	f000 80a7 	beq.w	800063e <__adddf3+0x1da>
 80004f0:	f1a4 0401 	sub.w	r4, r4, #1
 80004f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f8:	db0d      	blt.n	8000516 <__adddf3+0xb2>
 80004fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000502:	1880      	adds	r0, r0, r2
 8000504:	f141 0100 	adc.w	r1, r1, #0
 8000508:	fa03 f20e 	lsl.w	r2, r3, lr
 800050c:	1880      	adds	r0, r0, r2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	4159      	adcs	r1, r3
 8000514:	e00e      	b.n	8000534 <__adddf3+0xd0>
 8000516:	f1a5 0520 	sub.w	r5, r5, #32
 800051a:	f10e 0e20 	add.w	lr, lr, #32
 800051e:	2a01      	cmp	r2, #1
 8000520:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000524:	bf28      	it	cs
 8000526:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	18c0      	adds	r0, r0, r3
 8000530:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000538:	d507      	bpl.n	800054a <__adddf3+0xe6>
 800053a:	f04f 0e00 	mov.w	lr, #0
 800053e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000542:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000546:	eb6e 0101 	sbc.w	r1, lr, r1
 800054a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800054e:	d31b      	bcc.n	8000588 <__adddf3+0x124>
 8000550:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000554:	d30c      	bcc.n	8000570 <__adddf3+0x10c>
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	ea5f 0030 	movs.w	r0, r0, rrx
 800055c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000560:	f104 0401 	add.w	r4, r4, #1
 8000564:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000568:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800056c:	f080 809a 	bcs.w	80006a4 <__adddf3+0x240>
 8000570:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	ea41 0105 	orr.w	r1, r1, r5
 8000586:	bd30      	pop	{r4, r5, pc}
 8000588:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800058c:	4140      	adcs	r0, r0
 800058e:	eb41 0101 	adc.w	r1, r1, r1
 8000592:	3c01      	subs	r4, #1
 8000594:	bf28      	it	cs
 8000596:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059a:	d2e9      	bcs.n	8000570 <__adddf3+0x10c>
 800059c:	f091 0f00 	teq	r1, #0
 80005a0:	bf04      	itt	eq
 80005a2:	4601      	moveq	r1, r0
 80005a4:	2000      	moveq	r0, #0
 80005a6:	fab1 f381 	clz	r3, r1
 80005aa:	bf08      	it	eq
 80005ac:	3320      	addeq	r3, #32
 80005ae:	f1a3 030b 	sub.w	r3, r3, #11
 80005b2:	f1b3 0220 	subs.w	r2, r3, #32
 80005b6:	da0c      	bge.n	80005d2 <__adddf3+0x16e>
 80005b8:	320c      	adds	r2, #12
 80005ba:	dd08      	ble.n	80005ce <__adddf3+0x16a>
 80005bc:	f102 0c14 	add.w	ip, r2, #20
 80005c0:	f1c2 020c 	rsb	r2, r2, #12
 80005c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c8:	fa21 f102 	lsr.w	r1, r1, r2
 80005cc:	e00c      	b.n	80005e8 <__adddf3+0x184>
 80005ce:	f102 0214 	add.w	r2, r2, #20
 80005d2:	bfd8      	it	le
 80005d4:	f1c2 0c20 	rsble	ip, r2, #32
 80005d8:	fa01 f102 	lsl.w	r1, r1, r2
 80005dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e0:	bfdc      	itt	le
 80005e2:	ea41 010c 	orrle.w	r1, r1, ip
 80005e6:	4090      	lslle	r0, r2
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	bfa2      	ittt	ge
 80005ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f0:	4329      	orrge	r1, r5
 80005f2:	bd30      	popge	{r4, r5, pc}
 80005f4:	ea6f 0404 	mvn.w	r4, r4
 80005f8:	3c1f      	subs	r4, #31
 80005fa:	da1c      	bge.n	8000636 <__adddf3+0x1d2>
 80005fc:	340c      	adds	r4, #12
 80005fe:	dc0e      	bgt.n	800061e <__adddf3+0x1ba>
 8000600:	f104 0414 	add.w	r4, r4, #20
 8000604:	f1c4 0220 	rsb	r2, r4, #32
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f302 	lsl.w	r3, r1, r2
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	fa21 f304 	lsr.w	r3, r1, r4
 8000618:	ea45 0103 	orr.w	r1, r5, r3
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	f1c4 040c 	rsb	r4, r4, #12
 8000622:	f1c4 0220 	rsb	r2, r4, #32
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 f304 	lsl.w	r3, r1, r4
 800062e:	ea40 0003 	orr.w	r0, r0, r3
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	fa21 f004 	lsr.w	r0, r1, r4
 800063a:	4629      	mov	r1, r5
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f094 0f00 	teq	r4, #0
 8000642:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000646:	bf06      	itte	eq
 8000648:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800064c:	3401      	addeq	r4, #1
 800064e:	3d01      	subne	r5, #1
 8000650:	e74e      	b.n	80004f0 <__adddf3+0x8c>
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf18      	it	ne
 8000658:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800065c:	d029      	beq.n	80006b2 <__adddf3+0x24e>
 800065e:	ea94 0f05 	teq	r4, r5
 8000662:	bf08      	it	eq
 8000664:	ea90 0f02 	teqeq	r0, r2
 8000668:	d005      	beq.n	8000676 <__adddf3+0x212>
 800066a:	ea54 0c00 	orrs.w	ip, r4, r0
 800066e:	bf04      	itt	eq
 8000670:	4619      	moveq	r1, r3
 8000672:	4610      	moveq	r0, r2
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea91 0f03 	teq	r1, r3
 800067a:	bf1e      	ittt	ne
 800067c:	2100      	movne	r1, #0
 800067e:	2000      	movne	r0, #0
 8000680:	bd30      	popne	{r4, r5, pc}
 8000682:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000686:	d105      	bne.n	8000694 <__adddf3+0x230>
 8000688:	0040      	lsls	r0, r0, #1
 800068a:	4149      	adcs	r1, r1
 800068c:	bf28      	it	cs
 800068e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000692:	bd30      	pop	{r4, r5, pc}
 8000694:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000698:	bf3c      	itt	cc
 800069a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800069e:	bd30      	popcc	{r4, r5, pc}
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006ac:	f04f 0000 	mov.w	r0, #0
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b6:	bf1a      	itte	ne
 80006b8:	4619      	movne	r1, r3
 80006ba:	4610      	movne	r0, r2
 80006bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c0:	bf1c      	itt	ne
 80006c2:	460b      	movne	r3, r1
 80006c4:	4602      	movne	r2, r0
 80006c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ca:	bf06      	itte	eq
 80006cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d0:	ea91 0f03 	teqeq	r1, r3
 80006d4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop

080006dc <__aeabi_ui2d>:
 80006dc:	f090 0f00 	teq	r0, #0
 80006e0:	bf04      	itt	eq
 80006e2:	2100      	moveq	r1, #0
 80006e4:	4770      	bxeq	lr
 80006e6:	b530      	push	{r4, r5, lr}
 80006e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f0:	f04f 0500 	mov.w	r5, #0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e750      	b.n	800059c <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000710:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000714:	bf48      	it	mi
 8000716:	4240      	negmi	r0, r0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e73e      	b.n	800059c <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_f2d>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000726:	ea4f 0131 	mov.w	r1, r1, rrx
 800072a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072e:	bf1f      	itttt	ne
 8000730:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000734:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000738:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800073c:	4770      	bxne	lr
 800073e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000742:	bf08      	it	eq
 8000744:	4770      	bxeq	lr
 8000746:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074a:	bf04      	itt	eq
 800074c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000758:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	e71c      	b.n	800059c <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_ul2d>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	b530      	push	{r4, r5, lr}
 800076e:	f04f 0500 	mov.w	r5, #0
 8000772:	e00a      	b.n	800078a <__aeabi_l2d+0x16>

08000774 <__aeabi_l2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000782:	d502      	bpl.n	800078a <__aeabi_l2d+0x16>
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800078e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000792:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000796:	f43f aed8 	beq.w	800054a <__adddf3+0xe6>
 800079a:	f04f 0203 	mov.w	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007aa:	bf18      	it	ne
 80007ac:	3203      	addne	r2, #3
 80007ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b2:	f1c2 0320 	rsb	r3, r2, #32
 80007b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ba:	fa20 f002 	lsr.w	r0, r0, r2
 80007be:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c2:	ea40 000e 	orr.w	r0, r0, lr
 80007c6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ca:	4414      	add	r4, r2
 80007cc:	e6bd      	b.n	800054a <__adddf3+0xe6>
 80007ce:	bf00      	nop

080007d0 <__aeabi_d2uiz>:
 80007d0:	004a      	lsls	r2, r1, #1
 80007d2:	d211      	bcs.n	80007f8 <__aeabi_d2uiz+0x28>
 80007d4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007d8:	d211      	bcs.n	80007fe <__aeabi_d2uiz+0x2e>
 80007da:	d50d      	bpl.n	80007f8 <__aeabi_d2uiz+0x28>
 80007dc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e4:	d40e      	bmi.n	8000804 <__aeabi_d2uiz+0x34>
 80007e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f2:	fa23 f002 	lsr.w	r0, r3, r2
 80007f6:	4770      	bx	lr
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	4770      	bx	lr
 80007fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000802:	d102      	bne.n	800080a <__aeabi_d2uiz+0x3a>
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	4770      	bx	lr
 800080a:	f04f 0000 	mov.w	r0, #0
 800080e:	4770      	bx	lr

08000810 <__aeabi_uldivmod>:
 8000810:	b953      	cbnz	r3, 8000828 <__aeabi_uldivmod+0x18>
 8000812:	b94a      	cbnz	r2, 8000828 <__aeabi_uldivmod+0x18>
 8000814:	2900      	cmp	r1, #0
 8000816:	bf08      	it	eq
 8000818:	2800      	cmpeq	r0, #0
 800081a:	bf1c      	itt	ne
 800081c:	f04f 31ff 	movne.w	r1, #4294967295
 8000820:	f04f 30ff 	movne.w	r0, #4294967295
 8000824:	f000 b96a 	b.w	8000afc <__aeabi_idiv0>
 8000828:	f1ad 0c08 	sub.w	ip, sp, #8
 800082c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000830:	f000 f806 	bl	8000840 <__udivmoddi4>
 8000834:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800083c:	b004      	add	sp, #16
 800083e:	4770      	bx	lr

08000840 <__udivmoddi4>:
 8000840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000844:	9d08      	ldr	r5, [sp, #32]
 8000846:	460c      	mov	r4, r1
 8000848:	2b00      	cmp	r3, #0
 800084a:	d14e      	bne.n	80008ea <__udivmoddi4+0xaa>
 800084c:	4694      	mov	ip, r2
 800084e:	458c      	cmp	ip, r1
 8000850:	4686      	mov	lr, r0
 8000852:	fab2 f282 	clz	r2, r2
 8000856:	d962      	bls.n	800091e <__udivmoddi4+0xde>
 8000858:	b14a      	cbz	r2, 800086e <__udivmoddi4+0x2e>
 800085a:	f1c2 0320 	rsb	r3, r2, #32
 800085e:	4091      	lsls	r1, r2
 8000860:	fa20 f303 	lsr.w	r3, r0, r3
 8000864:	fa0c fc02 	lsl.w	ip, ip, r2
 8000868:	4319      	orrs	r1, r3
 800086a:	fa00 fe02 	lsl.w	lr, r0, r2
 800086e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000872:	fa1f f68c 	uxth.w	r6, ip
 8000876:	fbb1 f4f7 	udiv	r4, r1, r7
 800087a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800087e:	fb07 1114 	mls	r1, r7, r4, r1
 8000882:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000886:	fb04 f106 	mul.w	r1, r4, r6
 800088a:	4299      	cmp	r1, r3
 800088c:	d90a      	bls.n	80008a4 <__udivmoddi4+0x64>
 800088e:	eb1c 0303 	adds.w	r3, ip, r3
 8000892:	f104 30ff 	add.w	r0, r4, #4294967295
 8000896:	f080 8112 	bcs.w	8000abe <__udivmoddi4+0x27e>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 810f 	bls.w	8000abe <__udivmoddi4+0x27e>
 80008a0:	3c02      	subs	r4, #2
 80008a2:	4463      	add	r3, ip
 80008a4:	1a59      	subs	r1, r3, r1
 80008a6:	fa1f f38e 	uxth.w	r3, lr
 80008aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ae:	fb07 1110 	mls	r1, r7, r0, r1
 80008b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b6:	fb00 f606 	mul.w	r6, r0, r6
 80008ba:	429e      	cmp	r6, r3
 80008bc:	d90a      	bls.n	80008d4 <__udivmoddi4+0x94>
 80008be:	eb1c 0303 	adds.w	r3, ip, r3
 80008c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80008c6:	f080 80fc 	bcs.w	8000ac2 <__udivmoddi4+0x282>
 80008ca:	429e      	cmp	r6, r3
 80008cc:	f240 80f9 	bls.w	8000ac2 <__udivmoddi4+0x282>
 80008d0:	4463      	add	r3, ip
 80008d2:	3802      	subs	r0, #2
 80008d4:	1b9b      	subs	r3, r3, r6
 80008d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008da:	2100      	movs	r1, #0
 80008dc:	b11d      	cbz	r5, 80008e6 <__udivmoddi4+0xa6>
 80008de:	40d3      	lsrs	r3, r2
 80008e0:	2200      	movs	r2, #0
 80008e2:	e9c5 3200 	strd	r3, r2, [r5]
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d905      	bls.n	80008fa <__udivmoddi4+0xba>
 80008ee:	b10d      	cbz	r5, 80008f4 <__udivmoddi4+0xb4>
 80008f0:	e9c5 0100 	strd	r0, r1, [r5]
 80008f4:	2100      	movs	r1, #0
 80008f6:	4608      	mov	r0, r1
 80008f8:	e7f5      	b.n	80008e6 <__udivmoddi4+0xa6>
 80008fa:	fab3 f183 	clz	r1, r3
 80008fe:	2900      	cmp	r1, #0
 8000900:	d146      	bne.n	8000990 <__udivmoddi4+0x150>
 8000902:	42a3      	cmp	r3, r4
 8000904:	d302      	bcc.n	800090c <__udivmoddi4+0xcc>
 8000906:	4290      	cmp	r0, r2
 8000908:	f0c0 80f0 	bcc.w	8000aec <__udivmoddi4+0x2ac>
 800090c:	1a86      	subs	r6, r0, r2
 800090e:	eb64 0303 	sbc.w	r3, r4, r3
 8000912:	2001      	movs	r0, #1
 8000914:	2d00      	cmp	r5, #0
 8000916:	d0e6      	beq.n	80008e6 <__udivmoddi4+0xa6>
 8000918:	e9c5 6300 	strd	r6, r3, [r5]
 800091c:	e7e3      	b.n	80008e6 <__udivmoddi4+0xa6>
 800091e:	2a00      	cmp	r2, #0
 8000920:	f040 8090 	bne.w	8000a44 <__udivmoddi4+0x204>
 8000924:	eba1 040c 	sub.w	r4, r1, ip
 8000928:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800092c:	fa1f f78c 	uxth.w	r7, ip
 8000930:	2101      	movs	r1, #1
 8000932:	fbb4 f6f8 	udiv	r6, r4, r8
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb08 4416 	mls	r4, r8, r6, r4
 800093e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000942:	fb07 f006 	mul.w	r0, r7, r6
 8000946:	4298      	cmp	r0, r3
 8000948:	d908      	bls.n	800095c <__udivmoddi4+0x11c>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000952:	d202      	bcs.n	800095a <__udivmoddi4+0x11a>
 8000954:	4298      	cmp	r0, r3
 8000956:	f200 80cd 	bhi.w	8000af4 <__udivmoddi4+0x2b4>
 800095a:	4626      	mov	r6, r4
 800095c:	1a1c      	subs	r4, r3, r0
 800095e:	fa1f f38e 	uxth.w	r3, lr
 8000962:	fbb4 f0f8 	udiv	r0, r4, r8
 8000966:	fb08 4410 	mls	r4, r8, r0, r4
 800096a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096e:	fb00 f707 	mul.w	r7, r0, r7
 8000972:	429f      	cmp	r7, r3
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x148>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 34ff 	add.w	r4, r0, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0x146>
 8000980:	429f      	cmp	r7, r3
 8000982:	f200 80b0 	bhi.w	8000ae6 <__udivmoddi4+0x2a6>
 8000986:	4620      	mov	r0, r4
 8000988:	1bdb      	subs	r3, r3, r7
 800098a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098e:	e7a5      	b.n	80008dc <__udivmoddi4+0x9c>
 8000990:	f1c1 0620 	rsb	r6, r1, #32
 8000994:	408b      	lsls	r3, r1
 8000996:	fa22 f706 	lsr.w	r7, r2, r6
 800099a:	431f      	orrs	r7, r3
 800099c:	fa20 fc06 	lsr.w	ip, r0, r6
 80009a0:	fa04 f301 	lsl.w	r3, r4, r1
 80009a4:	ea43 030c 	orr.w	r3, r3, ip
 80009a8:	40f4      	lsrs	r4, r6
 80009aa:	fa00 f801 	lsl.w	r8, r0, r1
 80009ae:	0c38      	lsrs	r0, r7, #16
 80009b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009b4:	fbb4 fef0 	udiv	lr, r4, r0
 80009b8:	fa1f fc87 	uxth.w	ip, r7
 80009bc:	fb00 441e 	mls	r4, r0, lr, r4
 80009c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009c4:	fb0e f90c 	mul.w	r9, lr, ip
 80009c8:	45a1      	cmp	r9, r4
 80009ca:	fa02 f201 	lsl.w	r2, r2, r1
 80009ce:	d90a      	bls.n	80009e6 <__udivmoddi4+0x1a6>
 80009d0:	193c      	adds	r4, r7, r4
 80009d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009d6:	f080 8084 	bcs.w	8000ae2 <__udivmoddi4+0x2a2>
 80009da:	45a1      	cmp	r9, r4
 80009dc:	f240 8081 	bls.w	8000ae2 <__udivmoddi4+0x2a2>
 80009e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80009e4:	443c      	add	r4, r7
 80009e6:	eba4 0409 	sub.w	r4, r4, r9
 80009ea:	fa1f f983 	uxth.w	r9, r3
 80009ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80009f2:	fb00 4413 	mls	r4, r0, r3, r4
 80009f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80009fe:	45a4      	cmp	ip, r4
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x1d2>
 8000a02:	193c      	adds	r4, r7, r4
 8000a04:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a08:	d267      	bcs.n	8000ada <__udivmoddi4+0x29a>
 8000a0a:	45a4      	cmp	ip, r4
 8000a0c:	d965      	bls.n	8000ada <__udivmoddi4+0x29a>
 8000a0e:	3b02      	subs	r3, #2
 8000a10:	443c      	add	r4, r7
 8000a12:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a16:	fba0 9302 	umull	r9, r3, r0, r2
 8000a1a:	eba4 040c 	sub.w	r4, r4, ip
 8000a1e:	429c      	cmp	r4, r3
 8000a20:	46ce      	mov	lr, r9
 8000a22:	469c      	mov	ip, r3
 8000a24:	d351      	bcc.n	8000aca <__udivmoddi4+0x28a>
 8000a26:	d04e      	beq.n	8000ac6 <__udivmoddi4+0x286>
 8000a28:	b155      	cbz	r5, 8000a40 <__udivmoddi4+0x200>
 8000a2a:	ebb8 030e 	subs.w	r3, r8, lr
 8000a2e:	eb64 040c 	sbc.w	r4, r4, ip
 8000a32:	fa04 f606 	lsl.w	r6, r4, r6
 8000a36:	40cb      	lsrs	r3, r1
 8000a38:	431e      	orrs	r6, r3
 8000a3a:	40cc      	lsrs	r4, r1
 8000a3c:	e9c5 6400 	strd	r6, r4, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	e750      	b.n	80008e6 <__udivmoddi4+0xa6>
 8000a44:	f1c2 0320 	rsb	r3, r2, #32
 8000a48:	fa20 f103 	lsr.w	r1, r0, r3
 8000a4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a50:	fa24 f303 	lsr.w	r3, r4, r3
 8000a54:	4094      	lsls	r4, r2
 8000a56:	430c      	orrs	r4, r1
 8000a58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a5c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3110 	mls	r1, r8, r0, r3
 8000a6c:	0c23      	lsrs	r3, r4, #16
 8000a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a72:	fb00 f107 	mul.w	r1, r0, r7
 8000a76:	4299      	cmp	r1, r3
 8000a78:	d908      	bls.n	8000a8c <__udivmoddi4+0x24c>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a82:	d22c      	bcs.n	8000ade <__udivmoddi4+0x29e>
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d92a      	bls.n	8000ade <__udivmoddi4+0x29e>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	4463      	add	r3, ip
 8000a8c:	1a5b      	subs	r3, r3, r1
 8000a8e:	b2a4      	uxth	r4, r4
 8000a90:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a94:	fb08 3311 	mls	r3, r8, r1, r3
 8000a98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a9c:	fb01 f307 	mul.w	r3, r1, r7
 8000aa0:	42a3      	cmp	r3, r4
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x276>
 8000aa4:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000aac:	d213      	bcs.n	8000ad6 <__udivmoddi4+0x296>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d911      	bls.n	8000ad6 <__udivmoddi4+0x296>
 8000ab2:	3902      	subs	r1, #2
 8000ab4:	4464      	add	r4, ip
 8000ab6:	1ae4      	subs	r4, r4, r3
 8000ab8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000abc:	e739      	b.n	8000932 <__udivmoddi4+0xf2>
 8000abe:	4604      	mov	r4, r0
 8000ac0:	e6f0      	b.n	80008a4 <__udivmoddi4+0x64>
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e706      	b.n	80008d4 <__udivmoddi4+0x94>
 8000ac6:	45c8      	cmp	r8, r9
 8000ac8:	d2ae      	bcs.n	8000a28 <__udivmoddi4+0x1e8>
 8000aca:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ace:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ad2:	3801      	subs	r0, #1
 8000ad4:	e7a8      	b.n	8000a28 <__udivmoddi4+0x1e8>
 8000ad6:	4631      	mov	r1, r6
 8000ad8:	e7ed      	b.n	8000ab6 <__udivmoddi4+0x276>
 8000ada:	4603      	mov	r3, r0
 8000adc:	e799      	b.n	8000a12 <__udivmoddi4+0x1d2>
 8000ade:	4630      	mov	r0, r6
 8000ae0:	e7d4      	b.n	8000a8c <__udivmoddi4+0x24c>
 8000ae2:	46d6      	mov	lr, sl
 8000ae4:	e77f      	b.n	80009e6 <__udivmoddi4+0x1a6>
 8000ae6:	4463      	add	r3, ip
 8000ae8:	3802      	subs	r0, #2
 8000aea:	e74d      	b.n	8000988 <__udivmoddi4+0x148>
 8000aec:	4606      	mov	r6, r0
 8000aee:	4623      	mov	r3, r4
 8000af0:	4608      	mov	r0, r1
 8000af2:	e70f      	b.n	8000914 <__udivmoddi4+0xd4>
 8000af4:	3e02      	subs	r6, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	e730      	b.n	800095c <__udivmoddi4+0x11c>
 8000afa:	bf00      	nop

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000b0c:	2334      	movs	r3, #52	@ 0x34
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <tx_application_define+0x4c>)
 8000b16:	490e      	ldr	r1, [pc, #56]	@ (8000b50 <tx_application_define+0x50>)
 8000b18:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <tx_application_define+0x54>)
 8000b1a:	f00b fb8d 	bl	800c238 <_txe_byte_pool_create>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10e      	bne.n	8000b42 <tx_application_define+0x42>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000b24:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <tx_application_define+0x54>)
 8000b26:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000b28:	68b8      	ldr	r0, [r7, #8]
 8000b2a:	f000 fa4d 	bl	8000fc8 <App_ThreadX_Init>
 8000b2e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000b36:	bf00      	nop
 8000b38:	e7fd      	b.n	8000b36 <tx_application_define+0x36>
      }
      /* USER CODE END  App_ThreadX_Init_Error */
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    status = ThreadX_Init(memory_ptr);
 8000b3a:	68b8      	ldr	r0, [r7, #8]
 8000b3c:	f001 faec 	bl	8002118 <ThreadX_Init>
 8000b40:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001ac 	.word	0x200001ac
 8000b50:	0800c9f4 	.word	0x0800c9f4
 8000b54:	200101ac 	.word	0x200101ac

08000b58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	@ 0x30
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00b ff07 	bl	800c984 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b76:	4b32      	ldr	r3, [pc, #200]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b78:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b7e:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b80:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b86:	4b2e      	ldr	r3, [pc, #184]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b92:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b98:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9e:	4b28      	ldr	r3, [pc, #160]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000baa:	4b25      	ldr	r3, [pc, #148]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000bb0:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb6:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bbe:	4b20      	ldr	r3, [pc, #128]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bca:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be0:	4817      	ldr	r0, [pc, #92]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000be2:	f002 fcd3 	bl	800358c <HAL_ADC_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000bec:	f000 fe52 	bl	8001894 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4811      	ldr	r0, [pc, #68]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000bfc:	f003 ff96 	bl	8004b2c <HAL_ADCEx_MultiModeConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c06:	f000 fe45 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_ADC1_Init+0xec>)
 8000c0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c0e:	2306      	movs	r3, #6
 8000c10:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c16:	237f      	movs	r3, #127	@ 0x7f
 8000c18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <MX_ADC1_Init+0xe8>)
 8000c28:	f003 f9be 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c32:	f000 fe2f 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3730      	adds	r7, #48	@ 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200101e0 	.word	0x200101e0
 8000c44:	10c00010 	.word	0x10c00010

08000c48 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2220      	movs	r2, #32
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f00b fe95 	bl	800c984 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000c5a:	4b5e      	ldr	r3, [pc, #376]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c5c:	4a5e      	ldr	r2, [pc, #376]	@ (8000dd8 <MX_ADC4_Init+0x190>)
 8000c5e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c60:	4b5c      	ldr	r3, [pc, #368]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c62:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c66:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000c68:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c6e:	4b59      	ldr	r3, [pc, #356]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000c74:	4b57      	ldr	r3, [pc, #348]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c7a:	4b56      	ldr	r3, [pc, #344]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c80:	4b54      	ldr	r3, [pc, #336]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000c86:	4b53      	ldr	r3, [pc, #332]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000c8c:	4b51      	ldr	r3, [pc, #324]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 8;
 8000c92:	4b50      	ldr	r3, [pc, #320]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c94:	2208      	movs	r2, #8
 8000c96:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca0:	4b4c      	ldr	r3, [pc, #304]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000cac:	4b49      	ldr	r3, [pc, #292]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cb4:	4b47      	ldr	r3, [pc, #284]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000cbc:	4b45      	ldr	r3, [pc, #276]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000cc4:	4843      	ldr	r0, [pc, #268]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cc6:	f002 fc61 	bl	800358c <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8000cd0:	f000 fde0 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cd4:	4b41      	ldr	r3, [pc, #260]	@ (8000ddc <MX_ADC4_Init+0x194>)
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ce0:	237f      	movs	r3, #127	@ 0x7f
 8000ce2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4838      	ldr	r0, [pc, #224]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000cf2:	f003 f959 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8000cfc:	f000 fdca 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d00:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <MX_ADC4_Init+0x198>)
 8000d02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d04:	230c      	movs	r3, #12
 8000d06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4831      	ldr	r0, [pc, #196]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d0e:	f003 f94b 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC4_Init+0xd4>
  {
    Error_Handler();
 8000d18:	f000 fdbc 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d1c:	4b31      	ldr	r3, [pc, #196]	@ (8000de4 <MX_ADC4_Init+0x19c>)
 8000d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d20:	2312      	movs	r3, #18
 8000d22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	482a      	ldr	r0, [pc, #168]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d2a:	f003 f93d 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_ADC4_Init+0xf0>
  {
    Error_Handler();
 8000d34:	f000 fdae 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d38:	4b2b      	ldr	r3, [pc, #172]	@ (8000de8 <MX_ADC4_Init+0x1a0>)
 8000d3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d3c:	2318      	movs	r3, #24
 8000d3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	4619      	mov	r1, r3
 8000d44:	4823      	ldr	r0, [pc, #140]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d46:	f003 f92f 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_ADC4_Init+0x10c>
  {
    Error_Handler();
 8000d50:	f000 fda0 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000d54:	4b25      	ldr	r3, [pc, #148]	@ (8000dec <MX_ADC4_Init+0x1a4>)
 8000d56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4619      	mov	r1, r3
 8000d62:	481c      	ldr	r0, [pc, #112]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d64:	f003 f920 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC4_Init+0x12a>
  {
    Error_Handler();
 8000d6e:	f000 fd91 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <MX_ADC4_Init+0x1a8>)
 8000d74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d76:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000d7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4814      	ldr	r0, [pc, #80]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000d82:	f003 f911 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC4_Init+0x148>
  {
    Error_Handler();
 8000d8c:	f000 fd82 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MX_ADC4_Init+0x1ac>)
 8000d92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d94:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000d98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000da0:	f003 f902 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC4_Init+0x166>
  {
    Error_Handler();
 8000daa:	f000 fd73 	bl	8001894 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000dae:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <MX_ADC4_Init+0x1b0>)
 8000db0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000db2:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000db6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <MX_ADC4_Init+0x18c>)
 8000dbe:	f003 f8f3 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC4_Init+0x184>
  {
    Error_Handler();
 8000dc8:	f000 fd64 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3720      	adds	r7, #32
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2001024c 	.word	0x2001024c
 8000dd8:	50000500 	.word	0x50000500
 8000ddc:	14f00020 	.word	0x14f00020
 8000de0:	32601000 	.word	0x32601000
 8000de4:	2a000400 	.word	0x2a000400
 8000de8:	2e300800 	.word	0x2e300800
 8000dec:	36902000 	.word	0x36902000
 8000df0:	1d500080 	.word	0x1d500080
 8000df4:	21800100 	.word	0x21800100
 8000df8:	25b00200 	.word	0x25b00200

08000dfc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0a2      	sub	sp, #136	@ 0x88
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 0320 	add.w	r3, r7, #32
 8000e18:	2254      	movs	r2, #84	@ 0x54
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f00b fdb1 	bl	800c984 <memset>
  if(adcHandle->Instance==ADC1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e2a:	d135      	bne.n	8000e98 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e30:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e32:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e36:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f007 f9dd 	bl	80081fc <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e48:	f000 fd24 	bl	8001894 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e4c:	4b58      	ldr	r3, [pc, #352]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e50:	4a57      	ldr	r2, [pc, #348]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e58:	4b55      	ldr	r3, [pc, #340]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b52      	ldr	r3, [pc, #328]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e68:	4a51      	ldr	r2, [pc, #324]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e70:	4b4f      	ldr	r3, [pc, #316]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = FIRMWARECHECK_Pin;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e80:	2303      	movs	r3, #3
 8000e82:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(FIRMWARECHECK_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e92:	f004 ff95 	bl	8005dc0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000e96:	e086      	b.n	8000fa6 <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC4)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a45      	ldr	r2, [pc, #276]	@ (8000fb4 <HAL_ADC_MspInit+0x1b8>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	f040 8081 	bne.w	8000fa6 <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000ea4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ea8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000eaa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000eae:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f007 f9a1 	bl	80081fc <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 8000ec0:	f000 fce8 	bl	8001894 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	4a39      	ldr	r2, [pc, #228]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000eca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ece:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed0:	4b37      	ldr	r3, [pc, #220]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	4b34      	ldr	r3, [pc, #208]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee0:	4a33      	ldr	r2, [pc, #204]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ee2:	f043 0302 	orr.w	r3, r3, #2
 8000ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee8:	4b31      	ldr	r3, [pc, #196]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f00:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb0 <HAL_ADC_MspInit+0x1b4>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8000f0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f10:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f12:	2303      	movs	r3, #3
 8000f14:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4825      	ldr	r0, [pc, #148]	@ (8000fb8 <HAL_ADC_MspInit+0x1bc>)
 8000f22:	f004 ff4d 	bl	8005dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG_2_Pin|ANALOG_5_Pin|ANALOG_6_Pin|ANALOG_7_Pin
 8000f26:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8000f2a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f34:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4820      	ldr	r0, [pc, #128]	@ (8000fbc <HAL_ADC_MspInit+0x1c0>)
 8000f3c:	f004 ff40 	bl	8005dc0 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel3;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f42:	4a20      	ldr	r2, [pc, #128]	@ (8000fc4 <HAL_ADC_MspInit+0x1c8>)
 8000f44:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f48:	2226      	movs	r2, #38	@ 0x26
 8000f4a:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f5a:	2280      	movs	r2, #128	@ 0x80
 8000f5c:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f64:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f6c:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f70:	2220      	movs	r2, #32
 8000f72:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000f7a:	4811      	ldr	r0, [pc, #68]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f7c:	f004 f8b0 	bl	80050e0 <HAL_DMA_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 8000f86:	f000 fc85 	bl	8001894 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f90:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <HAL_ADC_MspInit+0x1c4>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	203d      	movs	r0, #61	@ 0x3d
 8000f9c:	f003 ff86 	bl	8004eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000fa0:	203d      	movs	r0, #61	@ 0x3d
 8000fa2:	f003 ff9d 	bl	8004ee0 <HAL_NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3788      	adds	r7, #136	@ 0x88
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	50000500 	.word	0x50000500
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000c00 	.word	0x48000c00
 8000fc0:	200102b8 	.word	0x200102b8
 8000fc4:	40020030 	.word	0x40020030

08000fc8 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  ret = ThreadX_Init(memory_ptr);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f001 f89f 	bl	8002118 <ThreadX_Init>
 8000fda:	60f8      	str	r0, [r7, #12]
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000fea:	f009 fe5b 	bl	800aca4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <MX_CRC_Init+0x3c>)
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8001034 <MX_CRC_Init+0x40>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_CRC_Init+0x3c>)
 8001000:	2200      	movs	r2, #0
 8001002:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <MX_CRC_Init+0x3c>)
 8001006:	2200      	movs	r2, #0
 8001008:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_CRC_Init+0x3c>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001010:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <MX_CRC_Init+0x3c>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_CRC_Init+0x3c>)
 8001018:	2201      	movs	r2, #1
 800101a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <MX_CRC_Init+0x3c>)
 800101e:	f003 ff6d 	bl	8004efc <HAL_CRC_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001028:	f000 fc34 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20010318 	.word	0x20010318
 8001034:	40023000 	.word	0x40023000

08001038 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <HAL_CRC_MspInit+0x38>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10b      	bne.n	8001062 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_CRC_MspInit+0x3c>)
 800104c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800104e:	4a09      	ldr	r2, [pc, #36]	@ (8001074 <HAL_CRC_MspInit+0x3c>)
 8001050:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001054:	6493      	str	r3, [r2, #72]	@ 0x48
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <HAL_CRC_MspInit+0x3c>)
 8001058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800105a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40023000 	.word	0x40023000
 8001074:	40021000 	.word	0x40021000

08001078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_DMA_Init+0x80>)
 8001080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001082:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <MX_DMA_Init+0x80>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6493      	str	r3, [r2, #72]	@ 0x48
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_DMA_Init+0x80>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_DMA_Init+0x80>)
 8001098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109a:	4a17      	ldr	r2, [pc, #92]	@ (80010f8 <MX_DMA_Init+0x80>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_DMA_Init+0x80>)
 80010a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	200b      	movs	r0, #11
 80010b4:	f003 fefa 	bl	8004eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010b8:	200b      	movs	r0, #11
 80010ba:	f003 ff11 	bl	8004ee0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	200c      	movs	r0, #12
 80010c4:	f003 fef2 	bl	8004eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010c8:	200c      	movs	r0, #12
 80010ca:	f003 ff09 	bl	8004ee0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	200d      	movs	r0, #13
 80010d4:	f003 feea 	bl	8004eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010d8:	200d      	movs	r0, #13
 80010da:	f003 ff01 	bl	8004ee0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	200e      	movs	r0, #14
 80010e4:	f003 fee2 	bl	8004eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80010e8:	200e      	movs	r0, #14
 80010ea:	f003 fef9 	bl	8004ee0 <HAL_NVIC_EnableIRQ>

}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001100:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 8001102:	4a20      	ldr	r2, [pc, #128]	@ (8001184 <MX_FDCAN1_Init+0x88>)
 8001104:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001106:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800110c:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001112:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001118:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 800111a:	2200      	movs	r2, #0
 800111c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 8001120:	2200      	movs	r2, #0
 8001122:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 8001126:	2200      	movs	r2, #0
 8001128:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 800112c:	2204      	movs	r2, #4
 800112e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 8001132:	2201      	movs	r2, #1
 8001134:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 8001138:	2205      	movs	r2, #5
 800113a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 800113e:	2202      	movs	r2, #2
 8001140:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001142:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 8001144:	2201      	movs	r2, #1
 8001146:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 800114a:	2201      	movs	r2, #1
 800114c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 8001150:	2201      	movs	r2, #1
 8001152:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 8001156:	2201      	movs	r2, #1
 8001158:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 800115c:	2200      	movs	r2, #0
 800115e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 8001162:	2200      	movs	r2, #0
 8001164:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 8001168:	2200      	movs	r2, #0
 800116a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_FDCAN1_Init+0x84>)
 800116e:	f004 fa9f 	bl	80056b0 <HAL_FDCAN_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001178:	f000 fb8c 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2001033c 	.word	0x2001033c
 8001184:	40006400 	.word	0x40006400

08001188 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b09e      	sub	sp, #120	@ 0x78
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2254      	movs	r2, #84	@ 0x54
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00b fbeb 	bl	800c984 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a28      	ldr	r2, [pc, #160]	@ (8001254 <HAL_FDCAN_MspInit+0xcc>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d149      	bne.n	800124c <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80011be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011c2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f007 f817 	bl	80081fc <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80011d4:	f000 fb5e 	bl	8001894 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80011d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <HAL_FDCAN_MspInit+0xd0>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001258 <HAL_FDCAN_MspInit+0xd0>)
 80011de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80011e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <HAL_FDCAN_MspInit+0xd0>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_FDCAN_MspInit+0xd0>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <HAL_FDCAN_MspInit+0xd0>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <HAL_FDCAN_MspInit+0xd0>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001208:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800120c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800121a:	2309      	movs	r3, #9
 800121c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001222:	4619      	mov	r1, r3
 8001224:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001228:	f004 fdca 	bl	8005dc0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2015      	movs	r0, #21
 8001232:	f003 fe3b 	bl	8004eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001236:	2015      	movs	r0, #21
 8001238:	f003 fe52 	bl	8004ee0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	2016      	movs	r0, #22
 8001242:	f003 fe33 	bl	8004eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8001246:	2016      	movs	r0, #22
 8001248:	f003 fe4a 	bl	8004ee0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800124c:	bf00      	nop
 800124e:	3778      	adds	r7, #120	@ 0x78
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40006400 	.word	0x40006400
 8001258:	40021000 	.word	0x40021000

0800125c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	@ 0x30
 8001260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001272:	4b71      	ldr	r3, [pc, #452]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a70      	ldr	r2, [pc, #448]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 8001278:	f043 0320 	orr.w	r3, r3, #32
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b6e      	ldr	r3, [pc, #440]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f003 0320 	and.w	r3, r3, #32
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	4b6b      	ldr	r3, [pc, #428]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a6a      	ldr	r2, [pc, #424]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b68      	ldr	r3, [pc, #416]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b65      	ldr	r3, [pc, #404]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	4a64      	ldr	r2, [pc, #400]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ae:	4b62      	ldr	r3, [pc, #392]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a5e      	ldr	r2, [pc, #376]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d2:	4b59      	ldr	r3, [pc, #356]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a58      	ldr	r2, [pc, #352]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 80012d8:	f043 0310 	orr.w	r3, r3, #16
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b56      	ldr	r3, [pc, #344]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	4b53      	ldr	r3, [pc, #332]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	4a52      	ldr	r2, [pc, #328]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f6:	4b50      	ldr	r3, [pc, #320]	@ (8001438 <MX_GPIO_Init+0x1dc>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8001302:	2200      	movs	r2, #0
 8001304:	f641 7130 	movw	r1, #7984	@ 0x1f30
 8001308:	484c      	ldr	r0, [pc, #304]	@ (800143c <MX_GPIO_Init+0x1e0>)
 800130a:	f004 fedb 	bl	80060c4 <HAL_GPIO_WritePin>
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f246 0102 	movw	r1, #24578	@ 0x6002
 8001314:	484a      	ldr	r0, [pc, #296]	@ (8001440 <MX_GPIO_Init+0x1e4>)
 8001316:	f004 fed5 	bl	80060c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STARTSYNC_2_Pin|CS2_Pin|RESET2_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8001320:	4848      	ldr	r0, [pc, #288]	@ (8001444 <MX_GPIO_Init+0x1e8>)
 8001322:	f004 fecf 	bl	80060c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANALOGSWITCH_5_GPIO_Port, ANALOGSWITCH_5_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800132c:	4846      	ldr	r0, [pc, #280]	@ (8001448 <MX_GPIO_Init+0x1ec>)
 800132e:	f004 fec9 	bl	80060c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133c:	f004 fec2 	bl	80060c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8001340:	f641 7330 	movw	r3, #7984	@ 0x1f30
 8001344:	61fb      	str	r3, [r7, #28]
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4838      	ldr	r0, [pc, #224]	@ (800143c <MX_GPIO_Init+0x1e0>)
 800135a:	f004 fd31 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY1_Pin;
 800135e:	2301      	movs	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001362:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY1_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4833      	ldr	r0, [pc, #204]	@ (8001440 <MX_GPIO_Init+0x1e4>)
 8001374:	f004 fd24 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin;
 8001378:	f246 0302 	movw	r3, #24578	@ 0x6002
 800137c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	482b      	ldr	r0, [pc, #172]	@ (8001440 <MX_GPIO_Init+0x1e4>)
 8001392:	f004 fd15 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STARTSYNC_2_Pin|CS2_Pin|RESET2_Pin;
 8001396:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	4825      	ldr	r0, [pc, #148]	@ (8001444 <MX_GPIO_Init+0x1e8>)
 80013b0:	f004 fd06 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY2_Pin;
 80013b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY2_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	481e      	ldr	r0, [pc, #120]	@ (8001444 <MX_GPIO_Init+0x1e8>)
 80013cc:	f004 fcf8 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_5_Pin;
 80013d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ANALOGSWITCH_5_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4817      	ldr	r0, [pc, #92]	@ (8001448 <MX_GPIO_Init+0x1ec>)
 80013ea:	f004 fce9 	bl	8005dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin;
 80013ee:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800140a:	f004 fcd9 	bl	8005dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	2006      	movs	r0, #6
 8001414:	f003 fd4a 	bl	8004eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001418:	2006      	movs	r0, #6
 800141a:	f003 fd61 	bl	8004ee0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2017      	movs	r0, #23
 8001424:	f003 fd42 	bl	8004eac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001428:	2017      	movs	r0, #23
 800142a:	f003 fd59 	bl	8004ee0 <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3730      	adds	r7, #48	@ 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	48000800 	.word	0x48000800
 8001440:	48000400 	.word	0x48000400
 8001444:	48001000 	.word	0x48001000
 8001448:	48000c00 	.word	0x48000c00

0800144c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001452:	4a1c      	ldr	r2, [pc, #112]	@ (80014c4 <MX_I2C1_Init+0x78>)
 8001454:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001456:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001458:	4a1b      	ldr	r2, [pc, #108]	@ (80014c8 <MX_I2C1_Init+0x7c>)
 800145a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <MX_I2C1_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001462:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001464:	2201      	movs	r2, #1
 8001466:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <MX_I2C1_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800146e:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <MX_I2C1_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001480:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001486:	480e      	ldr	r0, [pc, #56]	@ (80014c0 <MX_I2C1_Init+0x74>)
 8001488:	f004 fe66 	bl	8006158 <HAL_I2C_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001492:	f000 f9ff 	bl	8001894 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001496:	2100      	movs	r1, #0
 8001498:	4809      	ldr	r0, [pc, #36]	@ (80014c0 <MX_I2C1_Init+0x74>)
 800149a:	f006 f803 	bl	80074a4 <HAL_I2CEx_ConfigAnalogFilter>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014a4:	f000 f9f6 	bl	8001894 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014a8:	2100      	movs	r1, #0
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_I2C1_Init+0x74>)
 80014ac:	f006 f845 	bl	800753a <HAL_I2CEx_ConfigDigitalFilter>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014b6:	f000 f9ed 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200103a0 	.word	0x200103a0
 80014c4:	40005400 	.word	0x40005400
 80014c8:	30a0a7fb 	.word	0x30a0a7fb

080014cc <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <MX_I2C4_Init+0x74>)
 80014d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <MX_I2C4_Init+0x78>)
 80014d4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10802D9B;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_I2C4_Init+0x74>)
 80014d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001548 <MX_I2C4_Init+0x7c>)
 80014da:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <MX_I2C4_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_I2C4_Init+0x74>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <MX_I2C4_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_I2C4_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_I2C4_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_I2C4_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_I2C4_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001506:	480e      	ldr	r0, [pc, #56]	@ (8001540 <MX_I2C4_Init+0x74>)
 8001508:	f004 fe26 	bl	8006158 <HAL_I2C_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001512:	f000 f9bf 	bl	8001894 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001516:	2100      	movs	r1, #0
 8001518:	4809      	ldr	r0, [pc, #36]	@ (8001540 <MX_I2C4_Init+0x74>)
 800151a:	f005 ffc3 	bl	80074a4 <HAL_I2CEx_ConfigAnalogFilter>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001524:	f000 f9b6 	bl	8001894 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001528:	2100      	movs	r1, #0
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_I2C4_Init+0x74>)
 800152c:	f006 f805 	bl	800753a <HAL_I2CEx_ConfigDigitalFilter>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001536:	f000 f9ad 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200103f4 	.word	0x200103f4
 8001544:	40008400 	.word	0x40008400
 8001548:	10802d9b 	.word	0x10802d9b

0800154c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0a2      	sub	sp, #136	@ 0x88
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001564:	f107 0320 	add.w	r3, r7, #32
 8001568:	2254      	movs	r2, #84	@ 0x54
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f00b fa09 	bl	800c984 <memset>
  if(i2cHandle->Instance==I2C1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a80      	ldr	r2, [pc, #512]	@ (8001778 <HAL_I2C_MspInit+0x22c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d158      	bne.n	800162e <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800157c:	2340      	movs	r3, #64	@ 0x40
 800157e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001580:	2300      	movs	r3, #0
 8001582:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	4618      	mov	r0, r3
 800158a:	f006 fe37 	bl	80081fc <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001594:	f000 f97e 	bl	8001894 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b78      	ldr	r3, [pc, #480]	@ (800177c <HAL_I2C_MspInit+0x230>)
 800159a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159c:	4a77      	ldr	r2, [pc, #476]	@ (800177c <HAL_I2C_MspInit+0x230>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a4:	4b75      	ldr	r3, [pc, #468]	@ (800177c <HAL_I2C_MspInit+0x230>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b0:	4b72      	ldr	r3, [pc, #456]	@ (800177c <HAL_I2C_MspInit+0x230>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b4:	4a71      	ldr	r2, [pc, #452]	@ (800177c <HAL_I2C_MspInit+0x230>)
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015bc:	4b6f      	ldr	r3, [pc, #444]	@ (800177c <HAL_I2C_MspInit+0x230>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015cc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ce:	2312      	movs	r3, #18
 80015d0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015dc:	2304      	movs	r3, #4
 80015de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ec:	f004 fbe8 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015f0:	2380      	movs	r3, #128	@ 0x80
 80015f2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f4:	2312      	movs	r3, #18
 80015f6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001602:	2304      	movs	r3, #4
 8001604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800160c:	4619      	mov	r1, r3
 800160e:	485c      	ldr	r0, [pc, #368]	@ (8001780 <HAL_I2C_MspInit+0x234>)
 8001610:	f004 fbd6 	bl	8005dc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001614:	4b59      	ldr	r3, [pc, #356]	@ (800177c <HAL_I2C_MspInit+0x230>)
 8001616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001618:	4a58      	ldr	r2, [pc, #352]	@ (800177c <HAL_I2C_MspInit+0x230>)
 800161a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800161e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001620:	4b56      	ldr	r3, [pc, #344]	@ (800177c <HAL_I2C_MspInit+0x230>)
 8001622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800162c:	e0a0      	b.n	8001770 <HAL_I2C_MspInit+0x224>
  else if(i2cHandle->Instance==I2C4)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a54      	ldr	r2, [pc, #336]	@ (8001784 <HAL_I2C_MspInit+0x238>)
 8001634:	4293      	cmp	r3, r2
 8001636:	f040 809b 	bne.w	8001770 <HAL_I2C_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800163a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800163e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001640:	2300      	movs	r3, #0
 8001642:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001644:	f107 0320 	add.w	r3, r7, #32
 8001648:	4618      	mov	r0, r3
 800164a:	f006 fdd7 	bl	80081fc <HAL_RCCEx_PeriphCLKConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_I2C_MspInit+0x10c>
      Error_Handler();
 8001654:	f000 f91e 	bl	8001894 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001658:	4b48      	ldr	r3, [pc, #288]	@ (800177c <HAL_I2C_MspInit+0x230>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165c:	4a47      	ldr	r2, [pc, #284]	@ (800177c <HAL_I2C_MspInit+0x230>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001664:	4b45      	ldr	r3, [pc, #276]	@ (800177c <HAL_I2C_MspInit+0x230>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001670:	23c0      	movs	r3, #192	@ 0xc0
 8001672:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001674:	2312      	movs	r3, #18
 8001676:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001682:	2308      	movs	r3, #8
 8001684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001688:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800168c:	4619      	mov	r1, r3
 800168e:	483e      	ldr	r0, [pc, #248]	@ (8001788 <HAL_I2C_MspInit+0x23c>)
 8001690:	f004 fb96 	bl	8005dc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001694:	4b39      	ldr	r3, [pc, #228]	@ (800177c <HAL_I2C_MspInit+0x230>)
 8001696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001698:	4a38      	ldr	r2, [pc, #224]	@ (800177c <HAL_I2C_MspInit+0x230>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80016a0:	4b36      	ldr	r3, [pc, #216]	@ (800177c <HAL_I2C_MspInit+0x230>)
 80016a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 80016ac:	4b37      	ldr	r3, [pc, #220]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80016ae:	4a38      	ldr	r2, [pc, #224]	@ (8001790 <HAL_I2C_MspInit+0x244>)
 80016b0:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 80016b2:	4b36      	ldr	r3, [pc, #216]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80016b4:	2216      	movs	r2, #22
 80016b6:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b8:	4b34      	ldr	r3, [pc, #208]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016be:	4b33      	ldr	r3, [pc, #204]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016c4:	4b31      	ldr	r3, [pc, #196]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80016c6:	2280      	movs	r2, #128	@ 0x80
 80016c8:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ca:	4b30      	ldr	r3, [pc, #192]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d0:	4b2e      	ldr	r3, [pc, #184]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 80016d6:	4b2d      	ldr	r3, [pc, #180]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80016d8:	2200      	movs	r2, #0
 80016da:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016dc:	4b2b      	ldr	r3, [pc, #172]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80016de:	2200      	movs	r2, #0
 80016e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 80016e2:	482a      	ldr	r0, [pc, #168]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80016e4:	f003 fcfc 	bl	80050e0 <HAL_DMA_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_I2C_MspInit+0x1a6>
      Error_Handler();
 80016ee:	f000 f8d1 	bl	8001894 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a25      	ldr	r2, [pc, #148]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80016f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016f8:	4a24      	ldr	r2, [pc, #144]	@ (800178c <HAL_I2C_MspInit+0x240>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 80016fe:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 8001700:	4a25      	ldr	r2, [pc, #148]	@ (8001798 <HAL_I2C_MspInit+0x24c>)
 8001702:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001704:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 8001706:	2217      	movs	r2, #23
 8001708:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 800170c:	2210      	movs	r2, #16
 800170e:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001710:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001716:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 8001718:	2280      	movs	r2, #128	@ 0x80
 800171a:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001722:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800172e:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001734:	4817      	ldr	r0, [pc, #92]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 8001736:	f003 fcd3 	bl	80050e0 <HAL_DMA_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_MspInit+0x1f8>
      Error_Handler();
 8001740:	f000 f8a8 	bl	8001894 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a13      	ldr	r2, [pc, #76]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 8001748:	639a      	str	r2, [r3, #56]	@ 0x38
 800174a:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <HAL_I2C_MspInit+0x248>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	2052      	movs	r0, #82	@ 0x52
 8001756:	f003 fba9 	bl	8004eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800175a:	2052      	movs	r0, #82	@ 0x52
 800175c:	f003 fbc0 	bl	8004ee0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2053      	movs	r0, #83	@ 0x53
 8001766:	f003 fba1 	bl	8004eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800176a:	2053      	movs	r0, #83	@ 0x53
 800176c:	f003 fbb8 	bl	8004ee0 <HAL_NVIC_EnableIRQ>
}
 8001770:	bf00      	nop
 8001772:	3788      	adds	r7, #136	@ 0x88
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40005400 	.word	0x40005400
 800177c:	40021000 	.word	0x40021000
 8001780:	48000400 	.word	0x48000400
 8001784:	40008400 	.word	0x40008400
 8001788:	48000800 	.word	0x48000800
 800178c:	20010448 	.word	0x20010448
 8001790:	40020008 	.word	0x40020008
 8001794:	200104a8 	.word	0x200104a8
 8001798:	4002001c 	.word	0x4002001c

0800179c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a0:	f001 fc5a 	bl	8003058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a4:	f000 f81a 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a8:	f7ff fd58 	bl	800125c <MX_GPIO_Init>
  MX_DMA_Init();
 80017ac:	f7ff fc64 	bl	8001078 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80017b0:	f7ff fca4 	bl	80010fc <MX_FDCAN1_Init>
  MX_TIM2_Init();
 80017b4:	f000 fa74 	bl	8001ca0 <MX_TIM2_Init>
  MX_CRC_Init();
 80017b8:	f7ff fc1c 	bl	8000ff4 <MX_CRC_Init>
  MX_ADC4_Init();
 80017bc:	f7ff fa44 	bl	8000c48 <MX_ADC4_Init>
  MX_SPI4_Init();
 80017c0:	f000 f86e 	bl	80018a0 <MX_SPI4_Init>
  MX_ADC1_Init();
 80017c4:	f7ff f9c8 	bl	8000b58 <MX_ADC1_Init>
  MX_I2C1_Init();
 80017c8:	f7ff fe40 	bl	800144c <MX_I2C1_Init>
  MX_I2C4_Init();
 80017cc:	f7ff fe7e 	bl	80014cc <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 80017d0:	f000 fb24 	bl	8001e1c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80017d4:	f7ff fc07 	bl	8000fe6 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <main+0x3c>

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	@ 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	2238      	movs	r2, #56	@ 0x38
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00b f8ca 	bl	800c984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017fe:	2000      	movs	r0, #0
 8001800:	f005 fee8 	bl	80075d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001804:	2301      	movs	r3, #1
 8001806:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001808:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800180c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180e:	2302      	movs	r3, #2
 8001810:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001812:	2303      	movs	r3, #3
 8001814:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001816:	2306      	movs	r3, #6
 8001818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800181a:	2355      	movs	r3, #85	@ 0x55
 800181c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800181e:	2302      	movs	r3, #2
 8001820:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001822:	2302      	movs	r3, #2
 8001824:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001826:	2302      	movs	r3, #2
 8001828:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182a:	f107 0318 	add.w	r3, r7, #24
 800182e:	4618      	mov	r0, r3
 8001830:	f005 ff84 	bl	800773c <HAL_RCC_OscConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800183a:	f000 f82b 	bl	8001894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183e:	230f      	movs	r3, #15
 8001840:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001842:	2303      	movs	r3, #3
 8001844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2104      	movs	r1, #4
 8001856:	4618      	mov	r0, r3
 8001858:	f006 fa82 	bl	8007d60 <HAL_RCC_ClockConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001862:	f000 f817 	bl	8001894 <Error_Handler>
  }
}
 8001866:	bf00      	nop
 8001868:	3750      	adds	r7, #80	@ 0x50
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001882:	f001 fc01 	bl	8003088 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40001000 	.word	0x40001000

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
}
 800189a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <Error_Handler+0x8>

080018a0 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi4_rx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001918 <MX_SPI4_Init+0x78>)
 80018a8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018b0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80018b2:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b8:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018be:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018d2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018d6:	2220      	movs	r2, #32
 80018d8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018ee:	2207      	movs	r2, #7
 80018f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <MX_SPI4_Init+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_SPI4_Init+0x74>)
 8001900:	f006 feca 	bl	8008698 <HAL_SPI_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800190a:	f7ff ffc3 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20010508 	.word	0x20010508
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a30      	ldr	r2, [pc, #192]	@ (80019fc <HAL_SPI_MspInit+0xe0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d159      	bne.n	80019f2 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800193e:	4b30      	ldr	r3, [pc, #192]	@ (8001a00 <HAL_SPI_MspInit+0xe4>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001942:	4a2f      	ldr	r2, [pc, #188]	@ (8001a00 <HAL_SPI_MspInit+0xe4>)
 8001944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001948:	6613      	str	r3, [r2, #96]	@ 0x60
 800194a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <HAL_SPI_MspInit+0xe4>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800194e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001956:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <HAL_SPI_MspInit+0xe4>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	4a29      	ldr	r2, [pc, #164]	@ (8001a00 <HAL_SPI_MspInit+0xe4>)
 800195c:	f043 0310 	orr.w	r3, r3, #16
 8001960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001962:	4b27      	ldr	r3, [pc, #156]	@ (8001a00 <HAL_SPI_MspInit+0xe4>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800196e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001980:	2305      	movs	r3, #5
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	481e      	ldr	r0, [pc, #120]	@ (8001a04 <HAL_SPI_MspInit+0xe8>)
 800198c:	f004 fa18 	bl	8005dc0 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Channel4;
 8001990:	4b1d      	ldr	r3, [pc, #116]	@ (8001a08 <HAL_SPI_MspInit+0xec>)
 8001992:	4a1e      	ldr	r2, [pc, #120]	@ (8001a0c <HAL_SPI_MspInit+0xf0>)
 8001994:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001996:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <HAL_SPI_MspInit+0xec>)
 8001998:	226a      	movs	r2, #106	@ 0x6a
 800199a:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <HAL_SPI_MspInit+0xec>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a2:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <HAL_SPI_MspInit+0xec>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019a8:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <HAL_SPI_MspInit+0xec>)
 80019aa:	2280      	movs	r2, #128	@ 0x80
 80019ac:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ae:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <HAL_SPI_MspInit+0xec>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <HAL_SPI_MspInit+0xec>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80019ba:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <HAL_SPI_MspInit+0xec>)
 80019bc:	2200      	movs	r2, #0
 80019be:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <HAL_SPI_MspInit+0xec>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80019c6:	4810      	ldr	r0, [pc, #64]	@ (8001a08 <HAL_SPI_MspInit+0xec>)
 80019c8:	f003 fb8a 	bl	80050e0 <HAL_DMA_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80019d2:	f7ff ff5f 	bl	8001894 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a08 <HAL_SPI_MspInit+0xec>)
 80019da:	659a      	str	r2, [r3, #88]	@ 0x58
 80019dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <HAL_SPI_MspInit+0xec>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2054      	movs	r0, #84	@ 0x54
 80019e8:	f003 fa60 	bl	8004eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80019ec:	2054      	movs	r0, #84	@ 0x54
 80019ee:	f003 fa77 	bl	8004ee0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	@ 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40013c00 	.word	0x40013c00
 8001a00:	40021000 	.word	0x40021000
 8001a04:	48001000 	.word	0x48001000
 8001a08:	2001056c 	.word	0x2001056c
 8001a0c:	40020044 	.word	0x40020044

08001a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a1a:	4a10      	ldr	r2, [pc, #64]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a3a:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001a46:	f001 fb51 	bl	80030ec <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f001 fb3a 	bl	80030c4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a50:	f005 fe64 	bl	800771c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	@ 0x30
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a70:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <HAL_InitTick+0xc4>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a74:	4a2b      	ldr	r2, [pc, #172]	@ (8001b24 <HAL_InitTick+0xc4>)
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a7c:	4b29      	ldr	r3, [pc, #164]	@ (8001b24 <HAL_InitTick+0xc4>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a88:	f107 020c 	add.w	r2, r7, #12
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f006 fb3a 	bl	800810c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a98:	f006 fb0c 	bl	80080b4 <HAL_RCC_GetPCLK1Freq>
 8001a9c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa0:	4a21      	ldr	r2, [pc, #132]	@ (8001b28 <HAL_InitTick+0xc8>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0c9b      	lsrs	r3, r3, #18
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001aae:	4a20      	ldr	r2, [pc, #128]	@ (8001b30 <HAL_InitTick+0xd0>)
 8001ab0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001ab4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ab8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001aba:	4a1c      	ldr	r2, [pc, #112]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001acc:	4817      	ldr	r0, [pc, #92]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001ace:	f006 ffa2 	bl	8008a16 <HAL_TIM_Base_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d11b      	bne.n	8001b18 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ae0:	4812      	ldr	r0, [pc, #72]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001ae2:	f006 fff9 	bl	8008ad8 <HAL_TIM_Base_Start_IT>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001aec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d111      	bne.n	8001b18 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001af4:	2036      	movs	r0, #54	@ 0x36
 8001af6:	f003 f9f3 	bl	8004ee0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d808      	bhi.n	8001b12 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	2036      	movs	r0, #54	@ 0x36
 8001b06:	f003 f9d1 	bl	8004eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <HAL_InitTick+0xd4>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e002      	b.n	8001b18 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3730      	adds	r7, #48	@ 0x30
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000
 8001b28:	431bde83 	.word	0x431bde83
 8001b2c:	200105cc 	.word	0x200105cc
 8001b30:	40001000 	.word	0x40001000
 8001b34:	20000184 	.word	0x20000184

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <NMI_Handler+0x4>

08001b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <MemManage_Handler+0x4>

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY1_Pin);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f004 fad8 	bl	8006128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8001b80:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <DMA1_Channel1_IRQHandler+0x10>)
 8001b82:	f003 fc37 	bl	80053f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20010448 	.word	0x20010448

08001b90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <DMA1_Channel2_IRQHandler+0x10>)
 8001b96:	f003 fc2d 	bl	80053f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200104a8 	.word	0x200104a8

08001ba4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001ba8:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <DMA1_Channel3_IRQHandler+0x10>)
 8001baa:	f003 fc23 	bl	80053f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200102b8 	.word	0x200102b8

08001bb8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001bbc:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <DMA1_Channel4_IRQHandler+0x10>)
 8001bbe:	f003 fc19 	bl	80053f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2001056c 	.word	0x2001056c

08001bcc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <FDCAN1_IT0_IRQHandler+0x10>)
 8001bd2:	f003 feef 	bl	80059b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2001033c 	.word	0x2001033c

08001be0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <FDCAN1_IT1_IRQHandler+0x10>)
 8001be6:	f003 fee5 	bl	80059b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2001033c 	.word	0x2001033c

08001bf4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY2_Pin);
 8001bf8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bfc:	f004 fa94 	bl	8006128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <TIM2_IRQHandler+0x10>)
 8001c0a:	f007 f985 	bl	8008f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20010618 	.word	0x20010618

08001c18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <TIM6_DAC_IRQHandler+0x10>)
 8001c1e:	f007 f97b 	bl	8008f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200105cc 	.word	0x200105cc

08001c2c <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <ADC4_IRQHandler+0x10>)
 8001c32:	f001 ff3b 	bl	8003aac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2001024c 	.word	0x2001024c

08001c40 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <I2C4_EV_IRQHandler+0x10>)
 8001c46:	f004 fc3b 	bl	80064c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200103f4 	.word	0x200103f4

08001c54 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <I2C4_ER_IRQHandler+0x10>)
 8001c5a:	f004 fc4b 	bl	80064f4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200103f4 	.word	0x200103f4

08001c68 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <SPI4_IRQHandler+0x10>)
 8001c6e:	f006 fdbf 	bl	80087f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20010508 	.word	0x20010508

08001c7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <SystemInit+0x20>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <SystemInit+0x20>)
 8001c88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cbe:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <MX_TIM2_Init+0xe4>)
 8001cc0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001d84 <MX_TIM2_Init+0xe4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <MX_TIM2_Init+0xe4>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d84 <MX_TIM2_Init+0xe4>)
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cda:	4b2a      	ldr	r3, [pc, #168]	@ (8001d84 <MX_TIM2_Init+0xe4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce0:	4b28      	ldr	r3, [pc, #160]	@ (8001d84 <MX_TIM2_Init+0xe4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001ce6:	4827      	ldr	r0, [pc, #156]	@ (8001d84 <MX_TIM2_Init+0xe4>)
 8001ce8:	f006 ff6e 	bl	8008bc8 <HAL_TIM_IC_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001cf2:	f7ff fdcf 	bl	8001894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	481f      	ldr	r0, [pc, #124]	@ (8001d84 <MX_TIM2_Init+0xe4>)
 8001d06:	f007 fd59 	bl	80097bc <HAL_TIMEx_MasterConfigSynchronization>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001d10:	f7ff fdc0 	bl	8001894 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4816      	ldr	r0, [pc, #88]	@ (8001d84 <MX_TIM2_Init+0xe4>)
 8001d2c:	f007 fa43 	bl	80091b6 <HAL_TIM_IC_ConfigChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d36:	f7ff fdad 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4810      	ldr	r0, [pc, #64]	@ (8001d84 <MX_TIM2_Init+0xe4>)
 8001d42:	f007 fa38 	bl	80091b6 <HAL_TIM_IC_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001d4c:	f7ff fda2 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2208      	movs	r2, #8
 8001d54:	4619      	mov	r1, r3
 8001d56:	480b      	ldr	r0, [pc, #44]	@ (8001d84 <MX_TIM2_Init+0xe4>)
 8001d58:	f007 fa2d 	bl	80091b6 <HAL_TIM_IC_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001d62:	f7ff fd97 	bl	8001894 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	220c      	movs	r2, #12
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <MX_TIM2_Init+0xe4>)
 8001d6e:	f007 fa22 	bl	80091b6 <HAL_TIM_IC_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001d78:	f7ff fd8c 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20010618 	.word	0x20010618

08001d88 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	@ 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da8:	d12f      	bne.n	8001e0a <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001daa:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <HAL_TIM_IC_MspInit+0x8c>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dae:	4a19      	ldr	r2, [pc, #100]	@ (8001e14 <HAL_TIM_IC_MspInit+0x8c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db6:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <HAL_TIM_IC_MspInit+0x8c>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc2:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_TIM_IC_MspInit+0x8c>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc6:	4a13      	ldr	r2, [pc, #76]	@ (8001e14 <HAL_TIM_IC_MspInit+0x8c>)
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <HAL_TIM_IC_MspInit+0x8c>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FREQUENCY_3_Pin|FREQUENCY_2_Pin|FREQUENCY_1_Pin|FREQUENCY_4_Pin;
 8001dda:	23d8      	movs	r3, #216	@ 0xd8
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001dea:	2302      	movs	r3, #2
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4808      	ldr	r0, [pc, #32]	@ (8001e18 <HAL_TIM_IC_MspInit+0x90>)
 8001df6:	f003 ffe3 	bl	8005dc0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	201c      	movs	r0, #28
 8001e00:	f003 f854 	bl	8004eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e04:	201c      	movs	r0, #28
 8001e06:	f003 f86b 	bl	8004ee0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	3728      	adds	r7, #40	@ 0x28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	48000c00 	.word	0x48000c00

08001e1c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001e20:	4b20      	ldr	r3, [pc, #128]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e22:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <MX_LPUART1_UART_Init+0x8c>)
 8001e24:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001e26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e28:	4a20      	ldr	r2, [pc, #128]	@ (8001eac <MX_LPUART1_UART_Init+0x90>)
 8001e2a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001e32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001e3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e40:	220c      	movs	r2, #12
 8001e42:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e44:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e50:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e56:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001e5c:	4811      	ldr	r0, [pc, #68]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e5e:	f007 fd89 	bl	8009974 <HAL_UART_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001e68:	f7ff fd14 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	480d      	ldr	r0, [pc, #52]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e70:	f008 fb24 	bl	800a4bc <HAL_UARTEx_SetTxFifoThreshold>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001e7a:	f7ff fd0b 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4808      	ldr	r0, [pc, #32]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e82:	f008 fb59 	bl	800a538 <HAL_UARTEx_SetRxFifoThreshold>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001e8c:	f7ff fd02 	bl	8001894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001e90:	4804      	ldr	r0, [pc, #16]	@ (8001ea4 <MX_LPUART1_UART_Init+0x88>)
 8001e92:	f008 fada 	bl	800a44a <HAL_UARTEx_DisableFifoMode>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001e9c:	f7ff fcfa 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20010664 	.word	0x20010664
 8001ea8:	40008000 	.word	0x40008000
 8001eac:	00033324 	.word	0x00033324

08001eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b09e      	sub	sp, #120	@ 0x78
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec8:	f107 0310 	add.w	r3, r7, #16
 8001ecc:	2254      	movs	r2, #84	@ 0x54
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f00a fd57 	bl	800c984 <memset>
  if(uartHandle->Instance==LPUART1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1e      	ldr	r2, [pc, #120]	@ (8001f54 <HAL_UART_MspInit+0xa4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d135      	bne.n	8001f4c <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4618      	mov	r0, r3
 8001eee:	f006 f985 	bl	80081fc <HAL_RCCEx_PeriphCLKConfig>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef8:	f7ff fccc 	bl	8001894 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001efc:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <HAL_UART_MspInit+0xa8>)
 8001efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f00:	4a15      	ldr	r2, [pc, #84]	@ (8001f58 <HAL_UART_MspInit+0xa8>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_UART_MspInit+0xa8>)
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f14:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_UART_MspInit+0xa8>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f18:	4a0f      	ldr	r2, [pc, #60]	@ (8001f58 <HAL_UART_MspInit+0xa8>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f20:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <HAL_UART_MspInit+0xa8>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f44:	4619      	mov	r1, r3
 8001f46:	4805      	ldr	r0, [pc, #20]	@ (8001f5c <HAL_UART_MspInit+0xac>)
 8001f48:	f003 ff3a 	bl	8005dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	3778      	adds	r7, #120	@ 0x78
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40008000 	.word	0x40008000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000800 	.word	0x48000800

08001f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f60:	480d      	ldr	r0, [pc, #52]	@ (8001f98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f64:	f7ff fe8a 	bl	8001c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f68:	480c      	ldr	r0, [pc, #48]	@ (8001f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f6a:	490d      	ldr	r1, [pc, #52]	@ (8001fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <LoopForever+0xe>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f80:	4c0a      	ldr	r4, [pc, #40]	@ (8001fac <LoopForever+0x16>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f00a fd01 	bl	800c994 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f92:	f7ff fc03 	bl	800179c <main>

08001f96 <LoopForever>:

LoopForever:
    b LoopForever
 8001f96:	e7fe      	b.n	8001f96 <LoopForever>
  ldr   r0, =_estack
 8001f98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001fa4:	0800cbbc 	.word	0x0800cbbc
  ldr r2, =_sbss
 8001fa8:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001fac:	2001126c 	.word	0x2001126c

08001fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_2_IRQHandler>
	...

08001fb4 <HAL_ADC_ConvCpltCallback>:
	analogSwitch6,
	analogSwitch7,
	analogSwitch8
};

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
    tx_semaphore_put(&semaphoreAnalog);
 8001fbc:	4803      	ldr	r0, [pc, #12]	@ (8001fcc <HAL_ADC_ConvCpltCallback+0x18>)
 8001fbe:	f00a fab3 	bl	800c528 <_txe_semaphore_put>

}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20010a80 	.word	0x20010a80

08001fd0 <setAnalogSwitches>:

uint8_t setAnalogSwitches(
	const uint8_t switchSettings[NUM_ADC_CHANNELS]
){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	72fb      	strb	r3, [r7, #11]

	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e01d      	b.n	800201e <setAnalogSwitches+0x4e>
		if(switchSettings[i]){
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <setAnalogSwitches+0x34>
			set12VSensor(&analogSwitches[i]);
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8002030 <setAnalogSwitches+0x60>)
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 f819 	bl	8002034 <set12VSensor>
 8002002:	e009      	b.n	8002018 <setAnalogSwitches+0x48>
		}else{
			set5VSensor(&analogSwitches[i]);
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4a08      	ldr	r2, [pc, #32]	@ (8002030 <setAnalogSwitches+0x60>)
 8002010:	4413      	add	r3, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f825 	bl	8002062 <set5VSensor>
	for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3301      	adds	r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b07      	cmp	r3, #7
 8002022:	d9de      	bls.n	8001fe2 <setAnalogSwitches+0x12>
		}
	}
	return retval;
 8002024:	7afb      	ldrb	r3, [r7, #11]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000004 	.word	0x20000004

08002034 <set12VSensor>:

uint8_t set12VSensor(
	gpio_control_t *self
){
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <set12VSensor+0x16>
		retval = UCR_NPTR;
 8002046:	2302      	movs	r3, #2
 8002048:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(&self->port, self->pin, SET_12V);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002050:	2201      	movs	r2, #1
 8002052:	4619      	mov	r1, r3
 8002054:	f004 f836 	bl	80060c4 <HAL_GPIO_WritePin>
	return retval;
 8002058:	7bfb      	ldrb	r3, [r7, #15]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <set5VSensor>:

uint8_t set5VSensor(
	gpio_control_t *self
){
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
	uint8_t retval = UCR_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
	if(NULL == self){
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <set5VSensor+0x16>
		retval = UCR_NPTR;
 8002074:	2302      	movs	r3, #2
 8002076:	73fb      	strb	r3, [r7, #15]
	}
	HAL_GPIO_WritePin(&self->port, self->pin, SET_5V);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800207e:	2200      	movs	r2, #0
 8002080:	4619      	mov	r1, r3
 8002082:	f004 f81f 	bl	80060c4 <HAL_GPIO_WritePin>
	return retval;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <AeroInit>:
        DATA_MSB_ADDRESS,
        DATA_CSB_ADDRESS,
        DATA_LSB_ADDRESS
};

uint8_t AeroInit(void){
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
    uint8_t retVal = UCR_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	70fb      	strb	r3, [r7, #3]
    for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	e00a      	b.n	80020b6 <AeroInit+0x26>
        AeroSensors[i].sensorNumber = i;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	b2d9      	uxtb	r1, r3
 80020a4:	4a09      	ldr	r2, [pc, #36]	@ (80020cc <AeroInit+0x3c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	460a      	mov	r2, r1
 80020ae:	719a      	strb	r2, [r3, #6]
    for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3301      	adds	r3, #1
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d9f1      	bls.n	80020a0 <AeroInit+0x10>
    }
    return retVal;
 80020bc:	78fb      	ldrb	r3, [r7, #3]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	200106f8 	.word	0x200106f8

080020d0 <SetChannel>:

uint8_t SetChannel(
    uint8_t sensor
){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
    uint8_t retVal = UCR_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
    if(sensor > NUM_AERO_SENSORS){
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d903      	bls.n	80020ec <SetChannel+0x1c>
        retVal = UCR_NOT_OK;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
        return retVal;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	e00f      	b.n	800210c <SetChannel+0x3c>
    }
    uint8_t data = 1 << (sensor);
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2201      	movs	r2, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Master_Transmit(&hi2c4, SWITCH_ADDRESS, &data, ONE_BYTE, I2C_TIMEOUT);
 80020f8:	f107 020e 	add.w	r2, r7, #14
 80020fc:	2364      	movs	r3, #100	@ 0x64
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	2170      	movs	r1, #112	@ 0x70
 8002104:	4803      	ldr	r0, [pc, #12]	@ (8002114 <SetChannel+0x44>)
 8002106:	f004 f8c3 	bl	8006290 <HAL_I2C_Master_Transmit>
    return retVal;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200103f4 	.word	0x200103f4

08002118 <ThreadX_Init>:
uint8_t frequencyData[16];


UINT ThreadX_Init(
        VOID *memory_ptr
){
 8002118:	b580      	push	{r7, lr}
 800211a:	b08e      	sub	sp, #56	@ 0x38
 800211c:	af08      	add	r7, sp, #32
 800211e:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

	TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	613b      	str	r3, [r7, #16]
	CHAR *pointer;

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8002128:	f107 010c 	add.w	r1, r7, #12
 800212c:	2300      	movs	r3, #0
 800212e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002132:	6938      	ldr	r0, [r7, #16]
 8002134:	f00a f80c 	bl	800c150 <_txe_byte_allocate>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <ThreadX_Init+0x2a>
	    return TX_POOL_ERROR;
 800213e:	2302      	movs	r3, #2
 8002140:	e0da      	b.n	80022f8 <ThreadX_Init+0x1e0>
	}

	if(tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	22b0      	movs	r2, #176	@ 0xb0
 8002146:	9206      	str	r2, [sp, #24]
 8002148:	2201      	movs	r2, #1
 800214a:	9205      	str	r2, [sp, #20]
 800214c:	2200      	movs	r2, #0
 800214e:	9204      	str	r2, [sp, #16]
 8002150:	220a      	movs	r2, #10
 8002152:	9203      	str	r2, [sp, #12]
 8002154:	220a      	movs	r2, #10
 8002156:	9202      	str	r2, [sp, #8]
 8002158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800215c:	9201      	str	r2, [sp, #4]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2300      	movs	r3, #0
 8002162:	4a67      	ldr	r2, [pc, #412]	@ (8002300 <ThreadX_Init+0x1e8>)
 8002164:	4967      	ldr	r1, [pc, #412]	@ (8002304 <ThreadX_Init+0x1ec>)
 8002166:	4868      	ldr	r0, [pc, #416]	@ (8002308 <ThreadX_Init+0x1f0>)
 8002168:	f00a f9fc 	bl	800c564 <_txe_thread_create>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <ThreadX_Init+0x5e>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
	    return TX_THREAD_ERROR;
 8002172:	230e      	movs	r3, #14
 8002174:	e0c0      	b.n	80022f8 <ThreadX_Init+0x1e0>
	}

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8002176:	f107 010c 	add.w	r1, r7, #12
 800217a:	2300      	movs	r3, #0
 800217c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002180:	6938      	ldr	r0, [r7, #16]
 8002182:	f009 ffe5 	bl	800c150 <_txe_byte_allocate>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <ThreadX_Init+0x78>
	    return TX_POOL_ERROR;
 800218c:	2302      	movs	r3, #2
 800218e:	e0b3      	b.n	80022f8 <ThreadX_Init+0x1e0>
    }

	if(tx_thread_create(&txAnalogThread, "txAnalogThread", txAnalogThreadEntry, 0, pointer,
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	22b0      	movs	r2, #176	@ 0xb0
 8002194:	9206      	str	r2, [sp, #24]
 8002196:	2201      	movs	r2, #1
 8002198:	9205      	str	r2, [sp, #20]
 800219a:	2200      	movs	r2, #0
 800219c:	9204      	str	r2, [sp, #16]
 800219e:	220a      	movs	r2, #10
 80021a0:	9203      	str	r2, [sp, #12]
 80021a2:	220b      	movs	r2, #11
 80021a4:	9202      	str	r2, [sp, #8]
 80021a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021aa:	9201      	str	r2, [sp, #4]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2300      	movs	r3, #0
 80021b0:	4a56      	ldr	r2, [pc, #344]	@ (800230c <ThreadX_Init+0x1f4>)
 80021b2:	4957      	ldr	r1, [pc, #348]	@ (8002310 <ThreadX_Init+0x1f8>)
 80021b4:	4857      	ldr	r0, [pc, #348]	@ (8002314 <ThreadX_Init+0x1fc>)
 80021b6:	f00a f9d5 	bl	800c564 <_txe_thread_create>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <ThreadX_Init+0xac>
						 TX_APP_STACK_SIZE, TX_ANALOG_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
	    return TX_THREAD_ERROR;
 80021c0:	230e      	movs	r3, #14
 80021c2:	e099      	b.n	80022f8 <ThreadX_Init+0x1e0>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 80021c4:	f107 010c 	add.w	r1, r7, #12
 80021c8:	2300      	movs	r3, #0
 80021ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ce:	6938      	ldr	r0, [r7, #16]
 80021d0:	f009 ffbe 	bl	800c150 <_txe_byte_allocate>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <ThreadX_Init+0xc6>
        return TX_POOL_ERROR;
 80021da:	2302      	movs	r3, #2
 80021dc:	e08c      	b.n	80022f8 <ThreadX_Init+0x1e0>
    }

	if(tx_thread_create(&txAeroThread, "txAeroThread", txAeroThreadEntry, 0, pointer,
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	22b0      	movs	r2, #176	@ 0xb0
 80021e2:	9206      	str	r2, [sp, #24]
 80021e4:	2201      	movs	r2, #1
 80021e6:	9205      	str	r2, [sp, #20]
 80021e8:	2200      	movs	r2, #0
 80021ea:	9204      	str	r2, [sp, #16]
 80021ec:	220a      	movs	r2, #10
 80021ee:	9203      	str	r2, [sp, #12]
 80021f0:	220c      	movs	r2, #12
 80021f2:	9202      	str	r2, [sp, #8]
 80021f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f8:	9201      	str	r2, [sp, #4]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2300      	movs	r3, #0
 80021fe:	4a46      	ldr	r2, [pc, #280]	@ (8002318 <ThreadX_Init+0x200>)
 8002200:	4946      	ldr	r1, [pc, #280]	@ (800231c <ThreadX_Init+0x204>)
 8002202:	4847      	ldr	r0, [pc, #284]	@ (8002320 <ThreadX_Init+0x208>)
 8002204:	f00a f9ae 	bl	800c564 <_txe_thread_create>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <ThreadX_Init+0xfa>
					   TX_APP_STACK_SIZE, 12, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
		return TX_THREAD_ERROR;
 800220e:	230e      	movs	r3, #14
 8002210:	e072      	b.n	80022f8 <ThreadX_Init+0x1e0>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8002212:	f107 010c 	add.w	r1, r7, #12
 8002216:	2300      	movs	r3, #0
 8002218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800221c:	6938      	ldr	r0, [r7, #16]
 800221e:	f009 ff97 	bl	800c150 <_txe_byte_allocate>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <ThreadX_Init+0x114>
        return TX_POOL_ERROR;
 8002228:	2302      	movs	r3, #2
 800222a:	e065      	b.n	80022f8 <ThreadX_Init+0x1e0>
    }

	if(tx_thread_create(&txCAN500HzThread, "txCAN500Hz", txCAN500HzThreadEntry, 0, pointer,
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	22b0      	movs	r2, #176	@ 0xb0
 8002230:	9206      	str	r2, [sp, #24]
 8002232:	2201      	movs	r2, #1
 8002234:	9205      	str	r2, [sp, #20]
 8002236:	2200      	movs	r2, #0
 8002238:	9204      	str	r2, [sp, #16]
 800223a:	220a      	movs	r2, #10
 800223c:	9203      	str	r2, [sp, #12]
 800223e:	220d      	movs	r2, #13
 8002240:	9202      	str	r2, [sp, #8]
 8002242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002246:	9201      	str	r2, [sp, #4]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	2300      	movs	r3, #0
 800224c:	4a35      	ldr	r2, [pc, #212]	@ (8002324 <ThreadX_Init+0x20c>)
 800224e:	4936      	ldr	r1, [pc, #216]	@ (8002328 <ThreadX_Init+0x210>)
 8002250:	4836      	ldr	r0, [pc, #216]	@ (800232c <ThreadX_Init+0x214>)
 8002252:	f00a f987 	bl	800c564 <_txe_thread_create>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <ThreadX_Init+0x148>
					   TX_APP_STACK_SIZE, 13, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
		return TX_THREAD_ERROR;
 800225c:	230e      	movs	r3, #14
 800225e:	e04b      	b.n	80022f8 <ThreadX_Init+0x1e0>
	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8002260:	f107 010c 	add.w	r1, r7, #12
 8002264:	2300      	movs	r3, #0
 8002266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800226a:	6938      	ldr	r0, [r7, #16]
 800226c:	f009 ff70 	bl	800c150 <_txe_byte_allocate>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <ThreadX_Init+0x162>
        return TX_POOL_ERROR;
 8002276:	2302      	movs	r3, #2
 8002278:	e03e      	b.n	80022f8 <ThreadX_Init+0x1e0>
    }

	if(tx_thread_create(&txCAN100HzThread, "txCAN100Hz", txCAN100HzThreadEntry, 0, pointer,
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	22b0      	movs	r2, #176	@ 0xb0
 800227e:	9206      	str	r2, [sp, #24]
 8002280:	2201      	movs	r2, #1
 8002282:	9205      	str	r2, [sp, #20]
 8002284:	2200      	movs	r2, #0
 8002286:	9204      	str	r2, [sp, #16]
 8002288:	220a      	movs	r2, #10
 800228a:	9203      	str	r2, [sp, #12]
 800228c:	220e      	movs	r2, #14
 800228e:	9202      	str	r2, [sp, #8]
 8002290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002294:	9201      	str	r2, [sp, #4]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2300      	movs	r3, #0
 800229a:	4a25      	ldr	r2, [pc, #148]	@ (8002330 <ThreadX_Init+0x218>)
 800229c:	4925      	ldr	r1, [pc, #148]	@ (8002334 <ThreadX_Init+0x21c>)
 800229e:	4826      	ldr	r0, [pc, #152]	@ (8002338 <ThreadX_Init+0x220>)
 80022a0:	f00a f960 	bl	800c564 <_txe_thread_create>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <ThreadX_Init+0x196>
					   TX_APP_STACK_SIZE, 14, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
		return TX_THREAD_ERROR;
 80022aa:	230e      	movs	r3, #14
 80022ac:	e024      	b.n	80022f8 <ThreadX_Init+0x1e0>
	}

	tx_semaphore_create(&semaphoreAnalog, "semaphoreAnalog", 0);
 80022ae:	231c      	movs	r3, #28
 80022b0:	2200      	movs	r2, #0
 80022b2:	4922      	ldr	r1, [pc, #136]	@ (800233c <ThreadX_Init+0x224>)
 80022b4:	4822      	ldr	r0, [pc, #136]	@ (8002340 <ThreadX_Init+0x228>)
 80022b6:	f00a f85f 	bl	800c378 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreAero, "semaphoreAero", 0);
 80022ba:	231c      	movs	r3, #28
 80022bc:	2200      	movs	r2, #0
 80022be:	4921      	ldr	r1, [pc, #132]	@ (8002344 <ThreadX_Init+0x22c>)
 80022c0:	4821      	ldr	r0, [pc, #132]	@ (8002348 <ThreadX_Init+0x230>)
 80022c2:	f00a f859 	bl	800c378 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreFrequency, "semaphoreFrequency", 1);
 80022c6:	231c      	movs	r3, #28
 80022c8:	2201      	movs	r2, #1
 80022ca:	4920      	ldr	r1, [pc, #128]	@ (800234c <ThreadX_Init+0x234>)
 80022cc:	4820      	ldr	r0, [pc, #128]	@ (8002350 <ThreadX_Init+0x238>)
 80022ce:	f00a f853 	bl	800c378 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreExADC1, "semaphoreExADC1", 0);
 80022d2:	231c      	movs	r3, #28
 80022d4:	2200      	movs	r2, #0
 80022d6:	491f      	ldr	r1, [pc, #124]	@ (8002354 <ThreadX_Init+0x23c>)
 80022d8:	481f      	ldr	r0, [pc, #124]	@ (8002358 <ThreadX_Init+0x240>)
 80022da:	f00a f84d 	bl	800c378 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreExADC2, "semaphoreExADC2", 0);
 80022de:	231c      	movs	r3, #28
 80022e0:	2200      	movs	r2, #0
 80022e2:	491e      	ldr	r1, [pc, #120]	@ (800235c <ThreadX_Init+0x244>)
 80022e4:	481e      	ldr	r0, [pc, #120]	@ (8002360 <ThreadX_Init+0x248>)
 80022e6:	f00a f847 	bl	800c378 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreSPI, "semaphoreSPI", 0);
 80022ea:	231c      	movs	r3, #28
 80022ec:	2200      	movs	r2, #0
 80022ee:	491d      	ldr	r1, [pc, #116]	@ (8002364 <ThreadX_Init+0x24c>)
 80022f0:	481d      	ldr	r0, [pc, #116]	@ (8002368 <ThreadX_Init+0x250>)
 80022f2:	f00a f841 	bl	800c378 <_txe_semaphore_create>
    

	return ret;
 80022f6:	697b      	ldr	r3, [r7, #20]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	0800236d 	.word	0x0800236d
 8002304:	0800ca08 	.word	0x0800ca08
 8002308:	20010710 	.word	0x20010710
 800230c:	080023bd 	.word	0x080023bd
 8002310:	0800ca18 	.word	0x0800ca18
 8002314:	200107c0 	.word	0x200107c0
 8002318:	08002439 	.word	0x08002439
 800231c:	0800ca28 	.word	0x0800ca28
 8002320:	20010870 	.word	0x20010870
 8002324:	080024cd 	.word	0x080024cd
 8002328:	0800ca38 	.word	0x0800ca38
 800232c:	20010920 	.word	0x20010920
 8002330:	080024e1 	.word	0x080024e1
 8002334:	0800ca44 	.word	0x0800ca44
 8002338:	200109d0 	.word	0x200109d0
 800233c:	0800ca50 	.word	0x0800ca50
 8002340:	20010a80 	.word	0x20010a80
 8002344:	0800ca60 	.word	0x0800ca60
 8002348:	20010a9c 	.word	0x20010a9c
 800234c:	0800ca70 	.word	0x0800ca70
 8002350:	20010ab8 	.word	0x20010ab8
 8002354:	0800ca84 	.word	0x0800ca84
 8002358:	20010ad4 	.word	0x20010ad4
 800235c:	0800ca94 	.word	0x0800ca94
 8002360:	20010af0 	.word	0x20010af0
 8002364:	0800caa4 	.word	0x0800caa4
 8002368:	20010b0c 	.word	0x20010b0c

0800236c <txMainThreadEntry>:


void txMainThreadEntry(
    ULONG threadInput
){
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
    HAL_FDCAN_Start(&hfdcan1);
 8002374:	480e      	ldr	r0, [pc, #56]	@ (80023b0 <txMainThreadEntry+0x44>)
 8002376:	f003 faf5 	bl	8005964 <HAL_FDCAN_Start>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800237a:	2100      	movs	r1, #0
 800237c:	480d      	ldr	r0, [pc, #52]	@ (80023b4 <txMainThreadEntry+0x48>)
 800237e:	f006 fc7b 	bl	8008c78 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8002382:	2104      	movs	r1, #4
 8002384:	480b      	ldr	r0, [pc, #44]	@ (80023b4 <txMainThreadEntry+0x48>)
 8002386:	f006 fc77 	bl	8008c78 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800238a:	2108      	movs	r1, #8
 800238c:	4809      	ldr	r0, [pc, #36]	@ (80023b4 <txMainThreadEntry+0x48>)
 800238e:	f006 fc73 	bl	8008c78 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8002392:	210c      	movs	r1, #12
 8002394:	4807      	ldr	r0, [pc, #28]	@ (80023b4 <txMainThreadEntry+0x48>)
 8002396:	f006 fc6f 	bl	8008c78 <HAL_TIM_IC_Start_IT>

	while(1){
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 800239a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800239e:	4806      	ldr	r0, [pc, #24]	@ (80023b8 <txMainThreadEntry+0x4c>)
 80023a0:	f003 fea8 	bl	80060f4 <HAL_GPIO_TogglePin>
	    tx_thread_sleep(1000);
 80023a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023a8:	f008 ffdc 	bl	800b364 <_tx_thread_sleep>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 80023ac:	bf00      	nop
 80023ae:	e7f4      	b.n	800239a <txMainThreadEntry+0x2e>
 80023b0:	2001033c 	.word	0x2001033c
 80023b4:	20010618 	.word	0x20010618
 80023b8:	48000800 	.word	0x48000800

080023bc <txAnalogThreadEntry>:
	}
}

void txAnalogThreadEntry(
    ULONG threadInput
){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b092      	sub	sp, #72	@ 0x48
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
    uint8_t analogRxData[16];
    uint32_t adcValues[8];
    setAnalogSwitches(analogSwitchStates);
 80023c4:	4819      	ldr	r0, [pc, #100]	@ (800242c <txAnalogThreadEntry+0x70>)
 80023c6:	f7ff fe03 	bl	8001fd0 <setAnalogSwitches>

    while(1){
        HAL_ADC_Start_DMA(&hadc4, adcValues, NUM_ADC_CHANNELS);
 80023ca:	f107 0318 	add.w	r3, r7, #24
 80023ce:	2208      	movs	r2, #8
 80023d0:	4619      	mov	r1, r3
 80023d2:	4817      	ldr	r0, [pc, #92]	@ (8002430 <txAnalogThreadEntry+0x74>)
 80023d4:	f001 fa96 	bl	8003904 <HAL_ADC_Start_DMA>
        tx_semaphore_get(&semaphoreAnalog, TX_WAIT_FOREVER);
 80023d8:	f04f 31ff 	mov.w	r1, #4294967295
 80023dc:	4815      	ldr	r0, [pc, #84]	@ (8002434 <txAnalogThreadEntry+0x78>)
 80023de:	f00a f861 	bl	800c4a4 <_txe_semaphore_get>
        struct ucr_01_front_analog_t analogStruct = {
            .analog1 = adcValues[0],
 80023e2:	69bb      	ldr	r3, [r7, #24]
        struct ucr_01_front_analog_t analogStruct = {
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	813b      	strh	r3, [r7, #8]
            .analog2 = adcValues[1],
 80023e8:	69fb      	ldr	r3, [r7, #28]
        struct ucr_01_front_analog_t analogStruct = {
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	817b      	strh	r3, [r7, #10]
            .analog3 = adcValues[2],
 80023ee:	6a3b      	ldr	r3, [r7, #32]
        struct ucr_01_front_analog_t analogStruct = {
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	81bb      	strh	r3, [r7, #12]
            .analog4 = adcValues[3],
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        struct ucr_01_front_analog_t analogStruct = {
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	81fb      	strh	r3, [r7, #14]
            .analog5 = adcValues[4],
 80023fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        struct ucr_01_front_analog_t analogStruct = {
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	823b      	strh	r3, [r7, #16]
            .analog6 = adcValues[5],
 8002400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        struct ucr_01_front_analog_t analogStruct = {
 8002402:	b29b      	uxth	r3, r3
 8002404:	827b      	strh	r3, [r7, #18]
            .analog7 = adcValues[6],
 8002406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        struct ucr_01_front_analog_t analogStruct = {
 8002408:	b29b      	uxth	r3, r3
 800240a:	82bb      	strh	r3, [r7, #20]
            .analog8 = adcValues[7]
 800240c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
        struct ucr_01_front_analog_t analogStruct = {
 800240e:	b29b      	uxth	r3, r3
 8002410:	82fb      	strh	r3, [r7, #22]
        };
        ucr_01_front_analog_pack(analogRxData, &analogStruct, UCR_01_FRONT_ANALOG_LENGTH);
 8002412:	f107 0108 	add.w	r1, r7, #8
 8002416:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800241a:	2210      	movs	r2, #16
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fab5 	bl	800298c <ucr_01_front_analog_pack>
        tx_thread_sleep(2);
 8002422:	2002      	movs	r0, #2
 8002424:	f008 ff9e 	bl	800b364 <_tx_thread_sleep>
    while(1){
 8002428:	bf00      	nop
 800242a:	e7ce      	b.n	80023ca <txAnalogThreadEntry+0xe>
 800242c:	0800cb7c 	.word	0x0800cb7c
 8002430:	2001024c 	.word	0x2001024c
 8002434:	20010a80 	.word	0x20010a80

08002438 <txAeroThreadEntry>:
    }
}

void txAeroThreadEntry(
   ULONG threadInput
){
 8002438:	b5b0      	push	{r4, r5, r7, lr}
 800243a:	b096      	sub	sp, #88	@ 0x58
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    if(UCR_OK != AeroInit()){
 8002440:	f7ff fe26 	bl	8002090 <AeroInit>

    }
    struct ucr_01_front_aero_t aeroData;
    uint8_t transmitData[UCR_01_FRONT_AERO_LENGTH];
    FDCAN_TxHeaderTypeDef aeroHeader = {
 8002444:	4b1f      	ldr	r3, [pc, #124]	@ (80024c4 <txAeroThreadEntry+0x8c>)
 8002446:	f107 040c 	add.w	r4, r7, #12
 800244a:	461d      	mov	r5, r3
 800244c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002454:	682b      	ldr	r3, [r5, #0]
 8002456:	6023      	str	r3, [r4, #0]
        .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
        .MessageMarker = 0
    };

    while(1){
        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8002458:	2300      	movs	r3, #0
 800245a:	657b      	str	r3, [r7, #84]	@ 0x54
 800245c:	e007      	b.n	800246e <txAeroThreadEntry+0x36>
//            StartSensorReading(&AeroSensors[i]);
        	SetChannel(i);
 800245e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fe34 	bl	80020d0 <SetChannel>
        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 8002468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800246a:	3301      	adds	r3, #1
 800246c:	657b      	str	r3, [r7, #84]	@ 0x54
 800246e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002470:	2b02      	cmp	r3, #2
 8002472:	d9f4      	bls.n	800245e <txAeroThreadEntry+0x26>
        }


        tx_thread_sleep(20);
 8002474:	2014      	movs	r0, #20
 8002476:	f008 ff75 	bl	800b364 <_tx_thread_sleep>

//        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
//            ReadData(&AeroSensors[i]);
//        }
        aeroData.pressure1 = AeroSensors[0].pressure;
 800247a:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <txAeroThreadEntry+0x90>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	643b      	str	r3, [r7, #64]	@ 0x40
        aeroData.pressure2 = AeroSensors[1].pressure;
 8002480:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <txAeroThreadEntry+0x90>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	647b      	str	r3, [r7, #68]	@ 0x44
        aeroData.pressure3 = AeroSensors[2].pressure;
 8002486:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <txAeroThreadEntry+0x90>)
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	64bb      	str	r3, [r7, #72]	@ 0x48

        aeroData.temperature1 = AeroSensors[0].temperature;
 800248c:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <txAeroThreadEntry+0x90>)
 800248e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002492:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        aeroData.temperature2 = AeroSensors[1].temperature;
 8002496:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <txAeroThreadEntry+0x90>)
 8002498:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800249c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        aeroData.temperature3 = AeroSensors[2].temperature;
 80024a0:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <txAeroThreadEntry+0x90>)
 80024a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80024a6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
        ucr_01_front_aero_pack(transmitData, &aeroData, UCR_01_FRONT_AERO_LENGTH);
 80024aa:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80024ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024b2:	2210      	movs	r2, #16
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fcbf 	bl	8002e38 <ucr_01_front_aero_pack>
        tx_thread_sleep(100);
 80024ba:	2064      	movs	r0, #100	@ 0x64
 80024bc:	f008 ff52 	bl	800b364 <_tx_thread_sleep>
        for(int i = 0; i < NUM_AERO_SENSORS; i ++){
 80024c0:	e7ca      	b.n	8002458 <txAeroThreadEntry+0x20>
 80024c2:	bf00      	nop
 80024c4:	0800cab4 	.word	0x0800cab4
 80024c8:	200106f8 	.word	0x200106f8

080024cc <txCAN500HzThreadEntry>:
//        HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &aeroHeader, transmitData);
    }
}

void txCAN500HzThreadEntry(ULONG threadInput){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

    while(1){
    	tx_thread_sleep(1000);
 80024d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024d8:	f008 ff44 	bl	800b364 <_tx_thread_sleep>
 80024dc:	e7fa      	b.n	80024d4 <txCAN500HzThreadEntry+0x8>
	...

080024e0 <txCAN100HzThreadEntry>:
    }
}

void txCAN100HzThreadEntry(
    ULONG threadInput
){
 80024e0:	b5b0      	push	{r4, r5, r7, lr}
 80024e2:	b09c      	sub	sp, #112	@ 0x70
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
    if(UCR_OK != FrequencyInit()){
 80024e8:	f000 f86a 	bl	80025c0 <FrequencyInit>

    }
	uint8_t preScalar = htim2.Init.Prescaler + 1;
 80024ec:	4b2f      	ldr	r3, [pc, #188]	@ (80025ac <txCAN100HzThreadEntry+0xcc>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    float refClock = TIMCLOCK/(preScalar);
 80024f8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80024fc:	4a2c      	ldr	r2, [pc, #176]	@ (80025b0 <txCAN100HzThreadEntry+0xd0>)
 80024fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	uint32_t frequency[NUM_FREQUENCY_CHANNELS];
	uint8_t frequencyData[UCR_01_FRONT_FREQUENCY_LENGTH];
	FDCAN_TxHeaderTypeDef frequencyHeader = {
 800250e:	4b29      	ldr	r3, [pc, #164]	@ (80025b4 <txCAN100HzThreadEntry+0xd4>)
 8002510:	f107 041c 	add.w	r4, r7, #28
 8002514:	461d      	mov	r5, r3
 8002516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800251a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800251c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800251e:	682b      	ldr	r3, [r5, #0]
 8002520:	6023      	str	r3, [r4, #0]
        .MessageMarker = 0
	};

    while(1){
        // Acquire the semaphore
    	tx_semaphore_get(&semaphoreFrequency, TX_WAIT_FOREVER);
 8002522:	f04f 31ff 	mov.w	r1, #4294967295
 8002526:	4824      	ldr	r0, [pc, #144]	@ (80025b8 <txCAN100HzThreadEntry+0xd8>)
 8002528:	f009 ffbc 	bl	800c4a4 <_txe_semaphore_get>
    	// Convert the data to frequency and encode it
    	for(int i = 0; i < 4; i ++){
 800252c:	2300      	movs	r3, #0
 800252e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002530:	e022      	b.n	8002578 <txCAN100HzThreadEntry+0x98>
			float value = refClock / ChannelData[i].difference;
 8002532:	4a22      	ldr	r2, [pc, #136]	@ (80025bc <txCAN100HzThreadEntry+0xdc>)
 8002534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002536:	019b      	lsls	r3, r3, #6
 8002538:	4413      	add	r3, r2
 800253a:	333c      	adds	r3, #60	@ 0x3c
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002546:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 800254a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
			frequency[i] = ucr_01_front_frequency_frequency1_encode(value);
 8002552:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8002554:	f7fe f8e4 	bl	8000720 <__aeabi_f2d>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	ec43 2b10 	vmov	d0, r2, r3
 8002560:	f000 fc5c 	bl	8002e1c <ucr_01_front_frequency_frequency1_encode>
 8002564:	4602      	mov	r2, r0
 8002566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	3370      	adds	r3, #112	@ 0x70
 800256c:	443b      	add	r3, r7
 800256e:	f843 2c20 	str.w	r2, [r3, #-32]
    	for(int i = 0; i < 4; i ++){
 8002572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002574:	3301      	adds	r3, #1
 8002576:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800257a:	2b03      	cmp	r3, #3
 800257c:	ddd9      	ble.n	8002532 <txCAN100HzThreadEntry+0x52>
    	}
    	struct ucr_01_front_frequency_t frequencyStruct = {
    	        .frequency1 = frequency[0],
 800257e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    	struct ucr_01_front_frequency_t frequencyStruct = {
 8002580:	60fb      	str	r3, [r7, #12]
    	        .frequency2 = frequency[1],
 8002582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    	struct ucr_01_front_frequency_t frequencyStruct = {
 8002584:	613b      	str	r3, [r7, #16]
    	        .frequency3 = frequency[2],
 8002586:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
    	struct ucr_01_front_frequency_t frequencyStruct = {
 8002588:	617b      	str	r3, [r7, #20]
    	        .frequency4 = frequency[3]
 800258a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    	struct ucr_01_front_frequency_t frequencyStruct = {
 800258c:	61bb      	str	r3, [r7, #24]
    	};
    	ucr_01_front_frequency_pack(frequencyData, &frequencyStruct, UCR_01_FRONT_FREQUENCY_LENGTH);
 800258e:	f107 010c 	add.w	r1, r7, #12
 8002592:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002596:	2210      	movs	r2, #16
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fb1b 	bl	8002bd4 <ucr_01_front_frequency_pack>
    	tx_semaphore_put(&semaphoreFrequency);
 800259e:	4806      	ldr	r0, [pc, #24]	@ (80025b8 <txCAN100HzThreadEntry+0xd8>)
 80025a0:	f009 ffc2 	bl	800c528 <_txe_semaphore_put>
//    	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &frequencyHeader, frequencyData);
    	tx_thread_sleep(10);
 80025a4:	200a      	movs	r0, #10
 80025a6:	f008 fedd 	bl	800b364 <_tx_thread_sleep>
    while(1){
 80025aa:	e7ba      	b.n	8002522 <txCAN100HzThreadEntry+0x42>
 80025ac:	20010618 	.word	0x20010618
 80025b0:	0a21fe80 	.word	0x0a21fe80
 80025b4:	0800cad8 	.word	0x0800cad8
 80025b8:	20010ab8 	.word	0x20010ab8
 80025bc:	20010b28 	.word	0x20010b28

080025c0 <FrequencyInit>:
static uint8_t CalculateFrequency(
        frequency_t* channel,
        TIM_HandleTypeDef* htim
);

uint8_t FrequencyInit(void){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af04      	add	r7, sp, #16
    uint8_t retVal = UCR_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	70fb      	strb	r3, [r7, #3]
    for(int i = 0; i < NUM_FREQUENCY_CHANNELS; i ++){
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	e016      	b.n	80025fe <FrequencyInit+0x3e>
        ChannelData[i].firstValue = 0;
 80025d0:	4a35      	ldr	r2, [pc, #212]	@ (80026a8 <FrequencyInit+0xe8>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	019b      	lsls	r3, r3, #6
 80025d6:	4413      	add	r3, r2
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
        ChannelData[i].secondValue = 0;
 80025dc:	4a32      	ldr	r2, [pc, #200]	@ (80026a8 <FrequencyInit+0xe8>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	019b      	lsls	r3, r3, #6
 80025e2:	4413      	add	r3, r2
 80025e4:	3304      	adds	r3, #4
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
        ChannelData[i].isFirstCapture = false;
 80025ea:	4a2f      	ldr	r2, [pc, #188]	@ (80026a8 <FrequencyInit+0xe8>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	019b      	lsls	r3, r3, #6
 80025f0:	4413      	add	r3, r2
 80025f2:	3308      	adds	r3, #8
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < NUM_FREQUENCY_CHANNELS; i ++){
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3301      	adds	r3, #1
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d9e5      	bls.n	80025d0 <FrequencyInit+0x10>
    }
    ChannelData[0].halChannel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002604:	4b28      	ldr	r3, [pc, #160]	@ (80026a8 <FrequencyInit+0xe8>)
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ChannelData[1].halChannel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260c:	4b26      	ldr	r3, [pc, #152]	@ (80026a8 <FrequencyInit+0xe8>)
 800260e:	2202      	movs	r2, #2
 8002610:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    ChannelData[2].halChannel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002614:	4b24      	ldr	r3, [pc, #144]	@ (80026a8 <FrequencyInit+0xe8>)
 8002616:	2204      	movs	r2, #4
 8002618:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    ChannelData[3].halChannel = HAL_TIM_ACTIVE_CHANNEL_4;
 800261c:	4b22      	ldr	r3, [pc, #136]	@ (80026a8 <FrequencyInit+0xe8>)
 800261e:	2208      	movs	r2, #8
 8002620:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8

    tx_timer_create(&ChannelData[0].resetTimer, "resetTimer1", 
 8002624:	232c      	movs	r3, #44	@ 0x2c
 8002626:	9303      	str	r3, [sp, #12]
 8002628:	2300      	movs	r3, #0
 800262a:	9302      	str	r3, [sp, #8]
 800262c:	2300      	movs	r3, #0
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2300      	movs	r3, #0
 8002638:	4a1c      	ldr	r2, [pc, #112]	@ (80026ac <FrequencyInit+0xec>)
 800263a:	491d      	ldr	r1, [pc, #116]	@ (80026b0 <FrequencyInit+0xf0>)
 800263c:	481d      	ldr	r0, [pc, #116]	@ (80026b4 <FrequencyInit+0xf4>)
 800263e:	f00a f8d7 	bl	800c7f0 <_txe_timer_create>
        timerExpirationFrequency, 0, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[1].resetTimer, "resetTimer2", 
 8002642:	232c      	movs	r3, #44	@ 0x2c
 8002644:	9303      	str	r3, [sp, #12]
 8002646:	2300      	movs	r3, #0
 8002648:	9302      	str	r3, [sp, #8]
 800264a:	2300      	movs	r3, #0
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	2301      	movs	r3, #1
 8002656:	4a15      	ldr	r2, [pc, #84]	@ (80026ac <FrequencyInit+0xec>)
 8002658:	4917      	ldr	r1, [pc, #92]	@ (80026b8 <FrequencyInit+0xf8>)
 800265a:	4818      	ldr	r0, [pc, #96]	@ (80026bc <FrequencyInit+0xfc>)
 800265c:	f00a f8c8 	bl	800c7f0 <_txe_timer_create>
        timerExpirationFrequency, 1, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[2].resetTimer, "resetTimer3", 
 8002660:	232c      	movs	r3, #44	@ 0x2c
 8002662:	9303      	str	r3, [sp, #12]
 8002664:	2300      	movs	r3, #0
 8002666:	9302      	str	r3, [sp, #8]
 8002668:	2300      	movs	r3, #0
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2302      	movs	r3, #2
 8002674:	4a0d      	ldr	r2, [pc, #52]	@ (80026ac <FrequencyInit+0xec>)
 8002676:	4912      	ldr	r1, [pc, #72]	@ (80026c0 <FrequencyInit+0x100>)
 8002678:	4812      	ldr	r0, [pc, #72]	@ (80026c4 <FrequencyInit+0x104>)
 800267a:	f00a f8b9 	bl	800c7f0 <_txe_timer_create>
        timerExpirationFrequency, 2, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    tx_timer_create(&ChannelData[3].resetTimer, "resetTimer4", 
 800267e:	232c      	movs	r3, #44	@ 0x2c
 8002680:	9303      	str	r3, [sp, #12]
 8002682:	2300      	movs	r3, #0
 8002684:	9302      	str	r3, [sp, #8]
 8002686:	2300      	movs	r3, #0
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2303      	movs	r3, #3
 8002692:	4a06      	ldr	r2, [pc, #24]	@ (80026ac <FrequencyInit+0xec>)
 8002694:	490c      	ldr	r1, [pc, #48]	@ (80026c8 <FrequencyInit+0x108>)
 8002696:	480d      	ldr	r0, [pc, #52]	@ (80026cc <FrequencyInit+0x10c>)
 8002698:	f00a f8aa 	bl	800c7f0 <_txe_timer_create>
        timerExpirationFrequency, 3, FREQUENCY_RESET_TIME, 0, TX_NO_ACTIVATE);
    return retVal;
 800269c:	78fb      	ldrb	r3, [r7, #3]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20010b28 	.word	0x20010b28
 80026ac:	0800282d 	.word	0x0800282d
 80026b0:	0800cb20 	.word	0x0800cb20
 80026b4:	20010b34 	.word	0x20010b34
 80026b8:	0800cb2c 	.word	0x0800cb2c
 80026bc:	20010b74 	.word	0x20010b74
 80026c0:	0800cb38 	.word	0x0800cb38
 80026c4:	20010bb4 	.word	0x20010bb4
 80026c8:	0800cb44 	.word	0x0800cb44
 80026cc:	20010bf4 	.word	0x20010bf4

080026d0 <HAL_TIM_IC_CaptureCallback>:
  * @param htim: Timer handle
  * @retval void
  */
void HAL_TIM_IC_CaptureCallback(
    TIM_HandleTypeDef* htim
){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
    uint8_t channel = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
    switch (htim->Channel){
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7f1b      	ldrb	r3, [r3, #28]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	2b07      	cmp	r3, #7
 80026e4:	d827      	bhi.n	8002736 <HAL_TIM_IC_CaptureCallback+0x66>
 80026e6:	a201      	add	r2, pc, #4	@ (adr r2, 80026ec <HAL_TIM_IC_CaptureCallback+0x1c>)
 80026e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ec:	0800270d 	.word	0x0800270d
 80026f0:	08002713 	.word	0x08002713
 80026f4:	08002737 	.word	0x08002737
 80026f8:	08002719 	.word	0x08002719
 80026fc:	08002737 	.word	0x08002737
 8002700:	08002737 	.word	0x08002737
 8002704:	08002737 	.word	0x08002737
 8002708:	0800271f 	.word	0x0800271f
        case HAL_TIM_ACTIVE_CHANNEL_1:
            channel = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
            break;
 8002710:	e008      	b.n	8002724 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_2:
            channel = 1;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
            break;
 8002716:	e005      	b.n	8002724 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            channel = 2;
 8002718:	2302      	movs	r3, #2
 800271a:	73fb      	strb	r3, [r7, #15]
            break;
 800271c:	e002      	b.n	8002724 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_4:
            channel = 3;
 800271e:	2303      	movs	r3, #3
 8002720:	73fb      	strb	r3, [r7, #15]
            break;
 8002722:	bf00      	nop
        default:
            return;
    }
    CalculateFrequency(&ChannelData[channel], htim);
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	019b      	lsls	r3, r3, #6
 8002728:	4a05      	ldr	r2, [pc, #20]	@ (8002740 <HAL_TIM_IC_CaptureCallback+0x70>)
 800272a:	4413      	add	r3, r2
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f808 	bl	8002744 <CalculateFrequency>
 8002734:	e000      	b.n	8002738 <HAL_TIM_IC_CaptureCallback+0x68>
            return;
 8002736:	bf00      	nop
}
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20010b28 	.word	0x20010b28

08002744 <CalculateFrequency>:

static uint8_t CalculateFrequency(
    frequency_t* channel,
    TIM_HandleTypeDef* htim
){
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
    uint8_t retVal = UCR_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
    // Check if first rising edge to begin capture
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 8002752:	2100      	movs	r1, #0
 8002754:	4834      	ldr	r0, [pc, #208]	@ (8002828 <CalculateFrequency+0xe4>)
 8002756:	f009 fea5 	bl	800c4a4 <_txe_semaphore_get>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <CalculateFrequency+0x24>
        retVal = UCR_NOT_OK;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
        return retVal;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	e05a      	b.n	800281e <CalculateFrequency+0xda>
    }
    if (channel->isFirstCapture == false){
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7a1b      	ldrb	r3, [r3, #8]
 800276c:	f083 0301 	eor.w	r3, r3, #1
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d012      	beq.n	800279c <CalculateFrequency+0x58>
        if(TX_SUCCESS != tx_timer_activate(&channel->resetTimer)){
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	330c      	adds	r3, #12
 800277a:	4618      	mov	r0, r3
 800277c:	f009 ffe4 	bl	800c748 <_txe_timer_activate>
                   // ADD error handler stuff here;
        }
        channel->firstValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002786:	4619      	mov	r1, r3
 8002788:	6838      	ldr	r0, [r7, #0]
 800278a:	f006 fdb1 	bl	80092f0 <HAL_TIM_ReadCapturedValue>
 800278e:	4602      	mov	r2, r0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	601a      	str	r2, [r3, #0]
        // Set flag to indicate next value will be second rising edge
        channel->isFirstCapture = true;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	721a      	strb	r2, [r3, #8]
 800279a:	e034      	b.n	8002806 <CalculateFrequency+0xc2>
    } else if (true == channel->isFirstCapture){
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7a1b      	ldrb	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d030      	beq.n	8002806 <CalculateFrequency+0xc2>
        // Stop the reset timer
        if(TX_SUCCESS != tx_timer_deactivate(&channel->resetTimer)){
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	330c      	adds	r3, #12
 80027a8:	4618      	mov	r0, r3
 80027aa:	f00a f8cd 	bl	800c948 <_txe_timer_deactivate>
            // ADD error handler stuff here;
        }
        channel->secondValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027b4:	4619      	mov	r1, r3
 80027b6:	6838      	ldr	r0, [r7, #0]
 80027b8:	f006 fd9a 	bl	80092f0 <HAL_TIM_ReadCapturedValue>
 80027bc:	4602      	mov	r2, r0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	605a      	str	r2, [r3, #4]
        // Check if the first capture was before the second
        if (channel->secondValue > channel->firstValue){
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d907      	bls.n	80027de <CalculateFrequency+0x9a>
            // Calculate the difference
            channel->difference = channel->secondValue - channel->firstValue;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	1ad2      	subs	r2, r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027dc:	e010      	b.n	8002800 <CalculateFrequency+0xbc>
        } else if (channel->secondValue < channel->firstValue){
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d20a      	bcs.n	8002800 <CalculateFrequency+0xbc>
            channel->difference = ((htim->Init.Period - channel->firstValue) + channel->secondValue) + 1;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        // Reset the first capture state
        channel->isFirstCapture = false;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	721a      	strb	r2, [r3, #8]
    }
    // Release the semaphore
    if(TX_SUCCESS != tx_semaphore_put(&semaphoreFrequency)){
 8002806:	4808      	ldr	r0, [pc, #32]	@ (8002828 <CalculateFrequency+0xe4>)
 8002808:	f009 fe8e 	bl	800c528 <_txe_semaphore_put>
        // ADD error handler stuff here;
    }
    // Reset the timer;
    if(TX_SUCCESS != tx_timer_change(&channel->resetTimer, FREQUENCY_RESET_TIME, 0)){
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	330c      	adds	r3, #12
 8002810:	2200      	movs	r2, #0
 8002812:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002816:	4618      	mov	r0, r3
 8002818:	f009 ffb4 	bl	800c784 <_txe_timer_change>
        // ADD error handler stuff here;
    }
    return retVal;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20010ab8 	.word	0x20010ab8

0800282c <timerExpirationFrequency>:
  * @param channel: the number of the timer
  * @retval void
  */
void timerExpirationFrequency(
    ULONG channel
){
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    // Attempt to acquire the semaphore
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 8002834:	2100      	movs	r1, #0
 8002836:	4818      	ldr	r0, [pc, #96]	@ (8002898 <timerExpirationFrequency+0x6c>)
 8002838:	f009 fe34 	bl	800c4a4 <_txe_semaphore_get>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d126      	bne.n	8002890 <timerExpirationFrequency+0x64>
        return;
    }
    // Set the first capture and difference to zero
    ChannelData[channel].isFirstCapture = false;
 8002842:	4a16      	ldr	r2, [pc, #88]	@ (800289c <timerExpirationFrequency+0x70>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	019b      	lsls	r3, r3, #6
 8002848:	4413      	add	r3, r2
 800284a:	3308      	adds	r3, #8
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
    ChannelData[channel].difference = 0;
 8002850:	4a12      	ldr	r2, [pc, #72]	@ (800289c <timerExpirationFrequency+0x70>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	019b      	lsls	r3, r3, #6
 8002856:	4413      	add	r3, r2
 8002858:	333c      	adds	r3, #60	@ 0x3c
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
    // Reset the timer
    tx_timer_deactivate(&ChannelData[channel].resetTimer);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	3308      	adds	r3, #8
 8002864:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <timerExpirationFrequency+0x70>)
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	4618      	mov	r0, r3
 800286c:	f00a f86c 	bl	800c948 <_txe_timer_deactivate>
    tx_timer_change(&ChannelData[channel].resetTimer, FREQUENCY_RESET_TIME, 0);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	019b      	lsls	r3, r3, #6
 8002874:	3308      	adds	r3, #8
 8002876:	4a09      	ldr	r2, [pc, #36]	@ (800289c <timerExpirationFrequency+0x70>)
 8002878:	4413      	add	r3, r2
 800287a:	3304      	adds	r3, #4
 800287c:	2200      	movs	r2, #0
 800287e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002882:	4618      	mov	r0, r3
 8002884:	f009 ff7e 	bl	800c784 <_txe_timer_change>
    // Release the semaphore
    tx_semaphore_put(&semaphoreFrequency);
 8002888:	4803      	ldr	r0, [pc, #12]	@ (8002898 <timerExpirationFrequency+0x6c>)
 800288a:	f009 fe4d 	bl	800c528 <_txe_semaphore_put>
    return;
 800288e:	e000      	b.n	8002892 <timerExpirationFrequency+0x66>
        return;
 8002890:	bf00      	nop
}
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20010ab8 	.word	0x20010ab8
 800289c:	20010b28 	.word	0x20010b28

080028a0 <HAL_GPIO_EXTI_Callback>:
#include "exti.h"
#include "stdint.h"
#include "main.h"
#include "threadx.h"

void HAL_GPIO_EXTI_Callback(uint16_t pin){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	80fb      	strh	r3, [r7, #6]
    if(pin == DRDY1_Pin){
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d103      	bne.n	80028b8 <HAL_GPIO_EXTI_Callback+0x18>
        tx_semaphore_put(&semaphoreExADC1);
 80028b0:	4807      	ldr	r0, [pc, #28]	@ (80028d0 <HAL_GPIO_EXTI_Callback+0x30>)
 80028b2:	f009 fe39 	bl	800c528 <_txe_semaphore_put>
    }else if(pin == DRDY2_Pin){
        tx_semaphore_put(&semaphoreExADC2);
    }
}
 80028b6:	e006      	b.n	80028c6 <HAL_GPIO_EXTI_Callback+0x26>
    }else if(pin == DRDY2_Pin){
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028be:	d102      	bne.n	80028c6 <HAL_GPIO_EXTI_Callback+0x26>
        tx_semaphore_put(&semaphoreExADC2);
 80028c0:	4804      	ldr	r0, [pc, #16]	@ (80028d4 <HAL_GPIO_EXTI_Callback+0x34>)
 80028c2:	f009 fe31 	bl	800c528 <_txe_semaphore_put>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20010ad4 	.word	0x20010ad4
 80028d4:	20010af0 	.word	0x20010af0

080028d8 <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	80fb      	strh	r3, [r7, #6]
 80028e2:	460b      	mov	r3, r1
 80028e4:	717b      	strb	r3, [r7, #5]
 80028e6:	4613      	mov	r3, r2
 80028e8:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	797b      	ldrb	r3, [r7, #5]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	793b      	ldrb	r3, [r7, #4]
 80028f6:	4013      	ands	r3, r2
 80028f8:	b2db      	uxtb	r3, r3
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <pack_left_shift_u32>:

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	70fb      	strb	r3, [r7, #3]
 8002912:	4613      	mov	r3, r2
 8002914:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	b2da      	uxtb	r2, r3
 8002920:	78bb      	ldrb	r3, [r7, #2]
 8002922:	4013      	ands	r3, r2
 8002924:	b2db      	uxtb	r3, r3
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	80fb      	strh	r3, [r7, #6]
 800293c:	460b      	mov	r3, r1
 800293e:	717b      	strb	r3, [r7, #5]
 8002940:	4613      	mov	r3, r2
 8002942:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8002944:	88fa      	ldrh	r2, [r7, #6]
 8002946:	797b      	ldrb	r3, [r7, #5]
 8002948:	fa42 f303 	asr.w	r3, r2, r3
 800294c:	b2da      	uxtb	r2, r3
 800294e:	793b      	ldrb	r3, [r7, #4]
 8002950:	4013      	ands	r3, r2
 8002952:	b2db      	uxtb	r3, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <pack_right_shift_u32>:

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
 800296c:	4613      	mov	r3, r2
 800296e:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
 8002978:	b2da      	uxtb	r2, r3
 800297a:	78bb      	ldrb	r3, [r7, #2]
 800297c:	4013      	ands	r3, r2
 800297e:	b2db      	uxtb	r3, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <ucr_01_front_analog_pack>:

int ucr_01_front_analog_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_analog_t *src_p,
    size_t size)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
    if (size < 16u) {
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b0f      	cmp	r3, #15
 800299c:	d802      	bhi.n	80029a4 <ucr_01_front_analog_pack+0x18>
        return (-EINVAL);
 800299e:	f06f 0315 	mvn.w	r3, #21
 80029a2:	e113      	b.n	8002bcc <ucr_01_front_analog_pack+0x240>
    }

    memset(&dst_p[0], 0, 16);
 80029a4:	2210      	movs	r2, #16
 80029a6:	2100      	movs	r1, #0
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f009 ffeb 	bl	800c984 <memset>

    dst_p[0] |= pack_left_shift_u16(src_p->analog1, 0u, 0xffu);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	22ff      	movs	r2, #255	@ 0xff
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff8e 	bl	80028d8 <pack_left_shift_u16>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u16(src_p->analog1, 8u, 0xffu);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	22ff      	movs	r2, #255	@ 0xff
 80029d2:	2108      	movs	r1, #8
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ffac 	bl	8002932 <pack_right_shift_u16>
 80029da:	4603      	mov	r3, r0
 80029dc:	4619      	mov	r1, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3301      	adds	r3, #1
 80029e2:	781a      	ldrb	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3301      	adds	r3, #1
 80029e8:	430a      	orrs	r2, r1
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_left_shift_u16(src_p->analog2, 0u, 0xffu);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	885b      	ldrh	r3, [r3, #2]
 80029f2:	22ff      	movs	r2, #255	@ 0xff
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff ff6e 	bl	80028d8 <pack_left_shift_u16>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4619      	mov	r1, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3302      	adds	r3, #2
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u16(src_p->analog2, 8u, 0xffu);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	885b      	ldrh	r3, [r3, #2]
 8002a14:	22ff      	movs	r2, #255	@ 0xff
 8002a16:	2108      	movs	r1, #8
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff8a 	bl	8002932 <pack_right_shift_u16>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4619      	mov	r1, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3303      	adds	r3, #3
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3303      	adds	r3, #3
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u16(src_p->analog3, 0u, 0xffu);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	889b      	ldrh	r3, [r3, #4]
 8002a36:	22ff      	movs	r2, #255	@ 0xff
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff4c 	bl	80028d8 <pack_left_shift_u16>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4619      	mov	r1, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3304      	adds	r3, #4
 8002a48:	781a      	ldrb	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(src_p->analog3, 8u, 0xffu);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	889b      	ldrh	r3, [r3, #4]
 8002a58:	22ff      	movs	r2, #255	@ 0xff
 8002a5a:	2108      	movs	r1, #8
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff68 	bl	8002932 <pack_right_shift_u16>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4619      	mov	r1, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3305      	adds	r3, #5
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3305      	adds	r3, #5
 8002a70:	430a      	orrs	r2, r1
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u16(src_p->analog4, 0u, 0xffu);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	88db      	ldrh	r3, [r3, #6]
 8002a7a:	22ff      	movs	r2, #255	@ 0xff
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ff2a 	bl	80028d8 <pack_left_shift_u16>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4619      	mov	r1, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3306      	adds	r3, #6
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3306      	adds	r3, #6
 8002a92:	430a      	orrs	r2, r1
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u16(src_p->analog4, 8u, 0xffu);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	88db      	ldrh	r3, [r3, #6]
 8002a9c:	22ff      	movs	r2, #255	@ 0xff
 8002a9e:	2108      	movs	r1, #8
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff46 	bl	8002932 <pack_right_shift_u16>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3307      	adds	r3, #7
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3307      	adds	r3, #7
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_left_shift_u16(src_p->analog5, 0u, 0xffu);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	891b      	ldrh	r3, [r3, #8]
 8002abe:	22ff      	movs	r2, #255	@ 0xff
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ff08 	bl	80028d8 <pack_left_shift_u16>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4619      	mov	r1, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3308      	adds	r3, #8
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u16(src_p->analog5, 8u, 0xffu);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	891b      	ldrh	r3, [r3, #8]
 8002ae0:	22ff      	movs	r2, #255	@ 0xff
 8002ae2:	2108      	movs	r1, #8
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff24 	bl	8002932 <pack_right_shift_u16>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4619      	mov	r1, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3309      	adds	r3, #9
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3309      	adds	r3, #9
 8002af8:	430a      	orrs	r2, r1
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_left_shift_u16(src_p->analog6, 0u, 0xffu);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	895b      	ldrh	r3, [r3, #10]
 8002b02:	22ff      	movs	r2, #255	@ 0xff
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fee6 	bl	80028d8 <pack_left_shift_u16>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4619      	mov	r1, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	330a      	adds	r3, #10
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	330a      	adds	r3, #10
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u16(src_p->analog6, 8u, 0xffu);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	895b      	ldrh	r3, [r3, #10]
 8002b24:	22ff      	movs	r2, #255	@ 0xff
 8002b26:	2108      	movs	r1, #8
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff02 	bl	8002932 <pack_right_shift_u16>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4619      	mov	r1, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	330b      	adds	r3, #11
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	330b      	adds	r3, #11
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u16(src_p->analog7, 0u, 0xffu);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	899b      	ldrh	r3, [r3, #12]
 8002b46:	22ff      	movs	r2, #255	@ 0xff
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fec4 	bl	80028d8 <pack_left_shift_u16>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4619      	mov	r1, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	330c      	adds	r3, #12
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u16(src_p->analog7, 8u, 0xffu);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	899b      	ldrh	r3, [r3, #12]
 8002b68:	22ff      	movs	r2, #255	@ 0xff
 8002b6a:	2108      	movs	r1, #8
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fee0 	bl	8002932 <pack_right_shift_u16>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4619      	mov	r1, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	330d      	adds	r3, #13
 8002b7a:	781a      	ldrb	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	330d      	adds	r3, #13
 8002b80:	430a      	orrs	r2, r1
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_left_shift_u16(src_p->analog8, 0u, 0xffu);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	89db      	ldrh	r3, [r3, #14]
 8002b8a:	22ff      	movs	r2, #255	@ 0xff
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fea2 	bl	80028d8 <pack_left_shift_u16>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4619      	mov	r1, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	330e      	adds	r3, #14
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	330e      	adds	r3, #14
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u16(src_p->analog8, 8u, 0xffu);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	89db      	ldrh	r3, [r3, #14]
 8002bac:	22ff      	movs	r2, #255	@ 0xff
 8002bae:	2108      	movs	r1, #8
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff febe 	bl	8002932 <pack_right_shift_u16>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4619      	mov	r1, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	330f      	adds	r3, #15
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	330f      	adds	r3, #15
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

    return (16);
 8002bca:	2310      	movs	r3, #16
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <ucr_01_front_frequency_pack>:

int ucr_01_front_frequency_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_frequency_t *src_p,
    size_t size)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
    if (size < 16u) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b0f      	cmp	r3, #15
 8002be4:	d802      	bhi.n	8002bec <ucr_01_front_frequency_pack+0x18>
        return (-EINVAL);
 8002be6:	f06f 0315 	mvn.w	r3, #21
 8002bea:	e113      	b.n	8002e14 <ucr_01_front_frequency_pack+0x240>
    }

    memset(&dst_p[0], 0, 16);
 8002bec:	2210      	movs	r2, #16
 8002bee:	2100      	movs	r1, #0
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f009 fec7 	bl	800c984 <memset>

    dst_p[0] |= pack_left_shift_u32(src_p->frequency1, 0u, 0xffu);
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	22ff      	movs	r2, #255	@ 0xff
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fe81 	bl	8002906 <pack_left_shift_u32>
 8002c04:	4603      	mov	r3, r0
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(src_p->frequency1, 8u, 0xffu);
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	22ff      	movs	r2, #255	@ 0xff
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fe9f 	bl	8002960 <pack_right_shift_u32>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4619      	mov	r1, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	781a      	ldrb	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	430a      	orrs	r2, r1
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(src_p->frequency1, 16u, 0xffu);
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	22ff      	movs	r2, #255	@ 0xff
 8002c3c:	2110      	movs	r1, #16
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fe8e 	bl	8002960 <pack_right_shift_u32>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4619      	mov	r1, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3302      	adds	r3, #2
 8002c52:	430a      	orrs	r2, r1
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u32(src_p->frequency1, 24u, 0xffu);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	22ff      	movs	r2, #255	@ 0xff
 8002c5e:	2118      	movs	r1, #24
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fe7d 	bl	8002960 <pack_right_shift_u32>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4619      	mov	r1, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3303      	adds	r3, #3
 8002c6e:	781a      	ldrb	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3303      	adds	r3, #3
 8002c74:	430a      	orrs	r2, r1
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_left_shift_u32(src_p->frequency2, 0u, 0xffu);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	22ff      	movs	r2, #255	@ 0xff
 8002c80:	2100      	movs	r1, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fe3f 	bl	8002906 <pack_left_shift_u32>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	781a      	ldrb	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3304      	adds	r3, #4
 8002c96:	430a      	orrs	r2, r1
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(src_p->frequency2, 8u, 0xffu);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	22ff      	movs	r2, #255	@ 0xff
 8002ca2:	2108      	movs	r1, #8
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fe5b 	bl	8002960 <pack_right_shift_u32>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4619      	mov	r1, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	3305      	adds	r3, #5
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3305      	adds	r3, #5
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_right_shift_u32(src_p->frequency2, 16u, 0xffu);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	22ff      	movs	r2, #255	@ 0xff
 8002cc4:	2110      	movs	r1, #16
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fe4a 	bl	8002960 <pack_right_shift_u32>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4619      	mov	r1, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3306      	adds	r3, #6
 8002cd4:	781a      	ldrb	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3306      	adds	r3, #6
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(src_p->frequency2, 24u, 0xffu);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	22ff      	movs	r2, #255	@ 0xff
 8002ce6:	2118      	movs	r1, #24
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fe39 	bl	8002960 <pack_right_shift_u32>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3307      	adds	r3, #7
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3307      	adds	r3, #7
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_left_shift_u32(src_p->frequency3, 0u, 0xffu);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	22ff      	movs	r2, #255	@ 0xff
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fdfb 	bl	8002906 <pack_left_shift_u32>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4619      	mov	r1, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3308      	adds	r3, #8
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_right_shift_u32(src_p->frequency3, 8u, 0xffu);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	22ff      	movs	r2, #255	@ 0xff
 8002d2a:	2108      	movs	r1, #8
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fe17 	bl	8002960 <pack_right_shift_u32>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4619      	mov	r1, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3309      	adds	r3, #9
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3309      	adds	r3, #9
 8002d40:	430a      	orrs	r2, r1
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u32(src_p->frequency3, 16u, 0xffu);
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	22ff      	movs	r2, #255	@ 0xff
 8002d4c:	2110      	movs	r1, #16
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fe06 	bl	8002960 <pack_right_shift_u32>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4619      	mov	r1, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	330a      	adds	r3, #10
 8002d5c:	781a      	ldrb	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	330a      	adds	r3, #10
 8002d62:	430a      	orrs	r2, r1
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u32(src_p->frequency3, 24u, 0xffu);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	22ff      	movs	r2, #255	@ 0xff
 8002d6e:	2118      	movs	r1, #24
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fdf5 	bl	8002960 <pack_right_shift_u32>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4619      	mov	r1, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	330b      	adds	r3, #11
 8002d7e:	781a      	ldrb	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	330b      	adds	r3, #11
 8002d84:	430a      	orrs	r2, r1
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u32(src_p->frequency4, 0u, 0xffu);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	22ff      	movs	r2, #255	@ 0xff
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fdb7 	bl	8002906 <pack_left_shift_u32>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	330c      	adds	r3, #12
 8002da6:	430a      	orrs	r2, r1
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u32(src_p->frequency4, 8u, 0xffu);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	22ff      	movs	r2, #255	@ 0xff
 8002db2:	2108      	movs	r1, #8
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fdd3 	bl	8002960 <pack_right_shift_u32>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	330d      	adds	r3, #13
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	330d      	adds	r3, #13
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u32(src_p->frequency4, 16u, 0xffu);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	22ff      	movs	r2, #255	@ 0xff
 8002dd4:	2110      	movs	r1, #16
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fdc2 	bl	8002960 <pack_right_shift_u32>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4619      	mov	r1, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	330e      	adds	r3, #14
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	330e      	adds	r3, #14
 8002dea:	430a      	orrs	r2, r1
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_right_shift_u32(src_p->frequency4, 24u, 0xffu);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	22ff      	movs	r2, #255	@ 0xff
 8002df6:	2118      	movs	r1, #24
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fdb1 	bl	8002960 <pack_right_shift_u32>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4619      	mov	r1, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	330f      	adds	r3, #15
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	330f      	adds	r3, #15
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    return (16);
 8002e12:	2310      	movs	r3, #16
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <ucr_01_front_frequency_frequency1_encode>:

    return 0;
}

uint32_t ucr_01_front_frequency_frequency1_encode(double value)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	ed87 0b00 	vstr	d0, [r7]
    return (uint32_t)(value);
 8002e26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e2a:	f7fd fcd1 	bl	80007d0 <__aeabi_d2uiz>
 8002e2e:	4603      	mov	r3, r0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <ucr_01_front_aero_pack>:

int ucr_01_front_aero_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_aero_t *src_p,
    size_t size)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	@ 0x28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
    uint16_t temperature3;
    uint32_t pressure1;
    uint32_t pressure2;
    uint32_t pressure3;

    if (size < 16u) {
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	d802      	bhi.n	8002e50 <ucr_01_front_aero_pack+0x18>
        return (-EINVAL);
 8002e4a:	f06f 0315 	mvn.w	r3, #21
 8002e4e:	e0ff      	b.n	8003050 <ucr_01_front_aero_pack+0x218>
    }

    memset(&dst_p[0], 0, 16);
 8002e50:	2210      	movs	r2, #16
 8002e52:	2100      	movs	r1, #0
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f009 fd95 	bl	800c984 <memset>

    pressure1 = (uint32_t)src_p->pressure1;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    dst_p[0] |= pack_left_shift_u32(pressure1, 0u, 0xffu);
 8002e60:	22ff      	movs	r2, #255	@ 0xff
 8002e62:	2100      	movs	r1, #0
 8002e64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e66:	f7ff fd4e 	bl	8002906 <pack_left_shift_u32>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(pressure1, 8u, 0xffu);
 8002e7a:	22ff      	movs	r2, #255	@ 0xff
 8002e7c:	2108      	movs	r1, #8
 8002e7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e80:	f7ff fd6e 	bl	8002960 <pack_right_shift_u32>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4619      	mov	r1, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	781a      	ldrb	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3301      	adds	r3, #1
 8002e92:	430a      	orrs	r2, r1
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(pressure1, 16u, 0xffu);
 8002e98:	22ff      	movs	r2, #255	@ 0xff
 8002e9a:	2110      	movs	r1, #16
 8002e9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e9e:	f7ff fd5f 	bl	8002960 <pack_right_shift_u32>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	781a      	ldrb	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3302      	adds	r3, #2
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
    pressure2 = (uint32_t)src_p->pressure2;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	623b      	str	r3, [r7, #32]
    dst_p[3] |= pack_left_shift_u32(pressure2, 0u, 0xffu);
 8002ebc:	22ff      	movs	r2, #255	@ 0xff
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	6a38      	ldr	r0, [r7, #32]
 8002ec2:	f7ff fd20 	bl	8002906 <pack_left_shift_u32>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4619      	mov	r1, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3303      	adds	r3, #3
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3303      	adds	r3, #3
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u32(pressure2, 8u, 0xffu);
 8002eda:	22ff      	movs	r2, #255	@ 0xff
 8002edc:	2108      	movs	r1, #8
 8002ede:	6a38      	ldr	r0, [r7, #32]
 8002ee0:	f7ff fd3e 	bl	8002960 <pack_right_shift_u32>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3304      	adds	r3, #4
 8002eec:	781a      	ldrb	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(pressure2, 16u, 0xffu);
 8002ef8:	22ff      	movs	r2, #255	@ 0xff
 8002efa:	2110      	movs	r1, #16
 8002efc:	6a38      	ldr	r0, [r7, #32]
 8002efe:	f7ff fd2f 	bl	8002960 <pack_right_shift_u32>
 8002f02:	4603      	mov	r3, r0
 8002f04:	4619      	mov	r1, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3305      	adds	r3, #5
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3305      	adds	r3, #5
 8002f10:	430a      	orrs	r2, r1
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]
    pressure3 = (uint32_t)src_p->pressure3;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61fb      	str	r3, [r7, #28]
    dst_p[6] |= pack_left_shift_u32(pressure3, 0u, 0xffu);
 8002f1c:	22ff      	movs	r2, #255	@ 0xff
 8002f1e:	2100      	movs	r1, #0
 8002f20:	69f8      	ldr	r0, [r7, #28]
 8002f22:	f7ff fcf0 	bl	8002906 <pack_left_shift_u32>
 8002f26:	4603      	mov	r3, r0
 8002f28:	4619      	mov	r1, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3306      	adds	r3, #6
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3306      	adds	r3, #6
 8002f34:	430a      	orrs	r2, r1
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(pressure3, 8u, 0xffu);
 8002f3a:	22ff      	movs	r2, #255	@ 0xff
 8002f3c:	2108      	movs	r1, #8
 8002f3e:	69f8      	ldr	r0, [r7, #28]
 8002f40:	f7ff fd0e 	bl	8002960 <pack_right_shift_u32>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4619      	mov	r1, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3307      	adds	r3, #7
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	3307      	adds	r3, #7
 8002f52:	430a      	orrs	r2, r1
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_right_shift_u32(pressure3, 16u, 0xffu);
 8002f58:	22ff      	movs	r2, #255	@ 0xff
 8002f5a:	2110      	movs	r1, #16
 8002f5c:	69f8      	ldr	r0, [r7, #28]
 8002f5e:	f7ff fcff 	bl	8002960 <pack_right_shift_u32>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4619      	mov	r1, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3308      	adds	r3, #8
 8002f6a:	781a      	ldrb	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3308      	adds	r3, #8
 8002f70:	430a      	orrs	r2, r1
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]
    temperature1 = (uint16_t)src_p->temperature1;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002f7c:	837b      	strh	r3, [r7, #26]
    dst_p[9] |= pack_left_shift_u16(temperature1, 0u, 0xffu);
 8002f7e:	8b7b      	ldrh	r3, [r7, #26]
 8002f80:	22ff      	movs	r2, #255	@ 0xff
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fca7 	bl	80028d8 <pack_left_shift_u16>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3309      	adds	r3, #9
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3309      	adds	r3, #9
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u16(temperature1, 8u, 0xffu);
 8002f9e:	8b7b      	ldrh	r3, [r7, #26]
 8002fa0:	22ff      	movs	r2, #255	@ 0xff
 8002fa2:	2108      	movs	r1, #8
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fcc4 	bl	8002932 <pack_right_shift_u16>
 8002faa:	4603      	mov	r3, r0
 8002fac:	4619      	mov	r1, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	330a      	adds	r3, #10
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	330a      	adds	r3, #10
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]
    temperature2 = (uint16_t)src_p->temperature2;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002fc4:	833b      	strh	r3, [r7, #24]
    dst_p[11] |= pack_left_shift_u16(temperature2, 0u, 0xffu);
 8002fc6:	8b3b      	ldrh	r3, [r7, #24]
 8002fc8:	22ff      	movs	r2, #255	@ 0xff
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fc83 	bl	80028d8 <pack_left_shift_u16>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	330b      	adds	r3, #11
 8002fda:	781a      	ldrb	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	330b      	adds	r3, #11
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_right_shift_u16(temperature2, 8u, 0xffu);
 8002fe6:	8b3b      	ldrh	r3, [r7, #24]
 8002fe8:	22ff      	movs	r2, #255	@ 0xff
 8002fea:	2108      	movs	r1, #8
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fca0 	bl	8002932 <pack_right_shift_u16>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	330c      	adds	r3, #12
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	330c      	adds	r3, #12
 8003000:	430a      	orrs	r2, r1
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
    temperature3 = (uint16_t)src_p->temperature3;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800300c:	82fb      	strh	r3, [r7, #22]
    dst_p[13] |= pack_left_shift_u16(temperature3, 0u, 0xffu);
 800300e:	8afb      	ldrh	r3, [r7, #22]
 8003010:	22ff      	movs	r2, #255	@ 0xff
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fc5f 	bl	80028d8 <pack_left_shift_u16>
 800301a:	4603      	mov	r3, r0
 800301c:	4619      	mov	r1, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	330d      	adds	r3, #13
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	330d      	adds	r3, #13
 8003028:	430a      	orrs	r2, r1
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u16(temperature3, 8u, 0xffu);
 800302e:	8afb      	ldrh	r3, [r7, #22]
 8003030:	22ff      	movs	r2, #255	@ 0xff
 8003032:	2108      	movs	r1, #8
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fc7c 	bl	8002932 <pack_right_shift_u16>
 800303a:	4603      	mov	r3, r0
 800303c:	4619      	mov	r1, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	330e      	adds	r3, #14
 8003042:	781a      	ldrb	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	330e      	adds	r3, #14
 8003048:	430a      	orrs	r2, r1
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

    return (16);
 800304e:	2310      	movs	r3, #16
}
 8003050:	4618      	mov	r0, r3
 8003052:	3728      	adds	r7, #40	@ 0x28
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003062:	2003      	movs	r0, #3
 8003064:	f001 ff17 	bl	8004e96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003068:	200f      	movs	r0, #15
 800306a:	f7fe fcf9 	bl	8001a60 <HAL_InitTick>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	71fb      	strb	r3, [r7, #7]
 8003078:	e001      	b.n	800307e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800307a:	f7fe fcc9 	bl	8001a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800307e:	79fb      	ldrb	r3, [r7, #7]

}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800308c:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <HAL_IncTick+0x1c>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <HAL_IncTick+0x20>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4413      	add	r3, r2
 8003096:	4a03      	ldr	r2, [pc, #12]	@ (80030a4 <HAL_IncTick+0x1c>)
 8003098:	6013      	str	r3, [r2, #0]
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	20010c28 	.word	0x20010c28
 80030a8:	20000188 	.word	0x20000188

080030ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return uwTick;
 80030b0:	4b03      	ldr	r3, [pc, #12]	@ (80030c0 <HAL_GetTick+0x14>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20010c28 	.word	0x20010c28

080030c4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80030cc:	4b06      	ldr	r3, [pc, #24]	@ (80030e8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 0202 	bic.w	r2, r3, #2
 80030d4:	4904      	ldr	r1, [pc, #16]	@ (80030e8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40010030 	.word	0x40010030

080030ec <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a04      	ldr	r2, [pc, #16]	@ (8003108 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40010030 	.word	0x40010030

0800310c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	609a      	str	r2, [r3, #8]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	609a      	str	r2, [r3, #8]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3360      	adds	r3, #96	@ 0x60
 8003186:	461a      	mov	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4b08      	ldr	r3, [pc, #32]	@ (80031b8 <LL_ADC_SetOffset+0x44>)
 8003196:	4013      	ands	r3, r2
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	03fff000 	.word	0x03fff000

080031bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3360      	adds	r3, #96	@ 0x60
 80031ca:	461a      	mov	r2, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3360      	adds	r3, #96	@ 0x60
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	431a      	orrs	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800321e:	b480      	push	{r7}
 8003220:	b087      	sub	sp, #28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3360      	adds	r3, #96	@ 0x60
 800322e:	461a      	mov	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	431a      	orrs	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003248:	bf00      	nop
 800324a:	371c      	adds	r7, #28
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3360      	adds	r3, #96	@ 0x60
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	431a      	orrs	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	615a      	str	r2, [r3, #20]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032c4:	2301      	movs	r3, #1
 80032c6:	e000      	b.n	80032ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b087      	sub	sp, #28
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3330      	adds	r3, #48	@ 0x30
 80032e6:	461a      	mov	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	4413      	add	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	211f      	movs	r1, #31
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	401a      	ands	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	f003 011f 	and.w	r1, r3, #31
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	431a      	orrs	r2, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3314      	adds	r3, #20
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	0e5b      	lsrs	r3, r3, #25
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	4413      	add	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	0d1b      	lsrs	r3, r3, #20
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2107      	movs	r1, #7
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	401a      	ands	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	0d1b      	lsrs	r3, r3, #20
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	431a      	orrs	r2, r3
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800339e:	bf00      	nop
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c4:	43db      	mvns	r3, r3
 80033c6:	401a      	ands	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0318 	and.w	r3, r3, #24
 80033ce:	4908      	ldr	r1, [pc, #32]	@ (80033f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80033d0:	40d9      	lsrs	r1, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	400b      	ands	r3, r1
 80033d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033da:	431a      	orrs	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	0007ffff 	.word	0x0007ffff

080033f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 031f 	and.w	r3, r3, #31
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800343c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6093      	str	r3, [r2, #8]
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003464:	d101      	bne.n	800346a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003488:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800348c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034b4:	d101      	bne.n	80034ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034dc:	f043 0201 	orr.w	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <LL_ADC_IsEnabled+0x18>
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <LL_ADC_IsEnabled+0x1a>
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003526:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800352a:	f043 0204 	orr.w	r2, r3, #4
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b04      	cmp	r3, #4
 8003550:	d101      	bne.n	8003556 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b08      	cmp	r3, #8
 8003576:	d101      	bne.n	800357c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b089      	sub	sp, #36	@ 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e1a9      	b.n	80038fa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7fd fc21 	bl	8000dfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff3f 	bl	8003450 <LL_ADC_IsDeepPowerDownEnabled>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d004      	beq.n	80035e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ff25 	bl	800342c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff ff5a 	bl	80034a0 <LL_ADC_IsInternalRegulatorEnabled>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d115      	bne.n	800361e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff3e 	bl	8003478 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035fc:	4b9c      	ldr	r3, [pc, #624]	@ (8003870 <HAL_ADC_Init+0x2e4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	4a9c      	ldr	r2, [pc, #624]	@ (8003874 <HAL_ADC_Init+0x2e8>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	3301      	adds	r3, #1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003610:	e002      	b.n	8003618 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	3b01      	subs	r3, #1
 8003616:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f9      	bne.n	8003612 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ff3c 	bl	80034a0 <LL_ADC_IsInternalRegulatorEnabled>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10d      	bne.n	800364a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003632:	f043 0210 	orr.w	r2, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff ff75 	bl	800353e <LL_ADC_REG_IsConversionOngoing>
 8003654:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	f040 8142 	bne.w	80038e8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 813e 	bne.w	80038e8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003670:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003674:	f043 0202 	orr.w	r2, r3, #2
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff35 	bl	80034f0 <LL_ADC_IsEnabled>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d141      	bne.n	8003710 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003694:	d004      	beq.n	80036a0 <HAL_ADC_Init+0x114>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a77      	ldr	r2, [pc, #476]	@ (8003878 <HAL_ADC_Init+0x2ec>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10f      	bne.n	80036c0 <HAL_ADC_Init+0x134>
 80036a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80036a4:	f7ff ff24 	bl	80034f0 <LL_ADC_IsEnabled>
 80036a8:	4604      	mov	r4, r0
 80036aa:	4873      	ldr	r0, [pc, #460]	@ (8003878 <HAL_ADC_Init+0x2ec>)
 80036ac:	f7ff ff20 	bl	80034f0 <LL_ADC_IsEnabled>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4323      	orrs	r3, r4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e012      	b.n	80036e6 <HAL_ADC_Init+0x15a>
 80036c0:	486e      	ldr	r0, [pc, #440]	@ (800387c <HAL_ADC_Init+0x2f0>)
 80036c2:	f7ff ff15 	bl	80034f0 <LL_ADC_IsEnabled>
 80036c6:	4604      	mov	r4, r0
 80036c8:	486d      	ldr	r0, [pc, #436]	@ (8003880 <HAL_ADC_Init+0x2f4>)
 80036ca:	f7ff ff11 	bl	80034f0 <LL_ADC_IsEnabled>
 80036ce:	4603      	mov	r3, r0
 80036d0:	431c      	orrs	r4, r3
 80036d2:	486c      	ldr	r0, [pc, #432]	@ (8003884 <HAL_ADC_Init+0x2f8>)
 80036d4:	f7ff ff0c 	bl	80034f0 <LL_ADC_IsEnabled>
 80036d8:	4603      	mov	r3, r0
 80036da:	4323      	orrs	r3, r4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d012      	beq.n	8003710 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036f2:	d004      	beq.n	80036fe <HAL_ADC_Init+0x172>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a5f      	ldr	r2, [pc, #380]	@ (8003878 <HAL_ADC_Init+0x2ec>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_ADC_Init+0x176>
 80036fe:	4a62      	ldr	r2, [pc, #392]	@ (8003888 <HAL_ADC_Init+0x2fc>)
 8003700:	e000      	b.n	8003704 <HAL_ADC_Init+0x178>
 8003702:	4a62      	ldr	r2, [pc, #392]	@ (800388c <HAL_ADC_Init+0x300>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f7ff fcfe 	bl	800310c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7f5b      	ldrb	r3, [r3, #29]
 8003714:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800371a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003720:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003726:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800372e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800373a:	2b01      	cmp	r3, #1
 800373c:	d106      	bne.n	800374c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003742:	3b01      	subs	r3, #1
 8003744:	045b      	lsls	r3, r3, #17
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d009      	beq.n	8003768 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	4b48      	ldr	r3, [pc, #288]	@ (8003890 <HAL_ADC_Init+0x304>)
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	69b9      	ldr	r1, [r7, #24]
 8003778:	430b      	orrs	r3, r1
 800377a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fee4 	bl	8003564 <LL_ADC_INJ_IsConversionOngoing>
 800379c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d17f      	bne.n	80038a4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d17c      	bne.n	80038a4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037ae:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037b6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037c6:	f023 0302 	bic.w	r3, r3, #2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	69b9      	ldr	r1, [r7, #24]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d017      	beq.n	800380c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80037ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80037f4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80037f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6911      	ldr	r1, [r2, #16]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	430b      	orrs	r3, r1
 8003806:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800380a:	e013      	b.n	8003834 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800381a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800382c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003830:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800383a:	2b01      	cmp	r3, #1
 800383c:	d12a      	bne.n	8003894 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003848:	f023 0304 	bic.w	r3, r3, #4
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003854:	4311      	orrs	r1, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800385a:	4311      	orrs	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003860:	430a      	orrs	r2, r1
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	611a      	str	r2, [r3, #16]
 800386e:	e019      	b.n	80038a4 <HAL_ADC_Init+0x318>
 8003870:	20000000 	.word	0x20000000
 8003874:	053e2d63 	.word	0x053e2d63
 8003878:	50000100 	.word	0x50000100
 800387c:	50000400 	.word	0x50000400
 8003880:	50000500 	.word	0x50000500
 8003884:	50000600 	.word	0x50000600
 8003888:	50000300 	.word	0x50000300
 800388c:	50000700 	.word	0x50000700
 8003890:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10c      	bne.n	80038c6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b2:	f023 010f 	bic.w	r1, r3, #15
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	1e5a      	subs	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80038c4:	e007      	b.n	80038d6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 020f 	bic.w	r2, r2, #15
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038da:	f023 0303 	bic.w	r3, r3, #3
 80038de:	f043 0201 	orr.w	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038e6:	e007      	b.n	80038f8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ec:	f043 0210 	orr.w	r2, r3, #16
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3724      	adds	r7, #36	@ 0x24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd90      	pop	{r4, r7, pc}
 8003902:	bf00      	nop

08003904 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003918:	d004      	beq.n	8003924 <HAL_ADC_Start_DMA+0x20>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a5a      	ldr	r2, [pc, #360]	@ (8003a88 <HAL_ADC_Start_DMA+0x184>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_ADC_Start_DMA+0x24>
 8003924:	4b59      	ldr	r3, [pc, #356]	@ (8003a8c <HAL_ADC_Start_DMA+0x188>)
 8003926:	e000      	b.n	800392a <HAL_ADC_Start_DMA+0x26>
 8003928:	4b59      	ldr	r3, [pc, #356]	@ (8003a90 <HAL_ADC_Start_DMA+0x18c>)
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fd62 	bl	80033f4 <LL_ADC_GetMultimode>
 8003930:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fe01 	bl	800353e <LL_ADC_REG_IsConversionOngoing>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	f040 809b 	bne.w	8003a7a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_ADC_Start_DMA+0x4e>
 800394e:	2302      	movs	r3, #2
 8003950:	e096      	b.n	8003a80 <HAL_ADC_Start_DMA+0x17c>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a4d      	ldr	r2, [pc, #308]	@ (8003a94 <HAL_ADC_Start_DMA+0x190>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d008      	beq.n	8003976 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b05      	cmp	r3, #5
 800396e:	d002      	beq.n	8003976 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b09      	cmp	r3, #9
 8003974:	d17a      	bne.n	8003a6c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 ff56 	bl	8004828 <ADC_Enable>
 800397c:	4603      	mov	r3, r0
 800397e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d16d      	bne.n	8003a62 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a3a      	ldr	r2, [pc, #232]	@ (8003a88 <HAL_ADC_Start_DMA+0x184>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d009      	beq.n	80039b8 <HAL_ADC_Start_DMA+0xb4>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003a98 <HAL_ADC_Start_DMA+0x194>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d002      	beq.n	80039b4 <HAL_ADC_Start_DMA+0xb0>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e003      	b.n	80039bc <HAL_ADC_Start_DMA+0xb8>
 80039b4:	4b39      	ldr	r3, [pc, #228]	@ (8003a9c <HAL_ADC_Start_DMA+0x198>)
 80039b6:	e001      	b.n	80039bc <HAL_ADC_Start_DMA+0xb8>
 80039b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d002      	beq.n	80039ca <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e6:	f023 0206 	bic.w	r2, r3, #6
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80039ee:	e002      	b.n	80039f6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fa:	4a29      	ldr	r2, [pc, #164]	@ (8003aa0 <HAL_ADC_Start_DMA+0x19c>)
 80039fc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a02:	4a28      	ldr	r2, [pc, #160]	@ (8003aa4 <HAL_ADC_Start_DMA+0x1a0>)
 8003a04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	4a27      	ldr	r2, [pc, #156]	@ (8003aa8 <HAL_ADC_Start_DMA+0x1a4>)
 8003a0c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	221c      	movs	r2, #28
 8003a14:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0210 	orr.w	r2, r2, #16
 8003a2c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3340      	adds	r3, #64	@ 0x40
 8003a48:	4619      	mov	r1, r3
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f001 fbef 	bl	8005230 <HAL_DMA_Start_IT>
 8003a52:	4603      	mov	r3, r0
 8003a54:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fd5b 	bl	8003516 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003a60:	e00d      	b.n	8003a7e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003a6a:	e008      	b.n	8003a7e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003a78:	e001      	b.n	8003a7e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	50000100 	.word	0x50000100
 8003a8c:	50000300 	.word	0x50000300
 8003a90:	50000700 	.word	0x50000700
 8003a94:	50000600 	.word	0x50000600
 8003a98:	50000500 	.word	0x50000500
 8003a9c:	50000400 	.word	0x50000400
 8003aa0:	08004955 	.word	0x08004955
 8003aa4:	08004a2d 	.word	0x08004a2d
 8003aa8:	08004a49 	.word	0x08004a49

08003aac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	@ 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ad0:	d004      	beq.n	8003adc <HAL_ADC_IRQHandler+0x30>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a8e      	ldr	r2, [pc, #568]	@ (8003d10 <HAL_ADC_IRQHandler+0x264>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADC_IRQHandler+0x34>
 8003adc:	4b8d      	ldr	r3, [pc, #564]	@ (8003d14 <HAL_ADC_IRQHandler+0x268>)
 8003ade:	e000      	b.n	8003ae2 <HAL_ADC_IRQHandler+0x36>
 8003ae0:	4b8d      	ldr	r3, [pc, #564]	@ (8003d18 <HAL_ADC_IRQHandler+0x26c>)
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fc86 	bl	80033f4 <LL_ADC_GetMultimode>
 8003ae8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d017      	beq.n	8003b24 <HAL_ADC_IRQHandler+0x78>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d012      	beq.n	8003b24 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d105      	bne.n	8003b16 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fffe 	bl	8004b18 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2202      	movs	r2, #2
 8003b22:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <HAL_ADC_IRQHandler+0x8c>
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8094 	beq.w	8003c6c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 808e 	beq.w	8003c6c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fb9f 	bl	80032b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d072      	beq.n	8003c5e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a64      	ldr	r2, [pc, #400]	@ (8003d10 <HAL_ADC_IRQHandler+0x264>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d009      	beq.n	8003b96 <HAL_ADC_IRQHandler+0xea>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a65      	ldr	r2, [pc, #404]	@ (8003d1c <HAL_ADC_IRQHandler+0x270>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d002      	beq.n	8003b92 <HAL_ADC_IRQHandler+0xe6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	e003      	b.n	8003b9a <HAL_ADC_IRQHandler+0xee>
 8003b92:	4b63      	ldr	r3, [pc, #396]	@ (8003d20 <HAL_ADC_IRQHandler+0x274>)
 8003b94:	e001      	b.n	8003b9a <HAL_ADC_IRQHandler+0xee>
 8003b96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d008      	beq.n	8003bb4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	d002      	beq.n	8003bb4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b09      	cmp	r3, #9
 8003bb2:	d104      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	e014      	b.n	8003be8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a53      	ldr	r2, [pc, #332]	@ (8003d10 <HAL_ADC_IRQHandler+0x264>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d009      	beq.n	8003bdc <HAL_ADC_IRQHandler+0x130>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a53      	ldr	r2, [pc, #332]	@ (8003d1c <HAL_ADC_IRQHandler+0x270>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d002      	beq.n	8003bd8 <HAL_ADC_IRQHandler+0x12c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	e003      	b.n	8003be0 <HAL_ADC_IRQHandler+0x134>
 8003bd8:	4b51      	ldr	r3, [pc, #324]	@ (8003d20 <HAL_ADC_IRQHandler+0x274>)
 8003bda:	e001      	b.n	8003be0 <HAL_ADC_IRQHandler+0x134>
 8003bdc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003be0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d135      	bne.n	8003c5e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d12e      	bne.n	8003c5e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fc9a 	bl	800353e <LL_ADC_REG_IsConversionOngoing>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11a      	bne.n	8003c46 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 020c 	bic.w	r2, r2, #12
 8003c1e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d112      	bne.n	8003c5e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	f043 0201 	orr.w	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c44:	e00b      	b.n	8003c5e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4a:	f043 0210 	orr.w	r2, r3, #16
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c56:	f043 0201 	orr.w	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fe f9a8 	bl	8001fb4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	220c      	movs	r2, #12
 8003c6a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <HAL_ADC_IRQHandler+0x1d4>
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10b      	bne.n	8003c98 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80b3 	beq.w	8003df2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80ad 	beq.w	8003df2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff fb3a 	bl	800332e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003cba:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff faf5 	bl	80032b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cc6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a10      	ldr	r2, [pc, #64]	@ (8003d10 <HAL_ADC_IRQHandler+0x264>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d009      	beq.n	8003ce6 <HAL_ADC_IRQHandler+0x23a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a11      	ldr	r2, [pc, #68]	@ (8003d1c <HAL_ADC_IRQHandler+0x270>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d002      	beq.n	8003ce2 <HAL_ADC_IRQHandler+0x236>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	e003      	b.n	8003cea <HAL_ADC_IRQHandler+0x23e>
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d20 <HAL_ADC_IRQHandler+0x274>)
 8003ce4:	e001      	b.n	8003cea <HAL_ADC_IRQHandler+0x23e>
 8003ce6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d008      	beq.n	8003d04 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d002      	beq.n	8003d04 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b07      	cmp	r3, #7
 8003d02:	d10f      	bne.n	8003d24 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	e01f      	b.n	8003d4e <HAL_ADC_IRQHandler+0x2a2>
 8003d0e:	bf00      	nop
 8003d10:	50000100 	.word	0x50000100
 8003d14:	50000300 	.word	0x50000300
 8003d18:	50000700 	.word	0x50000700
 8003d1c:	50000500 	.word	0x50000500
 8003d20:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a8b      	ldr	r2, [pc, #556]	@ (8003f58 <HAL_ADC_IRQHandler+0x4ac>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_ADC_IRQHandler+0x296>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a8a      	ldr	r2, [pc, #552]	@ (8003f5c <HAL_ADC_IRQHandler+0x4b0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d002      	beq.n	8003d3e <HAL_ADC_IRQHandler+0x292>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	e003      	b.n	8003d46 <HAL_ADC_IRQHandler+0x29a>
 8003d3e:	4b88      	ldr	r3, [pc, #544]	@ (8003f60 <HAL_ADC_IRQHandler+0x4b4>)
 8003d40:	e001      	b.n	8003d46 <HAL_ADC_IRQHandler+0x29a>
 8003d42:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003d46:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d047      	beq.n	8003de4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <HAL_ADC_IRQHandler+0x2c2>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d03f      	beq.n	8003de4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d13a      	bne.n	8003de4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d78:	2b40      	cmp	r3, #64	@ 0x40
 8003d7a:	d133      	bne.n	8003de4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d12e      	bne.n	8003de4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fbea 	bl	8003564 <LL_ADC_INJ_IsConversionOngoing>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d11a      	bne.n	8003dcc <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003da4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003daa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d112      	bne.n	8003de4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc2:	f043 0201 	orr.w	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dca:	e00b      	b.n	8003de4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	f043 0210 	orr.w	r2, r3, #16
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ddc:	f043 0201 	orr.w	r2, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fe6f 	bl	8004ac8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2260      	movs	r2, #96	@ 0x60
 8003df0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d011      	beq.n	8003e20 <HAL_ADC_IRQHandler+0x374>
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00c      	beq.n	8003e20 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f8b4 	bl	8003f80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2280      	movs	r2, #128	@ 0x80
 8003e1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d012      	beq.n	8003e50 <HAL_ADC_IRQHandler+0x3a4>
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e38:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fe55 	bl	8004af0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d012      	beq.n	8003e80 <HAL_ADC_IRQHandler+0x3d4>
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00d      	beq.n	8003e80 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e68:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fe47 	bl	8004b04 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d043      	beq.n	8003f12 <HAL_ADC_IRQHandler+0x466>
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d03e      	beq.n	8003f12 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea0:	e021      	b.n	8003ee6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d015      	beq.n	8003ed4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eb0:	d004      	beq.n	8003ebc <HAL_ADC_IRQHandler+0x410>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a28      	ldr	r2, [pc, #160]	@ (8003f58 <HAL_ADC_IRQHandler+0x4ac>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_IRQHandler+0x414>
 8003ebc:	4b29      	ldr	r3, [pc, #164]	@ (8003f64 <HAL_ADC_IRQHandler+0x4b8>)
 8003ebe:	e000      	b.n	8003ec2 <HAL_ADC_IRQHandler+0x416>
 8003ec0:	4b29      	ldr	r3, [pc, #164]	@ (8003f68 <HAL_ADC_IRQHandler+0x4bc>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff faa4 	bl	8003410 <LL_ADC_GetMultiDMATransfer>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed2:	e008      	b.n	8003ee6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d10e      	bne.n	8003f0a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efc:	f043 0202 	orr.w	r2, r3, #2
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f845 	bl	8003f94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2210      	movs	r2, #16
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d018      	beq.n	8003f4e <HAL_ADC_IRQHandler+0x4a2>
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d013      	beq.n	8003f4e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f36:	f043 0208 	orr.w	r2, r3, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f46:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fdc7 	bl	8004adc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003f4e:	bf00      	nop
 8003f50:	3728      	adds	r7, #40	@ 0x28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	50000100 	.word	0x50000100
 8003f5c:	50000500 	.word	0x50000500
 8003f60:	50000400 	.word	0x50000400
 8003f64:	50000300 	.word	0x50000300
 8003f68:	50000700 	.word	0x50000700

08003f6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b0b6      	sub	sp, #216	@ 0xd8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d102      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x24>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	f000 bc13 	b.w	80047f2 <HAL_ADC_ConfigChannel+0x84a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fab0 	bl	800353e <LL_ADC_REG_IsConversionOngoing>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 83f3 	bne.w	80047cc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6859      	ldr	r1, [r3, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f7ff f96f 	bl	80032d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fa9e 	bl	800353e <LL_ADC_REG_IsConversionOngoing>
 8004002:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff faaa 	bl	8003564 <LL_ADC_INJ_IsConversionOngoing>
 8004010:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004014:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 81d9 	bne.w	80043d0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800401e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004022:	2b00      	cmp	r3, #0
 8004024:	f040 81d4 	bne.w	80043d0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004030:	d10f      	bne.n	8004052 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	4619      	mov	r1, r3
 800403e:	f7ff f989 	bl	8003354 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff f91d 	bl	800328a <LL_ADC_SetSamplingTimeCommonConfig>
 8004050:	e00e      	b.n	8004070 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	461a      	mov	r2, r3
 8004060:	f7ff f978 	bl	8003354 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff f90d 	bl	800328a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	08db      	lsrs	r3, r3, #3
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b04      	cmp	r3, #4
 8004090:	d022      	beq.n	80040d8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6919      	ldr	r1, [r3, #16]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80040a2:	f7ff f867 	bl	8003174 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6919      	ldr	r1, [r3, #16]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f7ff f8b3 	bl	800321e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d102      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x126>
 80040c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040cc:	e000      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x128>
 80040ce:	2300      	movs	r3, #0
 80040d0:	461a      	mov	r2, r3
 80040d2:	f7ff f8bf 	bl	8003254 <LL_ADC_SetOffsetSaturation>
 80040d6:	e17b      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff f86c 	bl	80031bc <LL_ADC_GetOffsetChannel>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x15c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2100      	movs	r1, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff f861 	bl	80031bc <LL_ADC_GetOffsetChannel>
 80040fa:	4603      	mov	r3, r0
 80040fc:	0e9b      	lsrs	r3, r3, #26
 80040fe:	f003 021f 	and.w	r2, r3, #31
 8004102:	e01e      	b.n	8004142 <HAL_ADC_ConfigChannel+0x19a>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff f856 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8004110:	4603      	mov	r3, r0
 8004112:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800412a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004132:	2320      	movs	r3, #32
 8004134:	e004      	b.n	8004140 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800414a:	2b00      	cmp	r3, #0
 800414c:	d105      	bne.n	800415a <HAL_ADC_ConfigChannel+0x1b2>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	0e9b      	lsrs	r3, r3, #26
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	e018      	b.n	800418c <HAL_ADC_ConfigChannel+0x1e4>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800416e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004172:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004176:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800417e:	2320      	movs	r3, #32
 8004180:	e004      	b.n	800418c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004182:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004186:	fab3 f383 	clz	r3, r3
 800418a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800418c:	429a      	cmp	r2, r3
 800418e:	d106      	bne.n	800419e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2200      	movs	r2, #0
 8004196:	2100      	movs	r1, #0
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff f825 	bl	80031e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2101      	movs	r1, #1
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff f809 	bl	80031bc <LL_ADC_GetOffsetChannel>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <HAL_ADC_ConfigChannel+0x222>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2101      	movs	r1, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe fffe 	bl	80031bc <LL_ADC_GetOffsetChannel>
 80041c0:	4603      	mov	r3, r0
 80041c2:	0e9b      	lsrs	r3, r3, #26
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	e01e      	b.n	8004208 <HAL_ADC_ConfigChannel+0x260>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2101      	movs	r1, #1
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe fff3 	bl	80031bc <LL_ADC_GetOffsetChannel>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80041e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80041f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80041f8:	2320      	movs	r3, #32
 80041fa:	e004      	b.n	8004206 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80041fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004210:	2b00      	cmp	r3, #0
 8004212:	d105      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x278>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	0e9b      	lsrs	r3, r3, #26
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	e018      	b.n	8004252 <HAL_ADC_ConfigChannel+0x2aa>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004234:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004238:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800423c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004244:	2320      	movs	r3, #32
 8004246:	e004      	b.n	8004252 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004248:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800424c:	fab3 f383 	clz	r3, r3
 8004250:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004252:	429a      	cmp	r2, r3
 8004254:	d106      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe ffc2 	bl	80031e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2102      	movs	r1, #2
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe ffa6 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8004270:	4603      	mov	r3, r0
 8004272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10a      	bne.n	8004290 <HAL_ADC_ConfigChannel+0x2e8>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2102      	movs	r1, #2
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe ff9b 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8004286:	4603      	mov	r3, r0
 8004288:	0e9b      	lsrs	r3, r3, #26
 800428a:	f003 021f 	and.w	r2, r3, #31
 800428e:	e01e      	b.n	80042ce <HAL_ADC_ConfigChannel+0x326>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2102      	movs	r1, #2
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe ff90 	bl	80031bc <LL_ADC_GetOffsetChannel>
 800429c:	4603      	mov	r3, r0
 800429e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80042ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80042b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80042be:	2320      	movs	r3, #32
 80042c0:	e004      	b.n	80042cc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80042c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d105      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x33e>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	0e9b      	lsrs	r3, r3, #26
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	e016      	b.n	8004314 <HAL_ADC_ConfigChannel+0x36c>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80042f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80042fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004306:	2320      	movs	r3, #32
 8004308:	e004      	b.n	8004314 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800430a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004314:	429a      	cmp	r2, r3
 8004316:	d106      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2200      	movs	r2, #0
 800431e:	2102      	movs	r1, #2
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe ff61 	bl	80031e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2103      	movs	r1, #3
 800432c:	4618      	mov	r0, r3
 800432e:	f7fe ff45 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8004332:	4603      	mov	r3, r0
 8004334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x3aa>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2103      	movs	r1, #3
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe ff3a 	bl	80031bc <LL_ADC_GetOffsetChannel>
 8004348:	4603      	mov	r3, r0
 800434a:	0e9b      	lsrs	r3, r3, #26
 800434c:	f003 021f 	and.w	r2, r3, #31
 8004350:	e017      	b.n	8004382 <HAL_ADC_ConfigChannel+0x3da>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2103      	movs	r1, #3
 8004358:	4618      	mov	r0, r3
 800435a:	f7fe ff2f 	bl	80031bc <LL_ADC_GetOffsetChannel>
 800435e:	4603      	mov	r3, r0
 8004360:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004364:	fa93 f3a3 	rbit	r3, r3
 8004368:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800436a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800436c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800436e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004374:	2320      	movs	r3, #32
 8004376:	e003      	b.n	8004380 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004378:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800437a:	fab3 f383 	clz	r3, r3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438a:	2b00      	cmp	r3, #0
 800438c:	d105      	bne.n	800439a <HAL_ADC_ConfigChannel+0x3f2>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	0e9b      	lsrs	r3, r3, #26
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	e011      	b.n	80043be <HAL_ADC_ConfigChannel+0x416>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043a2:	fa93 f3a3 	rbit	r3, r3
 80043a6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80043a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80043ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80043b2:	2320      	movs	r3, #32
 80043b4:	e003      	b.n	80043be <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80043b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b8:	fab3 f383 	clz	r3, r3
 80043bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043be:	429a      	cmp	r2, r3
 80043c0:	d106      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	2103      	movs	r1, #3
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe ff0c 	bl	80031e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff f88b 	bl	80034f0 <LL_ADC_IsEnabled>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f040 813d 	bne.w	800465c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6819      	ldr	r1, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f7fe ffdc 	bl	80033ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4aa2      	ldr	r2, [pc, #648]	@ (8004684 <HAL_ADC_ConfigChannel+0x6dc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	f040 812e 	bne.w	800465c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x480>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	0e9b      	lsrs	r3, r3, #26
 8004416:	3301      	adds	r3, #1
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	2b09      	cmp	r3, #9
 800441e:	bf94      	ite	ls
 8004420:	2301      	movls	r3, #1
 8004422:	2300      	movhi	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e019      	b.n	800445c <HAL_ADC_ConfigChannel+0x4b4>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004438:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800443a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004440:	2320      	movs	r3, #32
 8004442:	e003      	b.n	800444c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004444:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	3301      	adds	r3, #1
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2b09      	cmp	r3, #9
 8004454:	bf94      	ite	ls
 8004456:	2301      	movls	r3, #1
 8004458:	2300      	movhi	r3, #0
 800445a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800445c:	2b00      	cmp	r3, #0
 800445e:	d079      	beq.n	8004554 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004468:	2b00      	cmp	r3, #0
 800446a:	d107      	bne.n	800447c <HAL_ADC_ConfigChannel+0x4d4>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	0e9b      	lsrs	r3, r3, #26
 8004472:	3301      	adds	r3, #1
 8004474:	069b      	lsls	r3, r3, #26
 8004476:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800447a:	e015      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x500>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800448a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800448c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800448e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004494:	2320      	movs	r3, #32
 8004496:	e003      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800449a:	fab3 f383 	clz	r3, r3
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3301      	adds	r3, #1
 80044a2:	069b      	lsls	r3, r3, #26
 80044a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x520>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	0e9b      	lsrs	r3, r3, #26
 80044ba:	3301      	adds	r3, #1
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2101      	movs	r1, #1
 80044c2:	fa01 f303 	lsl.w	r3, r1, r3
 80044c6:	e017      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x550>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044d0:	fa93 f3a3 	rbit	r3, r3
 80044d4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80044d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80044da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80044e0:	2320      	movs	r3, #32
 80044e2:	e003      	b.n	80044ec <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80044e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044e6:	fab3 f383 	clz	r3, r3
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	3301      	adds	r3, #1
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	2101      	movs	r1, #1
 80044f4:	fa01 f303 	lsl.w	r3, r1, r3
 80044f8:	ea42 0103 	orr.w	r1, r2, r3
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <HAL_ADC_ConfigChannel+0x576>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	0e9b      	lsrs	r3, r3, #26
 800450e:	3301      	adds	r3, #1
 8004510:	f003 021f 	and.w	r2, r3, #31
 8004514:	4613      	mov	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	4413      	add	r3, r2
 800451a:	051b      	lsls	r3, r3, #20
 800451c:	e018      	b.n	8004550 <HAL_ADC_ConfigChannel+0x5a8>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004526:	fa93 f3a3 	rbit	r3, r3
 800452a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800452c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004536:	2320      	movs	r3, #32
 8004538:	e003      	b.n	8004542 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800453a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800453c:	fab3 f383 	clz	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	3301      	adds	r3, #1
 8004544:	f003 021f 	and.w	r2, r3, #31
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004550:	430b      	orrs	r3, r1
 8004552:	e07e      	b.n	8004652 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800455c:	2b00      	cmp	r3, #0
 800455e:	d107      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x5c8>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	0e9b      	lsrs	r3, r3, #26
 8004566:	3301      	adds	r3, #1
 8004568:	069b      	lsls	r3, r3, #26
 800456a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800456e:	e015      	b.n	800459c <HAL_ADC_ConfigChannel+0x5f4>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004578:	fa93 f3a3 	rbit	r3, r3
 800457c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004588:	2320      	movs	r3, #32
 800458a:	e003      	b.n	8004594 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800458c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458e:	fab3 f383 	clz	r3, r3
 8004592:	b2db      	uxtb	r3, r3
 8004594:	3301      	adds	r3, #1
 8004596:	069b      	lsls	r3, r3, #26
 8004598:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d109      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x614>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	0e9b      	lsrs	r3, r3, #26
 80045ae:	3301      	adds	r3, #1
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	2101      	movs	r1, #1
 80045b6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ba:	e017      	b.n	80045ec <HAL_ADC_ConfigChannel+0x644>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	61fb      	str	r3, [r7, #28]
  return result;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80045d4:	2320      	movs	r3, #32
 80045d6:	e003      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	3301      	adds	r3, #1
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	2101      	movs	r1, #1
 80045e8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ec:	ea42 0103 	orr.w	r1, r2, r3
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10d      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x670>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0e9b      	lsrs	r3, r3, #26
 8004602:	3301      	adds	r3, #1
 8004604:	f003 021f 	and.w	r2, r3, #31
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	3b1e      	subs	r3, #30
 8004610:	051b      	lsls	r3, r3, #20
 8004612:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004616:	e01b      	b.n	8004650 <HAL_ADC_ConfigChannel+0x6a8>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	613b      	str	r3, [r7, #16]
  return result;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004630:	2320      	movs	r3, #32
 8004632:	e003      	b.n	800463c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
 800463c:	3301      	adds	r3, #1
 800463e:	f003 021f 	and.w	r2, r3, #31
 8004642:	4613      	mov	r3, r2
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4413      	add	r3, r2
 8004648:	3b1e      	subs	r3, #30
 800464a:	051b      	lsls	r3, r3, #20
 800464c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004650:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004656:	4619      	mov	r1, r3
 8004658:	f7fe fe7c 	bl	8003354 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b09      	ldr	r3, [pc, #36]	@ (8004688 <HAL_ADC_ConfigChannel+0x6e0>)
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80be 	beq.w	80047e6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004672:	d004      	beq.n	800467e <HAL_ADC_ConfigChannel+0x6d6>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a04      	ldr	r2, [pc, #16]	@ (800468c <HAL_ADC_ConfigChannel+0x6e4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d10a      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x6ec>
 800467e:	4b04      	ldr	r3, [pc, #16]	@ (8004690 <HAL_ADC_ConfigChannel+0x6e8>)
 8004680:	e009      	b.n	8004696 <HAL_ADC_ConfigChannel+0x6ee>
 8004682:	bf00      	nop
 8004684:	407f0000 	.word	0x407f0000
 8004688:	80080000 	.word	0x80080000
 800468c:	50000100 	.word	0x50000100
 8004690:	50000300 	.word	0x50000300
 8004694:	4b59      	ldr	r3, [pc, #356]	@ (80047fc <HAL_ADC_ConfigChannel+0x854>)
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe fd5e 	bl	8003158 <LL_ADC_GetCommonPathInternalCh>
 800469c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a56      	ldr	r2, [pc, #344]	@ (8004800 <HAL_ADC_ConfigChannel+0x858>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_ADC_ConfigChannel+0x70c>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a55      	ldr	r2, [pc, #340]	@ (8004804 <HAL_ADC_ConfigChannel+0x85c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d13a      	bne.n	800472a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d134      	bne.n	800472a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046c8:	d005      	beq.n	80046d6 <HAL_ADC_ConfigChannel+0x72e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a4e      	ldr	r2, [pc, #312]	@ (8004808 <HAL_ADC_ConfigChannel+0x860>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	f040 8085 	bne.w	80047e0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046de:	d004      	beq.n	80046ea <HAL_ADC_ConfigChannel+0x742>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a49      	ldr	r2, [pc, #292]	@ (800480c <HAL_ADC_ConfigChannel+0x864>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x746>
 80046ea:	4a49      	ldr	r2, [pc, #292]	@ (8004810 <HAL_ADC_ConfigChannel+0x868>)
 80046ec:	e000      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x748>
 80046ee:	4a43      	ldr	r2, [pc, #268]	@ (80047fc <HAL_ADC_ConfigChannel+0x854>)
 80046f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f7fe fd19 	bl	8003132 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004700:	4b44      	ldr	r3, [pc, #272]	@ (8004814 <HAL_ADC_ConfigChannel+0x86c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	099b      	lsrs	r3, r3, #6
 8004706:	4a44      	ldr	r2, [pc, #272]	@ (8004818 <HAL_ADC_ConfigChannel+0x870>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	099b      	lsrs	r3, r3, #6
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	4613      	mov	r3, r2
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800471a:	e002      	b.n	8004722 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3b01      	subs	r3, #1
 8004720:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f9      	bne.n	800471c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004728:	e05a      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a3b      	ldr	r2, [pc, #236]	@ (800481c <HAL_ADC_ConfigChannel+0x874>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d125      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004734:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11f      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a31      	ldr	r2, [pc, #196]	@ (800480c <HAL_ADC_ConfigChannel+0x864>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d104      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x7ac>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a34      	ldr	r2, [pc, #208]	@ (8004820 <HAL_ADC_ConfigChannel+0x878>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d047      	beq.n	80047e4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800475c:	d004      	beq.n	8004768 <HAL_ADC_ConfigChannel+0x7c0>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a2a      	ldr	r2, [pc, #168]	@ (800480c <HAL_ADC_ConfigChannel+0x864>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <HAL_ADC_ConfigChannel+0x7c4>
 8004768:	4a29      	ldr	r2, [pc, #164]	@ (8004810 <HAL_ADC_ConfigChannel+0x868>)
 800476a:	e000      	b.n	800476e <HAL_ADC_ConfigChannel+0x7c6>
 800476c:	4a23      	ldr	r2, [pc, #140]	@ (80047fc <HAL_ADC_ConfigChannel+0x854>)
 800476e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f7fe fcda 	bl	8003132 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800477e:	e031      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a27      	ldr	r2, [pc, #156]	@ (8004824 <HAL_ADC_ConfigChannel+0x87c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d12d      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800478a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800478e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d127      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1c      	ldr	r2, [pc, #112]	@ (800480c <HAL_ADC_ConfigChannel+0x864>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d022      	beq.n	80047e6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047a8:	d004      	beq.n	80047b4 <HAL_ADC_ConfigChannel+0x80c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a17      	ldr	r2, [pc, #92]	@ (800480c <HAL_ADC_ConfigChannel+0x864>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d101      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x810>
 80047b4:	4a16      	ldr	r2, [pc, #88]	@ (8004810 <HAL_ADC_ConfigChannel+0x868>)
 80047b6:	e000      	b.n	80047ba <HAL_ADC_ConfigChannel+0x812>
 80047b8:	4a10      	ldr	r2, [pc, #64]	@ (80047fc <HAL_ADC_ConfigChannel+0x854>)
 80047ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80047be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047c2:	4619      	mov	r1, r3
 80047c4:	4610      	mov	r0, r2
 80047c6:	f7fe fcb4 	bl	8003132 <LL_ADC_SetCommonPathInternalCh>
 80047ca:	e00c      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80047de:	e002      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047e0:	bf00      	nop
 80047e2:	e000      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80047ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	37d8      	adds	r7, #216	@ 0xd8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	50000700 	.word	0x50000700
 8004800:	c3210000 	.word	0xc3210000
 8004804:	90c00010 	.word	0x90c00010
 8004808:	50000600 	.word	0x50000600
 800480c:	50000100 	.word	0x50000100
 8004810:	50000300 	.word	0x50000300
 8004814:	20000000 	.word	0x20000000
 8004818:	053e2d63 	.word	0x053e2d63
 800481c:	c7520000 	.word	0xc7520000
 8004820:	50000500 	.word	0x50000500
 8004824:	cb840000 	.word	0xcb840000

08004828 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004830:	2300      	movs	r3, #0
 8004832:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7fe fe59 	bl	80034f0 <LL_ADC_IsEnabled>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d176      	bne.n	8004932 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	4b3c      	ldr	r3, [pc, #240]	@ (800493c <ADC_Enable+0x114>)
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004856:	f043 0210 	orr.w	r2, r3, #16
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004862:	f043 0201 	orr.w	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e062      	b.n	8004934 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe fe28 	bl	80034c8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004880:	d004      	beq.n	800488c <ADC_Enable+0x64>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a2e      	ldr	r2, [pc, #184]	@ (8004940 <ADC_Enable+0x118>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d101      	bne.n	8004890 <ADC_Enable+0x68>
 800488c:	4b2d      	ldr	r3, [pc, #180]	@ (8004944 <ADC_Enable+0x11c>)
 800488e:	e000      	b.n	8004892 <ADC_Enable+0x6a>
 8004890:	4b2d      	ldr	r3, [pc, #180]	@ (8004948 <ADC_Enable+0x120>)
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fc60 	bl	8003158 <LL_ADC_GetCommonPathInternalCh>
 8004898:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800489a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d013      	beq.n	80048ca <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048a2:	4b2a      	ldr	r3, [pc, #168]	@ (800494c <ADC_Enable+0x124>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	099b      	lsrs	r3, r3, #6
 80048a8:	4a29      	ldr	r2, [pc, #164]	@ (8004950 <ADC_Enable+0x128>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	099b      	lsrs	r3, r3, #6
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80048bc:	e002      	b.n	80048c4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	3b01      	subs	r3, #1
 80048c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f9      	bne.n	80048be <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80048ca:	f7fe fbef 	bl	80030ac <HAL_GetTick>
 80048ce:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048d0:	e028      	b.n	8004924 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fe0a 	bl	80034f0 <LL_ADC_IsEnabled>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe fdee 	bl	80034c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048ec:	f7fe fbde 	bl	80030ac <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d914      	bls.n	8004924 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b01      	cmp	r3, #1
 8004906:	d00d      	beq.n	8004924 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490c:	f043 0210 	orr.w	r2, r3, #16
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004918:	f043 0201 	orr.w	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e007      	b.n	8004934 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b01      	cmp	r3, #1
 8004930:	d1cf      	bne.n	80048d2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	8000003f 	.word	0x8000003f
 8004940:	50000100 	.word	0x50000100
 8004944:	50000300 	.word	0x50000300
 8004948:	50000700 	.word	0x50000700
 800494c:	20000000 	.word	0x20000000
 8004950:	053e2d63 	.word	0x053e2d63

08004954 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004966:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800496a:	2b00      	cmp	r3, #0
 800496c:	d14b      	bne.n	8004a06 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004972:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d021      	beq.n	80049cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f7fe fc8f 	bl	80032b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d032      	beq.n	80049fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d12b      	bne.n	80049fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d11f      	bne.n	80049fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c2:	f043 0201 	orr.w	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049ca:	e018      	b.n	80049fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d111      	bne.n	80049fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d105      	bne.n	80049fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f6:	f043 0201 	orr.w	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f7fd fad8 	bl	8001fb4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a04:	e00e      	b.n	8004a24 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f7ff fabe 	bl	8003f94 <HAL_ADC_ErrorCallback>
}
 8004a18:	e004      	b.n	8004a24 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
}
 8004a24:	bf00      	nop
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff fa96 	bl	8003f6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a40:	bf00      	nop
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a66:	f043 0204 	orr.w	r2, r3, #4
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f7ff fa90 	bl	8003f94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a74:	bf00      	nop
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <LL_ADC_IsEnabled>:
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <LL_ADC_IsEnabled+0x18>
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <LL_ADC_IsEnabled+0x1a>
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d101      	bne.n	8004aba <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004b2c:	b590      	push	{r4, r7, lr}
 8004b2e:	b0a1      	sub	sp, #132	@ 0x84
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e0e7      	b.n	8004d1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004b52:	2300      	movs	r3, #0
 8004b54:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004b56:	2300      	movs	r3, #0
 8004b58:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b62:	d102      	bne.n	8004b6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004b64:	4b6f      	ldr	r3, [pc, #444]	@ (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	e009      	b.n	8004b7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a6e      	ldr	r2, [pc, #440]	@ (8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d102      	bne.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004b74:	4b6d      	ldr	r3, [pc, #436]	@ (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	e001      	b.n	8004b7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10b      	bne.n	8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b88:	f043 0220 	orr.w	r2, r3, #32
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0be      	b.n	8004d1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff ff7f 	bl	8004aa2 <LL_ADC_REG_IsConversionOngoing>
 8004ba4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff ff79 	bl	8004aa2 <LL_ADC_REG_IsConversionOngoing>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 80a0 	bne.w	8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004bb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 809c 	bne.w	8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bc8:	d004      	beq.n	8004bd4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a55      	ldr	r2, [pc, #340]	@ (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d101      	bne.n	8004bd8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004bd4:	4b56      	ldr	r3, [pc, #344]	@ (8004d30 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004bd6:	e000      	b.n	8004bda <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004bd8:	4b56      	ldr	r3, [pc, #344]	@ (8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004bda:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d04b      	beq.n	8004c7c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004be4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	6859      	ldr	r1, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004bf6:	035b      	lsls	r3, r3, #13
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bfe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c08:	d004      	beq.n	8004c14 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a45      	ldr	r2, [pc, #276]	@ (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d10f      	bne.n	8004c34 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004c14:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c18:	f7ff ff30 	bl	8004a7c <LL_ADC_IsEnabled>
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	4841      	ldr	r0, [pc, #260]	@ (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c20:	f7ff ff2c 	bl	8004a7c <LL_ADC_IsEnabled>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4323      	orrs	r3, r4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	e012      	b.n	8004c5a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004c34:	483c      	ldr	r0, [pc, #240]	@ (8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c36:	f7ff ff21 	bl	8004a7c <LL_ADC_IsEnabled>
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	483b      	ldr	r0, [pc, #236]	@ (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c3e:	f7ff ff1d 	bl	8004a7c <LL_ADC_IsEnabled>
 8004c42:	4603      	mov	r3, r0
 8004c44:	431c      	orrs	r4, r3
 8004c46:	483c      	ldr	r0, [pc, #240]	@ (8004d38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004c48:	f7ff ff18 	bl	8004a7c <LL_ADC_IsEnabled>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	4323      	orrs	r3, r4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf0c      	ite	eq
 8004c54:	2301      	moveq	r3, #1
 8004c56:	2300      	movne	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d056      	beq.n	8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c66:	f023 030f 	bic.w	r3, r3, #15
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	6811      	ldr	r1, [r2, #0]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	6892      	ldr	r2, [r2, #8]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	431a      	orrs	r2, r3
 8004c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c78:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c7a:	e047      	b.n	8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c90:	d004      	beq.n	8004c9c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a23      	ldr	r2, [pc, #140]	@ (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10f      	bne.n	8004cbc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004c9c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004ca0:	f7ff feec 	bl	8004a7c <LL_ADC_IsEnabled>
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	481f      	ldr	r0, [pc, #124]	@ (8004d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ca8:	f7ff fee8 	bl	8004a7c <LL_ADC_IsEnabled>
 8004cac:	4603      	mov	r3, r0
 8004cae:	4323      	orrs	r3, r4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	e012      	b.n	8004ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004cbc:	481a      	ldr	r0, [pc, #104]	@ (8004d28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004cbe:	f7ff fedd 	bl	8004a7c <LL_ADC_IsEnabled>
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	4819      	ldr	r0, [pc, #100]	@ (8004d2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004cc6:	f7ff fed9 	bl	8004a7c <LL_ADC_IsEnabled>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	431c      	orrs	r4, r3
 8004cce:	481a      	ldr	r0, [pc, #104]	@ (8004d38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004cd0:	f7ff fed4 	bl	8004a7c <LL_ADC_IsEnabled>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4323      	orrs	r3, r4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d012      	beq.n	8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ce6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004cee:	f023 030f 	bic.w	r3, r3, #15
 8004cf2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004cf4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cf6:	e009      	b.n	8004d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004d0a:	e000      	b.n	8004d0e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004d0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004d16:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3784      	adds	r7, #132	@ 0x84
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd90      	pop	{r4, r7, pc}
 8004d22:	bf00      	nop
 8004d24:	50000100 	.word	0x50000100
 8004d28:	50000400 	.word	0x50000400
 8004d2c:	50000500 	.word	0x50000500
 8004d30:	50000300 	.word	0x50000300
 8004d34:	50000700 	.word	0x50000700
 8004d38:	50000600 	.word	0x50000600

08004d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d80 <__NVIC_SetPriorityGrouping+0x44>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d6e:	4a04      	ldr	r2, [pc, #16]	@ (8004d80 <__NVIC_SetPriorityGrouping+0x44>)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	60d3      	str	r3, [r2, #12]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	e000ed00 	.word	0xe000ed00

08004d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d88:	4b04      	ldr	r3, [pc, #16]	@ (8004d9c <__NVIC_GetPriorityGrouping+0x18>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	0a1b      	lsrs	r3, r3, #8
 8004d8e:	f003 0307 	and.w	r3, r3, #7
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	e000ed00 	.word	0xe000ed00

08004da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	db0b      	blt.n	8004dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	f003 021f 	and.w	r2, r3, #31
 8004db8:	4907      	ldr	r1, [pc, #28]	@ (8004dd8 <__NVIC_EnableIRQ+0x38>)
 8004dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	e000e100 	.word	0xe000e100

08004ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	6039      	str	r1, [r7, #0]
 8004de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	db0a      	blt.n	8004e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	490c      	ldr	r1, [pc, #48]	@ (8004e28 <__NVIC_SetPriority+0x4c>)
 8004df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfa:	0112      	lsls	r2, r2, #4
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	440b      	add	r3, r1
 8004e00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e04:	e00a      	b.n	8004e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	4908      	ldr	r1, [pc, #32]	@ (8004e2c <__NVIC_SetPriority+0x50>)
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	3b04      	subs	r3, #4
 8004e14:	0112      	lsls	r2, r2, #4
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	440b      	add	r3, r1
 8004e1a:	761a      	strb	r2, [r3, #24]
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	e000e100 	.word	0xe000e100
 8004e2c:	e000ed00 	.word	0xe000ed00

08004e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	@ 0x24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f1c3 0307 	rsb	r3, r3, #7
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	bf28      	it	cs
 8004e4e:	2304      	movcs	r3, #4
 8004e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3304      	adds	r3, #4
 8004e56:	2b06      	cmp	r3, #6
 8004e58:	d902      	bls.n	8004e60 <NVIC_EncodePriority+0x30>
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	3b03      	subs	r3, #3
 8004e5e:	e000      	b.n	8004e62 <NVIC_EncodePriority+0x32>
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e64:	f04f 32ff 	mov.w	r2, #4294967295
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	401a      	ands	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e78:	f04f 31ff 	mov.w	r1, #4294967295
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e82:	43d9      	mvns	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e88:	4313      	orrs	r3, r2
         );
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3724      	adds	r7, #36	@ 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b082      	sub	sp, #8
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff ff4c 	bl	8004d3c <__NVIC_SetPriorityGrouping>
}
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004eba:	f7ff ff63 	bl	8004d84 <__NVIC_GetPriorityGrouping>
 8004ebe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	6978      	ldr	r0, [r7, #20]
 8004ec6:	f7ff ffb3 	bl	8004e30 <NVIC_EncodePriority>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff ff82 	bl	8004ddc <__NVIC_SetPriority>
}
 8004ed8:	bf00      	nop
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff ff56 	bl	8004da0 <__NVIC_EnableIRQ>
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e054      	b.n	8004fb8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	7f5b      	ldrb	r3, [r3, #29]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d105      	bne.n	8004f24 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fc f88a 	bl	8001038 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	791b      	ldrb	r3, [r3, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10c      	bne.n	8004f4c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a22      	ldr	r2, [pc, #136]	@ (8004fc0 <HAL_CRC_Init+0xc4>)
 8004f38:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0218 	bic.w	r2, r2, #24
 8004f48:	609a      	str	r2, [r3, #8]
 8004f4a:	e00c      	b.n	8004f66 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6899      	ldr	r1, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	461a      	mov	r2, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f834 	bl	8004fc4 <HAL_CRCEx_Polynomial_Set>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e028      	b.n	8004fb8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	795b      	ldrb	r3, [r3, #5]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d105      	bne.n	8004f7a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f04f 32ff 	mov.w	r2, #4294967295
 8004f76:	611a      	str	r2, [r3, #16]
 8004f78:	e004      	b.n	8004f84 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6912      	ldr	r2, [r2, #16]
 8004f82:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695a      	ldr	r2, [r3, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	04c11db7 	.word	0x04c11db7

08004fc4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004fd4:	231f      	movs	r3, #31
 8004fd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d102      	bne.n	8004fe8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
 8004fe6:	e063      	b.n	80050b0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004fe8:	bf00      	nop
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1e5a      	subs	r2, r3, #1
 8004fee:	613a      	str	r2, [r7, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d009      	beq.n	8005008 <HAL_CRCEx_Polynomial_Set+0x44>
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b18      	cmp	r3, #24
 800500c:	d846      	bhi.n	800509c <HAL_CRCEx_Polynomial_Set+0xd8>
 800500e:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	080050a3 	.word	0x080050a3
 8005018:	0800509d 	.word	0x0800509d
 800501c:	0800509d 	.word	0x0800509d
 8005020:	0800509d 	.word	0x0800509d
 8005024:	0800509d 	.word	0x0800509d
 8005028:	0800509d 	.word	0x0800509d
 800502c:	0800509d 	.word	0x0800509d
 8005030:	0800509d 	.word	0x0800509d
 8005034:	08005091 	.word	0x08005091
 8005038:	0800509d 	.word	0x0800509d
 800503c:	0800509d 	.word	0x0800509d
 8005040:	0800509d 	.word	0x0800509d
 8005044:	0800509d 	.word	0x0800509d
 8005048:	0800509d 	.word	0x0800509d
 800504c:	0800509d 	.word	0x0800509d
 8005050:	0800509d 	.word	0x0800509d
 8005054:	08005085 	.word	0x08005085
 8005058:	0800509d 	.word	0x0800509d
 800505c:	0800509d 	.word	0x0800509d
 8005060:	0800509d 	.word	0x0800509d
 8005064:	0800509d 	.word	0x0800509d
 8005068:	0800509d 	.word	0x0800509d
 800506c:	0800509d 	.word	0x0800509d
 8005070:	0800509d 	.word	0x0800509d
 8005074:	08005079 	.word	0x08005079
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b06      	cmp	r3, #6
 800507c:	d913      	bls.n	80050a6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005082:	e010      	b.n	80050a6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b07      	cmp	r3, #7
 8005088:	d90f      	bls.n	80050aa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800508e:	e00c      	b.n	80050aa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b0f      	cmp	r3, #15
 8005094:	d90b      	bls.n	80050ae <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800509a:	e008      	b.n	80050ae <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	75fb      	strb	r3, [r7, #23]
        break;
 80050a0:	e006      	b.n	80050b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80050a2:	bf00      	nop
 80050a4:	e004      	b.n	80050b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80050a6:	bf00      	nop
 80050a8:	e002      	b.n	80050b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80050ae:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10d      	bne.n	80050d2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f023 0118 	bic.w	r1, r3, #24
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e08d      	b.n	800520e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	4b47      	ldr	r3, [pc, #284]	@ (8005218 <HAL_DMA_Init+0x138>)
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d80f      	bhi.n	800511e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	4b45      	ldr	r3, [pc, #276]	@ (800521c <HAL_DMA_Init+0x13c>)
 8005106:	4413      	add	r3, r2
 8005108:	4a45      	ldr	r2, [pc, #276]	@ (8005220 <HAL_DMA_Init+0x140>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	091b      	lsrs	r3, r3, #4
 8005110:	009a      	lsls	r2, r3, #2
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a42      	ldr	r2, [pc, #264]	@ (8005224 <HAL_DMA_Init+0x144>)
 800511a:	641a      	str	r2, [r3, #64]	@ 0x40
 800511c:	e00e      	b.n	800513c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	4b40      	ldr	r3, [pc, #256]	@ (8005228 <HAL_DMA_Init+0x148>)
 8005126:	4413      	add	r3, r2
 8005128:	4a3d      	ldr	r2, [pc, #244]	@ (8005220 <HAL_DMA_Init+0x140>)
 800512a:	fba2 2303 	umull	r2, r3, r2, r3
 800512e:	091b      	lsrs	r3, r3, #4
 8005130:	009a      	lsls	r2, r3, #2
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a3c      	ldr	r2, [pc, #240]	@ (800522c <HAL_DMA_Init+0x14c>)
 800513a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005156:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005160:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800516c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005178:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fa2c 	bl	80055ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800519c:	d102      	bne.n	80051a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d010      	beq.n	80051e4 <HAL_DMA_Init+0x104>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d80c      	bhi.n	80051e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa4c 	bl	8005668 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051e0:	605a      	str	r2, [r3, #4]
 80051e2:	e008      	b.n	80051f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40020407 	.word	0x40020407
 800521c:	bffdfff8 	.word	0xbffdfff8
 8005220:	cccccccd 	.word	0xcccccccd
 8005224:	40020000 	.word	0x40020000
 8005228:	bffdfbf8 	.word	0xbffdfbf8
 800522c:	40020400 	.word	0x40020400

08005230 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_DMA_Start_IT+0x20>
 800524c:	2302      	movs	r3, #2
 800524e:	e066      	b.n	800531e <HAL_DMA_Start_IT+0xee>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d155      	bne.n	8005310 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f970 	bl	800556e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 020e 	orr.w	r2, r2, #14
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e00f      	b.n	80052c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0204 	bic.w	r2, r2, #4
 80052b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 020a 	orr.w	r2, r2, #10
 80052c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0201 	orr.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	e005      	b.n	800531c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005318:	2302      	movs	r3, #2
 800531a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800531c:	7dfb      	ldrb	r3, [r7, #23]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d00d      	beq.n	800535a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2204      	movs	r2, #4
 8005342:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
 8005358:	e047      	b.n	80053ea <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 020e 	bic.w	r2, r2, #14
 8005368:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0201 	bic.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005384:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005388:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	f003 021f 	and.w	r2, r3, #31
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005396:	2101      	movs	r1, #1
 8005398:	fa01 f202 	lsl.w	r2, r1, r2
 800539c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80053a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00c      	beq.n	80053ca <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80053c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
    }
  }
  return status;
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	2204      	movs	r2, #4
 8005416:	409a      	lsls	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d026      	beq.n	800546e <HAL_DMA_IRQHandler+0x7a>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d021      	beq.n	800546e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b00      	cmp	r3, #0
 8005436:	d107      	bne.n	8005448 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0204 	bic.w	r2, r2, #4
 8005446:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544c:	f003 021f 	and.w	r2, r3, #31
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005454:	2104      	movs	r1, #4
 8005456:	fa01 f202 	lsl.w	r2, r1, r2
 800545a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005460:	2b00      	cmp	r3, #0
 8005462:	d071      	beq.n	8005548 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800546c:	e06c      	b.n	8005548 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	f003 031f 	and.w	r3, r3, #31
 8005476:	2202      	movs	r2, #2
 8005478:	409a      	lsls	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d02e      	beq.n	80054e0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d029      	beq.n	80054e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10b      	bne.n	80054b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 020a 	bic.w	r2, r2, #10
 80054a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b6:	f003 021f 	and.w	r2, r3, #31
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054be:	2102      	movs	r1, #2
 80054c0:	fa01 f202 	lsl.w	r2, r1, r2
 80054c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d038      	beq.n	8005548 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80054de:	e033      	b.n	8005548 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	2208      	movs	r2, #8
 80054ea:	409a      	lsls	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d02a      	beq.n	800554a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d025      	beq.n	800554a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 020e 	bic.w	r2, r2, #14
 800550c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005512:	f003 021f 	and.w	r2, r3, #31
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551a:	2101      	movs	r1, #1
 800551c:	fa01 f202 	lsl.w	r2, r1, r2
 8005520:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553c:	2b00      	cmp	r3, #0
 800553e:	d004      	beq.n	800554a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005548:	bf00      	nop
 800554a:	bf00      	nop
}
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005560:	b2db      	uxtb	r3, r3
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005584:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558a:	2b00      	cmp	r3, #0
 800558c:	d004      	beq.n	8005598 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005596:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559c:	f003 021f 	and.w	r2, r3, #31
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	2101      	movs	r1, #1
 80055a6:	fa01 f202 	lsl.w	r2, r1, r2
 80055aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b10      	cmp	r3, #16
 80055ba:	d108      	bne.n	80055ce <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80055cc:	e007      	b.n	80055de <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	60da      	str	r2, [r3, #12]
}
 80055de:	bf00      	nop
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	4b16      	ldr	r3, [pc, #88]	@ (8005654 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d802      	bhi.n	8005606 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005600:	4b15      	ldr	r3, [pc, #84]	@ (8005658 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	e001      	b.n	800560a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005606:	4b15      	ldr	r3, [pc, #84]	@ (800565c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005608:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	3b08      	subs	r3, #8
 8005616:	4a12      	ldr	r2, [pc, #72]	@ (8005660 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	091b      	lsrs	r3, r3, #4
 800561e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005624:	089b      	lsrs	r3, r3, #2
 8005626:	009a      	lsls	r2, r3, #2
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4413      	add	r3, r2
 800562c:	461a      	mov	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a0b      	ldr	r2, [pc, #44]	@ (8005664 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005636:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	2201      	movs	r2, #1
 8005640:	409a      	lsls	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005646:	bf00      	nop
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40020407 	.word	0x40020407
 8005658:	40020800 	.word	0x40020800
 800565c:	40020820 	.word	0x40020820
 8005660:	cccccccd 	.word	0xcccccccd
 8005664:	40020880 	.word	0x40020880

08005668 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	461a      	mov	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a08      	ldr	r2, [pc, #32]	@ (80056ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800568a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3b01      	subs	r3, #1
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	2201      	movs	r2, #1
 8005696:	409a      	lsls	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	1000823f 	.word	0x1000823f
 80056ac:	40020940 	.word	0x40020940

080056b0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e147      	b.n	8005952 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fb fd56 	bl	8001188 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0210 	bic.w	r2, r2, #16
 80056ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056ec:	f7fd fcde 	bl	80030ac <HAL_GetTick>
 80056f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80056f2:	e012      	b.n	800571a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80056f4:	f7fd fcda 	bl	80030ac <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b0a      	cmp	r3, #10
 8005700:	d90b      	bls.n	800571a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005706:	f043 0201 	orr.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2203      	movs	r2, #3
 8005712:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e11b      	b.n	8005952 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b08      	cmp	r3, #8
 8005726:	d0e5      	beq.n	80056f4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005738:	f7fd fcb8 	bl	80030ac <HAL_GetTick>
 800573c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800573e:	e012      	b.n	8005766 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005740:	f7fd fcb4 	bl	80030ac <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b0a      	cmp	r3, #10
 800574c:	d90b      	bls.n	8005766 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005752:	f043 0201 	orr.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2203      	movs	r2, #3
 800575e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e0f5      	b.n	8005952 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0e5      	beq.n	8005740 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0202 	orr.w	r2, r2, #2
 8005782:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a74      	ldr	r2, [pc, #464]	@ (800595c <HAL_FDCAN_Init+0x2ac>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d103      	bne.n	8005796 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800578e:	4a74      	ldr	r2, [pc, #464]	@ (8005960 <HAL_FDCAN_Init+0x2b0>)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	7c1b      	ldrb	r3, [r3, #16]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d108      	bne.n	80057b0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057ac:	619a      	str	r2, [r3, #24]
 80057ae:	e007      	b.n	80057c0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699a      	ldr	r2, [r3, #24]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057be:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	7c5b      	ldrb	r3, [r3, #17]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d108      	bne.n	80057da <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699a      	ldr	r2, [r3, #24]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057d6:	619a      	str	r2, [r3, #24]
 80057d8:	e007      	b.n	80057ea <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80057e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	7c9b      	ldrb	r3, [r3, #18]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d108      	bne.n	8005804 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699a      	ldr	r2, [r3, #24]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005800:	619a      	str	r2, [r3, #24]
 8005802:	e007      	b.n	8005814 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005812:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699a      	ldr	r2, [r3, #24]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005838:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0210 	bic.w	r2, r2, #16
 8005848:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d108      	bne.n	8005864 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699a      	ldr	r2, [r3, #24]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0204 	orr.w	r2, r2, #4
 8005860:	619a      	str	r2, [r3, #24]
 8005862:	e02c      	b.n	80058be <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d028      	beq.n	80058be <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	2b02      	cmp	r3, #2
 8005872:	d01c      	beq.n	80058ae <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005882:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0210 	orr.w	r2, r2, #16
 8005892:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d110      	bne.n	80058be <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0220 	orr.w	r2, r2, #32
 80058aa:	619a      	str	r2, [r3, #24]
 80058ac:	e007      	b.n	80058be <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699a      	ldr	r2, [r3, #24]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0220 	orr.w	r2, r2, #32
 80058bc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058ce:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80058d6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	3b01      	subs	r3, #1
 80058e0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80058e6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80058e8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058f2:	d115      	bne.n	8005920 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fe:	3b01      	subs	r3, #1
 8005900:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005902:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005908:	3b01      	subs	r3, #1
 800590a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800590c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005914:	3b01      	subs	r3, #1
 8005916:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800591c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800591e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f9d6 	bl	8005ce8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40006400 	.word	0x40006400
 8005960:	40006500 	.word	0x40006500

08005964 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	d110      	bne.n	800599a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	e006      	b.n	80059a8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800599e:	f043 0204 	orr.w	r2, r3, #4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
  }
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	@ 0x30
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059c2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80059c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059d0:	4013      	ands	r3, r2
 80059d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059e8:	4013      	ands	r3, r2
 80059ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a00:	4013      	ands	r3, r2
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a0a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005a0e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a22:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005a26:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	4013      	ands	r3, r2
 8005a32:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a42:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d006      	beq.n	8005a66 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2240      	movs	r2, #64	@ 0x40
 8005a5e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f921 	bl	8005ca8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d019      	beq.n	8005aa4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d014      	beq.n	8005aa4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a82:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a9a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005a9c:	6939      	ldr	r1, [r7, #16]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f8e3 	bl	8005c6a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f8a2 	bl	8005bfe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ac6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8a2 	bl	8005c14 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d007      	beq.n	8005ae6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005adc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005ade:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f8a2 	bl	8005c2a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00c      	beq.n	8005b0a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d007      	beq.n	8005b0a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b02:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f89b 	bl	8005c40 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d018      	beq.n	8005b46 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d013      	beq.n	8005b46 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005b26:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4013      	ands	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2280      	movs	r2, #128	@ 0x80
 8005b3c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005b3e:	68f9      	ldr	r1, [r7, #12]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f887 	bl	8005c54 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00c      	beq.n	8005b6a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b62:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f88b 	bl	8005c80 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00c      	beq.n	8005b8e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005b86:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f883 	bl	8005c94 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00f      	beq.n	8005bb8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005baa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005bc6:	69f9      	ldr	r1, [r7, #28]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f881 	bl	8005cd0 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d009      	beq.n	8005be8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6a3a      	ldr	r2, [r7, #32]
 8005bda:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d002      	beq.n	8005bf6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f863 	bl	8005cbc <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	3730      	adds	r7, #48	@ 0x30
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005cf0:	4b30      	ldr	r3, [pc, #192]	@ (8005db4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005cf2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2f      	ldr	r2, [pc, #188]	@ (8005db8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d103      	bne.n	8005d06 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005d04:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dbc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d103      	bne.n	8005d18 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8005d16:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d26:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2e:	041a      	lsls	r2, r3, #16
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d54:	061a      	lsls	r2, r3, #24
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e005      	b.n	8005d9a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3304      	adds	r3, #4
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d3f3      	bcc.n	8005d8e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005da6:	bf00      	nop
 8005da8:	bf00      	nop
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	4000a400 	.word	0x4000a400
 8005db8:	40006800 	.word	0x40006800
 8005dbc:	40006c00 	.word	0x40006c00

08005dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005dce:	e15a      	b.n	8006086 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 814c 	beq.w	8006080 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d005      	beq.n	8005e00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d130      	bne.n	8005e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	43db      	mvns	r3, r3
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4013      	ands	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e36:	2201      	movs	r2, #1
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4013      	ands	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	f003 0201 	and.w	r2, r3, #1
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d017      	beq.n	8005e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	2203      	movs	r2, #3
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4013      	ands	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d123      	bne.n	8005ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	08da      	lsrs	r2, r3, #3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3208      	adds	r2, #8
 8005eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	220f      	movs	r2, #15
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	691a      	ldr	r2, [r3, #16]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	fa02 f303 	lsl.w	r3, r2, r3
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	08da      	lsrs	r2, r3, #3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3208      	adds	r2, #8
 8005eec:	6939      	ldr	r1, [r7, #16]
 8005eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	2203      	movs	r2, #3
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	43db      	mvns	r3, r3
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4013      	ands	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f003 0203 	and.w	r2, r3, #3
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80a6 	beq.w	8006080 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f34:	4b5b      	ldr	r3, [pc, #364]	@ (80060a4 <HAL_GPIO_Init+0x2e4>)
 8005f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f38:	4a5a      	ldr	r2, [pc, #360]	@ (80060a4 <HAL_GPIO_Init+0x2e4>)
 8005f3a:	f043 0301 	orr.w	r3, r3, #1
 8005f3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f40:	4b58      	ldr	r3, [pc, #352]	@ (80060a4 <HAL_GPIO_Init+0x2e4>)
 8005f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	60bb      	str	r3, [r7, #8]
 8005f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f4c:	4a56      	ldr	r2, [pc, #344]	@ (80060a8 <HAL_GPIO_Init+0x2e8>)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	089b      	lsrs	r3, r3, #2
 8005f52:	3302      	adds	r3, #2
 8005f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	220f      	movs	r2, #15
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005f76:	d01f      	beq.n	8005fb8 <HAL_GPIO_Init+0x1f8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80060ac <HAL_GPIO_Init+0x2ec>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d019      	beq.n	8005fb4 <HAL_GPIO_Init+0x1f4>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a4b      	ldr	r2, [pc, #300]	@ (80060b0 <HAL_GPIO_Init+0x2f0>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <HAL_GPIO_Init+0x1f0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80060b4 <HAL_GPIO_Init+0x2f4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00d      	beq.n	8005fac <HAL_GPIO_Init+0x1ec>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a49      	ldr	r2, [pc, #292]	@ (80060b8 <HAL_GPIO_Init+0x2f8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d007      	beq.n	8005fa8 <HAL_GPIO_Init+0x1e8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a48      	ldr	r2, [pc, #288]	@ (80060bc <HAL_GPIO_Init+0x2fc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d101      	bne.n	8005fa4 <HAL_GPIO_Init+0x1e4>
 8005fa0:	2305      	movs	r3, #5
 8005fa2:	e00a      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fa4:	2306      	movs	r3, #6
 8005fa6:	e008      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	e006      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fac:	2303      	movs	r3, #3
 8005fae:	e004      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e002      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	f002 0203 	and.w	r2, r2, #3
 8005fc0:	0092      	lsls	r2, r2, #2
 8005fc2:	4093      	lsls	r3, r2
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fca:	4937      	ldr	r1, [pc, #220]	@ (80060a8 <HAL_GPIO_Init+0x2e8>)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	089b      	lsrs	r3, r3, #2
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fd8:	4b39      	ldr	r3, [pc, #228]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ffc:	4a30      	ldr	r2, [pc, #192]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006002:	4b2f      	ldr	r3, [pc, #188]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	43db      	mvns	r3, r3
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4013      	ands	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006026:	4a26      	ldr	r2, [pc, #152]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800602c:	4b24      	ldr	r3, [pc, #144]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	43db      	mvns	r3, r3
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4013      	ands	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006050:	4a1b      	ldr	r2, [pc, #108]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006056:	4b1a      	ldr	r3, [pc, #104]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	43db      	mvns	r3, r3
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4013      	ands	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800607a:	4a11      	ldr	r2, [pc, #68]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	3301      	adds	r3, #1
 8006084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	fa22 f303 	lsr.w	r3, r2, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	f47f ae9d 	bne.w	8005dd0 <HAL_GPIO_Init+0x10>
  }
}
 8006096:	bf00      	nop
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40021000 	.word	0x40021000
 80060a8:	40010000 	.word	0x40010000
 80060ac:	48000400 	.word	0x48000400
 80060b0:	48000800 	.word	0x48000800
 80060b4:	48000c00 	.word	0x48000c00
 80060b8:	48001000 	.word	0x48001000
 80060bc:	48001400 	.word	0x48001400
 80060c0:	40010400 	.word	0x40010400

080060c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	807b      	strh	r3, [r7, #2]
 80060d0:	4613      	mov	r3, r2
 80060d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060d4:	787b      	ldrb	r3, [r7, #1]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060da:	887a      	ldrh	r2, [r7, #2]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060e0:	e002      	b.n	80060e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060e2:	887a      	ldrh	r2, [r7, #2]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006106:	887a      	ldrh	r2, [r7, #2]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4013      	ands	r3, r2
 800610c:	041a      	lsls	r2, r3, #16
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	43d9      	mvns	r1, r3
 8006112:	887b      	ldrh	r3, [r7, #2]
 8006114:	400b      	ands	r3, r1
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	619a      	str	r2, [r3, #24]
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006132:	4b08      	ldr	r3, [pc, #32]	@ (8006154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006134:	695a      	ldr	r2, [r3, #20]
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	4013      	ands	r3, r2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d006      	beq.n	800614c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800613e:	4a05      	ldr	r2, [pc, #20]	@ (8006154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006144:	88fb      	ldrh	r3, [r7, #6]
 8006146:	4618      	mov	r0, r3
 8006148:	f7fc fbaa 	bl	80028a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800614c:	bf00      	nop
 800614e:	3708      	adds	r7, #8
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	40010400 	.word	0x40010400

08006158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e08d      	b.n	8006286 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fb f9e4 	bl	800154c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2224      	movs	r2, #36	@ 0x24
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0201 	bic.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80061a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d107      	bne.n	80061d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689a      	ldr	r2, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061ce:	609a      	str	r2, [r3, #8]
 80061d0:	e006      	b.n	80061e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80061de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d108      	bne.n	80061fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061f6:	605a      	str	r2, [r3, #4]
 80061f8:	e007      	b.n	800620a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006208:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800621c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800622c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691a      	ldr	r2, [r3, #16]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69d9      	ldr	r1, [r3, #28]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1a      	ldr	r2, [r3, #32]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	461a      	mov	r2, r3
 800629c:	460b      	mov	r3, r1
 800629e:	817b      	strh	r3, [r7, #10]
 80062a0:	4613      	mov	r3, r2
 80062a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	f040 80fd 	bne.w	80064ac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_I2C_Master_Transmit+0x30>
 80062bc:	2302      	movs	r3, #2
 80062be:	e0f6      	b.n	80064ae <HAL_I2C_Master_Transmit+0x21e>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062c8:	f7fc fef0 	bl	80030ac <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	2319      	movs	r3, #25
 80062d4:	2201      	movs	r2, #1
 80062d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fe8f 	bl	8006ffe <I2C_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e0e1      	b.n	80064ae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2221      	movs	r2, #33	@ 0x21
 80062ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2210      	movs	r2, #16
 80062f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	893a      	ldrh	r2, [r7, #8]
 800630a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	2bff      	cmp	r3, #255	@ 0xff
 800631a:	d906      	bls.n	800632a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	22ff      	movs	r2, #255	@ 0xff
 8006320:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006322:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	e007      	b.n	800633a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006334:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006338:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d024      	beq.n	800638c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006346:	781a      	ldrb	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006376:	b2db      	uxtb	r3, r3
 8006378:	3301      	adds	r3, #1
 800637a:	b2da      	uxtb	r2, r3
 800637c:	8979      	ldrh	r1, [r7, #10]
 800637e:	4b4e      	ldr	r3, [pc, #312]	@ (80064b8 <HAL_I2C_Master_Transmit+0x228>)
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 fffd 	bl	8007384 <I2C_TransferConfig>
 800638a:	e066      	b.n	800645a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006390:	b2da      	uxtb	r2, r3
 8006392:	8979      	ldrh	r1, [r7, #10]
 8006394:	4b48      	ldr	r3, [pc, #288]	@ (80064b8 <HAL_I2C_Master_Transmit+0x228>)
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 fff2 	bl	8007384 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80063a0:	e05b      	b.n	800645a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	6a39      	ldr	r1, [r7, #32]
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fe82 	bl	80070b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e07b      	b.n	80064ae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ba:	781a      	ldrb	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d034      	beq.n	800645a <HAL_I2C_Master_Transmit+0x1ca>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d130      	bne.n	800645a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	2200      	movs	r2, #0
 8006400:	2180      	movs	r1, #128	@ 0x80
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 fdfb 	bl	8006ffe <I2C_WaitOnFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e04d      	b.n	80064ae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006416:	b29b      	uxth	r3, r3
 8006418:	2bff      	cmp	r3, #255	@ 0xff
 800641a:	d90e      	bls.n	800643a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	22ff      	movs	r2, #255	@ 0xff
 8006420:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006426:	b2da      	uxtb	r2, r3
 8006428:	8979      	ldrh	r1, [r7, #10]
 800642a:	2300      	movs	r3, #0
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 ffa6 	bl	8007384 <I2C_TransferConfig>
 8006438:	e00f      	b.n	800645a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006448:	b2da      	uxtb	r2, r3
 800644a:	8979      	ldrh	r1, [r7, #10]
 800644c:	2300      	movs	r3, #0
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 ff95 	bl	8007384 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d19e      	bne.n	80063a2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	6a39      	ldr	r1, [r7, #32]
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 fe68 	bl	800713e <I2C_WaitOnSTOPFlagUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e01a      	b.n	80064ae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2220      	movs	r2, #32
 800647e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6859      	ldr	r1, [r3, #4]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b0c      	ldr	r3, [pc, #48]	@ (80064bc <HAL_I2C_Master_Transmit+0x22c>)
 800648c:	400b      	ands	r3, r1
 800648e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e000      	b.n	80064ae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
  }
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	80002000 	.word	0x80002000
 80064bc:	fe00e800 	.word	0xfe00e800

080064c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	68f9      	ldr	r1, [r7, #12]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	4798      	blx	r3
  }
}
 80064ec:	bf00      	nop
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00f      	beq.n	8006536 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006524:	f043 0201 	orr.w	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006534:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00f      	beq.n	8006560 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00a      	beq.n	8006560 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654e:	f043 0208 	orr.w	r2, r3, #8
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800655e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00f      	beq.n	800658a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00a      	beq.n	800658a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006578:	f043 0202 	orr.w	r2, r3, #2
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006588:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f003 030b 	and.w	r3, r3, #11
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800659a:	68f9      	ldr	r1, [r7, #12]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fbd5 	bl	8006d4c <I2C_ITError>
  }
}
 80065a2:	bf00      	nop
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	460b      	mov	r3, r1
 80065dc:	70fb      	strb	r3, [r7, #3]
 80065de:	4613      	mov	r3, r2
 80065e0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b086      	sub	sp, #24
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <I2C_Slave_ISR_IT+0x24>
 800664a:	2302      	movs	r3, #2
 800664c:	e0e2      	b.n	8006814 <I2C_Slave_ISR_IT+0x1ea>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d009      	beq.n	8006674 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006666:	2b00      	cmp	r3, #0
 8006668:	d004      	beq.n	8006674 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800666a:	6939      	ldr	r1, [r7, #16]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f9b5 	bl	80069dc <I2C_ITSlaveCplt>
 8006672:	e0ca      	b.n	800680a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f003 0310 	and.w	r3, r3, #16
 800667a:	2b00      	cmp	r3, #0
 800667c:	d04b      	beq.n	8006716 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006684:	2b00      	cmp	r3, #0
 8006686:	d046      	beq.n	8006716 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d128      	bne.n	80066e4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b28      	cmp	r3, #40	@ 0x28
 800669c:	d108      	bne.n	80066b0 <I2C_Slave_ISR_IT+0x86>
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066a4:	d104      	bne.n	80066b0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80066a6:	6939      	ldr	r1, [r7, #16]
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 fafb 	bl	8006ca4 <I2C_ITListenCplt>
 80066ae:	e031      	b.n	8006714 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b29      	cmp	r3, #41	@ 0x29
 80066ba:	d10e      	bne.n	80066da <I2C_Slave_ISR_IT+0xb0>
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066c2:	d00a      	beq.n	80066da <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2210      	movs	r2, #16
 80066ca:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fc54 	bl	8006f7a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f926 	bl	8006924 <I2C_ITSlaveSeqCplt>
 80066d8:	e01c      	b.n	8006714 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2210      	movs	r2, #16
 80066e0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80066e2:	e08f      	b.n	8006804 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2210      	movs	r2, #16
 80066ea:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f0:	f043 0204 	orr.w	r2, r3, #4
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <I2C_Slave_ISR_IT+0xdc>
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006704:	d17e      	bne.n	8006804 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670a:	4619      	mov	r1, r3
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fb1d 	bl	8006d4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006712:	e077      	b.n	8006804 <I2C_Slave_ISR_IT+0x1da>
 8006714:	e076      	b.n	8006804 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d02f      	beq.n	8006780 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006726:	2b00      	cmp	r3, #0
 8006728:	d02a      	beq.n	8006780 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d018      	beq.n	8006766 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d14b      	bne.n	8006808 <I2C_Slave_ISR_IT+0x1de>
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006776:	d047      	beq.n	8006808 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 f8d3 	bl	8006924 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800677e:	e043      	b.n	8006808 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006794:	6939      	ldr	r1, [r7, #16]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 f840 	bl	800681c <I2C_ITAddrCplt>
 800679c:	e035      	b.n	800680a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d030      	beq.n	800680a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d02b      	beq.n	800680a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d018      	beq.n	80067ee <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	781a      	ldrb	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	851a      	strh	r2, [r3, #40]	@ 0x28
 80067ec:	e00d      	b.n	800680a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067f4:	d002      	beq.n	80067fc <I2C_Slave_ISR_IT+0x1d2>
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d106      	bne.n	800680a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f891 	bl	8006924 <I2C_ITSlaveSeqCplt>
 8006802:	e002      	b.n	800680a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006804:	bf00      	nop
 8006806:	e000      	b.n	800680a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006808:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006832:	2b28      	cmp	r3, #40	@ 0x28
 8006834:	d16a      	bne.n	800690c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	0c1b      	lsrs	r3, r3, #16
 800683e:	b2db      	uxtb	r3, r3
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	0c1b      	lsrs	r3, r3, #16
 800684e:	b29b      	uxth	r3, r3
 8006850:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006854:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006862:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006870:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d138      	bne.n	80068ec <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800687a:	897b      	ldrh	r3, [r7, #10]
 800687c:	09db      	lsrs	r3, r3, #7
 800687e:	b29a      	uxth	r2, r3
 8006880:	89bb      	ldrh	r3, [r7, #12]
 8006882:	4053      	eors	r3, r2
 8006884:	b29b      	uxth	r3, r3
 8006886:	f003 0306 	and.w	r3, r3, #6
 800688a:	2b00      	cmp	r3, #0
 800688c:	d11c      	bne.n	80068c8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800688e:	897b      	ldrh	r3, [r7, #10]
 8006890:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d13b      	bne.n	800691c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2208      	movs	r2, #8
 80068b0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80068ba:	89ba      	ldrh	r2, [r7, #12]
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff fe86 	bl	80065d2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80068c6:	e029      	b.n	800691c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80068c8:	893b      	ldrh	r3, [r7, #8]
 80068ca:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80068cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fd89 	bl	80073e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80068de:	89ba      	ldrh	r2, [r7, #12]
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff fe74 	bl	80065d2 <HAL_I2C_AddrCallback>
}
 80068ea:	e017      	b.n	800691c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80068ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fd79 	bl	80073e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80068fe:	89ba      	ldrh	r2, [r7, #12]
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff fe64 	bl	80065d2 <HAL_I2C_AddrCallback>
}
 800690a:	e007      	b.n	800691c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2208      	movs	r2, #8
 8006912:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800691c:	bf00      	nop
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d008      	beq.n	8006958 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	e00c      	b.n	8006972 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006970:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b29      	cmp	r3, #41	@ 0x29
 800697c:	d112      	bne.n	80069a4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2228      	movs	r2, #40	@ 0x28
 8006982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2221      	movs	r2, #33	@ 0x21
 800698a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800698c:	2101      	movs	r1, #1
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fd2a 	bl	80073e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff fe04 	bl	80065aa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80069a2:	e017      	b.n	80069d4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80069ae:	d111      	bne.n	80069d4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2228      	movs	r2, #40	@ 0x28
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2222      	movs	r2, #34	@ 0x22
 80069bc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80069be:	2102      	movs	r1, #2
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fd11 	bl	80073e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff fdf5 	bl	80065be <HAL_I2C_SlaveRxCpltCallback>
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069fe:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2220      	movs	r2, #32
 8006a06:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a08:	7afb      	ldrb	r3, [r7, #11]
 8006a0a:	2b21      	cmp	r3, #33	@ 0x21
 8006a0c:	d002      	beq.n	8006a14 <I2C_ITSlaveCplt+0x38>
 8006a0e:	7afb      	ldrb	r3, [r7, #11]
 8006a10:	2b29      	cmp	r3, #41	@ 0x29
 8006a12:	d108      	bne.n	8006a26 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006a14:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fce5 	bl	80073e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2221      	movs	r2, #33	@ 0x21
 8006a22:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a24:	e019      	b.n	8006a5a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a26:	7afb      	ldrb	r3, [r7, #11]
 8006a28:	2b22      	cmp	r3, #34	@ 0x22
 8006a2a:	d002      	beq.n	8006a32 <I2C_ITSlaveCplt+0x56>
 8006a2c:	7afb      	ldrb	r3, [r7, #11]
 8006a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a30:	d108      	bne.n	8006a44 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006a32:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fcd6 	bl	80073e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2222      	movs	r2, #34	@ 0x22
 8006a40:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a42:	e00a      	b.n	8006a5a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006a44:	7afb      	ldrb	r3, [r7, #11]
 8006a46:	2b28      	cmp	r3, #40	@ 0x28
 8006a48:	d107      	bne.n	8006a5a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006a4a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fcca 	bl	80073e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a68:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6859      	ldr	r1, [r3, #4]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	4b89      	ldr	r3, [pc, #548]	@ (8006c9c <I2C_ITSlaveCplt+0x2c0>)
 8006a76:	400b      	ands	r3, r1
 8006a78:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fa7d 	bl	8006f7a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d013      	beq.n	8006ab2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a98:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01f      	beq.n	8006ae2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ab0:	e017      	b.n	8006ae2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d012      	beq.n	8006ae2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006aca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d006      	beq.n	8006ae2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d020      	beq.n	8006b2e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f023 0304 	bic.w	r3, r3, #4
 8006af2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00c      	beq.n	8006b2e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d005      	beq.n	8006b44 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3c:	f043 0204 	orr.w	r2, r3, #4
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f003 0310 	and.w	r3, r3, #16
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d049      	beq.n	8006be2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d044      	beq.n	8006be2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d128      	bne.n	8006bb4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b28      	cmp	r3, #40	@ 0x28
 8006b6c:	d108      	bne.n	8006b80 <I2C_ITSlaveCplt+0x1a4>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b74:	d104      	bne.n	8006b80 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006b76:	6979      	ldr	r1, [r7, #20]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f893 	bl	8006ca4 <I2C_ITListenCplt>
 8006b7e:	e030      	b.n	8006be2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b29      	cmp	r3, #41	@ 0x29
 8006b8a:	d10e      	bne.n	8006baa <I2C_ITSlaveCplt+0x1ce>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b92:	d00a      	beq.n	8006baa <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2210      	movs	r2, #16
 8006b9a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f9ec 	bl	8006f7a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff febe 	bl	8006924 <I2C_ITSlaveSeqCplt>
 8006ba8:	e01b      	b.n	8006be2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2210      	movs	r2, #16
 8006bb0:	61da      	str	r2, [r3, #28]
 8006bb2:	e016      	b.n	8006be2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2210      	movs	r2, #16
 8006bba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc0:	f043 0204 	orr.w	r2, r3, #4
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <I2C_ITSlaveCplt+0x1fa>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bd4:	d105      	bne.n	8006be2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f8b5 	bl	8006d4c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d010      	beq.n	8006c1a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f8a4 	bl	8006d4c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b28      	cmp	r3, #40	@ 0x28
 8006c0e:	d141      	bne.n	8006c94 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006c10:	6979      	ldr	r1, [r7, #20]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f846 	bl	8006ca4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c18:	e03c      	b.n	8006c94 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c22:	d014      	beq.n	8006c4e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff fe7d 	bl	8006924 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ca0 <I2C_ITSlaveCplt+0x2c4>)
 8006c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7ff fcd1 	bl	80065ee <HAL_I2C_ListenCpltCallback>
}
 8006c4c:	e022      	b.n	8006c94 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b22      	cmp	r3, #34	@ 0x22
 8006c58:	d10e      	bne.n	8006c78 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff fca4 	bl	80065be <HAL_I2C_SlaveRxCpltCallback>
}
 8006c76:	e00d      	b.n	8006c94 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff fc8b 	bl	80065aa <HAL_I2C_SlaveTxCpltCallback>
}
 8006c94:	bf00      	nop
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	fe00e800 	.word	0xfe00e800
 8006ca0:	ffff0000 	.word	0xffff0000

08006ca4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a25      	ldr	r2, [pc, #148]	@ (8006d48 <I2C_ITListenCplt+0xa4>)
 8006cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d022      	beq.n	8006d20 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d012      	beq.n	8006d20 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d18:	f043 0204 	orr.w	r2, r3, #4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006d20:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fb5f 	bl	80073e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2210      	movs	r2, #16
 8006d30:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff fc57 	bl	80065ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	ffff0000 	.word	0xffff0000

08006d4c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d5c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a6d      	ldr	r2, [pc, #436]	@ (8006f20 <I2C_ITError+0x1d4>)
 8006d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	2b28      	cmp	r3, #40	@ 0x28
 8006d82:	d005      	beq.n	8006d90 <I2C_ITError+0x44>
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	2b29      	cmp	r3, #41	@ 0x29
 8006d88:	d002      	beq.n	8006d90 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d8e:	d10b      	bne.n	8006da8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006d90:	2103      	movs	r1, #3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fb28 	bl	80073e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2228      	movs	r2, #40	@ 0x28
 8006d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a60      	ldr	r2, [pc, #384]	@ (8006f24 <I2C_ITError+0x1d8>)
 8006da4:	635a      	str	r2, [r3, #52]	@ 0x34
 8006da6:	e030      	b.n	8006e0a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006da8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fb1b 	bl	80073e8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f8e1 	bl	8006f7a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b60      	cmp	r3, #96	@ 0x60
 8006dc2:	d01f      	beq.n	8006e04 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	d114      	bne.n	8006e04 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	f003 0310 	and.w	r3, r3, #16
 8006de4:	2b10      	cmp	r3, #16
 8006de6:	d109      	bne.n	8006dfc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2210      	movs	r2, #16
 8006dee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df4:	f043 0204 	orr.w	r2, r3, #4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2220      	movs	r2, #32
 8006e02:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d039      	beq.n	8006e8c <I2C_ITError+0x140>
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b11      	cmp	r3, #17
 8006e1c:	d002      	beq.n	8006e24 <I2C_ITError+0xd8>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b21      	cmp	r3, #33	@ 0x21
 8006e22:	d133      	bne.n	8006e8c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e32:	d107      	bne.n	8006e44 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e42:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe fb82 	bl	8005552 <HAL_DMA_GetState>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d017      	beq.n	8006e84 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e58:	4a33      	ldr	r2, [pc, #204]	@ (8006f28 <I2C_ITError+0x1dc>)
 8006e5a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe fa5c 	bl	8005326 <HAL_DMA_Abort_IT>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d04d      	beq.n	8006f10 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006e7e:	4610      	mov	r0, r2
 8006e80:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e82:	e045      	b.n	8006f10 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f851 	bl	8006f2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e8a:	e041      	b.n	8006f10 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d039      	beq.n	8006f08 <I2C_ITError+0x1bc>
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b12      	cmp	r3, #18
 8006e98:	d002      	beq.n	8006ea0 <I2C_ITError+0x154>
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b22      	cmp	r3, #34	@ 0x22
 8006e9e:	d133      	bne.n	8006f08 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eae:	d107      	bne.n	8006ec0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ebe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fe fb44 	bl	8005552 <HAL_DMA_GetState>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d017      	beq.n	8006f00 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed4:	4a14      	ldr	r2, [pc, #80]	@ (8006f28 <I2C_ITError+0x1dc>)
 8006ed6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fe fa1e 	bl	8005326 <HAL_DMA_Abort_IT>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d011      	beq.n	8006f14 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006efa:	4610      	mov	r0, r2
 8006efc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006efe:	e009      	b.n	8006f14 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f813 	bl	8006f2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f06:	e005      	b.n	8006f14 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f80f 	bl	8006f2c <I2C_TreatErrorCallback>
  }
}
 8006f0e:	e002      	b.n	8006f16 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f10:	bf00      	nop
 8006f12:	e000      	b.n	8006f16 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f14:	bf00      	nop
}
 8006f16:	bf00      	nop
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	ffff0000 	.word	0xffff0000
 8006f24:	0800662b 	.word	0x0800662b
 8006f28:	08006fc3 	.word	0x08006fc3

08006f2c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b60      	cmp	r3, #96	@ 0x60
 8006f3e:	d10e      	bne.n	8006f5e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff fb5d 	bl	8006616 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f5c:	e009      	b.n	8006f72 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7ff fb48 	bl	8006602 <HAL_I2C_ErrorCallback>
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d103      	bne.n	8006f98 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2200      	movs	r2, #0
 8006f96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d007      	beq.n	8006fb6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	699a      	ldr	r2, [r3, #24]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	619a      	str	r2, [r3, #24]
  }
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fdc:	2200      	movs	r2, #0
 8006fde:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fec:	2200      	movs	r2, #0
 8006fee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff ff9b 	bl	8006f2c <I2C_TreatErrorCallback>
}
 8006ff6:	bf00      	nop
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	603b      	str	r3, [r7, #0]
 800700a:	4613      	mov	r3, r2
 800700c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800700e:	e03b      	b.n	8007088 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 f8d5 	bl	80071c4 <I2C_IsErrorOccurred>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e041      	b.n	80070a8 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702a:	d02d      	beq.n	8007088 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702c:	f7fc f83e 	bl	80030ac <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d302      	bcc.n	8007042 <I2C_WaitOnFlagUntilTimeout+0x44>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d122      	bne.n	8007088 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4013      	ands	r3, r2
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	429a      	cmp	r2, r3
 8007050:	bf0c      	ite	eq
 8007052:	2301      	moveq	r3, #1
 8007054:	2300      	movne	r3, #0
 8007056:	b2db      	uxtb	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	429a      	cmp	r2, r3
 800705e:	d113      	bne.n	8007088 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007064:	f043 0220 	orr.w	r2, r3, #32
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e00f      	b.n	80070a8 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	699a      	ldr	r2, [r3, #24]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	4013      	ands	r3, r2
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	429a      	cmp	r2, r3
 8007096:	bf0c      	ite	eq
 8007098:	2301      	moveq	r3, #1
 800709a:	2300      	movne	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	461a      	mov	r2, r3
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d0b4      	beq.n	8007010 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070bc:	e033      	b.n	8007126 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f87e 	bl	80071c4 <I2C_IsErrorOccurred>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e031      	b.n	8007136 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d025      	beq.n	8007126 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070da:	f7fb ffe7 	bl	80030ac <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d302      	bcc.n	80070f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d11a      	bne.n	8007126 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d013      	beq.n	8007126 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007102:	f043 0220 	orr.w	r2, r3, #32
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2220      	movs	r2, #32
 800710e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e007      	b.n	8007136 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b02      	cmp	r3, #2
 8007132:	d1c4      	bne.n	80070be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800714a:	e02f      	b.n	80071ac <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f837 	bl	80071c4 <I2C_IsErrorOccurred>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e02d      	b.n	80071bc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007160:	f7fb ffa4 	bl	80030ac <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	d302      	bcc.n	8007176 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d11a      	bne.n	80071ac <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b20      	cmp	r3, #32
 8007182:	d013      	beq.n	80071ac <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007188:	f043 0220 	orr.w	r2, r3, #32
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e007      	b.n	80071bc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d1c8      	bne.n	800714c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08a      	sub	sp, #40	@ 0x28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d068      	beq.n	80072c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2210      	movs	r2, #16
 80071f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071f8:	e049      	b.n	800728e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007200:	d045      	beq.n	800728e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007202:	f7fb ff53 	bl	80030ac <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	429a      	cmp	r2, r3
 8007210:	d302      	bcc.n	8007218 <I2C_IsErrorOccurred+0x54>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d13a      	bne.n	800728e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007222:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800722a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007236:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800723a:	d121      	bne.n	8007280 <I2C_IsErrorOccurred+0xbc>
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007242:	d01d      	beq.n	8007280 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007244:	7cfb      	ldrb	r3, [r7, #19]
 8007246:	2b20      	cmp	r3, #32
 8007248:	d01a      	beq.n	8007280 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007258:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800725a:	f7fb ff27 	bl	80030ac <HAL_GetTick>
 800725e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007260:	e00e      	b.n	8007280 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007262:	f7fb ff23 	bl	80030ac <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b19      	cmp	r3, #25
 800726e:	d907      	bls.n	8007280 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	f043 0320 	orr.w	r3, r3, #32
 8007276:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800727e:	e006      	b.n	800728e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b20      	cmp	r3, #32
 800728c:	d1e9      	bne.n	8007262 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b20      	cmp	r3, #32
 800729a:	d003      	beq.n	80072a4 <I2C_IsErrorOccurred+0xe0>
 800729c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0aa      	beq.n	80071fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80072a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d103      	bne.n	80072b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2220      	movs	r2, #32
 80072b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	f043 0304 	orr.w	r3, r3, #4
 80072ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00b      	beq.n	80072ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	f043 0301 	orr.w	r3, r3, #1
 80072da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80072e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00b      	beq.n	800730e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	f043 0308 	orr.w	r3, r3, #8
 80072fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007306:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	f043 0302 	orr.w	r3, r3, #2
 800731e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007328:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01c      	beq.n	8007372 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f7ff fe1e 	bl	8006f7a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	4b0d      	ldr	r3, [pc, #52]	@ (8007380 <I2C_IsErrorOccurred+0x1bc>)
 800734a:	400b      	ands	r3, r1
 800734c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	431a      	orrs	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007372:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007376:	4618      	mov	r0, r3
 8007378:	3728      	adds	r7, #40	@ 0x28
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	fe00e800 	.word	0xfe00e800

08007384 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007384:	b480      	push	{r7}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	607b      	str	r3, [r7, #4]
 800738e:	460b      	mov	r3, r1
 8007390:	817b      	strh	r3, [r7, #10]
 8007392:	4613      	mov	r3, r2
 8007394:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007396:	897b      	ldrh	r3, [r7, #10]
 8007398:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800739c:	7a7b      	ldrb	r3, [r7, #9]
 800739e:	041b      	lsls	r3, r3, #16
 80073a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	0d5b      	lsrs	r3, r3, #21
 80073be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80073c2:	4b08      	ldr	r3, [pc, #32]	@ (80073e4 <I2C_TransferConfig+0x60>)
 80073c4:	430b      	orrs	r3, r1
 80073c6:	43db      	mvns	r3, r3
 80073c8:	ea02 0103 	and.w	r1, r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	430a      	orrs	r2, r1
 80073d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	03ff63ff 	.word	0x03ff63ff

080073e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80073f8:	887b      	ldrh	r3, [r7, #2]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00f      	beq.n	8007422 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007408:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007416:	2b28      	cmp	r3, #40	@ 0x28
 8007418:	d003      	beq.n	8007422 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007420:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007422:	887b      	ldrh	r3, [r7, #2]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00f      	beq.n	800744c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007432:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800743a:	b2db      	uxtb	r3, r3
 800743c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007440:	2b28      	cmp	r3, #40	@ 0x28
 8007442:	d003      	beq.n	800744c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800744a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800744c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007450:	2b00      	cmp	r3, #0
 8007452:	da03      	bge.n	800745c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800745a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800745c:	887b      	ldrh	r3, [r7, #2]
 800745e:	2b10      	cmp	r3, #16
 8007460:	d103      	bne.n	800746a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007468:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800746a:	887b      	ldrh	r3, [r7, #2]
 800746c:	2b20      	cmp	r3, #32
 800746e:	d103      	bne.n	8007478 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f043 0320 	orr.w	r3, r3, #32
 8007476:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007478:	887b      	ldrh	r3, [r7, #2]
 800747a:	2b40      	cmp	r3, #64	@ 0x40
 800747c:	d103      	bne.n	8007486 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007484:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6819      	ldr	r1, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	43da      	mvns	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	400a      	ands	r2, r1
 8007496:	601a      	str	r2, [r3, #0]
}
 8007498:	bf00      	nop
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d138      	bne.n	800752c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e032      	b.n	800752e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2224      	movs	r2, #36	@ 0x24
 80074d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0201 	bic.w	r2, r2, #1
 80074e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80074f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6819      	ldr	r1, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0201 	orr.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	e000      	b.n	800752e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800752c:	2302      	movs	r3, #2
  }
}
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800753a:	b480      	push	{r7}
 800753c:	b085      	sub	sp, #20
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b20      	cmp	r3, #32
 800754e:	d139      	bne.n	80075c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800755a:	2302      	movs	r3, #2
 800755c:	e033      	b.n	80075c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2224      	movs	r2, #36	@ 0x24
 800756a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 0201 	bic.w	r2, r2, #1
 800757c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800758c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	021b      	lsls	r3, r3, #8
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4313      	orrs	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2220      	movs	r2, #32
 80075b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	e000      	b.n	80075c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80075c4:	2302      	movs	r3, #2
  }
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
	...

080075d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d141      	bne.n	8007666 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80075e2:	4b4b      	ldr	r3, [pc, #300]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80075ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075ee:	d131      	bne.n	8007654 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075f0:	4b47      	ldr	r3, [pc, #284]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075f6:	4a46      	ldr	r2, [pc, #280]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007600:	4b43      	ldr	r3, [pc, #268]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007608:	4a41      	ldr	r2, [pc, #260]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800760a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800760e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007610:	4b40      	ldr	r3, [pc, #256]	@ (8007714 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2232      	movs	r2, #50	@ 0x32
 8007616:	fb02 f303 	mul.w	r3, r2, r3
 800761a:	4a3f      	ldr	r2, [pc, #252]	@ (8007718 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800761c:	fba2 2303 	umull	r2, r3, r2, r3
 8007620:	0c9b      	lsrs	r3, r3, #18
 8007622:	3301      	adds	r3, #1
 8007624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007626:	e002      	b.n	800762e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3b01      	subs	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800762e:	4b38      	ldr	r3, [pc, #224]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800763a:	d102      	bne.n	8007642 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1f2      	bne.n	8007628 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007642:	4b33      	ldr	r3, [pc, #204]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800764a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800764e:	d158      	bne.n	8007702 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e057      	b.n	8007704 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007654:	4b2e      	ldr	r3, [pc, #184]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800765a:	4a2d      	ldr	r2, [pc, #180]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800765c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007660:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007664:	e04d      	b.n	8007702 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800766c:	d141      	bne.n	80076f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800766e:	4b28      	ldr	r3, [pc, #160]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800767a:	d131      	bne.n	80076e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800767c:	4b24      	ldr	r3, [pc, #144]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800767e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007682:	4a23      	ldr	r2, [pc, #140]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007688:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800768c:	4b20      	ldr	r3, [pc, #128]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007694:	4a1e      	ldr	r2, [pc, #120]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007696:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800769a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800769c:	4b1d      	ldr	r3, [pc, #116]	@ (8007714 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2232      	movs	r2, #50	@ 0x32
 80076a2:	fb02 f303 	mul.w	r3, r2, r3
 80076a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007718 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80076a8:	fba2 2303 	umull	r2, r3, r2, r3
 80076ac:	0c9b      	lsrs	r3, r3, #18
 80076ae:	3301      	adds	r3, #1
 80076b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076b2:	e002      	b.n	80076ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80076ba:	4b15      	ldr	r3, [pc, #84]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076c6:	d102      	bne.n	80076ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1f2      	bne.n	80076b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80076ce:	4b10      	ldr	r3, [pc, #64]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076da:	d112      	bne.n	8007702 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e011      	b.n	8007704 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80076e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80076f0:	e007      	b.n	8007702 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80076f2:	4b07      	ldr	r3, [pc, #28]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80076fa:	4a05      	ldr	r2, [pc, #20]	@ (8007710 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80076fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007700:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3714      	adds	r7, #20
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	40007000 	.word	0x40007000
 8007714:	20000000 	.word	0x20000000
 8007718:	431bde83 	.word	0x431bde83

0800771c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007720:	4b05      	ldr	r3, [pc, #20]	@ (8007738 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	4a04      	ldr	r2, [pc, #16]	@ (8007738 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007726:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800772a:	6093      	str	r3, [r2, #8]
}
 800772c:	bf00      	nop
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40007000 	.word	0x40007000

0800773c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e2fe      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d075      	beq.n	8007846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800775a:	4b97      	ldr	r3, [pc, #604]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 030c 	and.w	r3, r3, #12
 8007762:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007764:	4b94      	ldr	r3, [pc, #592]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b0c      	cmp	r3, #12
 8007772:	d102      	bne.n	800777a <HAL_RCC_OscConfig+0x3e>
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2b03      	cmp	r3, #3
 8007778:	d002      	beq.n	8007780 <HAL_RCC_OscConfig+0x44>
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b08      	cmp	r3, #8
 800777e:	d10b      	bne.n	8007798 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007780:	4b8d      	ldr	r3, [pc, #564]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d05b      	beq.n	8007844 <HAL_RCC_OscConfig+0x108>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d157      	bne.n	8007844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e2d9      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077a0:	d106      	bne.n	80077b0 <HAL_RCC_OscConfig+0x74>
 80077a2:	4b85      	ldr	r3, [pc, #532]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a84      	ldr	r2, [pc, #528]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80077a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	e01d      	b.n	80077ec <HAL_RCC_OscConfig+0xb0>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077b8:	d10c      	bne.n	80077d4 <HAL_RCC_OscConfig+0x98>
 80077ba:	4b7f      	ldr	r3, [pc, #508]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a7e      	ldr	r2, [pc, #504]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80077c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	4b7c      	ldr	r3, [pc, #496]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a7b      	ldr	r2, [pc, #492]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80077cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	e00b      	b.n	80077ec <HAL_RCC_OscConfig+0xb0>
 80077d4:	4b78      	ldr	r3, [pc, #480]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a77      	ldr	r2, [pc, #476]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80077da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	4b75      	ldr	r3, [pc, #468]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a74      	ldr	r2, [pc, #464]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80077e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d013      	beq.n	800781c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f4:	f7fb fc5a 	bl	80030ac <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077fa:	e008      	b.n	800780e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077fc:	f7fb fc56 	bl	80030ac <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b64      	cmp	r3, #100	@ 0x64
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e29e      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800780e:	4b6a      	ldr	r3, [pc, #424]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0f0      	beq.n	80077fc <HAL_RCC_OscConfig+0xc0>
 800781a:	e014      	b.n	8007846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800781c:	f7fb fc46 	bl	80030ac <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007822:	e008      	b.n	8007836 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007824:	f7fb fc42 	bl	80030ac <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b64      	cmp	r3, #100	@ 0x64
 8007830:	d901      	bls.n	8007836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e28a      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007836:	4b60      	ldr	r3, [pc, #384]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1f0      	bne.n	8007824 <HAL_RCC_OscConfig+0xe8>
 8007842:	e000      	b.n	8007846 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d075      	beq.n	800793e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007852:	4b59      	ldr	r3, [pc, #356]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 030c 	and.w	r3, r3, #12
 800785a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800785c:	4b56      	ldr	r3, [pc, #344]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f003 0303 	and.w	r3, r3, #3
 8007864:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	2b0c      	cmp	r3, #12
 800786a:	d102      	bne.n	8007872 <HAL_RCC_OscConfig+0x136>
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d002      	beq.n	8007878 <HAL_RCC_OscConfig+0x13c>
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	2b04      	cmp	r3, #4
 8007876:	d11f      	bne.n	80078b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007878:	4b4f      	ldr	r3, [pc, #316]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007880:	2b00      	cmp	r3, #0
 8007882:	d005      	beq.n	8007890 <HAL_RCC_OscConfig+0x154>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e25d      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007890:	4b49      	ldr	r3, [pc, #292]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	061b      	lsls	r3, r3, #24
 800789e:	4946      	ldr	r1, [pc, #280]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80078a4:	4b45      	ldr	r3, [pc, #276]	@ (80079bc <HAL_RCC_OscConfig+0x280>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fa f8d9 	bl	8001a60 <HAL_InitTick>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d043      	beq.n	800793c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e249      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d023      	beq.n	8007908 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078c0:	4b3d      	ldr	r3, [pc, #244]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a3c      	ldr	r2, [pc, #240]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80078c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078cc:	f7fb fbee 	bl	80030ac <HAL_GetTick>
 80078d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078d2:	e008      	b.n	80078e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078d4:	f7fb fbea 	bl	80030ac <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e232      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078e6:	4b34      	ldr	r3, [pc, #208]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0f0      	beq.n	80078d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078f2:	4b31      	ldr	r3, [pc, #196]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	061b      	lsls	r3, r3, #24
 8007900:	492d      	ldr	r1, [pc, #180]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 8007902:	4313      	orrs	r3, r2
 8007904:	604b      	str	r3, [r1, #4]
 8007906:	e01a      	b.n	800793e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007908:	4b2b      	ldr	r3, [pc, #172]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a2a      	ldr	r2, [pc, #168]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 800790e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007914:	f7fb fbca 	bl	80030ac <HAL_GetTick>
 8007918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800791a:	e008      	b.n	800792e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800791c:	f7fb fbc6 	bl	80030ac <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d901      	bls.n	800792e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e20e      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800792e:	4b22      	ldr	r3, [pc, #136]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1f0      	bne.n	800791c <HAL_RCC_OscConfig+0x1e0>
 800793a:	e000      	b.n	800793e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800793c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	2b00      	cmp	r3, #0
 8007948:	d041      	beq.n	80079ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d01c      	beq.n	800798c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007952:	4b19      	ldr	r3, [pc, #100]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 8007954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007958:	4a17      	ldr	r2, [pc, #92]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 800795a:	f043 0301 	orr.w	r3, r3, #1
 800795e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007962:	f7fb fba3 	bl	80030ac <HAL_GetTick>
 8007966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007968:	e008      	b.n	800797c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800796a:	f7fb fb9f 	bl	80030ac <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d901      	bls.n	800797c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e1e7      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800797c:	4b0e      	ldr	r3, [pc, #56]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 800797e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d0ef      	beq.n	800796a <HAL_RCC_OscConfig+0x22e>
 800798a:	e020      	b.n	80079ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800798c:	4b0a      	ldr	r3, [pc, #40]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 800798e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007992:	4a09      	ldr	r2, [pc, #36]	@ (80079b8 <HAL_RCC_OscConfig+0x27c>)
 8007994:	f023 0301 	bic.w	r3, r3, #1
 8007998:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800799c:	f7fb fb86 	bl	80030ac <HAL_GetTick>
 80079a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079a2:	e00d      	b.n	80079c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079a4:	f7fb fb82 	bl	80030ac <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d906      	bls.n	80079c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e1ca      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
 80079b6:	bf00      	nop
 80079b8:	40021000 	.word	0x40021000
 80079bc:	20000184 	.word	0x20000184
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079c0:	4b8c      	ldr	r3, [pc, #560]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 80079c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1ea      	bne.n	80079a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 80a6 	beq.w	8007b28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079dc:	2300      	movs	r3, #0
 80079de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80079e0:	4b84      	ldr	r3, [pc, #528]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 80079e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <HAL_RCC_OscConfig+0x2b4>
 80079ec:	2301      	movs	r3, #1
 80079ee:	e000      	b.n	80079f2 <HAL_RCC_OscConfig+0x2b6>
 80079f0:	2300      	movs	r3, #0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00d      	beq.n	8007a12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079f6:	4b7f      	ldr	r3, [pc, #508]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 80079f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079fa:	4a7e      	ldr	r2, [pc, #504]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 80079fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a00:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a02:	4b7c      	ldr	r3, [pc, #496]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a12:	4b79      	ldr	r3, [pc, #484]	@ (8007bf8 <HAL_RCC_OscConfig+0x4bc>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d118      	bne.n	8007a50 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a1e:	4b76      	ldr	r3, [pc, #472]	@ (8007bf8 <HAL_RCC_OscConfig+0x4bc>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a75      	ldr	r2, [pc, #468]	@ (8007bf8 <HAL_RCC_OscConfig+0x4bc>)
 8007a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a2a:	f7fb fb3f 	bl	80030ac <HAL_GetTick>
 8007a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a30:	e008      	b.n	8007a44 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a32:	f7fb fb3b 	bl	80030ac <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d901      	bls.n	8007a44 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e183      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a44:	4b6c      	ldr	r3, [pc, #432]	@ (8007bf8 <HAL_RCC_OscConfig+0x4bc>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d0f0      	beq.n	8007a32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d108      	bne.n	8007a6a <HAL_RCC_OscConfig+0x32e>
 8007a58:	4b66      	ldr	r3, [pc, #408]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a5e:	4a65      	ldr	r2, [pc, #404]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007a60:	f043 0301 	orr.w	r3, r3, #1
 8007a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a68:	e024      	b.n	8007ab4 <HAL_RCC_OscConfig+0x378>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2b05      	cmp	r3, #5
 8007a70:	d110      	bne.n	8007a94 <HAL_RCC_OscConfig+0x358>
 8007a72:	4b60      	ldr	r3, [pc, #384]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a78:	4a5e      	ldr	r2, [pc, #376]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007a7a:	f043 0304 	orr.w	r3, r3, #4
 8007a7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a82:	4b5c      	ldr	r3, [pc, #368]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a88:	4a5a      	ldr	r2, [pc, #360]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007a8a:	f043 0301 	orr.w	r3, r3, #1
 8007a8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a92:	e00f      	b.n	8007ab4 <HAL_RCC_OscConfig+0x378>
 8007a94:	4b57      	ldr	r3, [pc, #348]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a9a:	4a56      	ldr	r2, [pc, #344]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007aa4:	4b53      	ldr	r3, [pc, #332]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aaa:	4a52      	ldr	r2, [pc, #328]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007aac:	f023 0304 	bic.w	r3, r3, #4
 8007ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d016      	beq.n	8007aea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007abc:	f7fb faf6 	bl	80030ac <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ac2:	e00a      	b.n	8007ada <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ac4:	f7fb faf2 	bl	80030ac <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d901      	bls.n	8007ada <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e138      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ada:	4b46      	ldr	r3, [pc, #280]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d0ed      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x388>
 8007ae8:	e015      	b.n	8007b16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aea:	f7fb fadf 	bl	80030ac <HAL_GetTick>
 8007aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007af0:	e00a      	b.n	8007b08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007af2:	f7fb fadb 	bl	80030ac <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d901      	bls.n	8007b08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e121      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b08:	4b3a      	ldr	r3, [pc, #232]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1ed      	bne.n	8007af2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b16:	7ffb      	ldrb	r3, [r7, #31]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d105      	bne.n	8007b28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b1c:	4b35      	ldr	r3, [pc, #212]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b20:	4a34      	ldr	r2, [pc, #208]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007b22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b26:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d03c      	beq.n	8007bae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01c      	beq.n	8007b76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b42:	4a2c      	ldr	r2, [pc, #176]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007b44:	f043 0301 	orr.w	r3, r3, #1
 8007b48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b4c:	f7fb faae 	bl	80030ac <HAL_GetTick>
 8007b50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b52:	e008      	b.n	8007b66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b54:	f7fb faaa 	bl	80030ac <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e0f2      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007b66:	4b23      	ldr	r3, [pc, #140]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0ef      	beq.n	8007b54 <HAL_RCC_OscConfig+0x418>
 8007b74:	e01b      	b.n	8007bae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b76:	4b1f      	ldr	r3, [pc, #124]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007b7e:	f023 0301 	bic.w	r3, r3, #1
 8007b82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b86:	f7fb fa91 	bl	80030ac <HAL_GetTick>
 8007b8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007b8c:	e008      	b.n	8007ba0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007b8e:	f7fb fa8d 	bl	80030ac <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d901      	bls.n	8007ba0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e0d5      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ba0:	4b14      	ldr	r3, [pc, #80]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1ef      	bne.n	8007b8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 80c9 	beq.w	8007d4a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 030c 	and.w	r3, r3, #12
 8007bc0:	2b0c      	cmp	r3, #12
 8007bc2:	f000 8083 	beq.w	8007ccc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d15e      	bne.n	8007c8c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bce:	4b09      	ldr	r3, [pc, #36]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a08      	ldr	r2, [pc, #32]	@ (8007bf4 <HAL_RCC_OscConfig+0x4b8>)
 8007bd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bda:	f7fb fa67 	bl	80030ac <HAL_GetTick>
 8007bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007be0:	e00c      	b.n	8007bfc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007be2:	f7fb fa63 	bl	80030ac <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d905      	bls.n	8007bfc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e0ab      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
 8007bf4:	40021000 	.word	0x40021000
 8007bf8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bfc:	4b55      	ldr	r3, [pc, #340]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1ec      	bne.n	8007be2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c08:	4b52      	ldr	r3, [pc, #328]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	4b52      	ldr	r3, [pc, #328]	@ (8007d58 <HAL_RCC_OscConfig+0x61c>)
 8007c0e:	4013      	ands	r3, r2
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6a11      	ldr	r1, [r2, #32]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007c18:	3a01      	subs	r2, #1
 8007c1a:	0112      	lsls	r2, r2, #4
 8007c1c:	4311      	orrs	r1, r2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007c22:	0212      	lsls	r2, r2, #8
 8007c24:	4311      	orrs	r1, r2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007c2a:	0852      	lsrs	r2, r2, #1
 8007c2c:	3a01      	subs	r2, #1
 8007c2e:	0552      	lsls	r2, r2, #21
 8007c30:	4311      	orrs	r1, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007c36:	0852      	lsrs	r2, r2, #1
 8007c38:	3a01      	subs	r2, #1
 8007c3a:	0652      	lsls	r2, r2, #25
 8007c3c:	4311      	orrs	r1, r2
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007c42:	06d2      	lsls	r2, r2, #27
 8007c44:	430a      	orrs	r2, r1
 8007c46:	4943      	ldr	r1, [pc, #268]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c4c:	4b41      	ldr	r3, [pc, #260]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a40      	ldr	r2, [pc, #256]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007c52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c56:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c58:	4b3e      	ldr	r3, [pc, #248]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	4a3d      	ldr	r2, [pc, #244]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007c5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c64:	f7fb fa22 	bl	80030ac <HAL_GetTick>
 8007c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c6a:	e008      	b.n	8007c7e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c6c:	f7fb fa1e 	bl	80030ac <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d901      	bls.n	8007c7e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e066      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c7e:	4b35      	ldr	r3, [pc, #212]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0f0      	beq.n	8007c6c <HAL_RCC_OscConfig+0x530>
 8007c8a:	e05e      	b.n	8007d4a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c8c:	4b31      	ldr	r3, [pc, #196]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a30      	ldr	r2, [pc, #192]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007c92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c98:	f7fb fa08 	bl	80030ac <HAL_GetTick>
 8007c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c9e:	e008      	b.n	8007cb2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ca0:	f7fb fa04 	bl	80030ac <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d901      	bls.n	8007cb2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e04c      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cb2:	4b28      	ldr	r3, [pc, #160]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1f0      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007cbe:	4b25      	ldr	r3, [pc, #148]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	4924      	ldr	r1, [pc, #144]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007cc4:	4b25      	ldr	r3, [pc, #148]	@ (8007d5c <HAL_RCC_OscConfig+0x620>)
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	60cb      	str	r3, [r1, #12]
 8007cca:	e03e      	b.n	8007d4a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d101      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e039      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8007d54 <HAL_RCC_OscConfig+0x618>)
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f003 0203 	and.w	r2, r3, #3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d12c      	bne.n	8007d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d123      	bne.n	8007d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d11b      	bne.n	8007d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d113      	bne.n	8007d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d28:	085b      	lsrs	r3, r3, #1
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d109      	bne.n	8007d46 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d3c:	085b      	lsrs	r3, r3, #1
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d001      	beq.n	8007d4a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e000      	b.n	8007d4c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3720      	adds	r7, #32
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	40021000 	.word	0x40021000
 8007d58:	019f800c 	.word	0x019f800c
 8007d5c:	feeefffc 	.word	0xfeeefffc

08007d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e11e      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d78:	4b91      	ldr	r3, [pc, #580]	@ (8007fc0 <HAL_RCC_ClockConfig+0x260>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 030f 	and.w	r3, r3, #15
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d910      	bls.n	8007da8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d86:	4b8e      	ldr	r3, [pc, #568]	@ (8007fc0 <HAL_RCC_ClockConfig+0x260>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f023 020f 	bic.w	r2, r3, #15
 8007d8e:	498c      	ldr	r1, [pc, #560]	@ (8007fc0 <HAL_RCC_ClockConfig+0x260>)
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d96:	4b8a      	ldr	r3, [pc, #552]	@ (8007fc0 <HAL_RCC_ClockConfig+0x260>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d001      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e106      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d073      	beq.n	8007e9c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d129      	bne.n	8007e10 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dbc:	4b81      	ldr	r3, [pc, #516]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e0f4      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007dcc:	f000 f9d0 	bl	8008170 <RCC_GetSysClockFreqFromPLLSource>
 8007dd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	4a7c      	ldr	r2, [pc, #496]	@ (8007fc8 <HAL_RCC_ClockConfig+0x268>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d93f      	bls.n	8007e5a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007dda:	4b7a      	ldr	r3, [pc, #488]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d009      	beq.n	8007dfa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d033      	beq.n	8007e5a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d12f      	bne.n	8007e5a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007dfa:	4b72      	ldr	r3, [pc, #456]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e02:	4a70      	ldr	r2, [pc, #448]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007e0a:	2380      	movs	r3, #128	@ 0x80
 8007e0c:	617b      	str	r3, [r7, #20]
 8007e0e:	e024      	b.n	8007e5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d107      	bne.n	8007e28 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e18:	4b6a      	ldr	r3, [pc, #424]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d109      	bne.n	8007e38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e0c6      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e28:	4b66      	ldr	r3, [pc, #408]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e0be      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007e38:	f000 f8ce 	bl	8007fd8 <HAL_RCC_GetSysClockFreq>
 8007e3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	4a61      	ldr	r2, [pc, #388]	@ (8007fc8 <HAL_RCC_ClockConfig+0x268>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d909      	bls.n	8007e5a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007e46:	4b5f      	ldr	r3, [pc, #380]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e4e:	4a5d      	ldr	r2, [pc, #372]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e54:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007e56:	2380      	movs	r3, #128	@ 0x80
 8007e58:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e5a:	4b5a      	ldr	r3, [pc, #360]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f023 0203 	bic.w	r2, r3, #3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	4957      	ldr	r1, [pc, #348]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e6c:	f7fb f91e 	bl	80030ac <HAL_GetTick>
 8007e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e72:	e00a      	b.n	8007e8a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e74:	f7fb f91a 	bl	80030ac <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e095      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e8a:	4b4e      	ldr	r3, [pc, #312]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f003 020c 	and.w	r2, r3, #12
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d1eb      	bne.n	8007e74 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d023      	beq.n	8007ef0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007eb4:	4b43      	ldr	r3, [pc, #268]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	4a42      	ldr	r2, [pc, #264]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007eba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007ebe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ed4:	4a3b      	ldr	r2, [pc, #236]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007ed6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007eda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007edc:	4b39      	ldr	r3, [pc, #228]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	4936      	ldr	r1, [pc, #216]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	608b      	str	r3, [r1, #8]
 8007eee:	e008      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	2b80      	cmp	r3, #128	@ 0x80
 8007ef4:	d105      	bne.n	8007f02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007ef6:	4b33      	ldr	r3, [pc, #204]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	4a32      	ldr	r2, [pc, #200]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007efc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f02:	4b2f      	ldr	r3, [pc, #188]	@ (8007fc0 <HAL_RCC_ClockConfig+0x260>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d21d      	bcs.n	8007f4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f10:	4b2b      	ldr	r3, [pc, #172]	@ (8007fc0 <HAL_RCC_ClockConfig+0x260>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f023 020f 	bic.w	r2, r3, #15
 8007f18:	4929      	ldr	r1, [pc, #164]	@ (8007fc0 <HAL_RCC_ClockConfig+0x260>)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007f20:	f7fb f8c4 	bl	80030ac <HAL_GetTick>
 8007f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f26:	e00a      	b.n	8007f3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f28:	f7fb f8c0 	bl	80030ac <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e03b      	b.n	8007fb6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f3e:	4b20      	ldr	r3, [pc, #128]	@ (8007fc0 <HAL_RCC_ClockConfig+0x260>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d1ed      	bne.n	8007f28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d008      	beq.n	8007f6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f58:	4b1a      	ldr	r3, [pc, #104]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	4917      	ldr	r1, [pc, #92]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0308 	and.w	r3, r3, #8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d009      	beq.n	8007f8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f76:	4b13      	ldr	r3, [pc, #76]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	490f      	ldr	r1, [pc, #60]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007f8a:	f000 f825 	bl	8007fd8 <HAL_RCC_GetSysClockFreq>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc4 <HAL_RCC_ClockConfig+0x264>)
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	091b      	lsrs	r3, r3, #4
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	490c      	ldr	r1, [pc, #48]	@ (8007fcc <HAL_RCC_ClockConfig+0x26c>)
 8007f9c:	5ccb      	ldrb	r3, [r1, r3]
 8007f9e:	f003 031f 	and.w	r3, r3, #31
 8007fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8007fd0 <HAL_RCC_ClockConfig+0x270>)
 8007fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007faa:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd4 <HAL_RCC_ClockConfig+0x274>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7f9 fd56 	bl	8001a60 <HAL_InitTick>
 8007fb4:	4603      	mov	r3, r0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	40022000 	.word	0x40022000
 8007fc4:	40021000 	.word	0x40021000
 8007fc8:	04c4b400 	.word	0x04c4b400
 8007fcc:	0800cb64 	.word	0x0800cb64
 8007fd0:	20000000 	.word	0x20000000
 8007fd4:	20000184 	.word	0x20000184

08007fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007fde:	4b2c      	ldr	r3, [pc, #176]	@ (8008090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f003 030c 	and.w	r3, r3, #12
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d102      	bne.n	8007ff0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007fea:	4b2a      	ldr	r3, [pc, #168]	@ (8008094 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007fec:	613b      	str	r3, [r7, #16]
 8007fee:	e047      	b.n	8008080 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007ff0:	4b27      	ldr	r3, [pc, #156]	@ (8008090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f003 030c 	and.w	r3, r3, #12
 8007ff8:	2b08      	cmp	r3, #8
 8007ffa:	d102      	bne.n	8008002 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007ffc:	4b26      	ldr	r3, [pc, #152]	@ (8008098 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007ffe:	613b      	str	r3, [r7, #16]
 8008000:	e03e      	b.n	8008080 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008002:	4b23      	ldr	r3, [pc, #140]	@ (8008090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 030c 	and.w	r3, r3, #12
 800800a:	2b0c      	cmp	r3, #12
 800800c:	d136      	bne.n	800807c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800800e:	4b20      	ldr	r3, [pc, #128]	@ (8008090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008018:	4b1d      	ldr	r3, [pc, #116]	@ (8008090 <HAL_RCC_GetSysClockFreq+0xb8>)
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	091b      	lsrs	r3, r3, #4
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	3301      	adds	r3, #1
 8008024:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b03      	cmp	r3, #3
 800802a:	d10c      	bne.n	8008046 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800802c:	4a1a      	ldr	r2, [pc, #104]	@ (8008098 <HAL_RCC_GetSysClockFreq+0xc0>)
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	fbb2 f3f3 	udiv	r3, r2, r3
 8008034:	4a16      	ldr	r2, [pc, #88]	@ (8008090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008036:	68d2      	ldr	r2, [r2, #12]
 8008038:	0a12      	lsrs	r2, r2, #8
 800803a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800803e:	fb02 f303 	mul.w	r3, r2, r3
 8008042:	617b      	str	r3, [r7, #20]
      break;
 8008044:	e00c      	b.n	8008060 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008046:	4a13      	ldr	r2, [pc, #76]	@ (8008094 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	fbb2 f3f3 	udiv	r3, r2, r3
 800804e:	4a10      	ldr	r2, [pc, #64]	@ (8008090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008050:	68d2      	ldr	r2, [r2, #12]
 8008052:	0a12      	lsrs	r2, r2, #8
 8008054:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008058:	fb02 f303 	mul.w	r3, r2, r3
 800805c:	617b      	str	r3, [r7, #20]
      break;
 800805e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008060:	4b0b      	ldr	r3, [pc, #44]	@ (8008090 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	0e5b      	lsrs	r3, r3, #25
 8008066:	f003 0303 	and.w	r3, r3, #3
 800806a:	3301      	adds	r3, #1
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	fbb2 f3f3 	udiv	r3, r2, r3
 8008078:	613b      	str	r3, [r7, #16]
 800807a:	e001      	b.n	8008080 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008080:	693b      	ldr	r3, [r7, #16]
}
 8008082:	4618      	mov	r0, r3
 8008084:	371c      	adds	r7, #28
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40021000 	.word	0x40021000
 8008094:	00f42400 	.word	0x00f42400
 8008098:	016e3600 	.word	0x016e3600

0800809c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800809c:	b480      	push	{r7}
 800809e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080a0:	4b03      	ldr	r3, [pc, #12]	@ (80080b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80080a2:	681b      	ldr	r3, [r3, #0]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	20000000 	.word	0x20000000

080080b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80080b8:	f7ff fff0 	bl	800809c <HAL_RCC_GetHCLKFreq>
 80080bc:	4602      	mov	r2, r0
 80080be:	4b06      	ldr	r3, [pc, #24]	@ (80080d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	0a1b      	lsrs	r3, r3, #8
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	4904      	ldr	r1, [pc, #16]	@ (80080dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80080ca:	5ccb      	ldrb	r3, [r1, r3]
 80080cc:	f003 031f 	and.w	r3, r3, #31
 80080d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	40021000 	.word	0x40021000
 80080dc:	0800cb74 	.word	0x0800cb74

080080e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80080e4:	f7ff ffda 	bl	800809c <HAL_RCC_GetHCLKFreq>
 80080e8:	4602      	mov	r2, r0
 80080ea:	4b06      	ldr	r3, [pc, #24]	@ (8008104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	0adb      	lsrs	r3, r3, #11
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	4904      	ldr	r1, [pc, #16]	@ (8008108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80080f6:	5ccb      	ldrb	r3, [r1, r3]
 80080f8:	f003 031f 	and.w	r3, r3, #31
 80080fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008100:	4618      	mov	r0, r3
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40021000 	.word	0x40021000
 8008108:	0800cb74 	.word	0x0800cb74

0800810c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	220f      	movs	r2, #15
 800811a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800811c:	4b12      	ldr	r3, [pc, #72]	@ (8008168 <HAL_RCC_GetClockConfig+0x5c>)
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f003 0203 	and.w	r2, r3, #3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008128:	4b0f      	ldr	r3, [pc, #60]	@ (8008168 <HAL_RCC_GetClockConfig+0x5c>)
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008134:	4b0c      	ldr	r3, [pc, #48]	@ (8008168 <HAL_RCC_GetClockConfig+0x5c>)
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008140:	4b09      	ldr	r3, [pc, #36]	@ (8008168 <HAL_RCC_GetClockConfig+0x5c>)
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	08db      	lsrs	r3, r3, #3
 8008146:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800814e:	4b07      	ldr	r3, [pc, #28]	@ (800816c <HAL_RCC_GetClockConfig+0x60>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 020f 	and.w	r2, r3, #15
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	601a      	str	r2, [r3, #0]
}
 800815a:	bf00      	nop
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	40021000 	.word	0x40021000
 800816c:	40022000 	.word	0x40022000

08008170 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008176:	4b1e      	ldr	r3, [pc, #120]	@ (80081f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f003 0303 	and.w	r3, r3, #3
 800817e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008180:	4b1b      	ldr	r3, [pc, #108]	@ (80081f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	091b      	lsrs	r3, r3, #4
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	3301      	adds	r3, #1
 800818c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	2b03      	cmp	r3, #3
 8008192:	d10c      	bne.n	80081ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008194:	4a17      	ldr	r2, [pc, #92]	@ (80081f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	fbb2 f3f3 	udiv	r3, r2, r3
 800819c:	4a14      	ldr	r2, [pc, #80]	@ (80081f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800819e:	68d2      	ldr	r2, [r2, #12]
 80081a0:	0a12      	lsrs	r2, r2, #8
 80081a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80081a6:	fb02 f303 	mul.w	r3, r2, r3
 80081aa:	617b      	str	r3, [r7, #20]
    break;
 80081ac:	e00c      	b.n	80081c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80081ae:	4a12      	ldr	r2, [pc, #72]	@ (80081f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b6:	4a0e      	ldr	r2, [pc, #56]	@ (80081f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80081b8:	68d2      	ldr	r2, [r2, #12]
 80081ba:	0a12      	lsrs	r2, r2, #8
 80081bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80081c0:	fb02 f303 	mul.w	r3, r2, r3
 80081c4:	617b      	str	r3, [r7, #20]
    break;
 80081c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80081c8:	4b09      	ldr	r3, [pc, #36]	@ (80081f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	0e5b      	lsrs	r3, r3, #25
 80081ce:	f003 0303 	and.w	r3, r3, #3
 80081d2:	3301      	adds	r3, #1
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80081e2:	687b      	ldr	r3, [r7, #4]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	40021000 	.word	0x40021000
 80081f4:	016e3600 	.word	0x016e3600
 80081f8:	00f42400 	.word	0x00f42400

080081fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008204:	2300      	movs	r3, #0
 8008206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008208:	2300      	movs	r3, #0
 800820a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8098 	beq.w	800834a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800821a:	2300      	movs	r3, #0
 800821c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800821e:	4b43      	ldr	r3, [pc, #268]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10d      	bne.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800822a:	4b40      	ldr	r3, [pc, #256]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800822c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800822e:	4a3f      	ldr	r2, [pc, #252]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008234:	6593      	str	r3, [r2, #88]	@ 0x58
 8008236:	4b3d      	ldr	r3, [pc, #244]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800823a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800823e:	60bb      	str	r3, [r7, #8]
 8008240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008242:	2301      	movs	r3, #1
 8008244:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008246:	4b3a      	ldr	r3, [pc, #232]	@ (8008330 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a39      	ldr	r2, [pc, #228]	@ (8008330 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800824c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008250:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008252:	f7fa ff2b 	bl	80030ac <HAL_GetTick>
 8008256:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008258:	e009      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800825a:	f7fa ff27 	bl	80030ac <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d902      	bls.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	74fb      	strb	r3, [r7, #19]
        break;
 800826c:	e005      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800826e:	4b30      	ldr	r3, [pc, #192]	@ (8008330 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0ef      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800827a:	7cfb      	ldrb	r3, [r7, #19]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d159      	bne.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008280:	4b2a      	ldr	r3, [pc, #168]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800828a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d01e      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	429a      	cmp	r2, r3
 800829a:	d019      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800829c:	4b23      	ldr	r3, [pc, #140]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800829e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082a8:	4b20      	ldr	r3, [pc, #128]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ae:	4a1f      	ldr	r2, [pc, #124]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082b8:	4b1c      	ldr	r3, [pc, #112]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082be:	4a1b      	ldr	r2, [pc, #108]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80082c8:	4a18      	ldr	r2, [pc, #96]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d016      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082da:	f7fa fee7 	bl	80030ac <HAL_GetTick>
 80082de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082e0:	e00b      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082e2:	f7fa fee3 	bl	80030ac <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d902      	bls.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	74fb      	strb	r3, [r7, #19]
            break;
 80082f8:	e006      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082fa:	4b0c      	ldr	r3, [pc, #48]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d0ec      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008308:	7cfb      	ldrb	r3, [r7, #19]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10b      	bne.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800830e:	4b07      	ldr	r3, [pc, #28]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008314:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800831c:	4903      	ldr	r1, [pc, #12]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800831e:	4313      	orrs	r3, r2
 8008320:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008324:	e008      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008326:	7cfb      	ldrb	r3, [r7, #19]
 8008328:	74bb      	strb	r3, [r7, #18]
 800832a:	e005      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800832c:	40021000 	.word	0x40021000
 8008330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008334:	7cfb      	ldrb	r3, [r7, #19]
 8008336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008338:	7c7b      	ldrb	r3, [r7, #17]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d105      	bne.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800833e:	4ba7      	ldr	r3, [pc, #668]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008342:	4aa6      	ldr	r2, [pc, #664]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008348:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00a      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008356:	4ba1      	ldr	r3, [pc, #644]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800835c:	f023 0203 	bic.w	r2, r3, #3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	499d      	ldr	r1, [pc, #628]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00a      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008378:	4b98      	ldr	r3, [pc, #608]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800837a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800837e:	f023 020c 	bic.w	r2, r3, #12
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	4995      	ldr	r1, [pc, #596]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008388:	4313      	orrs	r3, r2
 800838a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0304 	and.w	r3, r3, #4
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800839a:	4b90      	ldr	r3, [pc, #576]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800839c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	498c      	ldr	r1, [pc, #560]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0308 	and.w	r3, r3, #8
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083bc:	4b87      	ldr	r3, [pc, #540]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	4984      	ldr	r1, [pc, #528]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80083de:	4b7f      	ldr	r3, [pc, #508]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	497b      	ldr	r1, [pc, #492]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0320 	and.w	r3, r3, #32
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008400:	4b76      	ldr	r3, [pc, #472]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008406:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	4973      	ldr	r1, [pc, #460]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008410:	4313      	orrs	r3, r2
 8008412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008422:	4b6e      	ldr	r3, [pc, #440]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008428:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	496a      	ldr	r1, [pc, #424]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008432:	4313      	orrs	r3, r2
 8008434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008444:	4b65      	ldr	r3, [pc, #404]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800844a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	4962      	ldr	r1, [pc, #392]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008454:	4313      	orrs	r3, r2
 8008456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008466:	4b5d      	ldr	r3, [pc, #372]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800846c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008474:	4959      	ldr	r1, [pc, #356]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008476:	4313      	orrs	r3, r2
 8008478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00a      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008488:	4b54      	ldr	r3, [pc, #336]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800848a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800848e:	f023 0203 	bic.w	r2, r3, #3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008496:	4951      	ldr	r1, [pc, #324]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008498:	4313      	orrs	r3, r2
 800849a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084aa:	4b4c      	ldr	r3, [pc, #304]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b8:	4948      	ldr	r1, [pc, #288]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d015      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084cc:	4b43      	ldr	r3, [pc, #268]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084da:	4940      	ldr	r1, [pc, #256]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084ea:	d105      	bne.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084ec:	4b3b      	ldr	r3, [pc, #236]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	4a3a      	ldr	r2, [pc, #232]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008500:	2b00      	cmp	r3, #0
 8008502:	d015      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008504:	4b35      	ldr	r3, [pc, #212]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800850a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008512:	4932      	ldr	r1, [pc, #200]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008514:	4313      	orrs	r3, r2
 8008516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800851e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008522:	d105      	bne.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008524:	4b2d      	ldr	r3, [pc, #180]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	4a2c      	ldr	r2, [pc, #176]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800852a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800852e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d015      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800853c:	4b27      	ldr	r3, [pc, #156]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800853e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008542:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854a:	4924      	ldr	r1, [pc, #144]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800854c:	4313      	orrs	r3, r2
 800854e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008556:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800855a:	d105      	bne.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800855c:	4b1f      	ldr	r3, [pc, #124]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	4a1e      	ldr	r2, [pc, #120]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008566:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d015      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008574:	4b19      	ldr	r3, [pc, #100]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800857a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008582:	4916      	ldr	r1, [pc, #88]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008584:	4313      	orrs	r3, r2
 8008586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800858e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008592:	d105      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008594:	4b11      	ldr	r3, [pc, #68]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	4a10      	ldr	r2, [pc, #64]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800859a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800859e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d019      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085ac:	4b0b      	ldr	r3, [pc, #44]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ba:	4908      	ldr	r1, [pc, #32]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085ca:	d109      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085cc:	4b03      	ldr	r3, [pc, #12]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	4a02      	ldr	r2, [pc, #8]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80085d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085d6:	60d3      	str	r3, [r2, #12]
 80085d8:	e002      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80085da:	bf00      	nop
 80085dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d015      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80085ec:	4b29      	ldr	r3, [pc, #164]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fa:	4926      	ldr	r1, [pc, #152]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800860a:	d105      	bne.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800860c:	4b21      	ldr	r3, [pc, #132]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	4a20      	ldr	r2, [pc, #128]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008616:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d015      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008624:	4b1b      	ldr	r3, [pc, #108]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800862a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008632:	4918      	ldr	r1, [pc, #96]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008634:	4313      	orrs	r3, r2
 8008636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800863e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008642:	d105      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008644:	4b13      	ldr	r3, [pc, #76]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	4a12      	ldr	r2, [pc, #72]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800864a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800864e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d015      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800865c:	4b0d      	ldr	r3, [pc, #52]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800865e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008662:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800866a:	490a      	ldr	r1, [pc, #40]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800866c:	4313      	orrs	r3, r2
 800866e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008676:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800867a:	d105      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800867c:	4b05      	ldr	r3, [pc, #20]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	4a04      	ldr	r2, [pc, #16]	@ (8008694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008682:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008686:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008688:	7cbb      	ldrb	r3, [r7, #18]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	40021000 	.word	0x40021000

08008698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e09d      	b.n	80087e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d108      	bne.n	80086c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80086ba:	d009      	beq.n	80086d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	61da      	str	r2, [r3, #28]
 80086c2:	e005      	b.n	80086d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7f9 f916 	bl	800191c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008706:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008710:	d902      	bls.n	8008718 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	e002      	b.n	800871e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800871c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008726:	d007      	beq.n	8008738 <HAL_SPI_Init+0xa0>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008730:	d002      	beq.n	8008738 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008748:	431a      	orrs	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	431a      	orrs	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	f003 0301 	and.w	r3, r3, #1
 800875c:	431a      	orrs	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008766:	431a      	orrs	r2, r3
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008770:	431a      	orrs	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800877a:	ea42 0103 	orr.w	r1, r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008782:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	0c1b      	lsrs	r3, r3, #16
 8008794:	f003 0204 	and.w	r2, r3, #4
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800879c:	f003 0310 	and.w	r3, r3, #16
 80087a0:	431a      	orrs	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a6:	f003 0308 	and.w	r3, r3, #8
 80087aa:	431a      	orrs	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80087b4:	ea42 0103 	orr.w	r1, r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69da      	ldr	r2, [r3, #28]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80087d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10e      	bne.n	8008830 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008818:	2b00      	cmp	r3, #0
 800881a:	d009      	beq.n	8008830 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008822:	2b00      	cmp	r3, #0
 8008824:	d004      	beq.n	8008830 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	4798      	blx	r3
    return;
 800882e:	e0ce      	b.n	80089ce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d009      	beq.n	800884e <HAL_SPI_IRQHandler+0x5e>
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008840:	2b00      	cmp	r3, #0
 8008842:	d004      	beq.n	800884e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	4798      	blx	r3
    return;
 800884c:	e0bf      	b.n	80089ce <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	f003 0320 	and.w	r3, r3, #32
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10a      	bne.n	800886e <HAL_SPI_IRQHandler+0x7e>
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800885e:	2b00      	cmp	r3, #0
 8008860:	d105      	bne.n	800886e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 80b0 	beq.w	80089ce <HAL_SPI_IRQHandler+0x1de>
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	f003 0320 	and.w	r3, r3, #32
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 80aa 	beq.w	80089ce <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008880:	2b00      	cmp	r3, #0
 8008882:	d023      	beq.n	80088cc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b03      	cmp	r3, #3
 800888e:	d011      	beq.n	80088b4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008894:	f043 0204 	orr.w	r2, r3, #4
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800889c:	2300      	movs	r3, #0
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	617b      	str	r3, [r7, #20]
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	e00b      	b.n	80088cc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088b4:	2300      	movs	r3, #0
 80088b6:	613b      	str	r3, [r7, #16]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	613b      	str	r3, [r7, #16]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	613b      	str	r3, [r7, #16]
 80088c8:	693b      	ldr	r3, [r7, #16]
        return;
 80088ca:	e080      	b.n	80089ce <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d014      	beq.n	8008900 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088da:	f043 0201 	orr.w	r2, r3, #1
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80088e2:	2300      	movs	r3, #0
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00c      	beq.n	8008924 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800890e:	f043 0208 	orr.w	r2, r3, #8
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008916:	2300      	movs	r3, #0
 8008918:	60bb      	str	r3, [r7, #8]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	60bb      	str	r3, [r7, #8]
 8008922:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008928:	2b00      	cmp	r3, #0
 800892a:	d04f      	beq.n	80089cc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800893a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d104      	bne.n	8008958 <HAL_SPI_IRQHandler+0x168>
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	d034      	beq.n	80089c2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0203 	bic.w	r2, r2, #3
 8008966:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896c:	2b00      	cmp	r3, #0
 800896e:	d011      	beq.n	8008994 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008974:	4a17      	ldr	r2, [pc, #92]	@ (80089d4 <HAL_SPI_IRQHandler+0x1e4>)
 8008976:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800897c:	4618      	mov	r0, r3
 800897e:	f7fc fcd2 	bl	8005326 <HAL_DMA_Abort_IT>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d005      	beq.n	8008994 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800898c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008998:	2b00      	cmp	r3, #0
 800899a:	d016      	beq.n	80089ca <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a0:	4a0c      	ldr	r2, [pc, #48]	@ (80089d4 <HAL_SPI_IRQHandler+0x1e4>)
 80089a2:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fc fcbc 	bl	8005326 <HAL_DMA_Abort_IT>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00a      	beq.n	80089ca <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80089c0:	e003      	b.n	80089ca <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f808 	bl	80089d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80089c8:	e000      	b.n	80089cc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80089ca:	bf00      	nop
    return;
 80089cc:	bf00      	nop
  }
}
 80089ce:	3720      	adds	r7, #32
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	080089ed 	.word	0x080089ed

080089d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff ffe5 	bl	80089d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a0e:	bf00      	nop
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e049      	b.n	8008abc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d106      	bne.n	8008a42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f841 	bl	8008ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2202      	movs	r2, #2
 8008a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3304      	adds	r3, #4
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f000 fcad 	bl	80093b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d001      	beq.n	8008af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e054      	b.n	8008b9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2202      	movs	r2, #2
 8008af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f042 0201 	orr.w	r2, r2, #1
 8008b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a26      	ldr	r2, [pc, #152]	@ (8008ba8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d022      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b1a:	d01d      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a22      	ldr	r2, [pc, #136]	@ (8008bac <HAL_TIM_Base_Start_IT+0xd4>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d018      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a21      	ldr	r2, [pc, #132]	@ (8008bb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d013      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a1f      	ldr	r2, [pc, #124]	@ (8008bb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d00e      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8008bb8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d009      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a1c      	ldr	r2, [pc, #112]	@ (8008bbc <HAL_TIM_Base_Start_IT+0xe4>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d004      	beq.n	8008b58 <HAL_TIM_Base_Start_IT+0x80>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a1b      	ldr	r2, [pc, #108]	@ (8008bc0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d115      	bne.n	8008b84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689a      	ldr	r2, [r3, #8]
 8008b5e:	4b19      	ldr	r3, [pc, #100]	@ (8008bc4 <HAL_TIM_Base_Start_IT+0xec>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b06      	cmp	r3, #6
 8008b68:	d015      	beq.n	8008b96 <HAL_TIM_Base_Start_IT+0xbe>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b70:	d011      	beq.n	8008b96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f042 0201 	orr.w	r2, r2, #1
 8008b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b82:	e008      	b.n	8008b96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f042 0201 	orr.w	r2, r2, #1
 8008b92:	601a      	str	r2, [r3, #0]
 8008b94:	e000      	b.n	8008b98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	40012c00 	.word	0x40012c00
 8008bac:	40000400 	.word	0x40000400
 8008bb0:	40000800 	.word	0x40000800
 8008bb4:	40000c00 	.word	0x40000c00
 8008bb8:	40013400 	.word	0x40013400
 8008bbc:	40014000 	.word	0x40014000
 8008bc0:	40015000 	.word	0x40015000
 8008bc4:	00010007 	.word	0x00010007

08008bc8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e049      	b.n	8008c6e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d106      	bne.n	8008bf4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7f9 f8ca 	bl	8001d88 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f000 fbd4 	bl	80093b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d104      	bne.n	8008c96 <HAL_TIM_IC_Start_IT+0x1e>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	e023      	b.n	8008cde <HAL_TIM_IC_Start_IT+0x66>
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b04      	cmp	r3, #4
 8008c9a:	d104      	bne.n	8008ca6 <HAL_TIM_IC_Start_IT+0x2e>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	e01b      	b.n	8008cde <HAL_TIM_IC_Start_IT+0x66>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b08      	cmp	r3, #8
 8008caa:	d104      	bne.n	8008cb6 <HAL_TIM_IC_Start_IT+0x3e>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	e013      	b.n	8008cde <HAL_TIM_IC_Start_IT+0x66>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2b0c      	cmp	r3, #12
 8008cba:	d104      	bne.n	8008cc6 <HAL_TIM_IC_Start_IT+0x4e>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	e00b      	b.n	8008cde <HAL_TIM_IC_Start_IT+0x66>
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	2b10      	cmp	r3, #16
 8008cca:	d104      	bne.n	8008cd6 <HAL_TIM_IC_Start_IT+0x5e>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	e003      	b.n	8008cde <HAL_TIM_IC_Start_IT+0x66>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d104      	bne.n	8008cf0 <HAL_TIM_IC_Start_IT+0x78>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	e013      	b.n	8008d18 <HAL_TIM_IC_Start_IT+0xa0>
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	d104      	bne.n	8008d00 <HAL_TIM_IC_Start_IT+0x88>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	e00b      	b.n	8008d18 <HAL_TIM_IC_Start_IT+0xa0>
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2b08      	cmp	r3, #8
 8008d04:	d104      	bne.n	8008d10 <HAL_TIM_IC_Start_IT+0x98>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	e003      	b.n	8008d18 <HAL_TIM_IC_Start_IT+0xa0>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d102      	bne.n	8008d26 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d20:	7b7b      	ldrb	r3, [r7, #13]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d001      	beq.n	8008d2a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e0e2      	b.n	8008ef0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d104      	bne.n	8008d3a <HAL_TIM_IC_Start_IT+0xc2>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d38:	e023      	b.n	8008d82 <HAL_TIM_IC_Start_IT+0x10a>
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d104      	bne.n	8008d4a <HAL_TIM_IC_Start_IT+0xd2>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2202      	movs	r2, #2
 8008d44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d48:	e01b      	b.n	8008d82 <HAL_TIM_IC_Start_IT+0x10a>
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d104      	bne.n	8008d5a <HAL_TIM_IC_Start_IT+0xe2>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2202      	movs	r2, #2
 8008d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d58:	e013      	b.n	8008d82 <HAL_TIM_IC_Start_IT+0x10a>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	2b0c      	cmp	r3, #12
 8008d5e:	d104      	bne.n	8008d6a <HAL_TIM_IC_Start_IT+0xf2>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d68:	e00b      	b.n	8008d82 <HAL_TIM_IC_Start_IT+0x10a>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b10      	cmp	r3, #16
 8008d6e:	d104      	bne.n	8008d7a <HAL_TIM_IC_Start_IT+0x102>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d78:	e003      	b.n	8008d82 <HAL_TIM_IC_Start_IT+0x10a>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d104      	bne.n	8008d92 <HAL_TIM_IC_Start_IT+0x11a>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d90:	e013      	b.n	8008dba <HAL_TIM_IC_Start_IT+0x142>
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d104      	bne.n	8008da2 <HAL_TIM_IC_Start_IT+0x12a>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008da0:	e00b      	b.n	8008dba <HAL_TIM_IC_Start_IT+0x142>
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b08      	cmp	r3, #8
 8008da6:	d104      	bne.n	8008db2 <HAL_TIM_IC_Start_IT+0x13a>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008db0:	e003      	b.n	8008dba <HAL_TIM_IC_Start_IT+0x142>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2202      	movs	r2, #2
 8008db6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b0c      	cmp	r3, #12
 8008dbe:	d841      	bhi.n	8008e44 <HAL_TIM_IC_Start_IT+0x1cc>
 8008dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc8 <HAL_TIM_IC_Start_IT+0x150>)
 8008dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc6:	bf00      	nop
 8008dc8:	08008dfd 	.word	0x08008dfd
 8008dcc:	08008e45 	.word	0x08008e45
 8008dd0:	08008e45 	.word	0x08008e45
 8008dd4:	08008e45 	.word	0x08008e45
 8008dd8:	08008e0f 	.word	0x08008e0f
 8008ddc:	08008e45 	.word	0x08008e45
 8008de0:	08008e45 	.word	0x08008e45
 8008de4:	08008e45 	.word	0x08008e45
 8008de8:	08008e21 	.word	0x08008e21
 8008dec:	08008e45 	.word	0x08008e45
 8008df0:	08008e45 	.word	0x08008e45
 8008df4:	08008e45 	.word	0x08008e45
 8008df8:	08008e33 	.word	0x08008e33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0202 	orr.w	r2, r2, #2
 8008e0a:	60da      	str	r2, [r3, #12]
      break;
 8008e0c:	e01d      	b.n	8008e4a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f042 0204 	orr.w	r2, r2, #4
 8008e1c:	60da      	str	r2, [r3, #12]
      break;
 8008e1e:	e014      	b.n	8008e4a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0208 	orr.w	r2, r2, #8
 8008e2e:	60da      	str	r2, [r3, #12]
      break;
 8008e30:	e00b      	b.n	8008e4a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68da      	ldr	r2, [r3, #12]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f042 0210 	orr.w	r2, r2, #16
 8008e40:	60da      	str	r2, [r3, #12]
      break;
 8008e42:	e002      	b.n	8008e4a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	73fb      	strb	r3, [r7, #15]
      break;
 8008e48:	bf00      	nop
  }

  if (status == HAL_OK)
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d14e      	bne.n	8008eee <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2201      	movs	r2, #1
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 fc89 	bl	8009770 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a25      	ldr	r2, [pc, #148]	@ (8008ef8 <HAL_TIM_IC_Start_IT+0x280>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d022      	beq.n	8008eae <HAL_TIM_IC_Start_IT+0x236>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e70:	d01d      	beq.n	8008eae <HAL_TIM_IC_Start_IT+0x236>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a21      	ldr	r2, [pc, #132]	@ (8008efc <HAL_TIM_IC_Start_IT+0x284>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d018      	beq.n	8008eae <HAL_TIM_IC_Start_IT+0x236>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a1f      	ldr	r2, [pc, #124]	@ (8008f00 <HAL_TIM_IC_Start_IT+0x288>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d013      	beq.n	8008eae <HAL_TIM_IC_Start_IT+0x236>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008f04 <HAL_TIM_IC_Start_IT+0x28c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00e      	beq.n	8008eae <HAL_TIM_IC_Start_IT+0x236>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a1c      	ldr	r2, [pc, #112]	@ (8008f08 <HAL_TIM_IC_Start_IT+0x290>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d009      	beq.n	8008eae <HAL_TIM_IC_Start_IT+0x236>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8008f0c <HAL_TIM_IC_Start_IT+0x294>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d004      	beq.n	8008eae <HAL_TIM_IC_Start_IT+0x236>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a19      	ldr	r2, [pc, #100]	@ (8008f10 <HAL_TIM_IC_Start_IT+0x298>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d115      	bne.n	8008eda <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	689a      	ldr	r2, [r3, #8]
 8008eb4:	4b17      	ldr	r3, [pc, #92]	@ (8008f14 <HAL_TIM_IC_Start_IT+0x29c>)
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2b06      	cmp	r3, #6
 8008ebe:	d015      	beq.n	8008eec <HAL_TIM_IC_Start_IT+0x274>
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ec6:	d011      	beq.n	8008eec <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f042 0201 	orr.w	r2, r2, #1
 8008ed6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed8:	e008      	b.n	8008eec <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f042 0201 	orr.w	r2, r2, #1
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	e000      	b.n	8008eee <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	40012c00 	.word	0x40012c00
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40000c00 	.word	0x40000c00
 8008f08:	40013400 	.word	0x40013400
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40015000 	.word	0x40015000
 8008f14:	00010007 	.word	0x00010007

08008f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	f003 0302 	and.w	r3, r3, #2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d020      	beq.n	8008f7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f003 0302 	and.w	r3, r3, #2
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d01b      	beq.n	8008f7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f06f 0202 	mvn.w	r2, #2
 8008f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	f003 0303 	and.w	r3, r3, #3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7f9 fbb4 	bl	80026d0 <HAL_TIM_IC_CaptureCallback>
 8008f68:	e005      	b.n	8008f76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fa04 	bl	8009378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fa0b 	bl	800938c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	f003 0304 	and.w	r3, r3, #4
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d020      	beq.n	8008fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d01b      	beq.n	8008fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f06f 0204 	mvn.w	r2, #4
 8008f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7f9 fb8e 	bl	80026d0 <HAL_TIM_IC_CaptureCallback>
 8008fb4:	e005      	b.n	8008fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f9de 	bl	8009378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 f9e5 	bl	800938c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f003 0308 	and.w	r3, r3, #8
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d020      	beq.n	8009014 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f003 0308 	and.w	r3, r3, #8
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01b      	beq.n	8009014 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f06f 0208 	mvn.w	r2, #8
 8008fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2204      	movs	r2, #4
 8008fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	f003 0303 	and.w	r3, r3, #3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7f9 fb68 	bl	80026d0 <HAL_TIM_IC_CaptureCallback>
 8009000:	e005      	b.n	800900e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f9b8 	bl	8009378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f9bf 	bl	800938c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f003 0310 	and.w	r3, r3, #16
 800901a:	2b00      	cmp	r3, #0
 800901c:	d020      	beq.n	8009060 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b00      	cmp	r3, #0
 8009026:	d01b      	beq.n	8009060 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f06f 0210 	mvn.w	r2, #16
 8009030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2208      	movs	r2, #8
 8009036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7f9 fb42 	bl	80026d0 <HAL_TIM_IC_CaptureCallback>
 800904c:	e005      	b.n	800905a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f992 	bl	8009378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f999 	bl	800938c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00c      	beq.n	8009084 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	2b00      	cmp	r3, #0
 8009072:	d007      	beq.n	8009084 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f06f 0201 	mvn.w	r2, #1
 800907c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7f8 fbf6 	bl	8001870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800908a:	2b00      	cmp	r3, #0
 800908c:	d104      	bne.n	8009098 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00c      	beq.n	80090b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d007      	beq.n	80090b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80090aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fc25 	bl	80098fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00c      	beq.n	80090d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d007      	beq.n	80090d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80090ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fc1d 	bl	8009910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00c      	beq.n	80090fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d007      	beq.n	80090fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80090f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f953 	bl	80093a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	f003 0320 	and.w	r3, r3, #32
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00c      	beq.n	800911e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f003 0320 	and.w	r3, r3, #32
 800910a:	2b00      	cmp	r3, #0
 800910c:	d007      	beq.n	800911e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f06f 0220 	mvn.w	r2, #32
 8009116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fbe5 	bl	80098e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00c      	beq.n	8009142 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d007      	beq.n	8009142 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800913a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fbf1 	bl	8009924 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00c      	beq.n	8009166 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d007      	beq.n	8009166 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800915e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fbe9 	bl	8009938 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00c      	beq.n	800918a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d007      	beq.n	800918a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fbe1 	bl	800994c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00c      	beq.n	80091ae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d007      	beq.n	80091ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80091a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fbd9 	bl	8009960 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091ae:	bf00      	nop
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b086      	sub	sp, #24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e088      	b.n	80092e6 <HAL_TIM_IC_ConfigChannel+0x130>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d11b      	bne.n	800921a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80091f2:	f000 f993 	bl	800951c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	699a      	ldr	r2, [r3, #24]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f022 020c 	bic.w	r2, r2, #12
 8009204:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	6999      	ldr	r1, [r3, #24]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	689a      	ldr	r2, [r3, #8]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	619a      	str	r2, [r3, #24]
 8009218:	e060      	b.n	80092dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b04      	cmp	r3, #4
 800921e:	d11c      	bne.n	800925a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009230:	f000 f9e8 	bl	8009604 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	699a      	ldr	r2, [r3, #24]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009242:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6999      	ldr	r1, [r3, #24]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	021a      	lsls	r2, r3, #8
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	430a      	orrs	r2, r1
 8009256:	619a      	str	r2, [r3, #24]
 8009258:	e040      	b.n	80092dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b08      	cmp	r3, #8
 800925e:	d11b      	bne.n	8009298 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009270:	f000 fa05 	bl	800967e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	69da      	ldr	r2, [r3, #28]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f022 020c 	bic.w	r2, r2, #12
 8009282:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	69d9      	ldr	r1, [r3, #28]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	689a      	ldr	r2, [r3, #8]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	61da      	str	r2, [r3, #28]
 8009296:	e021      	b.n	80092dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b0c      	cmp	r3, #12
 800929c:	d11c      	bne.n	80092d8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80092ae:	f000 fa22 	bl	80096f6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69da      	ldr	r2, [r3, #28]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80092c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	69d9      	ldr	r1, [r3, #28]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	021a      	lsls	r2, r3, #8
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	61da      	str	r2, [r3, #28]
 80092d6:	e001      	b.n	80092dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80092fa:	2300      	movs	r3, #0
 80092fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b0c      	cmp	r3, #12
 8009302:	d831      	bhi.n	8009368 <HAL_TIM_ReadCapturedValue+0x78>
 8009304:	a201      	add	r2, pc, #4	@ (adr r2, 800930c <HAL_TIM_ReadCapturedValue+0x1c>)
 8009306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930a:	bf00      	nop
 800930c:	08009341 	.word	0x08009341
 8009310:	08009369 	.word	0x08009369
 8009314:	08009369 	.word	0x08009369
 8009318:	08009369 	.word	0x08009369
 800931c:	0800934b 	.word	0x0800934b
 8009320:	08009369 	.word	0x08009369
 8009324:	08009369 	.word	0x08009369
 8009328:	08009369 	.word	0x08009369
 800932c:	08009355 	.word	0x08009355
 8009330:	08009369 	.word	0x08009369
 8009334:	08009369 	.word	0x08009369
 8009338:	08009369 	.word	0x08009369
 800933c:	0800935f 	.word	0x0800935f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009346:	60fb      	str	r3, [r7, #12]

      break;
 8009348:	e00f      	b.n	800936a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009350:	60fb      	str	r3, [r7, #12]

      break;
 8009352:	e00a      	b.n	800936a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800935a:	60fb      	str	r3, [r7, #12]

      break;
 800935c:	e005      	b.n	800936a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009364:	60fb      	str	r3, [r7, #12]

      break;
 8009366:	e000      	b.n	800936a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009368:	bf00      	nop
  }

  return tmpreg;
 800936a:	68fb      	ldr	r3, [r7, #12]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3714      	adds	r7, #20
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a4c      	ldr	r2, [pc, #304]	@ (80094f8 <TIM_Base_SetConfig+0x144>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d017      	beq.n	80093fc <TIM_Base_SetConfig+0x48>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093d2:	d013      	beq.n	80093fc <TIM_Base_SetConfig+0x48>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a49      	ldr	r2, [pc, #292]	@ (80094fc <TIM_Base_SetConfig+0x148>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d00f      	beq.n	80093fc <TIM_Base_SetConfig+0x48>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a48      	ldr	r2, [pc, #288]	@ (8009500 <TIM_Base_SetConfig+0x14c>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d00b      	beq.n	80093fc <TIM_Base_SetConfig+0x48>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a47      	ldr	r2, [pc, #284]	@ (8009504 <TIM_Base_SetConfig+0x150>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d007      	beq.n	80093fc <TIM_Base_SetConfig+0x48>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a46      	ldr	r2, [pc, #280]	@ (8009508 <TIM_Base_SetConfig+0x154>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d003      	beq.n	80093fc <TIM_Base_SetConfig+0x48>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a45      	ldr	r2, [pc, #276]	@ (800950c <TIM_Base_SetConfig+0x158>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d108      	bne.n	800940e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4313      	orrs	r3, r2
 800940c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a39      	ldr	r2, [pc, #228]	@ (80094f8 <TIM_Base_SetConfig+0x144>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d023      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800941c:	d01f      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a36      	ldr	r2, [pc, #216]	@ (80094fc <TIM_Base_SetConfig+0x148>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d01b      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a35      	ldr	r2, [pc, #212]	@ (8009500 <TIM_Base_SetConfig+0x14c>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d017      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a34      	ldr	r2, [pc, #208]	@ (8009504 <TIM_Base_SetConfig+0x150>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d013      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a33      	ldr	r2, [pc, #204]	@ (8009508 <TIM_Base_SetConfig+0x154>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00f      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a33      	ldr	r2, [pc, #204]	@ (8009510 <TIM_Base_SetConfig+0x15c>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00b      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a32      	ldr	r2, [pc, #200]	@ (8009514 <TIM_Base_SetConfig+0x160>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d007      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a31      	ldr	r2, [pc, #196]	@ (8009518 <TIM_Base_SetConfig+0x164>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d003      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a2c      	ldr	r2, [pc, #176]	@ (800950c <TIM_Base_SetConfig+0x158>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d108      	bne.n	8009470 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4313      	orrs	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a18      	ldr	r2, [pc, #96]	@ (80094f8 <TIM_Base_SetConfig+0x144>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d013      	beq.n	80094c4 <TIM_Base_SetConfig+0x110>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a1a      	ldr	r2, [pc, #104]	@ (8009508 <TIM_Base_SetConfig+0x154>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d00f      	beq.n	80094c4 <TIM_Base_SetConfig+0x110>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a1a      	ldr	r2, [pc, #104]	@ (8009510 <TIM_Base_SetConfig+0x15c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00b      	beq.n	80094c4 <TIM_Base_SetConfig+0x110>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a19      	ldr	r2, [pc, #100]	@ (8009514 <TIM_Base_SetConfig+0x160>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d007      	beq.n	80094c4 <TIM_Base_SetConfig+0x110>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a18      	ldr	r2, [pc, #96]	@ (8009518 <TIM_Base_SetConfig+0x164>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d003      	beq.n	80094c4 <TIM_Base_SetConfig+0x110>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a13      	ldr	r2, [pc, #76]	@ (800950c <TIM_Base_SetConfig+0x158>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d103      	bne.n	80094cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	691a      	ldr	r2, [r3, #16]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d105      	bne.n	80094ea <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f023 0201 	bic.w	r2, r3, #1
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	611a      	str	r2, [r3, #16]
  }
}
 80094ea:	bf00      	nop
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	40012c00 	.word	0x40012c00
 80094fc:	40000400 	.word	0x40000400
 8009500:	40000800 	.word	0x40000800
 8009504:	40000c00 	.word	0x40000c00
 8009508:	40013400 	.word	0x40013400
 800950c:	40015000 	.word	0x40015000
 8009510:	40014000 	.word	0x40014000
 8009514:	40014400 	.word	0x40014400
 8009518:	40014800 	.word	0x40014800

0800951c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	f023 0201 	bic.w	r2, r3, #1
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4a28      	ldr	r2, [pc, #160]	@ (80095e8 <TIM_TI1_SetConfig+0xcc>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d01b      	beq.n	8009582 <TIM_TI1_SetConfig+0x66>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009550:	d017      	beq.n	8009582 <TIM_TI1_SetConfig+0x66>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	4a25      	ldr	r2, [pc, #148]	@ (80095ec <TIM_TI1_SetConfig+0xd0>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d013      	beq.n	8009582 <TIM_TI1_SetConfig+0x66>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4a24      	ldr	r2, [pc, #144]	@ (80095f0 <TIM_TI1_SetConfig+0xd4>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d00f      	beq.n	8009582 <TIM_TI1_SetConfig+0x66>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4a23      	ldr	r2, [pc, #140]	@ (80095f4 <TIM_TI1_SetConfig+0xd8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d00b      	beq.n	8009582 <TIM_TI1_SetConfig+0x66>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4a22      	ldr	r2, [pc, #136]	@ (80095f8 <TIM_TI1_SetConfig+0xdc>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d007      	beq.n	8009582 <TIM_TI1_SetConfig+0x66>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	4a21      	ldr	r2, [pc, #132]	@ (80095fc <TIM_TI1_SetConfig+0xe0>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d003      	beq.n	8009582 <TIM_TI1_SetConfig+0x66>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	4a20      	ldr	r2, [pc, #128]	@ (8009600 <TIM_TI1_SetConfig+0xe4>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d101      	bne.n	8009586 <TIM_TI1_SetConfig+0x6a>
 8009582:	2301      	movs	r3, #1
 8009584:	e000      	b.n	8009588 <TIM_TI1_SetConfig+0x6c>
 8009586:	2300      	movs	r3, #0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d008      	beq.n	800959e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f023 0303 	bic.w	r3, r3, #3
 8009592:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4313      	orrs	r3, r2
 800959a:	617b      	str	r3, [r7, #20]
 800959c:	e003      	b.n	80095a6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f043 0301 	orr.w	r3, r3, #1
 80095a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	011b      	lsls	r3, r3, #4
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	f023 030a 	bic.w	r3, r3, #10
 80095c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	f003 030a 	and.w	r3, r3, #10
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	621a      	str	r2, [r3, #32]
}
 80095da:	bf00      	nop
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	40012c00 	.word	0x40012c00
 80095ec:	40000400 	.word	0x40000400
 80095f0:	40000800 	.word	0x40000800
 80095f4:	40000c00 	.word	0x40000c00
 80095f8:	40013400 	.word	0x40013400
 80095fc:	40014000 	.word	0x40014000
 8009600:	40015000 	.word	0x40015000

08009604 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	f023 0210 	bic.w	r2, r3, #16
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	4313      	orrs	r3, r2
 800963a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	031b      	lsls	r3, r3, #12
 8009648:	b29b      	uxth	r3, r3
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	4313      	orrs	r3, r2
 800964e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009656:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	011b      	lsls	r3, r3, #4
 800965c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	4313      	orrs	r3, r2
 8009664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	697a      	ldr	r2, [r7, #20]
 8009670:	621a      	str	r2, [r3, #32]
}
 8009672:	bf00      	nop
 8009674:	371c      	adds	r7, #28
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800967e:	b480      	push	{r7}
 8009680:	b087      	sub	sp, #28
 8009682:	af00      	add	r7, sp, #0
 8009684:	60f8      	str	r0, [r7, #12]
 8009686:	60b9      	str	r1, [r7, #8]
 8009688:	607a      	str	r2, [r7, #4]
 800968a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f023 0303 	bic.w	r3, r3, #3
 80096aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80096ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80096d8:	697a      	ldr	r2, [r7, #20]
 80096da:	4313      	orrs	r3, r2
 80096dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	621a      	str	r2, [r3, #32]
}
 80096ea:	bf00      	nop
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b087      	sub	sp, #28
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	607a      	str	r2, [r7, #4]
 8009702:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6a1b      	ldr	r3, [r3, #32]
 8009708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009722:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	021b      	lsls	r3, r3, #8
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	4313      	orrs	r3, r2
 800972c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009734:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	031b      	lsls	r3, r3, #12
 800973a:	b29b      	uxth	r3, r3
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	4313      	orrs	r3, r2
 8009740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009748:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	031b      	lsls	r3, r3, #12
 800974e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	4313      	orrs	r3, r2
 8009756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	621a      	str	r2, [r3, #32]
}
 8009764:	bf00      	nop
 8009766:	371c      	adds	r7, #28
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009770:	b480      	push	{r7}
 8009772:	b087      	sub	sp, #28
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f003 031f 	and.w	r3, r3, #31
 8009782:	2201      	movs	r2, #1
 8009784:	fa02 f303 	lsl.w	r3, r2, r3
 8009788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a1a      	ldr	r2, [r3, #32]
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	43db      	mvns	r3, r3
 8009792:	401a      	ands	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6a1a      	ldr	r2, [r3, #32]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f003 031f 	and.w	r3, r3, #31
 80097a2:	6879      	ldr	r1, [r7, #4]
 80097a4:	fa01 f303 	lsl.w	r3, r1, r3
 80097a8:	431a      	orrs	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	621a      	str	r2, [r3, #32]
}
 80097ae:	bf00      	nop
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
	...

080097bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d101      	bne.n	80097d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097d0:	2302      	movs	r3, #2
 80097d2:	e074      	b.n	80098be <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2202      	movs	r2, #2
 80097e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a34      	ldr	r2, [pc, #208]	@ (80098cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d009      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a33      	ldr	r2, [pc, #204]	@ (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d004      	beq.n	8009812 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a31      	ldr	r2, [pc, #196]	@ (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d108      	bne.n	8009824 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009818:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	4313      	orrs	r3, r2
 8009822:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800982a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800982e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a21      	ldr	r2, [pc, #132]	@ (80098cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d022      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009854:	d01d      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a1f      	ldr	r2, [pc, #124]	@ (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d018      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a1d      	ldr	r2, [pc, #116]	@ (80098dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d013      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a1c      	ldr	r2, [pc, #112]	@ (80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00e      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a15      	ldr	r2, [pc, #84]	@ (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d009      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a18      	ldr	r2, [pc, #96]	@ (80098e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d004      	beq.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a11      	ldr	r2, [pc, #68]	@ (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d10c      	bne.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	40012c00 	.word	0x40012c00
 80098d0:	40013400 	.word	0x40013400
 80098d4:	40015000 	.word	0x40015000
 80098d8:	40000400 	.word	0x40000400
 80098dc:	40000800 	.word	0x40000800
 80098e0:	40000c00 	.word	0x40000c00
 80098e4:	40014000 	.word	0x40014000

080098e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e042      	b.n	8009a0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800998c:	2b00      	cmp	r3, #0
 800998e:	d106      	bne.n	800999e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7f8 fa89 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2224      	movs	r2, #36	@ 0x24
 80099a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f022 0201 	bic.w	r2, r2, #1
 80099b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fb24 	bl	800a00c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f825 	bl	8009a14 <UART_SetConfig>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d101      	bne.n	80099d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e01b      	b.n	8009a0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80099e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	689a      	ldr	r2, [r3, #8]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80099f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f042 0201 	orr.w	r2, r2, #1
 8009a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fba3 	bl	800a150 <UART_CheckIdleState>
 8009a0a:	4603      	mov	r3, r0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a18:	b08c      	sub	sp, #48	@ 0x30
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	689a      	ldr	r2, [r3, #8]
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	431a      	orrs	r2, r3
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	69db      	ldr	r3, [r3, #28]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	4baa      	ldr	r3, [pc, #680]	@ (8009cec <UART_SetConfig+0x2d8>)
 8009a44:	4013      	ands	r3, r2
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	6812      	ldr	r2, [r2, #0]
 8009a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a4c:	430b      	orrs	r3, r1
 8009a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	68da      	ldr	r2, [r3, #12]
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a9f      	ldr	r2, [pc, #636]	@ (8009cf0 <UART_SetConfig+0x2dc>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d004      	beq.n	8009a80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009a8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	6812      	ldr	r2, [r2, #0]
 8009a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a94:	430b      	orrs	r3, r1
 8009a96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a9e:	f023 010f 	bic.w	r1, r3, #15
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	430a      	orrs	r2, r1
 8009aac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a90      	ldr	r2, [pc, #576]	@ (8009cf4 <UART_SetConfig+0x2e0>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d125      	bne.n	8009b04 <UART_SetConfig+0xf0>
 8009ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8009cf8 <UART_SetConfig+0x2e4>)
 8009aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009abe:	f003 0303 	and.w	r3, r3, #3
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d81a      	bhi.n	8009afc <UART_SetConfig+0xe8>
 8009ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8009acc <UART_SetConfig+0xb8>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009add 	.word	0x08009add
 8009ad0:	08009aed 	.word	0x08009aed
 8009ad4:	08009ae5 	.word	0x08009ae5
 8009ad8:	08009af5 	.word	0x08009af5
 8009adc:	2301      	movs	r3, #1
 8009ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ae2:	e116      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009aea:	e112      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009aec:	2304      	movs	r3, #4
 8009aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009af2:	e10e      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009af4:	2308      	movs	r3, #8
 8009af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009afa:	e10a      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009afc:	2310      	movs	r3, #16
 8009afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b02:	e106      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a7c      	ldr	r2, [pc, #496]	@ (8009cfc <UART_SetConfig+0x2e8>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d138      	bne.n	8009b80 <UART_SetConfig+0x16c>
 8009b0e:	4b7a      	ldr	r3, [pc, #488]	@ (8009cf8 <UART_SetConfig+0x2e4>)
 8009b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b14:	f003 030c 	and.w	r3, r3, #12
 8009b18:	2b0c      	cmp	r3, #12
 8009b1a:	d82d      	bhi.n	8009b78 <UART_SetConfig+0x164>
 8009b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b24 <UART_SetConfig+0x110>)
 8009b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b22:	bf00      	nop
 8009b24:	08009b59 	.word	0x08009b59
 8009b28:	08009b79 	.word	0x08009b79
 8009b2c:	08009b79 	.word	0x08009b79
 8009b30:	08009b79 	.word	0x08009b79
 8009b34:	08009b69 	.word	0x08009b69
 8009b38:	08009b79 	.word	0x08009b79
 8009b3c:	08009b79 	.word	0x08009b79
 8009b40:	08009b79 	.word	0x08009b79
 8009b44:	08009b61 	.word	0x08009b61
 8009b48:	08009b79 	.word	0x08009b79
 8009b4c:	08009b79 	.word	0x08009b79
 8009b50:	08009b79 	.word	0x08009b79
 8009b54:	08009b71 	.word	0x08009b71
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b5e:	e0d8      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009b60:	2302      	movs	r3, #2
 8009b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b66:	e0d4      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009b68:	2304      	movs	r3, #4
 8009b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b6e:	e0d0      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009b70:	2308      	movs	r3, #8
 8009b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b76:	e0cc      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009b78:	2310      	movs	r3, #16
 8009b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b7e:	e0c8      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a5e      	ldr	r2, [pc, #376]	@ (8009d00 <UART_SetConfig+0x2ec>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d125      	bne.n	8009bd6 <UART_SetConfig+0x1c2>
 8009b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8009cf8 <UART_SetConfig+0x2e4>)
 8009b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009b94:	2b30      	cmp	r3, #48	@ 0x30
 8009b96:	d016      	beq.n	8009bc6 <UART_SetConfig+0x1b2>
 8009b98:	2b30      	cmp	r3, #48	@ 0x30
 8009b9a:	d818      	bhi.n	8009bce <UART_SetConfig+0x1ba>
 8009b9c:	2b20      	cmp	r3, #32
 8009b9e:	d00a      	beq.n	8009bb6 <UART_SetConfig+0x1a2>
 8009ba0:	2b20      	cmp	r3, #32
 8009ba2:	d814      	bhi.n	8009bce <UART_SetConfig+0x1ba>
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d002      	beq.n	8009bae <UART_SetConfig+0x19a>
 8009ba8:	2b10      	cmp	r3, #16
 8009baa:	d008      	beq.n	8009bbe <UART_SetConfig+0x1aa>
 8009bac:	e00f      	b.n	8009bce <UART_SetConfig+0x1ba>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bb4:	e0ad      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bbc:	e0a9      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009bbe:	2304      	movs	r3, #4
 8009bc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bc4:	e0a5      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009bc6:	2308      	movs	r3, #8
 8009bc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bcc:	e0a1      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009bce:	2310      	movs	r3, #16
 8009bd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009bd4:	e09d      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a4a      	ldr	r2, [pc, #296]	@ (8009d04 <UART_SetConfig+0x2f0>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d125      	bne.n	8009c2c <UART_SetConfig+0x218>
 8009be0:	4b45      	ldr	r3, [pc, #276]	@ (8009cf8 <UART_SetConfig+0x2e4>)
 8009be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009bea:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bec:	d016      	beq.n	8009c1c <UART_SetConfig+0x208>
 8009bee:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bf0:	d818      	bhi.n	8009c24 <UART_SetConfig+0x210>
 8009bf2:	2b80      	cmp	r3, #128	@ 0x80
 8009bf4:	d00a      	beq.n	8009c0c <UART_SetConfig+0x1f8>
 8009bf6:	2b80      	cmp	r3, #128	@ 0x80
 8009bf8:	d814      	bhi.n	8009c24 <UART_SetConfig+0x210>
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d002      	beq.n	8009c04 <UART_SetConfig+0x1f0>
 8009bfe:	2b40      	cmp	r3, #64	@ 0x40
 8009c00:	d008      	beq.n	8009c14 <UART_SetConfig+0x200>
 8009c02:	e00f      	b.n	8009c24 <UART_SetConfig+0x210>
 8009c04:	2300      	movs	r3, #0
 8009c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c0a:	e082      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c12:	e07e      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009c14:	2304      	movs	r3, #4
 8009c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c1a:	e07a      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009c1c:	2308      	movs	r3, #8
 8009c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c22:	e076      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009c24:	2310      	movs	r3, #16
 8009c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c2a:	e072      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a35      	ldr	r2, [pc, #212]	@ (8009d08 <UART_SetConfig+0x2f4>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d12a      	bne.n	8009c8c <UART_SetConfig+0x278>
 8009c36:	4b30      	ldr	r3, [pc, #192]	@ (8009cf8 <UART_SetConfig+0x2e4>)
 8009c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c44:	d01a      	beq.n	8009c7c <UART_SetConfig+0x268>
 8009c46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c4a:	d81b      	bhi.n	8009c84 <UART_SetConfig+0x270>
 8009c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c50:	d00c      	beq.n	8009c6c <UART_SetConfig+0x258>
 8009c52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c56:	d815      	bhi.n	8009c84 <UART_SetConfig+0x270>
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <UART_SetConfig+0x250>
 8009c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c60:	d008      	beq.n	8009c74 <UART_SetConfig+0x260>
 8009c62:	e00f      	b.n	8009c84 <UART_SetConfig+0x270>
 8009c64:	2300      	movs	r3, #0
 8009c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c6a:	e052      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c72:	e04e      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009c74:	2304      	movs	r3, #4
 8009c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c7a:	e04a      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c82:	e046      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009c84:	2310      	movs	r3, #16
 8009c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c8a:	e042      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a17      	ldr	r2, [pc, #92]	@ (8009cf0 <UART_SetConfig+0x2dc>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d13a      	bne.n	8009d0c <UART_SetConfig+0x2f8>
 8009c96:	4b18      	ldr	r3, [pc, #96]	@ (8009cf8 <UART_SetConfig+0x2e4>)
 8009c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009ca0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ca4:	d01a      	beq.n	8009cdc <UART_SetConfig+0x2c8>
 8009ca6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009caa:	d81b      	bhi.n	8009ce4 <UART_SetConfig+0x2d0>
 8009cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cb0:	d00c      	beq.n	8009ccc <UART_SetConfig+0x2b8>
 8009cb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cb6:	d815      	bhi.n	8009ce4 <UART_SetConfig+0x2d0>
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <UART_SetConfig+0x2b0>
 8009cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cc0:	d008      	beq.n	8009cd4 <UART_SetConfig+0x2c0>
 8009cc2:	e00f      	b.n	8009ce4 <UART_SetConfig+0x2d0>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cca:	e022      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009ccc:	2302      	movs	r3, #2
 8009cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cd2:	e01e      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009cd4:	2304      	movs	r3, #4
 8009cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cda:	e01a      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009cdc:	2308      	movs	r3, #8
 8009cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ce2:	e016      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009ce4:	2310      	movs	r3, #16
 8009ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cea:	e012      	b.n	8009d12 <UART_SetConfig+0x2fe>
 8009cec:	cfff69f3 	.word	0xcfff69f3
 8009cf0:	40008000 	.word	0x40008000
 8009cf4:	40013800 	.word	0x40013800
 8009cf8:	40021000 	.word	0x40021000
 8009cfc:	40004400 	.word	0x40004400
 8009d00:	40004800 	.word	0x40004800
 8009d04:	40004c00 	.word	0x40004c00
 8009d08:	40005000 	.word	0x40005000
 8009d0c:	2310      	movs	r3, #16
 8009d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4aae      	ldr	r2, [pc, #696]	@ (8009fd0 <UART_SetConfig+0x5bc>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	f040 8097 	bne.w	8009e4c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009d22:	2b08      	cmp	r3, #8
 8009d24:	d823      	bhi.n	8009d6e <UART_SetConfig+0x35a>
 8009d26:	a201      	add	r2, pc, #4	@ (adr r2, 8009d2c <UART_SetConfig+0x318>)
 8009d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2c:	08009d51 	.word	0x08009d51
 8009d30:	08009d6f 	.word	0x08009d6f
 8009d34:	08009d59 	.word	0x08009d59
 8009d38:	08009d6f 	.word	0x08009d6f
 8009d3c:	08009d5f 	.word	0x08009d5f
 8009d40:	08009d6f 	.word	0x08009d6f
 8009d44:	08009d6f 	.word	0x08009d6f
 8009d48:	08009d6f 	.word	0x08009d6f
 8009d4c:	08009d67 	.word	0x08009d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d50:	f7fe f9b0 	bl	80080b4 <HAL_RCC_GetPCLK1Freq>
 8009d54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d56:	e010      	b.n	8009d7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d58:	4b9e      	ldr	r3, [pc, #632]	@ (8009fd4 <UART_SetConfig+0x5c0>)
 8009d5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d5c:	e00d      	b.n	8009d7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d5e:	f7fe f93b 	bl	8007fd8 <HAL_RCC_GetSysClockFreq>
 8009d62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d64:	e009      	b.n	8009d7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d6c:	e005      	b.n	8009d7a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 8130 	beq.w	8009fe2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d86:	4a94      	ldr	r2, [pc, #592]	@ (8009fd8 <UART_SetConfig+0x5c4>)
 8009d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	005b      	lsls	r3, r3, #1
 8009d9e:	4413      	add	r3, r2
 8009da0:	69ba      	ldr	r2, [r7, #24]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d305      	bcc.n	8009db2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d903      	bls.n	8009dba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009db8:	e113      	b.n	8009fe2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	60bb      	str	r3, [r7, #8]
 8009dc0:	60fa      	str	r2, [r7, #12]
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dc6:	4a84      	ldr	r2, [pc, #528]	@ (8009fd8 <UART_SetConfig+0x5c4>)
 8009dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	2200      	movs	r2, #0
 8009dd0:	603b      	str	r3, [r7, #0]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ddc:	f7f6 fd18 	bl	8000810 <__aeabi_uldivmod>
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	4610      	mov	r0, r2
 8009de6:	4619      	mov	r1, r3
 8009de8:	f04f 0200 	mov.w	r2, #0
 8009dec:	f04f 0300 	mov.w	r3, #0
 8009df0:	020b      	lsls	r3, r1, #8
 8009df2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009df6:	0202      	lsls	r2, r0, #8
 8009df8:	6979      	ldr	r1, [r7, #20]
 8009dfa:	6849      	ldr	r1, [r1, #4]
 8009dfc:	0849      	lsrs	r1, r1, #1
 8009dfe:	2000      	movs	r0, #0
 8009e00:	460c      	mov	r4, r1
 8009e02:	4605      	mov	r5, r0
 8009e04:	eb12 0804 	adds.w	r8, r2, r4
 8009e08:	eb43 0905 	adc.w	r9, r3, r5
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	469a      	mov	sl, r3
 8009e14:	4693      	mov	fp, r2
 8009e16:	4652      	mov	r2, sl
 8009e18:	465b      	mov	r3, fp
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	f7f6 fcf7 	bl	8000810 <__aeabi_uldivmod>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4613      	mov	r3, r2
 8009e28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e30:	d308      	bcc.n	8009e44 <UART_SetConfig+0x430>
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e38:	d204      	bcs.n	8009e44 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6a3a      	ldr	r2, [r7, #32]
 8009e40:	60da      	str	r2, [r3, #12]
 8009e42:	e0ce      	b.n	8009fe2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009e4a:	e0ca      	b.n	8009fe2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	69db      	ldr	r3, [r3, #28]
 8009e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e54:	d166      	bne.n	8009f24 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009e56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e5a:	2b08      	cmp	r3, #8
 8009e5c:	d827      	bhi.n	8009eae <UART_SetConfig+0x49a>
 8009e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e64 <UART_SetConfig+0x450>)
 8009e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e64:	08009e89 	.word	0x08009e89
 8009e68:	08009e91 	.word	0x08009e91
 8009e6c:	08009e99 	.word	0x08009e99
 8009e70:	08009eaf 	.word	0x08009eaf
 8009e74:	08009e9f 	.word	0x08009e9f
 8009e78:	08009eaf 	.word	0x08009eaf
 8009e7c:	08009eaf 	.word	0x08009eaf
 8009e80:	08009eaf 	.word	0x08009eaf
 8009e84:	08009ea7 	.word	0x08009ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e88:	f7fe f914 	bl	80080b4 <HAL_RCC_GetPCLK1Freq>
 8009e8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e8e:	e014      	b.n	8009eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e90:	f7fe f926 	bl	80080e0 <HAL_RCC_GetPCLK2Freq>
 8009e94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009e96:	e010      	b.n	8009eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e98:	4b4e      	ldr	r3, [pc, #312]	@ (8009fd4 <UART_SetConfig+0x5c0>)
 8009e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009e9c:	e00d      	b.n	8009eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e9e:	f7fe f89b 	bl	8007fd8 <HAL_RCC_GetSysClockFreq>
 8009ea2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ea4:	e009      	b.n	8009eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009eac:	e005      	b.n	8009eba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009eb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 8090 	beq.w	8009fe2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec6:	4a44      	ldr	r2, [pc, #272]	@ (8009fd8 <UART_SetConfig+0x5c4>)
 8009ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ed4:	005a      	lsls	r2, r3, #1
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	085b      	lsrs	r3, r3, #1
 8009edc:	441a      	add	r2, r3
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	2b0f      	cmp	r3, #15
 8009eec:	d916      	bls.n	8009f1c <UART_SetConfig+0x508>
 8009eee:	6a3b      	ldr	r3, [r7, #32]
 8009ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ef4:	d212      	bcs.n	8009f1c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	f023 030f 	bic.w	r3, r3, #15
 8009efe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	085b      	lsrs	r3, r3, #1
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	8bfb      	ldrh	r3, [r7, #30]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	8bfa      	ldrh	r2, [r7, #30]
 8009f18:	60da      	str	r2, [r3, #12]
 8009f1a:	e062      	b.n	8009fe2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f22:	e05e      	b.n	8009fe2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d828      	bhi.n	8009f7e <UART_SetConfig+0x56a>
 8009f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f34 <UART_SetConfig+0x520>)
 8009f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f32:	bf00      	nop
 8009f34:	08009f59 	.word	0x08009f59
 8009f38:	08009f61 	.word	0x08009f61
 8009f3c:	08009f69 	.word	0x08009f69
 8009f40:	08009f7f 	.word	0x08009f7f
 8009f44:	08009f6f 	.word	0x08009f6f
 8009f48:	08009f7f 	.word	0x08009f7f
 8009f4c:	08009f7f 	.word	0x08009f7f
 8009f50:	08009f7f 	.word	0x08009f7f
 8009f54:	08009f77 	.word	0x08009f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f58:	f7fe f8ac 	bl	80080b4 <HAL_RCC_GetPCLK1Freq>
 8009f5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f5e:	e014      	b.n	8009f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f60:	f7fe f8be 	bl	80080e0 <HAL_RCC_GetPCLK2Freq>
 8009f64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f66:	e010      	b.n	8009f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f68:	4b1a      	ldr	r3, [pc, #104]	@ (8009fd4 <UART_SetConfig+0x5c0>)
 8009f6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f6c:	e00d      	b.n	8009f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f6e:	f7fe f833 	bl	8007fd8 <HAL_RCC_GetSysClockFreq>
 8009f72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009f74:	e009      	b.n	8009f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009f7c:	e005      	b.n	8009f8a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009f88:	bf00      	nop
    }

    if (pclk != 0U)
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d028      	beq.n	8009fe2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f94:	4a10      	ldr	r2, [pc, #64]	@ (8009fd8 <UART_SetConfig+0x5c4>)
 8009f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	085b      	lsrs	r3, r3, #1
 8009fa8:	441a      	add	r2, r3
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	2b0f      	cmp	r3, #15
 8009fb8:	d910      	bls.n	8009fdc <UART_SetConfig+0x5c8>
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fc0:	d20c      	bcs.n	8009fdc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	60da      	str	r2, [r3, #12]
 8009fcc:	e009      	b.n	8009fe2 <UART_SetConfig+0x5ce>
 8009fce:	bf00      	nop
 8009fd0:	40008000 	.word	0x40008000
 8009fd4:	00f42400 	.word	0x00f42400
 8009fd8:	0800cb84 	.word	0x0800cb84
      }
      else
      {
        ret = HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009ffe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a002:	4618      	mov	r0, r3
 800a004:	3730      	adds	r7, #48	@ 0x30
 800a006:	46bd      	mov	sp, r7
 800a008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a00c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a018:	f003 0308 	and.w	r3, r3, #8
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00a      	beq.n	800a036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00a      	beq.n	800a058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	430a      	orrs	r2, r1
 800a056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00a      	beq.n	800a07a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a07e:	f003 0304 	and.w	r3, r3, #4
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00a      	beq.n	800a09c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	430a      	orrs	r2, r1
 800a09a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0a0:	f003 0310 	and.w	r3, r3, #16
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00a      	beq.n	800a0be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c2:	f003 0320 	and.w	r3, r3, #32
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00a      	beq.n	800a0e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d01a      	beq.n	800a122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	430a      	orrs	r2, r1
 800a100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a10a:	d10a      	bne.n	800a122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00a      	beq.n	800a144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	430a      	orrs	r2, r1
 800a142:	605a      	str	r2, [r3, #4]
  }
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b098      	sub	sp, #96	@ 0x60
 800a154:	af02      	add	r7, sp, #8
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a160:	f7f8 ffa4 	bl	80030ac <HAL_GetTick>
 800a164:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 0308 	and.w	r3, r3, #8
 800a170:	2b08      	cmp	r3, #8
 800a172:	d12f      	bne.n	800a1d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a17c:	2200      	movs	r2, #0
 800a17e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f88e 	bl	800a2a4 <UART_WaitOnFlagUntilTimeout>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d022      	beq.n	800a1d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a196:	e853 3f00 	ldrex	r3, [r3]
 800a19a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a19e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e6      	bne.n	800a18e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e063      	b.n	800a29c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f003 0304 	and.w	r3, r3, #4
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d149      	bne.n	800a276 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f857 	bl	800a2a4 <UART_WaitOnFlagUntilTimeout>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d03c      	beq.n	800a276 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a204:	e853 3f00 	ldrex	r3, [r3]
 800a208:	623b      	str	r3, [r7, #32]
   return(result);
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a210:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a21a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a21c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e6      	bne.n	800a1fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3308      	adds	r3, #8
 800a234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	e853 3f00 	ldrex	r3, [r3]
 800a23c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f023 0301 	bic.w	r3, r3, #1
 800a244:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3308      	adds	r3, #8
 800a24c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a24e:	61fa      	str	r2, [r7, #28]
 800a250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a252:	69b9      	ldr	r1, [r7, #24]
 800a254:	69fa      	ldr	r2, [r7, #28]
 800a256:	e841 2300 	strex	r3, r2, [r1]
 800a25a:	617b      	str	r3, [r7, #20]
   return(result);
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1e5      	bne.n	800a22e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2220      	movs	r2, #32
 800a266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e012      	b.n	800a29c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2220      	movs	r2, #32
 800a27a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2220      	movs	r2, #32
 800a282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3758      	adds	r7, #88	@ 0x58
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	603b      	str	r3, [r7, #0]
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2b4:	e04f      	b.n	800a356 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2bc:	d04b      	beq.n	800a356 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2be:	f7f8 fef5 	bl	80030ac <HAL_GetTick>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	69ba      	ldr	r2, [r7, #24]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d302      	bcc.n	800a2d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e04e      	b.n	800a376 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0304 	and.w	r3, r3, #4
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d037      	beq.n	800a356 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2b80      	cmp	r3, #128	@ 0x80
 800a2ea:	d034      	beq.n	800a356 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	2b40      	cmp	r3, #64	@ 0x40
 800a2f0:	d031      	beq.n	800a356 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	69db      	ldr	r3, [r3, #28]
 800a2f8:	f003 0308 	and.w	r3, r3, #8
 800a2fc:	2b08      	cmp	r3, #8
 800a2fe:	d110      	bne.n	800a322 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2208      	movs	r2, #8
 800a306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f838 	bl	800a37e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2208      	movs	r2, #8
 800a312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e029      	b.n	800a376 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a32c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a330:	d111      	bne.n	800a356 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a33a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f000 f81e 	bl	800a37e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2220      	movs	r2, #32
 800a346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a352:	2303      	movs	r3, #3
 800a354:	e00f      	b.n	800a376 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	69da      	ldr	r2, [r3, #28]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	4013      	ands	r3, r2
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	429a      	cmp	r2, r3
 800a364:	bf0c      	ite	eq
 800a366:	2301      	moveq	r3, #1
 800a368:	2300      	movne	r3, #0
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	461a      	mov	r2, r3
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	429a      	cmp	r2, r3
 800a372:	d0a0      	beq.n	800a2b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a37e:	b480      	push	{r7}
 800a380:	b095      	sub	sp, #84	@ 0x54
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a38e:	e853 3f00 	ldrex	r3, [r3]
 800a392:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a396:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a39a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a3aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3ac:	e841 2300 	strex	r3, r2, [r1]
 800a3b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1e6      	bne.n	800a386 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3308      	adds	r3, #8
 800a3be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c0:	6a3b      	ldr	r3, [r7, #32]
 800a3c2:	e853 3f00 	ldrex	r3, [r3]
 800a3c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3ce:	f023 0301 	bic.w	r3, r3, #1
 800a3d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3308      	adds	r3, #8
 800a3da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a3de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3e4:	e841 2300 	strex	r3, r2, [r1]
 800a3e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e3      	bne.n	800a3b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d118      	bne.n	800a42a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	e853 3f00 	ldrex	r3, [r3]
 800a404:	60bb      	str	r3, [r7, #8]
   return(result);
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	f023 0310 	bic.w	r3, r3, #16
 800a40c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a416:	61bb      	str	r3, [r7, #24]
 800a418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41a:	6979      	ldr	r1, [r7, #20]
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	e841 2300 	strex	r3, r2, [r1]
 800a422:	613b      	str	r3, [r7, #16]
   return(result);
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1e6      	bne.n	800a3f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2220      	movs	r2, #32
 800a42e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a43e:	bf00      	nop
 800a440:	3754      	adds	r7, #84	@ 0x54
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b085      	sub	sp, #20
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d101      	bne.n	800a460 <HAL_UARTEx_DisableFifoMode+0x16>
 800a45c:	2302      	movs	r3, #2
 800a45e:	e027      	b.n	800a4b0 <HAL_UARTEx_DisableFifoMode+0x66>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2224      	movs	r2, #36	@ 0x24
 800a46c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f022 0201 	bic.w	r2, r2, #1
 800a486:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a48e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2220      	movs	r2, #32
 800a4a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3714      	adds	r7, #20
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d101      	bne.n	800a4d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e02d      	b.n	800a530 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2224      	movs	r2, #36	@ 0x24
 800a4e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f022 0201 	bic.w	r2, r2, #1
 800a4fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	430a      	orrs	r2, r1
 800a50e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f84f 	bl	800a5b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2220      	movs	r2, #32
 800a522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d101      	bne.n	800a550 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a54c:	2302      	movs	r3, #2
 800a54e:	e02d      	b.n	800a5ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2224      	movs	r2, #36	@ 0x24
 800a55c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f022 0201 	bic.w	r2, r2, #1
 800a576:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	430a      	orrs	r2, r1
 800a58a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f811 	bl	800a5b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d108      	bne.n	800a5d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a5d4:	e031      	b.n	800a63a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a5d6:	2308      	movs	r3, #8
 800a5d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a5da:	2308      	movs	r3, #8
 800a5dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	0e5b      	lsrs	r3, r3, #25
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	f003 0307 	and.w	r3, r3, #7
 800a5ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	0f5b      	lsrs	r3, r3, #29
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	f003 0307 	and.w	r3, r3, #7
 800a5fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5fe:	7bbb      	ldrb	r3, [r7, #14]
 800a600:	7b3a      	ldrb	r2, [r7, #12]
 800a602:	4911      	ldr	r1, [pc, #68]	@ (800a648 <UARTEx_SetNbDataToProcess+0x94>)
 800a604:	5c8a      	ldrb	r2, [r1, r2]
 800a606:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a60a:	7b3a      	ldrb	r2, [r7, #12]
 800a60c:	490f      	ldr	r1, [pc, #60]	@ (800a64c <UARTEx_SetNbDataToProcess+0x98>)
 800a60e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a610:	fb93 f3f2 	sdiv	r3, r3, r2
 800a614:	b29a      	uxth	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	7b7a      	ldrb	r2, [r7, #13]
 800a620:	4909      	ldr	r1, [pc, #36]	@ (800a648 <UARTEx_SetNbDataToProcess+0x94>)
 800a622:	5c8a      	ldrb	r2, [r1, r2]
 800a624:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a628:	7b7a      	ldrb	r2, [r7, #13]
 800a62a:	4908      	ldr	r1, [pc, #32]	@ (800a64c <UARTEx_SetNbDataToProcess+0x98>)
 800a62c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a62e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a632:	b29a      	uxth	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a63a:	bf00      	nop
 800a63c:	3714      	adds	r7, #20
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	0800cb9c 	.word	0x0800cb9c
 800a64c:	0800cba4 	.word	0x0800cba4

0800a650 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b096      	sub	sp, #88	@ 0x58
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	3303      	adds	r3, #3
 800a662:	f023 0303 	bic.w	r3, r3, #3
 800a666:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a668:	f3ef 8310 	mrs	r3, PRIMASK
 800a66c:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 800a66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800a670:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800a672:	b672      	cpsid	i
#endif
    return(int_posture);
 800a674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800a676:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a678:	4b55      	ldr	r3, [pc, #340]	@ (800a7d0 <_tx_byte_allocate+0x180>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800a67e:	2300      	movs	r3, #0
 800a680:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a686:	621a      	str	r2, [r3, #32]
 800a688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a68a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	f383 8810 	msr	PRIMASK, r3
}
 800a692:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800a694:	6879      	ldr	r1, [r7, #4]
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f000 f9b2 	bl	800aa00 <_tx_byte_pool_search>
 800a69c:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a69e:	f3ef 8310 	mrs	r3, PRIMASK
 800a6a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a6a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a6a8:	b672      	cpsid	i
    return(int_posture);
 800a6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800a6ac:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800a6ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6b8:	e006      	b.n	800a6c8 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d101      	bne.n	800a6c8 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800a6c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d0d9      	beq.n	800a682 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6d2:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800a6d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d008      	beq.n	800a6ec <_tx_byte_allocate+0x9c>
 800a6da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6dc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a6de:	6a3b      	ldr	r3, [r7, #32]
 800a6e0:	f383 8810 	msr	PRIMASK, r3
}
 800a6e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6ea:	e06c      	b.n	800a7c6 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d061      	beq.n	800a7b6 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800a6f2:	4b38      	ldr	r3, [pc, #224]	@ (800a7d4 <_tx_byte_allocate+0x184>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d007      	beq.n	800a70a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800a6fa:	2310      	movs	r3, #16
 800a6fc:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a700:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	f383 8810 	msr	PRIMASK, r3
}
 800a708:	e05d      	b.n	800a7c6 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800a70a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a70c:	4a32      	ldr	r2, [pc, #200]	@ (800a7d8 <_tx_byte_allocate+0x188>)
 800a70e:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800a710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800a716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800a71c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800a722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a724:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a728:	1c5a      	adds	r2, r3, #1
 800a72a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a72c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a734:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a73a:	1c5a      	adds	r2, r3, #1
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800a740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a742:	2b00      	cmp	r3, #0
 800a744:	d109      	bne.n	800a75a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a74a:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800a74c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a74e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a750:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800a752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a754:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a756:	675a      	str	r2, [r3, #116]	@ 0x74
 800a758:	e011      	b.n	800a77e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800a760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a762:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a764:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800a766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a76a:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800a76c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a76e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a770:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800a772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a774:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a776:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800a778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a77a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a77c:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800a77e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a780:	2209      	movs	r2, #9
 800a782:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a786:	2201      	movs	r2, #1
 800a788:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a78a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800a790:	4b10      	ldr	r3, [pc, #64]	@ (800a7d4 <_tx_byte_allocate+0x184>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3301      	adds	r3, #1
 800a796:	4a0f      	ldr	r2, [pc, #60]	@ (800a7d4 <_tx_byte_allocate+0x184>)
 800a798:	6013      	str	r3, [r2, #0]
 800a79a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a79c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	f383 8810 	msr	PRIMASK, r3
}
 800a7a4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a7a6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a7a8:	f000 ff96 	bl	800b6d8 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800a7ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7b4:	e007      	b.n	800a7c6 <_tx_byte_allocate+0x176>
 800a7b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7b8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	f383 8810 	msr	PRIMASK, r3
}
 800a7c0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800a7c2:	2310      	movs	r3, #16
 800a7c4:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800a7c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3758      	adds	r7, #88	@ 0x58
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20010c64 	.word	0x20010c64
 800a7d4:	20010cfc 	.word	0x20010cfc
 800a7d8:	0800a7dd 	.word	0x0800a7dd

0800a7dc <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b08e      	sub	sp, #56	@ 0x38
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a7e6:	f3ef 8310 	mrs	r3, PRIMASK
 800a7ea:	623b      	str	r3, [r7, #32]
    return(posture);
 800a7ec:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a7ee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a7f0:	b672      	cpsid	i
    return(int_posture);
 800a7f2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800a7f4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7fa:	4a33      	ldr	r2, [pc, #204]	@ (800a8c8 <_tx_byte_pool_cleanup+0xec>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d158      	bne.n	800a8b2 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d152      	bne.n	800a8b2 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a810:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800a812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a814:	2b00      	cmp	r3, #0
 800a816:	d04c      	beq.n	800a8b2 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800a818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a2b      	ldr	r2, [pc, #172]	@ (800a8cc <_tx_byte_pool_cleanup+0xf0>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d147      	bne.n	800a8b2 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800a822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a826:	2b00      	cmp	r3, #0
 800a828:	d043      	beq.n	800a8b2 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800a830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a834:	1e5a      	subs	r2, r3, #1
 800a836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a838:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a83e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800a840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d103      	bne.n	800a84e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800a846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a848:	2200      	movs	r2, #0
 800a84a:	625a      	str	r2, [r3, #36]	@ 0x24
 800a84c:	e013      	b.n	800a876 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a852:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a858:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a85e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a864:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800a866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d102      	bne.n	800a876 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800a870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a874:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a87a:	2b09      	cmp	r3, #9
 800a87c:	d119      	bne.n	800a8b2 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2210      	movs	r2, #16
 800a882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a886:	4b12      	ldr	r3, [pc, #72]	@ (800a8d0 <_tx_byte_pool_cleanup+0xf4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3301      	adds	r3, #1
 800a88c:	4a10      	ldr	r2, [pc, #64]	@ (800a8d0 <_tx_byte_pool_cleanup+0xf4>)
 800a88e:	6013      	str	r3, [r2, #0]
 800a890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a892:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	f383 8810 	msr	PRIMASK, r3
}
 800a89a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fe1b 	bl	800b4d8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a8a6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a8a8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a8aa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a8ac:	b672      	cpsid	i
    return(int_posture);
 800a8ae:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800a8b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f383 8810 	msr	PRIMASK, r3
}
 800a8bc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a8be:	bf00      	nop
 800a8c0:	3738      	adds	r7, #56	@ 0x38
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	0800a7dd 	.word	0x0800a7dd
 800a8cc:	42595445 	.word	0x42595445
 800a8d0:	20010cfc 	.word	0x20010cfc

0800a8d4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08e      	sub	sp, #56	@ 0x38
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
 800a8e0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800a8e2:	2234      	movs	r2, #52	@ 0x34
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f002 f84c 	bl	800c984 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	f023 0303 	bic.w	r3, r3, #3
 800a8f2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	f1a3 0208 	sub.w	r2, r3, #8
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2202      	movs	r2, #2
 800a920:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800a926:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	4413      	add	r3, r2
 800a92c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800a92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a930:	3b04      	subs	r3, #4
 800a932:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800a938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a93a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800a93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a940:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800a942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a944:	3b04      	subs	r3, #4
 800a946:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800a948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a94a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800a956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800a95a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a95e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800a964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a966:	3304      	adds	r3, #4
 800a968:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800a96a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800a96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a970:	4a1f      	ldr	r2, [pc, #124]	@ (800a9f0 <_tx_byte_pool_create+0x11c>)
 800a972:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a97a:	f3ef 8310 	mrs	r3, PRIMASK
 800a97e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a980:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a982:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a984:	b672      	cpsid	i
    return(int_posture);
 800a986:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800a988:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	4a19      	ldr	r2, [pc, #100]	@ (800a9f4 <_tx_byte_pool_create+0x120>)
 800a98e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800a990:	4b19      	ldr	r3, [pc, #100]	@ (800a9f8 <_tx_byte_pool_create+0x124>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d109      	bne.n	800a9ac <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800a998:	4a18      	ldr	r2, [pc, #96]	@ (800a9fc <_tx_byte_pool_create+0x128>)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a9aa:	e011      	b.n	800a9d0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800a9ac:	4b13      	ldr	r3, [pc, #76]	@ (800a9fc <_tx_byte_pool_create+0x128>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9b6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	69fa      	ldr	r2, [r7, #28]
 800a9c8:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6a3a      	ldr	r2, [r7, #32]
 800a9ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800a9d0:	4b09      	ldr	r3, [pc, #36]	@ (800a9f8 <_tx_byte_pool_create+0x124>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	4a08      	ldr	r2, [pc, #32]	@ (800a9f8 <_tx_byte_pool_create+0x124>)
 800a9d8:	6013      	str	r3, [r2, #0]
 800a9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9dc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f383 8810 	msr	PRIMASK, r3
}
 800a9e4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3738      	adds	r7, #56	@ 0x38
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	ffffeeee 	.word	0xffffeeee
 800a9f4:	42595445 	.word	0x42595445
 800a9f8:	20010c58 	.word	0x20010c58
 800a9fc:	20010c54 	.word	0x20010c54

0800aa00 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b097      	sub	sp, #92	@ 0x5c
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa0e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa12:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800aa14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800aa16:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa18:	b672      	cpsid	i
    return(int_posture);
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800aa1c:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	689a      	ldr	r2, [r3, #8]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	3b02      	subs	r3, #2
 800aa28:	00db      	lsls	r3, r3, #3
 800aa2a:	4413      	add	r3, r2
 800aa2c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d308      	bcc.n	800aa48 <_tx_byte_pool_search+0x48>
 800aa36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa38:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	f383 8810 	msr	PRIMASK, r3
}
 800aa40:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa46:	e0dd      	b.n	800ac04 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800aa48:	4b72      	ldr	r3, [pc, #456]	@ (800ac14 <_tx_byte_pool_search+0x214>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa52:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	695b      	ldr	r3, [r3, #20]
 800aa58:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800aa62:	2300      	movs	r3, #0
 800aa64:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800aa66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa68:	3304      	adds	r3, #4
 800aa6a:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800aa6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6e:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800aa70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a68      	ldr	r2, [pc, #416]	@ (800ac18 <_tx_byte_pool_search+0x218>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d143      	bne.n	800ab02 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800aa7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d104      	bne.n	800aa8a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa84:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800aa86:	2301      	movs	r3, #1
 800aa88:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800aa8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa8c:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800aa94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa98:	1ad3      	subs	r3, r2, r3
 800aa9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800aa9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa9e:	3b08      	subs	r3, #8
 800aaa0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800aaa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d257      	bcs.n	800ab5a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800aaaa:	2300      	movs	r3, #0
 800aaac:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800aaae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab0:	3304      	adds	r3, #4
 800aab2:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800aab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab6:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800aab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a56      	ldr	r2, [pc, #344]	@ (800ac18 <_tx_byte_pool_search+0x218>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d113      	bne.n	800aaea <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800aac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac4:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800aac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aacc:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	1e5a      	subs	r2, r3, #1
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aade:	429a      	cmp	r2, r3
 800aae0:	d114      	bne.n	800ab0c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aae6:	615a      	str	r2, [r3, #20]
 800aae8:	e010      	b.n	800ab0c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800aaea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaec:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 800aaee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800aaf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d008      	beq.n	800ab0c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800aafa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aafc:	3b01      	subs	r3, #1
 800aafe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab00:	e004      	b.n	800ab0c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ab02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab04:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 800ab06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800ab0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d002      	beq.n	800ab18 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800ab12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab14:	3b01      	subs	r3, #1
 800ab16:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab1a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	f383 8810 	msr	PRIMASK, r3
}
 800ab22:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab24:	f3ef 8310 	mrs	r3, PRIMASK
 800ab28:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ab2a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ab2c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab2e:	b672      	cpsid	i
    return(int_posture);
 800ab30:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800ab32:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a1b      	ldr	r3, [r3, #32]
 800ab38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d009      	beq.n	800ab52 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab50:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800ab52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d186      	bne.n	800aa66 <_tx_byte_pool_search+0x66>
 800ab58:	e000      	b.n	800ab5c <_tx_byte_pool_search+0x15c>
                    break;
 800ab5a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800ab5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d048      	beq.n	800abf4 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800ab62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b13      	cmp	r3, #19
 800ab6a:	d91e      	bls.n	800abaa <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	3308      	adds	r3, #8
 800ab70:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab72:	4413      	add	r3, r2
 800ab74:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ab76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab78:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ab7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab7c:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab84:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ab86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab88:	3304      	adds	r3, #4
 800ab8a:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ab8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8e:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800ab90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab92:	4a21      	ldr	r2, [pc, #132]	@ (800ac18 <_tx_byte_pool_search+0x218>)
 800ab94:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	1c5a      	adds	r2, r3, #1
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800aba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aba4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800abaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abac:	3304      	adds	r3, #4
 800abae:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800abb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb2:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800abb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	689a      	ldr	r2, [r3, #8]
 800abbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	f1a3 0208 	sub.w	r2, r3, #8
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d105      	bne.n	800abe0 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800abd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abd6:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800abd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	615a      	str	r2, [r3, #20]
 800abe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abe2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f383 8810 	msr	PRIMASK, r3
}
 800abea:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800abec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abee:	3308      	adds	r3, #8
 800abf0:	653b      	str	r3, [r7, #80]	@ 0x50
 800abf2:	e007      	b.n	800ac04 <_tx_byte_pool_search+0x204>
 800abf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abf6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	f383 8810 	msr	PRIMASK, r3
}
 800abfe:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800ac00:	2300      	movs	r3, #0
 800ac02:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800ac04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	375c      	adds	r7, #92	@ 0x5c
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	20010c64 	.word	0x20010c64
 800ac18:	ffffeeee 	.word	0xffffeeee

0800ac1c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800ac20:	f000 fb18 	bl	800b254 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800ac24:	f001 f880 	bl	800bd28 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800ac28:	4b12      	ldr	r3, [pc, #72]	@ (800ac74 <_tx_initialize_high_level+0x58>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	4b12      	ldr	r3, [pc, #72]	@ (800ac78 <_tx_initialize_high_level+0x5c>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800ac34:	4b11      	ldr	r3, [pc, #68]	@ (800ac7c <_tx_initialize_high_level+0x60>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	4b11      	ldr	r3, [pc, #68]	@ (800ac80 <_tx_initialize_high_level+0x64>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800ac40:	4b10      	ldr	r3, [pc, #64]	@ (800ac84 <_tx_initialize_high_level+0x68>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	4b10      	ldr	r3, [pc, #64]	@ (800ac88 <_tx_initialize_high_level+0x6c>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800ac4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ac8c <_tx_initialize_high_level+0x70>)
 800ac4e:	2200      	movs	r2, #0
 800ac50:	601a      	str	r2, [r3, #0]
 800ac52:	4b0f      	ldr	r3, [pc, #60]	@ (800ac90 <_tx_initialize_high_level+0x74>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800ac58:	4b0e      	ldr	r3, [pc, #56]	@ (800ac94 <_tx_initialize_high_level+0x78>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac98 <_tx_initialize_high_level+0x7c>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800ac64:	4b0d      	ldr	r3, [pc, #52]	@ (800ac9c <_tx_initialize_high_level+0x80>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	601a      	str	r2, [r3, #0]
 800ac6a:	4b0d      	ldr	r3, [pc, #52]	@ (800aca0 <_tx_initialize_high_level+0x84>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	601a      	str	r2, [r3, #0]
#endif
}
 800ac70:	bf00      	nop
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	20010c2c 	.word	0x20010c2c
 800ac78:	20010c30 	.word	0x20010c30
 800ac7c:	20010c34 	.word	0x20010c34
 800ac80:	20010c38 	.word	0x20010c38
 800ac84:	20010c3c 	.word	0x20010c3c
 800ac88:	20010c40 	.word	0x20010c40
 800ac8c:	20010c4c 	.word	0x20010c4c
 800ac90:	20010c50 	.word	0x20010c50
 800ac94:	20010c54 	.word	0x20010c54
 800ac98:	20010c58 	.word	0x20010c58
 800ac9c:	20010c44 	.word	0x20010c44
 800aca0:	20010c48 	.word	0x20010c48

0800aca4 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800aca8:	4b10      	ldr	r3, [pc, #64]	@ (800acec <_tx_initialize_kernel_enter+0x48>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800acb0:	d00c      	beq.n	800accc <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800acb2:	4b0e      	ldr	r3, [pc, #56]	@ (800acec <_tx_initialize_kernel_enter+0x48>)
 800acb4:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800acb8:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800acba:	f7f5 fab1 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800acbe:	f7ff ffad 	bl	800ac1c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800acc2:	4b0b      	ldr	r3, [pc, #44]	@ (800acf0 <_tx_initialize_kernel_enter+0x4c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3301      	adds	r3, #1
 800acc8:	4a09      	ldr	r2, [pc, #36]	@ (800acf0 <_tx_initialize_kernel_enter+0x4c>)
 800acca:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800accc:	4b07      	ldr	r3, [pc, #28]	@ (800acec <_tx_initialize_kernel_enter+0x48>)
 800acce:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800acd2:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800acd4:	4b07      	ldr	r3, [pc, #28]	@ (800acf4 <_tx_initialize_kernel_enter+0x50>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4618      	mov	r0, r3
 800acda:	f7f5 ff11 	bl	8000b00 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800acde:	4b03      	ldr	r3, [pc, #12]	@ (800acec <_tx_initialize_kernel_enter+0x48>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800ace4:	f7f5 fadc 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800ace8:	bf00      	nop
 800acea:	bd80      	pop	{r7, pc}
 800acec:	2000018c 	.word	0x2000018c
 800acf0:	20010cfc 	.word	0x20010cfc
 800acf4:	20010c5c 	.word	0x20010c5c

0800acf8 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b08e      	sub	sp, #56	@ 0x38
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad02:	f3ef 8310 	mrs	r3, PRIMASK
 800ad06:	623b      	str	r3, [r7, #32]
    return(posture);
 800ad08:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ad0a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad0c:	b672      	cpsid	i
    return(int_posture);
 800ad0e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800ad10:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad16:	4a33      	ldr	r2, [pc, #204]	@ (800ade4 <_tx_semaphore_cleanup+0xec>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d158      	bne.n	800adce <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d152      	bne.n	800adce <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad2c:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d04c      	beq.n	800adce <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800ad34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a2b      	ldr	r2, [pc, #172]	@ (800ade8 <_tx_semaphore_cleanup+0xf0>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d147      	bne.n	800adce <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d043      	beq.n	800adce <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	1e5a      	subs	r2, r3, #1
 800ad52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad54:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800ad56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800ad5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d103      	bne.n	800ad6a <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800ad62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad64:	2200      	movs	r2, #0
 800ad66:	60da      	str	r2, [r3, #12]
 800ad68:	e013      	b.n	800ad92 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad6e:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad74:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800ad76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad7a:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad80:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800ad82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d102      	bne.n	800ad92 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad90:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad96:	2b06      	cmp	r3, #6
 800ad98:	d119      	bne.n	800adce <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	220d      	movs	r2, #13
 800ad9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ada2:	4b12      	ldr	r3, [pc, #72]	@ (800adec <_tx_semaphore_cleanup+0xf4>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3301      	adds	r3, #1
 800ada8:	4a10      	ldr	r2, [pc, #64]	@ (800adec <_tx_semaphore_cleanup+0xf4>)
 800adaa:	6013      	str	r3, [r2, #0]
 800adac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	f383 8810 	msr	PRIMASK, r3
}
 800adb6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fb8d 	bl	800b4d8 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800adbe:	f3ef 8310 	mrs	r3, PRIMASK
 800adc2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800adc4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800adc6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800adc8:	b672      	cpsid	i
    return(int_posture);
 800adca:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800adcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800adce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800add0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	f383 8810 	msr	PRIMASK, r3
}
 800add8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800adda:	bf00      	nop
 800addc:	3738      	adds	r7, #56	@ 0x38
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	0800acf9 	.word	0x0800acf9
 800ade8:	53454d41 	.word	0x53454d41
 800adec:	20010cfc 	.word	0x20010cfc

0800adf0 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b08a      	sub	sp, #40	@ 0x28
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800adfc:	221c      	movs	r2, #28
 800adfe:	2100      	movs	r1, #0
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f001 fdbf 	bl	800c984 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae12:	f3ef 8310 	mrs	r3, PRIMASK
 800ae16:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ae18:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ae1a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae1c:	b672      	cpsid	i
    return(int_posture);
 800ae1e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800ae20:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	4a18      	ldr	r2, [pc, #96]	@ (800ae88 <_tx_semaphore_create+0x98>)
 800ae26:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800ae28:	4b18      	ldr	r3, [pc, #96]	@ (800ae8c <_tx_semaphore_create+0x9c>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d109      	bne.n	800ae44 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800ae30:	4a17      	ldr	r2, [pc, #92]	@ (800ae90 <_tx_semaphore_create+0xa0>)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	68fa      	ldr	r2, [r7, #12]
 800ae40:	619a      	str	r2, [r3, #24]
 800ae42:	e011      	b.n	800ae68 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800ae44:	4b12      	ldr	r3, [pc, #72]	@ (800ae90 <_tx_semaphore_create+0xa0>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800ae4a:	6a3b      	ldr	r3, [r7, #32]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	69fa      	ldr	r2, [r7, #28]
 800ae60:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6a3a      	ldr	r2, [r7, #32]
 800ae66:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800ae68:	4b08      	ldr	r3, [pc, #32]	@ (800ae8c <_tx_semaphore_create+0x9c>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	4a07      	ldr	r2, [pc, #28]	@ (800ae8c <_tx_semaphore_create+0x9c>)
 800ae70:	6013      	str	r3, [r2, #0]
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f383 8810 	msr	PRIMASK, r3
}
 800ae7c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3728      	adds	r7, #40	@ 0x28
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	53454d41 	.word	0x53454d41
 800ae8c:	20010c30 	.word	0x20010c30
 800ae90:	20010c2c 	.word	0x20010c2c

0800ae94 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08e      	sub	sp, #56	@ 0x38
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aea2:	f3ef 8310 	mrs	r3, PRIMASK
 800aea6:	623b      	str	r3, [r7, #32]
    return(posture);
 800aea8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800aeaa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aeac:	b672      	cpsid	i
    return(int_posture);
 800aeae:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800aeb0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00a      	beq.n	800aed0 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	1e5a      	subs	r2, r3, #1
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	609a      	str	r2, [r3, #8]
 800aec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	f383 8810 	msr	PRIMASK, r3
}
 800aece:	e068      	b.n	800afa2 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d05d      	beq.n	800af92 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800aed6:	4b35      	ldr	r3, [pc, #212]	@ (800afac <_tx_semaphore_get+0x118>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d008      	beq.n	800aef0 <_tx_semaphore_get+0x5c>
 800aede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f383 8810 	msr	PRIMASK, r3
}
 800aee8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800aeea:	230d      	movs	r3, #13
 800aeec:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeee:	e058      	b.n	800afa2 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800aef0:	4b2f      	ldr	r3, [pc, #188]	@ (800afb0 <_tx_semaphore_get+0x11c>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800aef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef8:	4a2e      	ldr	r2, [pc, #184]	@ (800afb4 <_tx_semaphore_get+0x120>)
 800aefa:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800aefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800af02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800af08:	1c5a      	adds	r2, r3, #1
 800af0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d109      	bne.n	800af2c <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af1c:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800af1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af22:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800af24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af28:	675a      	str	r2, [r3, #116]	@ 0x74
 800af2a:	e011      	b.n	800af50 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800af32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af36:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800af38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af3c:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800af3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af42:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800af44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af48:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800af4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af4e:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	1c5a      	adds	r2, r3, #1
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800af5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af5c:	2206      	movs	r2, #6
 800af5e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800af60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af62:	2201      	movs	r2, #1
 800af64:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800af66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800af6c:	4b0f      	ldr	r3, [pc, #60]	@ (800afac <_tx_semaphore_get+0x118>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3301      	adds	r3, #1
 800af72:	4a0e      	ldr	r2, [pc, #56]	@ (800afac <_tx_semaphore_get+0x118>)
 800af74:	6013      	str	r3, [r2, #0]
 800af76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af78:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	f383 8810 	msr	PRIMASK, r3
}
 800af80:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800af82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af84:	f000 fba8 	bl	800b6d8 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800af88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800af90:	e007      	b.n	800afa2 <_tx_semaphore_get+0x10e>
 800af92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af94:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f383 8810 	msr	PRIMASK, r3
}
 800af9c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800af9e:	230d      	movs	r3, #13
 800afa0:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800afa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3738      	adds	r7, #56	@ 0x38
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	20010cfc 	.word	0x20010cfc
 800afb0:	20010c64 	.word	0x20010c64
 800afb4:	0800acf9 	.word	0x0800acf9

0800afb8 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b08c      	sub	sp, #48	@ 0x30
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800afc0:	f3ef 8310 	mrs	r3, PRIMASK
 800afc4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800afc6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800afc8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800afca:	b672      	cpsid	i
    return(int_posture);
 800afcc:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800afce:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	691b      	ldr	r3, [r3, #16]
 800afd4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800afd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10a      	bne.n	800aff2 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	609a      	str	r2, [r3, #8]
 800afe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	f383 8810 	msr	PRIMASK, r3
}
 800aff0:	e033      	b.n	800b05a <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800aff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800affa:	3b01      	subs	r3, #1
 800affc:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800affe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b000:	2b00      	cmp	r3, #0
 800b002:	d103      	bne.n	800b00c <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	60da      	str	r2, [r3, #12]
 800b00a:	e00e      	b.n	800b02a <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800b00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b010:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a3a      	ldr	r2, [r7, #32]
 800b016:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b01c:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	69fa      	ldr	r2, [r7, #28]
 800b022:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	6a3a      	ldr	r2, [r7, #32]
 800b028:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b02e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b032:	2200      	movs	r2, #0
 800b034:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b038:	2200      	movs	r2, #0
 800b03a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800b03e:	4b09      	ldr	r3, [pc, #36]	@ (800b064 <_tx_semaphore_put+0xac>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3301      	adds	r3, #1
 800b044:	4a07      	ldr	r2, [pc, #28]	@ (800b064 <_tx_semaphore_put+0xac>)
 800b046:	6013      	str	r3, [r2, #0]
 800b048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b04a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f383 8810 	msr	PRIMASK, r3
}
 800b052:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b054:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b056:	f000 fa3f 	bl	800b4d8 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3730      	adds	r7, #48	@ 0x30
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	20010cfc 	.word	0x20010cfc

0800b068 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b092      	sub	sp, #72	@ 0x48
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800b076:	2300      	movs	r3, #0
 800b078:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800b07a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b07c:	21ef      	movs	r1, #239	@ 0xef
 800b07e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800b080:	f001 fc80 	bl	800c984 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800b084:	22b0      	movs	r2, #176	@ 0xb0
 800b086:	2100      	movs	r1, #0
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f001 fc7b 	bl	800c984 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	68ba      	ldr	r2, [r7, #8]
 800b092:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	683a      	ldr	r2, [r7, #0]
 800b09e:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b0a4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b0aa:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b0be:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b0c4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800b0ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800b0d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b0d8:	4413      	add	r3, r2
 800b0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b0e0:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800b0e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d007      	beq.n	800b0fa <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800b0f8:	e006      	b.n	800b108 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0fe:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b104:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2203      	movs	r2, #3
 800b10c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	4a48      	ldr	r2, [pc, #288]	@ (800b234 <_tx_thread_create+0x1cc>)
 800b112:	655a      	str	r2, [r3, #84]	@ 0x54
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800b11a:	4947      	ldr	r1, [pc, #284]	@ (800b238 <_tx_thread_create+0x1d0>)
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7f5 f91f 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b122:	f3ef 8310 	mrs	r3, PRIMASK
 800b126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800b128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800b12a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b12c:	b672      	cpsid	i
    return(int_posture);
 800b12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800b130:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	4a41      	ldr	r2, [pc, #260]	@ (800b23c <_tx_thread_create+0x1d4>)
 800b136:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800b138:	4b41      	ldr	r3, [pc, #260]	@ (800b240 <_tx_thread_create+0x1d8>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10b      	bne.n	800b158 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800b140:	4a40      	ldr	r2, [pc, #256]	@ (800b244 <_tx_thread_create+0x1dc>)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800b156:	e016      	b.n	800b186 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800b158:	4b3a      	ldr	r3, [pc, #232]	@ (800b244 <_tx_thread_create+0x1dc>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800b15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b164:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800b166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800b16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b17a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800b186:	4b2e      	ldr	r3, [pc, #184]	@ (800b240 <_tx_thread_create+0x1d8>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	3301      	adds	r3, #1
 800b18c:	4a2c      	ldr	r2, [pc, #176]	@ (800b240 <_tx_thread_create+0x1d8>)
 800b18e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b190:	4b2d      	ldr	r3, [pc, #180]	@ (800b248 <_tx_thread_create+0x1e0>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3301      	adds	r3, #1
 800b196:	4a2c      	ldr	r2, [pc, #176]	@ (800b248 <_tx_thread_create+0x1e0>)
 800b198:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800b19a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d129      	bne.n	800b1f4 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b1a0:	f3ef 8305 	mrs	r3, IPSR
 800b1a4:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800b1a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800b1a8:	4b28      	ldr	r3, [pc, #160]	@ (800b24c <_tx_thread_create+0x1e4>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800b1b2:	d30d      	bcc.n	800b1d0 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800b1b4:	4b26      	ldr	r3, [pc, #152]	@ (800b250 <_tx_thread_create+0x1e8>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800b1ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d009      	beq.n	800b1d4 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800b1c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1c4:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800b1c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b1ce:	e001      	b.n	800b1d4 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	f383 8810 	msr	PRIMASK, r3
}
 800b1de:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f000 f979 	bl	800b4d8 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800b1e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d01e      	beq.n	800b22a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800b1ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b1f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b1f2:	e01a      	b.n	800b22a <_tx_thread_create+0x1c2>
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	f383 8810 	msr	PRIMASK, r3
}
 800b1fe:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b200:	f3ef 8310 	mrs	r3, PRIMASK
 800b204:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b206:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b208:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b20a:	b672      	cpsid	i
    return(int_posture);
 800b20c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800b20e:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800b210:	4b0d      	ldr	r3, [pc, #52]	@ (800b248 <_tx_thread_create+0x1e0>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3b01      	subs	r3, #1
 800b216:	4a0c      	ldr	r2, [pc, #48]	@ (800b248 <_tx_thread_create+0x1e0>)
 800b218:	6013      	str	r3, [r2, #0]
 800b21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	f383 8810 	msr	PRIMASK, r3
}
 800b224:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800b226:	f000 f91d 	bl	800b464 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3748      	adds	r7, #72	@ 0x48
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	0800b9ad 	.word	0x0800b9ad
 800b238:	0800b2cd 	.word	0x0800b2cd
 800b23c:	54485244 	.word	0x54485244
 800b240:	20010c70 	.word	0x20010c70
 800b244:	20010c6c 	.word	0x20010c6c
 800b248:	20010cfc 	.word	0x20010cfc
 800b24c:	2000018c 	.word	0x2000018c
 800b250:	20010c68 	.word	0x20010c68

0800b254 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800b258:	4b12      	ldr	r3, [pc, #72]	@ (800b2a4 <_tx_thread_initialize+0x50>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800b25e:	4b12      	ldr	r3, [pc, #72]	@ (800b2a8 <_tx_thread_initialize+0x54>)
 800b260:	2200      	movs	r2, #0
 800b262:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800b264:	4b11      	ldr	r3, [pc, #68]	@ (800b2ac <_tx_thread_initialize+0x58>)
 800b266:	2200      	movs	r2, #0
 800b268:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b26a:	4b11      	ldr	r3, [pc, #68]	@ (800b2b0 <_tx_thread_initialize+0x5c>)
 800b26c:	2220      	movs	r2, #32
 800b26e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800b270:	2280      	movs	r2, #128	@ 0x80
 800b272:	2100      	movs	r1, #0
 800b274:	480f      	ldr	r0, [pc, #60]	@ (800b2b4 <_tx_thread_initialize+0x60>)
 800b276:	f001 fb85 	bl	800c984 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800b27a:	4b0f      	ldr	r3, [pc, #60]	@ (800b2b8 <_tx_thread_initialize+0x64>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800b280:	4b0e      	ldr	r3, [pc, #56]	@ (800b2bc <_tx_thread_initialize+0x68>)
 800b282:	2200      	movs	r2, #0
 800b284:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800b286:	4b0e      	ldr	r3, [pc, #56]	@ (800b2c0 <_tx_thread_initialize+0x6c>)
 800b288:	2200      	movs	r2, #0
 800b28a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800b28c:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c4 <_tx_thread_initialize+0x70>)
 800b28e:	2200      	movs	r2, #0
 800b290:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800b292:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c8 <_tx_thread_initialize+0x74>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800b29a:	4a0b      	ldr	r2, [pc, #44]	@ (800b2c8 <_tx_thread_initialize+0x74>)
 800b29c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800b29e:	bf00      	nop
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20010c64 	.word	0x20010c64
 800b2a8:	20010c68 	.word	0x20010c68
 800b2ac:	20010c74 	.word	0x20010c74
 800b2b0:	20010c78 	.word	0x20010c78
 800b2b4:	20010c7c 	.word	0x20010c7c
 800b2b8:	20010c6c 	.word	0x20010c6c
 800b2bc:	20010c70 	.word	0x20010c70
 800b2c0:	20010cfc 	.word	0x20010cfc
 800b2c4:	20010d00 	.word	0x20010d00
 800b2c8:	20010d04 	.word	0x20010d04

0800b2cc <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b088      	sub	sp, #32
 800b2d0:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b2d2:	4b21      	ldr	r3, [pc, #132]	@ (800b358 <_tx_thread_shell_entry+0x8c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2dc:	69fa      	ldr	r2, [r7, #28]
 800b2de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800b2e4:	4b1d      	ldr	r3, [pc, #116]	@ (800b35c <_tx_thread_shell_entry+0x90>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d003      	beq.n	800b2f4 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800b2ec:	4b1b      	ldr	r3, [pc, #108]	@ (800b35c <_tx_thread_shell_entry+0x90>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	69f8      	ldr	r0, [r7, #28]
 800b2f2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b2f4:	f3ef 8310 	mrs	r3, PRIMASK
 800b2f8:	607b      	str	r3, [r7, #4]
    return(posture);
 800b2fa:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b2fc:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b2fe:	b672      	cpsid	i
    return(int_posture);
 800b300:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800b302:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	2201      	movs	r2, #1
 800b308:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	2201      	movs	r2, #1
 800b30e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	2200      	movs	r2, #0
 800b314:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b316:	4b12      	ldr	r3, [pc, #72]	@ (800b360 <_tx_thread_shell_entry+0x94>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	3301      	adds	r3, #1
 800b31c:	4a10      	ldr	r2, [pc, #64]	@ (800b360 <_tx_thread_shell_entry+0x94>)
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	f383 8810 	msr	PRIMASK, r3
}
 800b32a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800b32c:	f3ef 8314 	mrs	r3, CONTROL
 800b330:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800b332:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800b334:	617b      	str	r3, [r7, #20]
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f023 0304 	bic.w	r3, r3, #4
 800b33c:	617b      	str	r3, [r7, #20]
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	f383 8814 	msr	CONTROL, r3
}
 800b348:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800b34a:	69f8      	ldr	r0, [r7, #28]
 800b34c:	f000 f9c4 	bl	800b6d8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b350:	bf00      	nop
 800b352:	3720      	adds	r7, #32
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	20010c64 	.word	0x20010c64
 800b35c:	20010d00 	.word	0x20010d00
 800b360:	20010cfc 	.word	0x20010cfc

0800b364 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08e      	sub	sp, #56	@ 0x38
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b36c:	f3ef 8310 	mrs	r3, PRIMASK
 800b370:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800b374:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800b376:	b672      	cpsid	i
    return(int_posture);
 800b378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b37a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b37c:	4b35      	ldr	r3, [pc, #212]	@ (800b454 <_tx_thread_sleep+0xf0>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800b382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b384:	2b00      	cmp	r3, #0
 800b386:	d108      	bne.n	800b39a <_tx_thread_sleep+0x36>
 800b388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b38a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	f383 8810 	msr	PRIMASK, r3
}
 800b392:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b394:	2313      	movs	r3, #19
 800b396:	637b      	str	r3, [r7, #52]	@ 0x34
 800b398:	e056      	b.n	800b448 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b39a:	f3ef 8305 	mrs	r3, IPSR
 800b39e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b3a0:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b3a2:	4b2d      	ldr	r3, [pc, #180]	@ (800b458 <_tx_thread_sleep+0xf4>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d008      	beq.n	800b3be <_tx_thread_sleep+0x5a>
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	f383 8810 	msr	PRIMASK, r3
}
 800b3b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b3b8:	2313      	movs	r3, #19
 800b3ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3bc:	e044      	b.n	800b448 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800b3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c0:	4a26      	ldr	r2, [pc, #152]	@ (800b45c <_tx_thread_sleep+0xf8>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d108      	bne.n	800b3d8 <_tx_thread_sleep+0x74>
 800b3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	f383 8810 	msr	PRIMASK, r3
}
 800b3d0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b3d2:	2313      	movs	r3, #19
 800b3d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3d6:	e037      	b.n	800b448 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d108      	bne.n	800b3f0 <_tx_thread_sleep+0x8c>
 800b3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	f383 8810 	msr	PRIMASK, r3
}
 800b3e8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3ee:	e02b      	b.n	800b448 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b3f0:	4b1b      	ldr	r3, [pc, #108]	@ (800b460 <_tx_thread_sleep+0xfc>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d008      	beq.n	800b40a <_tx_thread_sleep+0xa6>
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f383 8810 	msr	PRIMASK, r3
}
 800b402:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800b404:	2313      	movs	r3, #19
 800b406:	637b      	str	r3, [r7, #52]	@ 0x34
 800b408:	e01e      	b.n	800b448 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800b40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40c:	2204      	movs	r2, #4
 800b40e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b412:	2201      	movs	r2, #1
 800b414:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b418:	2200      	movs	r2, #0
 800b41a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800b41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b424:	4b0e      	ldr	r3, [pc, #56]	@ (800b460 <_tx_thread_sleep+0xfc>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3301      	adds	r3, #1
 800b42a:	4a0d      	ldr	r2, [pc, #52]	@ (800b460 <_tx_thread_sleep+0xfc>)
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b430:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	f383 8810 	msr	PRIMASK, r3
}
 800b438:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b43a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b43c:	f000 f94c 	bl	800b6d8 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b446:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800b448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3738      	adds	r7, #56	@ 0x38
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	20010c64 	.word	0x20010c64
 800b458:	2000018c 	.word	0x2000018c
 800b45c:	20010dac 	.word	0x20010dac
 800b460:	20010cfc 	.word	0x20010cfc

0800b464 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800b464:	b480      	push	{r7}
 800b466:	b089      	sub	sp, #36	@ 0x24
 800b468:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b46a:	4b17      	ldr	r3, [pc, #92]	@ (800b4c8 <_tx_thread_system_preempt_check+0x64>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d121      	bne.n	800b4ba <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800b476:	4b15      	ldr	r3, [pc, #84]	@ (800b4cc <_tx_thread_system_preempt_check+0x68>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800b47c:	4b14      	ldr	r3, [pc, #80]	@ (800b4d0 <_tx_thread_system_preempt_check+0x6c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800b482:	69ba      	ldr	r2, [r7, #24]
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	429a      	cmp	r2, r3
 800b488:	d017      	beq.n	800b4ba <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b48a:	4b12      	ldr	r3, [pc, #72]	@ (800b4d4 <_tx_thread_system_preempt_check+0x70>)
 800b48c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b490:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b492:	f3ef 8305 	mrs	r3, IPSR
 800b496:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b498:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10c      	bne.n	800b4b8 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b49e:	f3ef 8310 	mrs	r3, PRIMASK
 800b4a2:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800b4a6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b4a8:	b662      	cpsie	i
}
 800b4aa:	bf00      	nop
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f383 8810 	msr	PRIMASK, r3
}
 800b4b6:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800b4b8:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800b4ba:	bf00      	nop
 800b4bc:	3724      	adds	r7, #36	@ 0x24
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	20010cfc 	.word	0x20010cfc
 800b4cc:	20010c64 	.word	0x20010c64
 800b4d0:	20010c68 	.word	0x20010c68
 800b4d4:	e000ed04 	.word	0xe000ed04

0800b4d8 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b096      	sub	sp, #88	@ 0x58
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4e0:	f3ef 8310 	mrs	r3, PRIMASK
 800b4e4:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800b4e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800b4e8:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b4ea:	b672      	cpsid	i
    return(int_posture);
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b4ee:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d005      	beq.n	800b504 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	334c      	adds	r3, #76	@ 0x4c
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 fcf1 	bl	800bee4 <_tx_timer_system_deactivate>
 800b502:	e002      	b.n	800b50a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b50a:	4b6c      	ldr	r3, [pc, #432]	@ (800b6bc <_tx_thread_system_resume+0x1e4>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	3b01      	subs	r3, #1
 800b510:	4a6a      	ldr	r2, [pc, #424]	@ (800b6bc <_tx_thread_system_resume+0x1e4>)
 800b512:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f040 8083 	bne.w	800b624 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b522:	2b00      	cmp	r3, #0
 800b524:	f000 8097 	beq.w	800b656 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d172      	bne.n	800b616 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53a:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800b53c:	4a60      	ldr	r2, [pc, #384]	@ (800b6c0 <_tx_thread_system_resume+0x1e8>)
 800b53e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b544:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800b546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d154      	bne.n	800b5f6 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800b54c:	495c      	ldr	r1, [pc, #368]	@ (800b6c0 <_tx_thread_system_resume+0x1e8>)
 800b54e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800b562:	2201      	movs	r2, #1
 800b564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b566:	fa02 f303 	lsl.w	r3, r2, r3
 800b56a:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800b56c:	4b55      	ldr	r3, [pc, #340]	@ (800b6c4 <_tx_thread_system_resume+0x1ec>)
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b572:	4313      	orrs	r3, r2
 800b574:	4a53      	ldr	r2, [pc, #332]	@ (800b6c4 <_tx_thread_system_resume+0x1ec>)
 800b576:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800b578:	4b53      	ldr	r3, [pc, #332]	@ (800b6c8 <_tx_thread_system_resume+0x1f0>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b57e:	429a      	cmp	r2, r3
 800b580:	d269      	bcs.n	800b656 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800b582:	4a51      	ldr	r2, [pc, #324]	@ (800b6c8 <_tx_thread_system_resume+0x1f0>)
 800b584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b586:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800b588:	4b50      	ldr	r3, [pc, #320]	@ (800b6cc <_tx_thread_system_resume+0x1f4>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800b58e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b590:	2b00      	cmp	r3, #0
 800b592:	d103      	bne.n	800b59c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800b594:	4a4d      	ldr	r2, [pc, #308]	@ (800b6cc <_tx_thread_system_resume+0x1f4>)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6013      	str	r3, [r2, #0]
 800b59a:	e05c      	b.n	800b656 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800b59c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b59e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d257      	bcs.n	800b656 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800b5a6:	4a49      	ldr	r2, [pc, #292]	@ (800b6cc <_tx_thread_system_resume+0x1f4>)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6013      	str	r3, [r2, #0]
 800b5ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b2:	f383 8810 	msr	PRIMASK, r3
}
 800b5b6:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b5b8:	4b40      	ldr	r3, [pc, #256]	@ (800b6bc <_tx_thread_system_resume+0x1e4>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800b5be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d174      	bne.n	800b6ae <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b5c4:	4b42      	ldr	r3, [pc, #264]	@ (800b6d0 <_tx_thread_system_resume+0x1f8>)
 800b5c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5ca:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b5cc:	f3ef 8305 	mrs	r3, IPSR
 800b5d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800b5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10c      	bne.n	800b5f2 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b5dc:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800b5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800b5e0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b5e2:	b662      	cpsie	i
}
 800b5e4:	bf00      	nop
 800b5e6:	6a3b      	ldr	r3, [r7, #32]
 800b5e8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	f383 8810 	msr	PRIMASK, r3
}
 800b5f0:	bf00      	nop
}
 800b5f2:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800b5f4:	e05b      	b.n	800b6ae <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800b5f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5fa:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800b5fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5fe:	687a      	ldr	r2, [r7, #4]
 800b600:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800b602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b60c:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b612:	621a      	str	r2, [r3, #32]
 800b614:	e01f      	b.n	800b656 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2203      	movs	r2, #3
 800b620:	631a      	str	r2, [r3, #48]	@ 0x30
 800b622:	e018      	b.n	800b656 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d014      	beq.n	800b656 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b630:	2b02      	cmp	r3, #2
 800b632:	d010      	beq.n	800b656 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d106      	bne.n	800b64a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	631a      	str	r2, [r3, #48]	@ 0x30
 800b648:	e005      	b.n	800b656 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2203      	movs	r2, #3
 800b654:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b656:	4b1f      	ldr	r3, [pc, #124]	@ (800b6d4 <_tx_thread_system_resume+0x1fc>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b65c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b65e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	f383 8810 	msr	PRIMASK, r3
}
 800b666:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b668:	4b18      	ldr	r3, [pc, #96]	@ (800b6cc <_tx_thread_system_resume+0x1f4>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b66e:	429a      	cmp	r2, r3
 800b670:	d020      	beq.n	800b6b4 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b672:	4b12      	ldr	r3, [pc, #72]	@ (800b6bc <_tx_thread_system_resume+0x1e4>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800b678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d11a      	bne.n	800b6b4 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b67e:	4b14      	ldr	r3, [pc, #80]	@ (800b6d0 <_tx_thread_system_resume+0x1f8>)
 800b680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b684:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b686:	f3ef 8305 	mrs	r3, IPSR
 800b68a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b68c:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10f      	bne.n	800b6b2 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b692:	f3ef 8310 	mrs	r3, PRIMASK
 800b696:	613b      	str	r3, [r7, #16]
    return(posture);
 800b698:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800b69a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b69c:	b662      	cpsie	i
}
 800b69e:	bf00      	nop
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f383 8810 	msr	PRIMASK, r3
}
 800b6aa:	bf00      	nop
}
 800b6ac:	e001      	b.n	800b6b2 <_tx_thread_system_resume+0x1da>
                                return;
 800b6ae:	bf00      	nop
 800b6b0:	e000      	b.n	800b6b4 <_tx_thread_system_resume+0x1dc>
 800b6b2:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800b6b4:	3758      	adds	r7, #88	@ 0x58
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20010cfc 	.word	0x20010cfc
 800b6c0:	20010c7c 	.word	0x20010c7c
 800b6c4:	20010c74 	.word	0x20010c74
 800b6c8:	20010c78 	.word	0x20010c78
 800b6cc:	20010c68 	.word	0x20010c68
 800b6d0:	e000ed04 	.word	0xe000ed04
 800b6d4:	20010c64 	.word	0x20010c64

0800b6d8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b09e      	sub	sp, #120	@ 0x78
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b6e0:	4b81      	ldr	r3, [pc, #516]	@ (800b8e8 <_tx_thread_system_suspend+0x210>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6e6:	f3ef 8310 	mrs	r3, PRIMASK
 800b6ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800b6ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800b6ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6f0:	b672      	cpsid	i
    return(int_posture);
 800b6f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800b6f4:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d112      	bne.n	800b724 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b702:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800b704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b706:	2b00      	cmp	r3, #0
 800b708:	d008      	beq.n	800b71c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800b70a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b710:	d004      	beq.n	800b71c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	334c      	adds	r3, #76	@ 0x4c
 800b716:	4618      	mov	r0, r3
 800b718:	f000 fb82 	bl	800be20 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	69db      	ldr	r3, [r3, #28]
 800b720:	4a72      	ldr	r2, [pc, #456]	@ (800b8ec <_tx_thread_system_suspend+0x214>)
 800b722:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b724:	4b72      	ldr	r3, [pc, #456]	@ (800b8f0 <_tx_thread_system_suspend+0x218>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3b01      	subs	r3, #1
 800b72a:	4a71      	ldr	r2, [pc, #452]	@ (800b8f0 <_tx_thread_system_suspend+0x218>)
 800b72c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b732:	2b01      	cmp	r3, #1
 800b734:	f040 80a6 	bne.w	800b884 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b742:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800b74a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d015      	beq.n	800b77e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b756:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800b758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b75a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b75c:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800b75e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b760:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b762:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800b764:	4a63      	ldr	r2, [pc, #396]	@ (800b8f4 <_tx_thread_system_suspend+0x21c>)
 800b766:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d157      	bne.n	800b822 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800b772:	4960      	ldr	r1, [pc, #384]	@ (800b8f4 <_tx_thread_system_suspend+0x21c>)
 800b774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b776:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b77c:	e051      	b.n	800b822 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800b77e:	4a5d      	ldr	r2, [pc, #372]	@ (800b8f4 <_tx_thread_system_suspend+0x21c>)
 800b780:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b782:	2100      	movs	r1, #0
 800b784:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800b788:	2201      	movs	r2, #1
 800b78a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b78c:	fa02 f303 	lsl.w	r3, r2, r3
 800b790:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800b792:	4b59      	ldr	r3, [pc, #356]	@ (800b8f8 <_tx_thread_system_suspend+0x220>)
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b798:	43db      	mvns	r3, r3
 800b79a:	4013      	ands	r3, r2
 800b79c:	4a56      	ldr	r2, [pc, #344]	@ (800b8f8 <_tx_thread_system_suspend+0x220>)
 800b79e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800b7a4:	4b54      	ldr	r3, [pc, #336]	@ (800b8f8 <_tx_thread_system_suspend+0x220>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800b7aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d12b      	bne.n	800b808 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b7b0:	4b52      	ldr	r3, [pc, #328]	@ (800b8fc <_tx_thread_system_suspend+0x224>)
 800b7b2:	2220      	movs	r2, #32
 800b7b4:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800b7b6:	4b52      	ldr	r3, [pc, #328]	@ (800b900 <_tx_thread_system_suspend+0x228>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	601a      	str	r2, [r3, #0]
 800b7bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7be:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7c2:	f383 8810 	msr	PRIMASK, r3
}
 800b7c6:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b7c8:	4b49      	ldr	r3, [pc, #292]	@ (800b8f0 <_tx_thread_system_suspend+0x218>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800b7ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f040 8081 	bne.w	800b8d8 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b7d6:	4b4b      	ldr	r3, [pc, #300]	@ (800b904 <_tx_thread_system_suspend+0x22c>)
 800b7d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7dc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b7de:	f3ef 8305 	mrs	r3, IPSR
 800b7e2:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800b7e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10c      	bne.n	800b804 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b7ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800b7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800b7f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b7f4:	b662      	cpsie	i
}
 800b7f6:	bf00      	nop
 800b7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7fa:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7fe:	f383 8810 	msr	PRIMASK, r3
}
 800b802:	bf00      	nop
}
 800b804:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800b806:	e067      	b.n	800b8d8 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800b808:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b80a:	fa93 f3a3 	rbit	r3, r3
 800b80e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b810:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b812:	fab3 f383 	clz	r3, r3
 800b816:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800b818:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b81a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b81c:	4413      	add	r3, r2
 800b81e:	4a37      	ldr	r2, [pc, #220]	@ (800b8fc <_tx_thread_system_suspend+0x224>)
 800b820:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800b822:	4b37      	ldr	r3, [pc, #220]	@ (800b900 <_tx_thread_system_suspend+0x228>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d12b      	bne.n	800b884 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b82c:	4b33      	ldr	r3, [pc, #204]	@ (800b8fc <_tx_thread_system_suspend+0x224>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a30      	ldr	r2, [pc, #192]	@ (800b8f4 <_tx_thread_system_suspend+0x21c>)
 800b832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b836:	4a32      	ldr	r2, [pc, #200]	@ (800b900 <_tx_thread_system_suspend+0x228>)
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b83c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b840:	f383 8810 	msr	PRIMASK, r3
}
 800b844:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b846:	4b2a      	ldr	r3, [pc, #168]	@ (800b8f0 <_tx_thread_system_suspend+0x218>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800b84c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d144      	bne.n	800b8dc <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b852:	4b2c      	ldr	r3, [pc, #176]	@ (800b904 <_tx_thread_system_suspend+0x22c>)
 800b854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b858:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b85a:	f3ef 8305 	mrs	r3, IPSR
 800b85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800b860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10c      	bne.n	800b880 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b866:	f3ef 8310 	mrs	r3, PRIMASK
 800b86a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800b86e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b870:	b662      	cpsie	i
}
 800b872:	bf00      	nop
 800b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b876:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b878:	6a3b      	ldr	r3, [r7, #32]
 800b87a:	f383 8810 	msr	PRIMASK, r3
}
 800b87e:	bf00      	nop
}
 800b880:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800b882:	e02b      	b.n	800b8dc <_tx_thread_system_suspend+0x204>
 800b884:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b886:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	f383 8810 	msr	PRIMASK, r3
}
 800b88e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b890:	4b1b      	ldr	r3, [pc, #108]	@ (800b900 <_tx_thread_system_suspend+0x228>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b896:	429a      	cmp	r2, r3
 800b898:	d022      	beq.n	800b8e0 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b89a:	4b15      	ldr	r3, [pc, #84]	@ (800b8f0 <_tx_thread_system_suspend+0x218>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800b8a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d11c      	bne.n	800b8e0 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b8a6:	4b17      	ldr	r3, [pc, #92]	@ (800b904 <_tx_thread_system_suspend+0x22c>)
 800b8a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ac:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b8ae:	f3ef 8305 	mrs	r3, IPSR
 800b8b2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b8b4:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10c      	bne.n	800b8d4 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b8ba:	f3ef 8310 	mrs	r3, PRIMASK
 800b8be:	617b      	str	r3, [r7, #20]
    return(posture);
 800b8c0:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800b8c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b8c4:	b662      	cpsie	i
}
 800b8c6:	bf00      	nop
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f383 8810 	msr	PRIMASK, r3
}
 800b8d2:	bf00      	nop
}
 800b8d4:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800b8d6:	e003      	b.n	800b8e0 <_tx_thread_system_suspend+0x208>
                return;
 800b8d8:	bf00      	nop
 800b8da:	e002      	b.n	800b8e2 <_tx_thread_system_suspend+0x20a>
            return;
 800b8dc:	bf00      	nop
 800b8de:	e000      	b.n	800b8e2 <_tx_thread_system_suspend+0x20a>
    return;
 800b8e0:	bf00      	nop
}
 800b8e2:	3778      	adds	r7, #120	@ 0x78
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	20010c64 	.word	0x20010c64
 800b8ec:	20011268 	.word	0x20011268
 800b8f0:	20010cfc 	.word	0x20010cfc
 800b8f4:	20010c7c 	.word	0x20010c7c
 800b8f8:	20010c74 	.word	0x20010c74
 800b8fc:	20010c78 	.word	0x20010c78
 800b900:	20010c68 	.word	0x20010c68
 800b904:	e000ed04 	.word	0xe000ed04

0800b908 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800b908:	b480      	push	{r7}
 800b90a:	b087      	sub	sp, #28
 800b90c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b90e:	4b21      	ldr	r3, [pc, #132]	@ (800b994 <_tx_thread_time_slice+0x8c>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b914:	f3ef 8310 	mrs	r3, PRIMASK
 800b918:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b91a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b91c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b91e:	b672      	cpsid	i
    return(int_posture);
 800b920:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800b922:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b924:	4b1c      	ldr	r3, [pc, #112]	@ (800b998 <_tx_thread_time_slice+0x90>)
 800b926:	2200      	movs	r2, #0
 800b928:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d024      	beq.n	800b97a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b934:	2b00      	cmp	r3, #0
 800b936:	d120      	bne.n	800b97a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	69da      	ldr	r2, [r3, #28]
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	4a15      	ldr	r2, [pc, #84]	@ (800b99c <_tx_thread_time_slice+0x94>)
 800b946:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	6a1b      	ldr	r3, [r3, #32]
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d013      	beq.n	800b97a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d10d      	bne.n	800b97a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b962:	697a      	ldr	r2, [r7, #20]
 800b964:	6a12      	ldr	r2, [r2, #32]
 800b966:	490e      	ldr	r1, [pc, #56]	@ (800b9a0 <_tx_thread_time_slice+0x98>)
 800b968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b96c:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a4 <_tx_thread_time_slice+0x9c>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a0b      	ldr	r2, [pc, #44]	@ (800b9a0 <_tx_thread_time_slice+0x98>)
 800b972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b976:	4a0c      	ldr	r2, [pc, #48]	@ (800b9a8 <_tx_thread_time_slice+0xa0>)
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f383 8810 	msr	PRIMASK, r3
}
 800b984:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800b986:	bf00      	nop
 800b988:	371c      	adds	r7, #28
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	20010c64 	.word	0x20010c64
 800b998:	20010d0c 	.word	0x20010d0c
 800b99c:	20011268 	.word	0x20011268
 800b9a0:	20010c7c 	.word	0x20010c7c
 800b9a4:	20010c78 	.word	0x20010c78
 800b9a8:	20010c68 	.word	0x20010c68

0800b9ac <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b08a      	sub	sp, #40	@ 0x28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b9bc:	617b      	str	r3, [r7, #20]
    return(posture);
 800b9be:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b9c0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9c2:	b672      	cpsid	i
    return(int_posture);
 800b9c4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800b9c6:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	d10e      	bne.n	800b9ee <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800b9d0:	4b13      	ldr	r3, [pc, #76]	@ (800ba20 <_tx_thread_timeout+0x74>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	4a12      	ldr	r2, [pc, #72]	@ (800ba20 <_tx_thread_timeout+0x74>)
 800b9d8:	6013      	str	r3, [r2, #0]
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f383 8810 	msr	PRIMASK, r3
}
 800b9e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b9e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b9e8:	f7ff fd76 	bl	800b4d8 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800b9ec:	e013      	b.n	800ba16 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b9f2:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b9fa:	61bb      	str	r3, [r7, #24]
 800b9fc:	6a3b      	ldr	r3, [r7, #32]
 800b9fe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	f383 8810 	msr	PRIMASK, r3
}
 800ba06:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	69b9      	ldr	r1, [r7, #24]
 800ba12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba14:	4798      	blx	r3
}
 800ba16:	bf00      	nop
 800ba18:	3728      	adds	r7, #40	@ 0x28
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	20010cfc 	.word	0x20010cfc

0800ba24 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b088      	sub	sp, #32
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba30:	617b      	str	r3, [r7, #20]
    return(posture);
 800ba32:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800ba34:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba36:	b672      	cpsid	i
    return(int_posture);
 800ba38:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800ba3a:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a1b      	ldr	r3, [r3, #32]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d002      	beq.n	800ba4a <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800ba44:	2317      	movs	r3, #23
 800ba46:	61fb      	str	r3, [r7, #28]
 800ba48:	e00d      	b.n	800ba66 <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d102      	bne.n	800ba58 <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 800ba52:	2317      	movs	r3, #23
 800ba54:	61fb      	str	r3, [r7, #28]
 800ba56:	e006      	b.n	800ba66 <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3308      	adds	r3, #8
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f000 f9df 	bl	800be20 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 800ba62:	2300      	movs	r3, #0
 800ba64:	61fb      	str	r3, [r7, #28]
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f383 8810 	msr	PRIMASK, r3
}
 800ba70:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800ba72:	69fb      	ldr	r3, [r7, #28]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3720      	adds	r7, #32
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <_tx_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b089      	sub	sp, #36	@ 0x24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba88:	f3ef 8310 	mrs	r3, PRIMASK
 800ba8c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ba8e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ba90:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba92:	b672      	cpsid	i
    return(int_posture);
 800ba94:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800ba96:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_TIMER_CHANGE_INSERT

    /* Determine if the timer is active.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head == TX_NULL)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6a1b      	ldr	r3, [r3, #32]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d105      	bne.n	800baac <_tx_timer_change+0x30>
    {

        /* Setup the new expiration fields.  */
        timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	609a      	str	r2, [r3, #8]
        timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	60da      	str	r2, [r3, #12]
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	f383 8810 	msr	PRIMASK, r3
}
 800bab6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3724      	adds	r7, #36	@ 0x24
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
	...

0800bac8 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08a      	sub	sp, #40	@ 0x28
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
 800bad4:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800bad6:	222c      	movs	r2, #44	@ 0x2c
 800bad8:	2100      	movs	r1, #0
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f000 ff52 	bl	800c984 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800baea:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800baf0:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bafe:	f3ef 8310 	mrs	r3, PRIMASK
 800bb02:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bb04:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bb06:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb08:	b672      	cpsid	i
    return(int_posture);
 800bb0a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800bb0c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	4a1c      	ldr	r2, [pc, #112]	@ (800bb84 <_tx_timer_create+0xbc>)
 800bb12:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800bb14:	4b1c      	ldr	r3, [pc, #112]	@ (800bb88 <_tx_timer_create+0xc0>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d109      	bne.n	800bb30 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800bb1c:	4a1b      	ldr	r2, [pc, #108]	@ (800bb8c <_tx_timer_create+0xc4>)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	625a      	str	r2, [r3, #36]	@ 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	629a      	str	r2, [r3, #40]	@ 0x28
 800bb2e:	e011      	b.n	800bb54 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800bb30:	4b16      	ldr	r3, [pc, #88]	@ (800bb8c <_tx_timer_create+0xc4>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800bb36:	6a3b      	ldr	r3, [r7, #32]
 800bb38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb3a:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	629a      	str	r2, [r3, #40]	@ 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	69fa      	ldr	r2, [r7, #28]
 800bb4c:	629a      	str	r2, [r3, #40]	@ 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6a3a      	ldr	r2, [r7, #32]
 800bb52:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800bb54:	4b0c      	ldr	r3, [pc, #48]	@ (800bb88 <_tx_timer_create+0xc0>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	4a0b      	ldr	r2, [pc, #44]	@ (800bb88 <_tx_timer_create+0xc0>)
 800bb5c:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d104      	bne.n	800bb6e <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3308      	adds	r3, #8
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 f959 	bl	800be20 <_tx_timer_system_activate>
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb70:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f383 8810 	msr	PRIMASK, r3
}
 800bb78:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3728      	adds	r7, #40	@ 0x28
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	4154494d 	.word	0x4154494d
 800bb88:	20010da4 	.word	0x20010da4
 800bb8c:	20010da0 	.word	0x20010da0

0800bb90 <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b08d      	sub	sp, #52	@ 0x34
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;


    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb9e:	f3ef 8310 	mrs	r3, PRIMASK
 800bba2:	613b      	str	r3, [r7, #16]
    return(posture);
 800bba4:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800bba6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bba8:	b672      	cpsid	i
    return(int_posture);
 800bbaa:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 800bbac:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 800bbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d07f      	beq.n	800bcba <_tx_timer_deactivate+0x12a>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 800bbbe:	4b45      	ldr	r3, [pc, #276]	@ (800bcd4 <_tx_timer_deactivate+0x144>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	69fa      	ldr	r2, [r7, #28]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d306      	bcc.n	800bbd6 <_tx_timer_deactivate+0x46>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800bbc8:	4b43      	ldr	r3, [pc, #268]	@ (800bcd8 <_tx_timer_deactivate+0x148>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	69fa      	ldr	r2, [r7, #28]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d201      	bcs.n	800bbd6 <_tx_timer_deactivate+0x46>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
        }

        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 800bbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d12e      	bne.n	800bc3a <_tx_timer_deactivate+0xaa>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 800bbdc:	4b3f      	ldr	r3, [pc, #252]	@ (800bcdc <_tx_timer_deactivate+0x14c>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	69fa      	ldr	r2, [r7, #28]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d307      	bcc.n	800bbf6 <_tx_timer_deactivate+0x66>
            {

                /* Calculate ticks left to expiration - just the difference between this
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 800bbe6:	4b3d      	ldr	r3, [pc, #244]	@ (800bcdc <_tx_timer_deactivate+0x14c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	69fa      	ldr	r2, [r7, #28]
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	109b      	asrs	r3, r3, #2
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbf4:	e010      	b.n	800bc18 <_tx_timer_deactivate+0x88>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 800bbf6:	4b37      	ldr	r3, [pc, #220]	@ (800bcd4 <_tx_timer_deactivate+0x144>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	69fa      	ldr	r2, [r7, #28]
 800bbfc:	1ad3      	subs	r3, r2, r3
 800bbfe:	109b      	asrs	r3, r3, #2
 800bc00:	62fb      	str	r3, [r7, #44]	@ 0x2c

                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 800bc02:	4b35      	ldr	r3, [pc, #212]	@ (800bcd8 <_tx_timer_deactivate+0x148>)
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	4b35      	ldr	r3, [pc, #212]	@ (800bcdc <_tx_timer_deactivate+0x14c>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	109b      	asrs	r3, r3, #2
 800bc0e:	461a      	mov	r2, r3
 800bc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc12:	4413      	add	r3, r2
 800bc14:	3301      	adds	r3, #1
 800bc16:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800bc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b20      	cmp	r3, #32
 800bc1e:	d908      	bls.n	800bc32 <_tx_timer_deactivate+0xa2>
            {

                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 800bc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc26:	4413      	add	r3, r2
 800bc28:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2e:	601a      	str	r2, [r3, #0]
 800bc30:	e01c      	b.n	800bc6c <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 800bc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc36:	601a      	str	r2, [r3, #0]
 800bc38:	e018      	b.n	800bc6c <_tx_timer_deactivate+0xdc>
        }
        else
        {

            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 800bc3a:	4b29      	ldr	r3, [pc, #164]	@ (800bce0 <_tx_timer_deactivate+0x150>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d00f      	beq.n	800bc64 <_tx_timer_deactivate+0xd4>
            {

                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800bc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b20      	cmp	r3, #32
 800bc4a:	d906      	bls.n	800bc5a <_tx_timer_deactivate+0xca>
                {

                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =
 800bc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	e008      	b.n	800bc6c <_tx_timer_deactivate+0xdc>
                }
                else
                {

                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800bc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5c:	685a      	ldr	r2, [r3, #4]
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc60:	601a      	str	r2, [r3, #0]
 800bc62:	e003      	b.n	800bc6c <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800bc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc66:	685a      	ldr	r2, [r3, #4]
 800bc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 800bc72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d108      	bne.n	800bc8c <_tx_timer_deactivate+0xfc>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d117      	bne.n	800bcb4 <_tx_timer_deactivate+0x124>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	2200      	movs	r2, #0
 800bc88:	601a      	str	r2, [r3, #0]
 800bc8a:	e013      	b.n	800bcb4 <_tx_timer_deactivate+0x124>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8e:	695b      	ldr	r3, [r3, #20]
 800bc90:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	697a      	ldr	r2, [r7, #20]
 800bc96:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	69ba      	ldr	r2, [r7, #24]
 800bc9c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d105      	bne.n	800bcb4 <_tx_timer_deactivate+0x124>
            {

                /* Update the next timer in the list with the list head
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	69fa      	ldr	r2, [r7, #28]
 800bcac:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	69ba      	ldr	r2, [r7, #24]
 800bcb2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	619a      	str	r2, [r3, #24]
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	f383 8810 	msr	PRIMASK, r3
}
 800bcc4:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3734      	adds	r7, #52	@ 0x34
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr
 800bcd4:	20010d90 	.word	0x20010d90
 800bcd8:	20010d94 	.word	0x20010d94
 800bcdc:	20010d98 	.word	0x20010d98
 800bce0:	20010da8 	.word	0x20010da8

0800bce4 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcea:	f3ef 8310 	mrs	r3, PRIMASK
 800bcee:	607b      	str	r3, [r7, #4]
    return(posture);
 800bcf0:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800bcf2:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcf4:	b672      	cpsid	i
    return(int_posture);
 800bcf6:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800bcf8:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800bcfa:	4b09      	ldr	r3, [pc, #36]	@ (800bd20 <_tx_timer_expiration_process+0x3c>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	4a07      	ldr	r2, [pc, #28]	@ (800bd20 <_tx_timer_expiration_process+0x3c>)
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	f383 8810 	msr	PRIMASK, r3
}
 800bd0e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800bd10:	4804      	ldr	r0, [pc, #16]	@ (800bd24 <_tx_timer_expiration_process+0x40>)
 800bd12:	f7ff fbe1 	bl	800b4d8 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800bd16:	bf00      	nop
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	20010cfc 	.word	0x20010cfc
 800bd24:	20010dac 	.word	0x20010dac

0800bd28 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800bd28:	b590      	push	{r4, r7, lr}
 800bd2a:	b089      	sub	sp, #36	@ 0x24
 800bd2c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800bd2e:	4b28      	ldr	r3, [pc, #160]	@ (800bdd0 <_tx_timer_initialize+0xa8>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800bd34:	4b27      	ldr	r3, [pc, #156]	@ (800bdd4 <_tx_timer_initialize+0xac>)
 800bd36:	2200      	movs	r2, #0
 800bd38:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800bd3a:	4b27      	ldr	r3, [pc, #156]	@ (800bdd8 <_tx_timer_initialize+0xb0>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800bd40:	4b26      	ldr	r3, [pc, #152]	@ (800bddc <_tx_timer_initialize+0xb4>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800bd46:	4b26      	ldr	r3, [pc, #152]	@ (800bde0 <_tx_timer_initialize+0xb8>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800bd4c:	2280      	movs	r2, #128	@ 0x80
 800bd4e:	2100      	movs	r1, #0
 800bd50:	4824      	ldr	r0, [pc, #144]	@ (800bde4 <_tx_timer_initialize+0xbc>)
 800bd52:	f000 fe17 	bl	800c984 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800bd56:	4b24      	ldr	r3, [pc, #144]	@ (800bde8 <_tx_timer_initialize+0xc0>)
 800bd58:	4a22      	ldr	r2, [pc, #136]	@ (800bde4 <_tx_timer_initialize+0xbc>)
 800bd5a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800bd5c:	4b23      	ldr	r3, [pc, #140]	@ (800bdec <_tx_timer_initialize+0xc4>)
 800bd5e:	4a21      	ldr	r2, [pc, #132]	@ (800bde4 <_tx_timer_initialize+0xbc>)
 800bd60:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800bd62:	4b23      	ldr	r3, [pc, #140]	@ (800bdf0 <_tx_timer_initialize+0xc8>)
 800bd64:	4a23      	ldr	r2, [pc, #140]	@ (800bdf4 <_tx_timer_initialize+0xcc>)
 800bd66:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800bd68:	4b21      	ldr	r3, [pc, #132]	@ (800bdf0 <_tx_timer_initialize+0xc8>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	4a20      	ldr	r2, [pc, #128]	@ (800bdf0 <_tx_timer_initialize+0xc8>)
 800bd70:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800bd72:	4b21      	ldr	r3, [pc, #132]	@ (800bdf8 <_tx_timer_initialize+0xd0>)
 800bd74:	4a21      	ldr	r2, [pc, #132]	@ (800bdfc <_tx_timer_initialize+0xd4>)
 800bd76:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800bd78:	4b21      	ldr	r3, [pc, #132]	@ (800be00 <_tx_timer_initialize+0xd8>)
 800bd7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bd7e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800bd80:	4b20      	ldr	r3, [pc, #128]	@ (800be04 <_tx_timer_initialize+0xdc>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800bd86:	4b1c      	ldr	r3, [pc, #112]	@ (800bdf8 <_tx_timer_initialize+0xd0>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a1d      	ldr	r2, [pc, #116]	@ (800be00 <_tx_timer_initialize+0xd8>)
 800bd8c:	6812      	ldr	r2, [r2, #0]
 800bd8e:	491d      	ldr	r1, [pc, #116]	@ (800be04 <_tx_timer_initialize+0xdc>)
 800bd90:	6809      	ldr	r1, [r1, #0]
 800bd92:	481c      	ldr	r0, [pc, #112]	@ (800be04 <_tx_timer_initialize+0xdc>)
 800bd94:	6800      	ldr	r0, [r0, #0]
 800bd96:	2400      	movs	r4, #0
 800bd98:	9405      	str	r4, [sp, #20]
 800bd9a:	2400      	movs	r4, #0
 800bd9c:	9404      	str	r4, [sp, #16]
 800bd9e:	9003      	str	r0, [sp, #12]
 800bda0:	9102      	str	r1, [sp, #8]
 800bda2:	9201      	str	r2, [sp, #4]
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	4b18      	ldr	r3, [pc, #96]	@ (800be08 <_tx_timer_initialize+0xe0>)
 800bda8:	4a18      	ldr	r2, [pc, #96]	@ (800be0c <_tx_timer_initialize+0xe4>)
 800bdaa:	4919      	ldr	r1, [pc, #100]	@ (800be10 <_tx_timer_initialize+0xe8>)
 800bdac:	4819      	ldr	r0, [pc, #100]	@ (800be14 <_tx_timer_initialize+0xec>)
 800bdae:	f7ff f95b 	bl	800b068 <_tx_thread_create>
 800bdb2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1e5      	bne.n	800bd86 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800bdba:	4b17      	ldr	r3, [pc, #92]	@ (800be18 <_tx_timer_initialize+0xf0>)
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800bdc0:	4b16      	ldr	r3, [pc, #88]	@ (800be1c <_tx_timer_initialize+0xf4>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800bdc6:	bf00      	nop
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd90      	pop	{r4, r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	20010d08 	.word	0x20010d08
 800bdd4:	20011268 	.word	0x20011268
 800bdd8:	20010d0c 	.word	0x20010d0c
 800bddc:	20010d9c 	.word	0x20010d9c
 800bde0:	20010da8 	.word	0x20010da8
 800bde4:	20010d10 	.word	0x20010d10
 800bde8:	20010d90 	.word	0x20010d90
 800bdec:	20010d98 	.word	0x20010d98
 800bdf0:	20010d94 	.word	0x20010d94
 800bdf4:	20010d8c 	.word	0x20010d8c
 800bdf8:	20010e5c 	.word	0x20010e5c
 800bdfc:	20010e68 	.word	0x20010e68
 800be00:	20010e60 	.word	0x20010e60
 800be04:	20010e64 	.word	0x20010e64
 800be08:	4154494d 	.word	0x4154494d
 800be0c:	0800bf55 	.word	0x0800bf55
 800be10:	0800cb50 	.word	0x0800cb50
 800be14:	20010dac 	.word	0x20010dac
 800be18:	20010da0 	.word	0x20010da0
 800be1c:	20010da4 	.word	0x20010da4

0800be20 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800be20:	b480      	push	{r7}
 800be22:	b089      	sub	sp, #36	@ 0x24
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d04a      	beq.n	800beca <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be3a:	d046      	beq.n	800beca <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	699b      	ldr	r3, [r3, #24]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d142      	bne.n	800beca <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	2b20      	cmp	r3, #32
 800be48:	d902      	bls.n	800be50 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800be4a:	231f      	movs	r3, #31
 800be4c:	61bb      	str	r3, [r7, #24]
 800be4e:	e002      	b.n	800be56 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	3b01      	subs	r3, #1
 800be54:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800be56:	4b20      	ldr	r3, [pc, #128]	@ (800bed8 <_tx_timer_system_activate+0xb8>)
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4413      	add	r3, r2
 800be60:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800be62:	4b1e      	ldr	r3, [pc, #120]	@ (800bedc <_tx_timer_system_activate+0xbc>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	69fa      	ldr	r2, [r7, #28]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d30b      	bcc.n	800be84 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800be6c:	4b1b      	ldr	r3, [pc, #108]	@ (800bedc <_tx_timer_system_activate+0xbc>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	69fa      	ldr	r2, [r7, #28]
 800be72:	1ad3      	subs	r3, r2, r3
 800be74:	109b      	asrs	r3, r3, #2
 800be76:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800be78:	4b19      	ldr	r3, [pc, #100]	@ (800bee0 <_tx_timer_system_activate+0xc0>)
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d109      	bne.n	800bea0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	601a      	str	r2, [r3, #0]
 800be9e:	e011      	b.n	800bec4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	69fa      	ldr	r2, [r7, #28]
 800bec8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800beca:	bf00      	nop
 800becc:	3724      	adds	r7, #36	@ 0x24
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop
 800bed8:	20010d98 	.word	0x20010d98
 800bedc:	20010d94 	.word	0x20010d94
 800bee0:	20010d90 	.word	0x20010d90

0800bee4 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b087      	sub	sp, #28
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d026      	beq.n	800bf46 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d108      	bne.n	800bf18 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d117      	bne.n	800bf40 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	2200      	movs	r2, #0
 800bf14:	601a      	str	r2, [r3, #0]
 800bf16:	e013      	b.n	800bf40 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	695b      	ldr	r3, [r3, #20]
 800bf1c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d105      	bne.n	800bf40 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	693a      	ldr	r2, [r7, #16]
 800bf3e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	619a      	str	r2, [r3, #24]
    }
}
 800bf46:	bf00      	nop
 800bf48:	371c      	adds	r7, #28
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr
	...

0800bf54 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b098      	sub	sp, #96	@ 0x60
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a73      	ldr	r2, [pc, #460]	@ (800c130 <_tx_timer_thread_entry+0x1dc>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	f040 80de 	bne.w	800c126 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf6a:	f3ef 8310 	mrs	r3, PRIMASK
 800bf6e:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800bf70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800bf72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800bf74:	b672      	cpsid	i
    return(int_posture);
 800bf76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800bf78:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800bf7a:	4b6e      	ldr	r3, [pc, #440]	@ (800c134 <_tx_timer_thread_entry+0x1e0>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d003      	beq.n	800bf90 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f107 020c 	add.w	r2, r7, #12
 800bf8e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800bf90:	4b68      	ldr	r3, [pc, #416]	@ (800c134 <_tx_timer_thread_entry+0x1e0>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2200      	movs	r2, #0
 800bf96:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800bf98:	4b66      	ldr	r3, [pc, #408]	@ (800c134 <_tx_timer_thread_entry+0x1e0>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	3304      	adds	r3, #4
 800bf9e:	4a65      	ldr	r2, [pc, #404]	@ (800c134 <_tx_timer_thread_entry+0x1e0>)
 800bfa0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800bfa2:	4b64      	ldr	r3, [pc, #400]	@ (800c134 <_tx_timer_thread_entry+0x1e0>)
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	4b64      	ldr	r3, [pc, #400]	@ (800c138 <_tx_timer_thread_entry+0x1e4>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d103      	bne.n	800bfb6 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800bfae:	4b63      	ldr	r3, [pc, #396]	@ (800c13c <_tx_timer_thread_entry+0x1e8>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a60      	ldr	r2, [pc, #384]	@ (800c134 <_tx_timer_thread_entry+0x1e0>)
 800bfb4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800bfb6:	4b62      	ldr	r3, [pc, #392]	@ (800c140 <_tx_timer_thread_entry+0x1ec>)
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfbe:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc2:	f383 8810 	msr	PRIMASK, r3
}
 800bfc6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bfc8:	f3ef 8310 	mrs	r3, PRIMASK
 800bfcc:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800bfce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800bfd0:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800bfd2:	b672      	cpsid	i
    return(int_posture);
 800bfd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800bfd6:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800bfd8:	e07f      	b.n	800c0da <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800bfe8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bfea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d102      	bne.n	800bff6 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800bff0:	2300      	movs	r3, #0
 800bff2:	60fb      	str	r3, [r7, #12]
 800bff4:	e00e      	b.n	800c014 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800bff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800bffc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c000:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c004:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c006:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800c008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c00a:	f107 020c 	add.w	r2, r7, #12
 800c00e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800c010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c012:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b20      	cmp	r3, #32
 800c01a:	d911      	bls.n	800c040 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800c01c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800c024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c026:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800c028:	2300      	movs	r3, #0
 800c02a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c02c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c02e:	f107 0208 	add.w	r2, r7, #8
 800c032:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800c034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c036:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c038:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800c03a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c03c:	60bb      	str	r3, [r7, #8]
 800c03e:	e01a      	b.n	800c076 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800c040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800c046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800c04c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c052:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800c054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d009      	beq.n	800c070 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c05c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c05e:	f107 0208 	add.w	r2, r7, #8
 800c062:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800c064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c066:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c068:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800c06a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c06c:	60bb      	str	r3, [r7, #8]
 800c06e:	e002      	b.n	800c076 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800c070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c072:	2200      	movs	r2, #0
 800c074:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800c076:	4a33      	ldr	r2, [pc, #204]	@ (800c144 <_tx_timer_thread_entry+0x1f0>)
 800c078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c07a:	6013      	str	r3, [r2, #0]
 800c07c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c082:	f383 8810 	msr	PRIMASK, r3
}
 800c086:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800c088:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d002      	beq.n	800c094 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800c08e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c090:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c092:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c094:	f3ef 8310 	mrs	r3, PRIMASK
 800c098:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800c09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800c09c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c09e:	b672      	cpsid	i
    return(int_posture);
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c0a2:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800c0a4:	4b27      	ldr	r3, [pc, #156]	@ (800c144 <_tx_timer_thread_entry+0x1f0>)
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d105      	bne.n	800c0be <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800c0b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800c0b8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800c0ba:	f7ff feb1 	bl	800be20 <_tx_timer_system_activate>
 800c0be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0c0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	f383 8810 	msr	PRIMASK, r3
}
 800c0c8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c0ca:	f3ef 8310 	mrs	r3, PRIMASK
 800c0ce:	623b      	str	r3, [r7, #32]
    return(posture);
 800c0d0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c0d2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c0d4:	b672      	cpsid	i
    return(int_posture);
 800c0d6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c0d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f47f af7c 	bne.w	800bfda <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800c0e2:	4b17      	ldr	r3, [pc, #92]	@ (800c140 <_tx_timer_thread_entry+0x1ec>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d116      	bne.n	800c118 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800c0ea:	4b17      	ldr	r3, [pc, #92]	@ (800c148 <_tx_timer_thread_entry+0x1f4>)
 800c0ec:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c0ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0f0:	2203      	movs	r2, #3
 800c0f2:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c0f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800c0fa:	4b14      	ldr	r3, [pc, #80]	@ (800c14c <_tx_timer_thread_entry+0x1f8>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	3301      	adds	r3, #1
 800c100:	4a12      	ldr	r2, [pc, #72]	@ (800c14c <_tx_timer_thread_entry+0x1f8>)
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c106:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	f383 8810 	msr	PRIMASK, r3
}
 800c10e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800c110:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c112:	f7ff fae1 	bl	800b6d8 <_tx_thread_system_suspend>
 800c116:	e728      	b.n	800bf6a <_tx_timer_thread_entry+0x16>
 800c118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c11a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	f383 8810 	msr	PRIMASK, r3
}
 800c122:	bf00      	nop
            TX_DISABLE
 800c124:	e721      	b.n	800bf6a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800c126:	bf00      	nop
 800c128:	3760      	adds	r7, #96	@ 0x60
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	4154494d 	.word	0x4154494d
 800c134:	20010d98 	.word	0x20010d98
 800c138:	20010d94 	.word	0x20010d94
 800c13c:	20010d90 	.word	0x20010d90
 800c140:	20010d9c 	.word	0x20010d9c
 800c144:	20010da8 	.word	0x20010da8
 800c148:	20010dac 	.word	0x20010dac
 800c14c:	20010cfc 	.word	0x20010cfc

0800c150 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b08a      	sub	sp, #40	@ 0x28
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
 800c15c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c15e:	2300      	movs	r3, #0
 800c160:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d102      	bne.n	800c16e <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c168:	2302      	movs	r3, #2
 800c16a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c16c:	e029      	b.n	800c1c2 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a2d      	ldr	r2, [pc, #180]	@ (800c228 <_txe_byte_allocate+0xd8>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d002      	beq.n	800c17e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c178:	2302      	movs	r3, #2
 800c17a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c17c:	e021      	b.n	800c1c2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d102      	bne.n	800c18a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800c184:	2303      	movs	r3, #3
 800c186:	627b      	str	r3, [r7, #36]	@ 0x24
 800c188:	e01b      	b.n	800c1c2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d102      	bne.n	800c196 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800c190:	2305      	movs	r3, #5
 800c192:	627b      	str	r3, [r7, #36]	@ 0x24
 800c194:	e015      	b.n	800c1c2 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	69db      	ldr	r3, [r3, #28]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d902      	bls.n	800c1a6 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800c1a0:	2305      	movs	r3, #5
 800c1a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1a4:	e00d      	b.n	800c1c2 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00a      	beq.n	800c1c2 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1ac:	f3ef 8305 	mrs	r3, IPSR
 800c1b0:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800c1b2:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c1b4:	4b1d      	ldr	r3, [pc, #116]	@ (800c22c <_txe_byte_allocate+0xdc>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d001      	beq.n	800c1c2 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c1be:	2304      	movs	r3, #4
 800c1c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d108      	bne.n	800c1da <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c1c8:	4b19      	ldr	r3, [pc, #100]	@ (800c230 <_txe_byte_allocate+0xe0>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800c1ce:	6a3b      	ldr	r3, [r7, #32]
 800c1d0:	4a18      	ldr	r2, [pc, #96]	@ (800c234 <_txe_byte_allocate+0xe4>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d101      	bne.n	800c1da <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c1d6:	2313      	movs	r3, #19
 800c1d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800c1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d114      	bne.n	800c20a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1e0:	f3ef 8305 	mrs	r3, IPSR
 800c1e4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c1e6:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c1e8:	4b10      	ldr	r3, [pc, #64]	@ (800c22c <_txe_byte_allocate+0xdc>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00b      	beq.n	800c20a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1f2:	f3ef 8305 	mrs	r3, IPSR
 800c1f6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c1f8:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c1fa:	4b0c      	ldr	r3, [pc, #48]	@ (800c22c <_txe_byte_allocate+0xdc>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4313      	orrs	r3, r2
 800c200:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c204:	d201      	bcs.n	800c20a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c206:	2313      	movs	r3, #19
 800c208:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d106      	bne.n	800c21e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	68b9      	ldr	r1, [r7, #8]
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f7fe fa1a 	bl	800a650 <_tx_byte_allocate>
 800c21c:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800c21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c220:	4618      	mov	r0, r3
 800c222:	3728      	adds	r7, #40	@ 0x28
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	42595445 	.word	0x42595445
 800c22c:	2000018c 	.word	0x2000018c
 800c230:	20010c64 	.word	0x20010c64
 800c234:	20010dac 	.word	0x20010dac

0800c238 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b092      	sub	sp, #72	@ 0x48
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c246:	2300      	movs	r3, #0
 800c248:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d102      	bne.n	800c256 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c250:	2302      	movs	r3, #2
 800c252:	647b      	str	r3, [r7, #68]	@ 0x44
 800c254:	e075      	b.n	800c342 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800c256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c258:	2b34      	cmp	r3, #52	@ 0x34
 800c25a:	d002      	beq.n	800c262 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c25c:	2302      	movs	r3, #2
 800c25e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c260:	e06f      	b.n	800c342 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c262:	f3ef 8310 	mrs	r3, PRIMASK
 800c266:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c26a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c26c:	b672      	cpsid	i
    return(int_posture);
 800c26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c270:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c272:	4b3b      	ldr	r3, [pc, #236]	@ (800c360 <_txe_byte_pool_create+0x128>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3301      	adds	r3, #1
 800c278:	4a39      	ldr	r2, [pc, #228]	@ (800c360 <_txe_byte_pool_create+0x128>)
 800c27a:	6013      	str	r3, [r2, #0]
 800c27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c27e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c282:	f383 8810 	msr	PRIMASK, r3
}
 800c286:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800c288:	4b36      	ldr	r3, [pc, #216]	@ (800c364 <_txe_byte_pool_create+0x12c>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800c28e:	2300      	movs	r3, #0
 800c290:	643b      	str	r3, [r7, #64]	@ 0x40
 800c292:	e009      	b.n	800c2a8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c298:	429a      	cmp	r2, r3
 800c29a:	d00b      	beq.n	800c2b4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800c29c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c29e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800c2a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2a8:	4b2f      	ldr	r3, [pc, #188]	@ (800c368 <_txe_byte_pool_create+0x130>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d3f0      	bcc.n	800c294 <_txe_byte_pool_create+0x5c>
 800c2b2:	e000      	b.n	800c2b6 <_txe_byte_pool_create+0x7e>
                break;
 800c2b4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2b6:	f3ef 8310 	mrs	r3, PRIMASK
 800c2ba:	623b      	str	r3, [r7, #32]
    return(posture);
 800c2bc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c2be:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c2c0:	b672      	cpsid	i
    return(int_posture);
 800c2c2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c2c4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c2c6:	4b26      	ldr	r3, [pc, #152]	@ (800c360 <_txe_byte_pool_create+0x128>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	4a24      	ldr	r2, [pc, #144]	@ (800c360 <_txe_byte_pool_create+0x128>)
 800c2ce:	6013      	str	r3, [r2, #0]
 800c2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d6:	f383 8810 	msr	PRIMASK, r3
}
 800c2da:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c2dc:	f7ff f8c2 	bl	800b464 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d102      	bne.n	800c2ee <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2ec:	e029      	b.n	800c342 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d102      	bne.n	800c2fa <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2f8:	e023      	b.n	800c342 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	2b63      	cmp	r3, #99	@ 0x63
 800c2fe:	d802      	bhi.n	800c306 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800c300:	2305      	movs	r3, #5
 800c302:	647b      	str	r3, [r7, #68]	@ 0x44
 800c304:	e01d      	b.n	800c342 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c306:	4b19      	ldr	r3, [pc, #100]	@ (800c36c <_txe_byte_pool_create+0x134>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c30e:	4a18      	ldr	r2, [pc, #96]	@ (800c370 <_txe_byte_pool_create+0x138>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d101      	bne.n	800c318 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c314:	2313      	movs	r3, #19
 800c316:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c318:	f3ef 8305 	mrs	r3, IPSR
 800c31c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c31e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c320:	4b14      	ldr	r3, [pc, #80]	@ (800c374 <_txe_byte_pool_create+0x13c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4313      	orrs	r3, r2
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00b      	beq.n	800c342 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c32a:	f3ef 8305 	mrs	r3, IPSR
 800c32e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c330:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c332:	4b10      	ldr	r3, [pc, #64]	@ (800c374 <_txe_byte_pool_create+0x13c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4313      	orrs	r3, r2
 800c338:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c33c:	d201      	bcs.n	800c342 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c33e:	2313      	movs	r3, #19
 800c340:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c344:	2b00      	cmp	r3, #0
 800c346:	d106      	bne.n	800c356 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	68b9      	ldr	r1, [r7, #8]
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f7fe fac0 	bl	800a8d4 <_tx_byte_pool_create>
 800c354:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800c356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3748      	adds	r7, #72	@ 0x48
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20010cfc 	.word	0x20010cfc
 800c364:	20010c54 	.word	0x20010c54
 800c368:	20010c58 	.word	0x20010c58
 800c36c:	20010c64 	.word	0x20010c64
 800c370:	20010dac 	.word	0x20010dac
 800c374:	2000018c 	.word	0x2000018c

0800c378 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b092      	sub	sp, #72	@ 0x48
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c386:	2300      	movs	r3, #0
 800c388:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d102      	bne.n	800c396 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c390:	230c      	movs	r3, #12
 800c392:	647b      	str	r3, [r7, #68]	@ 0x44
 800c394:	e054      	b.n	800c440 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b1c      	cmp	r3, #28
 800c39a:	d002      	beq.n	800c3a2 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c39c:	230c      	movs	r3, #12
 800c39e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3a0:	e04e      	b.n	800c440 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c3a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c3a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c3aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c3ac:	b672      	cpsid	i
    return(int_posture);
 800c3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c3b0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c3b2:	4b36      	ldr	r3, [pc, #216]	@ (800c48c <_txe_semaphore_create+0x114>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	4a34      	ldr	r2, [pc, #208]	@ (800c48c <_txe_semaphore_create+0x114>)
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3be:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c2:	f383 8810 	msr	PRIMASK, r3
}
 800c3c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800c3c8:	4b31      	ldr	r3, [pc, #196]	@ (800c490 <_txe_semaphore_create+0x118>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3d2:	e009      	b.n	800c3e8 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d00b      	beq.n	800c3f4 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800c3dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3de:	695b      	ldr	r3, [r3, #20]
 800c3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800c3e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3e8:	4b2a      	ldr	r3, [pc, #168]	@ (800c494 <_txe_semaphore_create+0x11c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d3f0      	bcc.n	800c3d4 <_txe_semaphore_create+0x5c>
 800c3f2:	e000      	b.n	800c3f6 <_txe_semaphore_create+0x7e>
                break;
 800c3f4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c3f6:	f3ef 8310 	mrs	r3, PRIMASK
 800c3fa:	623b      	str	r3, [r7, #32]
    return(posture);
 800c3fc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c3fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c400:	b672      	cpsid	i
    return(int_posture);
 800c402:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c404:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c406:	4b21      	ldr	r3, [pc, #132]	@ (800c48c <_txe_semaphore_create+0x114>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	4a1f      	ldr	r2, [pc, #124]	@ (800c48c <_txe_semaphore_create+0x114>)
 800c40e:	6013      	str	r3, [r2, #0]
 800c410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c412:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c416:	f383 8810 	msr	PRIMASK, r3
}
 800c41a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c41c:	f7ff f822 	bl	800b464 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c424:	429a      	cmp	r2, r3
 800c426:	d102      	bne.n	800c42e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800c428:	230c      	movs	r3, #12
 800c42a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c42c:	e008      	b.n	800c440 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c42e:	4b1a      	ldr	r3, [pc, #104]	@ (800c498 <_txe_semaphore_create+0x120>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c436:	4a19      	ldr	r2, [pc, #100]	@ (800c49c <_txe_semaphore_create+0x124>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d101      	bne.n	800c440 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c43c:	2313      	movs	r3, #19
 800c43e:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c442:	2b00      	cmp	r3, #0
 800c444:	d114      	bne.n	800c470 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c446:	f3ef 8305 	mrs	r3, IPSR
 800c44a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c44c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c44e:	4b14      	ldr	r3, [pc, #80]	@ (800c4a0 <_txe_semaphore_create+0x128>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4313      	orrs	r3, r2
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00b      	beq.n	800c470 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c458:	f3ef 8305 	mrs	r3, IPSR
 800c45c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c45e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c460:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a0 <_txe_semaphore_create+0x128>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4313      	orrs	r3, r2
 800c466:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c46a:	d201      	bcs.n	800c470 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c46c:	2313      	movs	r3, #19
 800c46e:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c472:	2b00      	cmp	r3, #0
 800c474:	d105      	bne.n	800c482 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	68b9      	ldr	r1, [r7, #8]
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f7fe fcb8 	bl	800adf0 <_tx_semaphore_create>
 800c480:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800c482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800c484:	4618      	mov	r0, r3
 800c486:	3748      	adds	r7, #72	@ 0x48
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	20010cfc 	.word	0x20010cfc
 800c490:	20010c2c 	.word	0x20010c2c
 800c494:	20010c30 	.word	0x20010c30
 800c498:	20010c64 	.word	0x20010c64
 800c49c:	20010dac 	.word	0x20010dac
 800c4a0:	2000018c 	.word	0x2000018c

0800c4a4 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d102      	bne.n	800c4be <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c4b8:	230c      	movs	r3, #12
 800c4ba:	617b      	str	r3, [r7, #20]
 800c4bc:	e01f      	b.n	800c4fe <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a15      	ldr	r2, [pc, #84]	@ (800c518 <_txe_semaphore_get+0x74>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d002      	beq.n	800c4ce <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c4c8:	230c      	movs	r3, #12
 800c4ca:	617b      	str	r3, [r7, #20]
 800c4cc:	e017      	b.n	800c4fe <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d014      	beq.n	800c4fe <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c4d4:	f3ef 8305 	mrs	r3, IPSR
 800c4d8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c4da:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c4dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c51c <_txe_semaphore_get+0x78>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d002      	beq.n	800c4ec <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c4e6:	2304      	movs	r3, #4
 800c4e8:	617b      	str	r3, [r7, #20]
 800c4ea:	e008      	b.n	800c4fe <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800c4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800c520 <_txe_semaphore_get+0x7c>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	4a0b      	ldr	r2, [pc, #44]	@ (800c524 <_txe_semaphore_get+0x80>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d101      	bne.n	800c4fe <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800c4fa:	2304      	movs	r3, #4
 800c4fc:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d104      	bne.n	800c50e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f7fe fcc4 	bl	800ae94 <_tx_semaphore_get>
 800c50c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c50e:	697b      	ldr	r3, [r7, #20]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3718      	adds	r7, #24
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	53454d41 	.word	0x53454d41
 800c51c:	2000018c 	.word	0x2000018c
 800c520:	20010c64 	.word	0x20010c64
 800c524:	20010dac 	.word	0x20010dac

0800c528 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d102      	bne.n	800c53c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c536:	230c      	movs	r3, #12
 800c538:	60fb      	str	r3, [r7, #12]
 800c53a:	e00b      	b.n	800c554 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a07      	ldr	r2, [pc, #28]	@ (800c560 <_txe_semaphore_put+0x38>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d002      	beq.n	800c54c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c546:	230c      	movs	r3, #12
 800c548:	60fb      	str	r3, [r7, #12]
 800c54a:	e003      	b.n	800c554 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f7fe fd33 	bl	800afb8 <_tx_semaphore_put>
 800c552:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c554:	68fb      	ldr	r3, [r7, #12]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	53454d41 	.word	0x53454d41

0800c564 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b09a      	sub	sp, #104	@ 0x68
 800c568:	af06      	add	r7, sp, #24
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
 800c570:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c572:	2300      	movs	r3, #0
 800c574:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d102      	bne.n	800c582 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c57c:	230e      	movs	r3, #14
 800c57e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c580:	e0bb      	b.n	800c6fa <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800c582:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c584:	2bb0      	cmp	r3, #176	@ 0xb0
 800c586:	d002      	beq.n	800c58e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c588:	230e      	movs	r3, #14
 800c58a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c58c:	e0b5      	b.n	800c6fa <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c58e:	f3ef 8310 	mrs	r3, PRIMASK
 800c592:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800c594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800c596:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c598:	b672      	cpsid	i
    return(int_posture);
 800c59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c59c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c59e:	4b64      	ldr	r3, [pc, #400]	@ (800c730 <_txe_thread_create+0x1cc>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	4a62      	ldr	r2, [pc, #392]	@ (800c730 <_txe_thread_create+0x1cc>)
 800c5a6:	6013      	str	r3, [r2, #0]
 800c5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ae:	f383 8810 	msr	PRIMASK, r3
}
 800c5b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800c5b8:	4b5e      	ldr	r3, [pc, #376]	@ (800c734 <_txe_thread_create+0x1d0>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c5be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c5c0:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800c5c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5c8:	4413      	add	r3, r2
 800c5ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ce:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5d4:	e02b      	b.n	800c62e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800c5d6:	68fa      	ldr	r2, [r7, #12]
 800c5d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d101      	bne.n	800c5e2 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800c5e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d028      	beq.n	800c63a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800c5e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d308      	bcc.n	800c604 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800c5f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d203      	bcs.n	800c604 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c600:	2301      	movs	r3, #1
 800c602:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800c604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d308      	bcc.n	800c620 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800c60e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c614:	429a      	cmp	r2, r3
 800c616:	d203      	bcs.n	800c620 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c618:	2300      	movs	r3, #0
 800c61a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c61c:	2301      	movs	r3, #1
 800c61e:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800c620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c626:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c62a:	3301      	adds	r3, #1
 800c62c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c62e:	4b42      	ldr	r3, [pc, #264]	@ (800c738 <_txe_thread_create+0x1d4>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c634:	429a      	cmp	r2, r3
 800c636:	d3ce      	bcc.n	800c5d6 <_txe_thread_create+0x72>
 800c638:	e000      	b.n	800c63c <_txe_thread_create+0xd8>
                break;
 800c63a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c63c:	f3ef 8310 	mrs	r3, PRIMASK
 800c640:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c642:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c644:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c646:	b672      	cpsid	i
    return(int_posture);
 800c648:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c64a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c64c:	4b38      	ldr	r3, [pc, #224]	@ (800c730 <_txe_thread_create+0x1cc>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	3b01      	subs	r3, #1
 800c652:	4a37      	ldr	r2, [pc, #220]	@ (800c730 <_txe_thread_create+0x1cc>)
 800c654:	6013      	str	r3, [r2, #0]
 800c656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c658:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c65a:	6a3b      	ldr	r3, [r7, #32]
 800c65c:	f383 8810 	msr	PRIMASK, r3
}
 800c660:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c662:	f7fe feff 	bl	800b464 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d102      	bne.n	800c674 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800c66e:	230e      	movs	r3, #14
 800c670:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c672:	e042      	b.n	800c6fa <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800c674:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c676:	2b00      	cmp	r3, #0
 800c678:	d102      	bne.n	800c680 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c67a:	2303      	movs	r3, #3
 800c67c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c67e:	e03c      	b.n	800c6fa <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d102      	bne.n	800c68c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c686:	2303      	movs	r3, #3
 800c688:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c68a:	e036      	b.n	800c6fa <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800c68c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c68e:	2bc7      	cmp	r3, #199	@ 0xc7
 800c690:	d802      	bhi.n	800c698 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800c692:	2305      	movs	r3, #5
 800c694:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c696:	e030      	b.n	800c6fa <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800c698:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c69a:	2b1f      	cmp	r3, #31
 800c69c:	d902      	bls.n	800c6a4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800c69e:	230f      	movs	r3, #15
 800c6a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6a2:	e02a      	b.n	800c6fa <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800c6a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c6a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d902      	bls.n	800c6b2 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800c6ac:	2318      	movs	r3, #24
 800c6ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6b0:	e023      	b.n	800c6fa <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800c6b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d902      	bls.n	800c6be <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800c6b8:	2310      	movs	r3, #16
 800c6ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6bc:	e01d      	b.n	800c6fa <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800c6be:	4b1f      	ldr	r3, [pc, #124]	@ (800c73c <_txe_thread_create+0x1d8>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800c6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c6:	4a1e      	ldr	r2, [pc, #120]	@ (800c740 <_txe_thread_create+0x1dc>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d101      	bne.n	800c6d0 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c6cc:	2313      	movs	r3, #19
 800c6ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6d0:	f3ef 8305 	mrs	r3, IPSR
 800c6d4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c6d6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c6d8:	4b1a      	ldr	r3, [pc, #104]	@ (800c744 <_txe_thread_create+0x1e0>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00b      	beq.n	800c6fa <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c6e2:	f3ef 8305 	mrs	r3, IPSR
 800c6e6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c6e8:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c6ea:	4b16      	ldr	r3, [pc, #88]	@ (800c744 <_txe_thread_create+0x1e0>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c6f4:	d201      	bcs.n	800c6fa <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c6f6:	2313      	movs	r3, #19
 800c6f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c6fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d112      	bne.n	800c726 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800c700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c702:	9305      	str	r3, [sp, #20]
 800c704:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c706:	9304      	str	r3, [sp, #16]
 800c708:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c70a:	9303      	str	r3, [sp, #12]
 800c70c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c70e:	9302      	str	r3, [sp, #8]
 800c710:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c712:	9301      	str	r3, [sp, #4]
 800c714:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	68b9      	ldr	r1, [r7, #8]
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	f7fe fca2 	bl	800b068 <_tx_thread_create>
 800c724:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800c726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3750      	adds	r7, #80	@ 0x50
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	20010cfc 	.word	0x20010cfc
 800c734:	20010c6c 	.word	0x20010c6c
 800c738:	20010c70 	.word	0x20010c70
 800c73c:	20010c64 	.word	0x20010c64
 800c740:	20010dac 	.word	0x20010dac
 800c744:	2000018c 	.word	0x2000018c

0800c748 <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d102      	bne.n	800c75c <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c756:	2315      	movs	r3, #21
 800c758:	60fb      	str	r3, [r7, #12]
 800c75a:	e00b      	b.n	800c774 <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a07      	ldr	r2, [pc, #28]	@ (800c780 <_txe_timer_activate+0x38>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d002      	beq.n	800c76c <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c766:	2315      	movs	r3, #21
 800c768:	60fb      	str	r3, [r7, #12]
 800c76a:	e003      	b.n	800c774 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7ff f959 	bl	800ba24 <_tx_timer_activate>
 800c772:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c774:	68fb      	ldr	r3, [r7, #12]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3710      	adds	r7, #16
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	4154494d 	.word	0x4154494d

0800c784 <_txe_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b086      	sub	sp, #24
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d102      	bne.n	800c79c <_txe_timer_change+0x18>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c796:	2315      	movs	r3, #21
 800c798:	617b      	str	r3, [r7, #20]
 800c79a:	e020      	b.n	800c7de <_txe_timer_change+0x5a>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a11      	ldr	r2, [pc, #68]	@ (800c7e8 <_txe_timer_change+0x64>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d002      	beq.n	800c7ac <_txe_timer_change+0x28>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c7a6:	2315      	movs	r3, #21
 800c7a8:	617b      	str	r3, [r7, #20]
 800c7aa:	e018      	b.n	800c7de <_txe_timer_change+0x5a>
    }

    /* Check for an illegal initial tick value.  */
    else if (initial_ticks == ((ULONG) 0))
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d102      	bne.n	800c7b8 <_txe_timer_change+0x34>
    {

        /* Invalid initial tick value, return appropriate error code.  */
        status =  TX_TICK_ERROR;
 800c7b2:	2316      	movs	r3, #22
 800c7b4:	617b      	str	r3, [r7, #20]
 800c7b6:	e012      	b.n	800c7de <_txe_timer_change+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c7b8:	f3ef 8305 	mrs	r3, IPSR
 800c7bc:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c7be:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800c7c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c7ec <_txe_timer_change+0x68>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c7ca:	d302      	bcc.n	800c7d2 <_txe_timer_change+0x4e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800c7cc:	2313      	movs	r3, #19
 800c7ce:	617b      	str	r3, [r7, #20]
 800c7d0:	e005      	b.n	800c7de <_txe_timer_change+0x5a>
    }
    else
    {

        /* Call actual application timer function.  */
        status =  _tx_timer_change(timer_ptr, initial_ticks, reschedule_ticks);
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	68b9      	ldr	r1, [r7, #8]
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f7ff f950 	bl	800ba7c <_tx_timer_change>
 800c7dc:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c7de:	697b      	ldr	r3, [r7, #20]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3718      	adds	r7, #24
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	4154494d 	.word	0x4154494d
 800c7ec:	2000018c 	.word	0x2000018c

0800c7f0 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b096      	sub	sp, #88	@ 0x58
 800c7f4:	af04      	add	r7, sp, #16
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
 800c7fc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c7fe:	2300      	movs	r3, #0
 800c800:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d102      	bne.n	800c80e <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c808:	2315      	movs	r3, #21
 800c80a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c80c:	e059      	b.n	800c8c2 <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800c80e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c810:	2b2c      	cmp	r3, #44	@ 0x2c
 800c812:	d002      	beq.n	800c81a <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c814:	2315      	movs	r3, #21
 800c816:	647b      	str	r3, [r7, #68]	@ 0x44
 800c818:	e053      	b.n	800c8c2 <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c81a:	f3ef 8310 	mrs	r3, PRIMASK
 800c81e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c822:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c824:	b672      	cpsid	i
    return(int_posture);
 800c826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c828:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c82a:	4b41      	ldr	r3, [pc, #260]	@ (800c930 <_txe_timer_create+0x140>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	3301      	adds	r3, #1
 800c830:	4a3f      	ldr	r2, [pc, #252]	@ (800c930 <_txe_timer_create+0x140>)
 800c832:	6013      	str	r3, [r2, #0]
 800c834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c836:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83a:	f383 8810 	msr	PRIMASK, r3
}
 800c83e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800c840:	4b3c      	ldr	r3, [pc, #240]	@ (800c934 <_txe_timer_create+0x144>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800c846:	2300      	movs	r3, #0
 800c848:	643b      	str	r3, [r7, #64]	@ 0x40
 800c84a:	e009      	b.n	800c860 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c850:	429a      	cmp	r2, r3
 800c852:	d00b      	beq.n	800c86c <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800c854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800c85a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c85c:	3301      	adds	r3, #1
 800c85e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c860:	4b35      	ldr	r3, [pc, #212]	@ (800c938 <_txe_timer_create+0x148>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c866:	429a      	cmp	r2, r3
 800c868:	d3f0      	bcc.n	800c84c <_txe_timer_create+0x5c>
 800c86a:	e000      	b.n	800c86e <_txe_timer_create+0x7e>
                break;
 800c86c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c86e:	f3ef 8310 	mrs	r3, PRIMASK
 800c872:	623b      	str	r3, [r7, #32]
    return(posture);
 800c874:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c876:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c878:	b672      	cpsid	i
    return(int_posture);
 800c87a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c87c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c87e:	4b2c      	ldr	r3, [pc, #176]	@ (800c930 <_txe_timer_create+0x140>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	3b01      	subs	r3, #1
 800c884:	4a2a      	ldr	r2, [pc, #168]	@ (800c930 <_txe_timer_create+0x140>)
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c88a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88e:	f383 8810 	msr	PRIMASK, r3
}
 800c892:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c894:	f7fe fde6 	bl	800b464 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d102      	bne.n	800c8a6 <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800c8a0:	2315      	movs	r3, #21
 800c8a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8a4:	e00d      	b.n	800c8c2 <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800c8a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d102      	bne.n	800c8b2 <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800c8ac:	2316      	movs	r3, #22
 800c8ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8b0:	e007      	b.n	800c8c2 <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800c8b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d004      	beq.n	800c8c2 <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800c8b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d001      	beq.n	800c8c2 <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800c8be:	2317      	movs	r3, #23
 800c8c0:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c8c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d11d      	bne.n	800c904 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c8c8:	4b1c      	ldr	r3, [pc, #112]	@ (800c93c <_txe_timer_create+0x14c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800c8ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8d0:	4a1b      	ldr	r2, [pc, #108]	@ (800c940 <_txe_timer_create+0x150>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d101      	bne.n	800c8da <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c8d6:	2313      	movs	r3, #19
 800c8d8:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c8da:	f3ef 8305 	mrs	r3, IPSR
 800c8de:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c8e0:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c8e2:	4b18      	ldr	r3, [pc, #96]	@ (800c944 <_txe_timer_create+0x154>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00b      	beq.n	800c904 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c8ec:	f3ef 8305 	mrs	r3, IPSR
 800c8f0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c8f2:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c8f4:	4b13      	ldr	r3, [pc, #76]	@ (800c944 <_txe_timer_create+0x154>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c8fe:	d201      	bcs.n	800c904 <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c900:	2313      	movs	r3, #19
 800c902:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10c      	bne.n	800c924 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800c90a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c90c:	9302      	str	r3, [sp, #8]
 800c90e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c910:	9301      	str	r3, [sp, #4]
 800c912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c914:	9300      	str	r3, [sp, #0]
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	68b9      	ldr	r1, [r7, #8]
 800c91c:	68f8      	ldr	r0, [r7, #12]
 800c91e:	f7ff f8d3 	bl	800bac8 <_tx_timer_create>
 800c922:	6478      	str	r0, [r7, #68]	@ 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800c924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800c926:	4618      	mov	r0, r3
 800c928:	3748      	adds	r7, #72	@ 0x48
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	20010cfc 	.word	0x20010cfc
 800c934:	20010da0 	.word	0x20010da0
 800c938:	20010da4 	.word	0x20010da4
 800c93c:	20010c64 	.word	0x20010c64
 800c940:	20010dac 	.word	0x20010dac
 800c944:	2000018c 	.word	0x2000018c

0800c948 <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d102      	bne.n	800c95c <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c956:	2315      	movs	r3, #21
 800c958:	60fb      	str	r3, [r7, #12]
 800c95a:	e00b      	b.n	800c974 <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a07      	ldr	r2, [pc, #28]	@ (800c980 <_txe_timer_deactivate+0x38>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d002      	beq.n	800c96c <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c966:	2315      	movs	r3, #21
 800c968:	60fb      	str	r3, [r7, #12]
 800c96a:	e003      	b.n	800c974 <_txe_timer_deactivate+0x2c>
    }
    else
    {

        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f7ff f90f 	bl	800bb90 <_tx_timer_deactivate>
 800c972:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c974:	68fb      	ldr	r3, [r7, #12]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	4154494d 	.word	0x4154494d

0800c984 <memset>:
 800c984:	4402      	add	r2, r0
 800c986:	4603      	mov	r3, r0
 800c988:	4293      	cmp	r3, r2
 800c98a:	d100      	bne.n	800c98e <memset+0xa>
 800c98c:	4770      	bx	lr
 800c98e:	f803 1b01 	strb.w	r1, [r3], #1
 800c992:	e7f9      	b.n	800c988 <memset+0x4>

0800c994 <__libc_init_array>:
 800c994:	b570      	push	{r4, r5, r6, lr}
 800c996:	4d0d      	ldr	r5, [pc, #52]	@ (800c9cc <__libc_init_array+0x38>)
 800c998:	4c0d      	ldr	r4, [pc, #52]	@ (800c9d0 <__libc_init_array+0x3c>)
 800c99a:	1b64      	subs	r4, r4, r5
 800c99c:	10a4      	asrs	r4, r4, #2
 800c99e:	2600      	movs	r6, #0
 800c9a0:	42a6      	cmp	r6, r4
 800c9a2:	d109      	bne.n	800c9b8 <__libc_init_array+0x24>
 800c9a4:	4d0b      	ldr	r5, [pc, #44]	@ (800c9d4 <__libc_init_array+0x40>)
 800c9a6:	4c0c      	ldr	r4, [pc, #48]	@ (800c9d8 <__libc_init_array+0x44>)
 800c9a8:	f000 f818 	bl	800c9dc <_init>
 800c9ac:	1b64      	subs	r4, r4, r5
 800c9ae:	10a4      	asrs	r4, r4, #2
 800c9b0:	2600      	movs	r6, #0
 800c9b2:	42a6      	cmp	r6, r4
 800c9b4:	d105      	bne.n	800c9c2 <__libc_init_array+0x2e>
 800c9b6:	bd70      	pop	{r4, r5, r6, pc}
 800c9b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9bc:	4798      	blx	r3
 800c9be:	3601      	adds	r6, #1
 800c9c0:	e7ee      	b.n	800c9a0 <__libc_init_array+0xc>
 800c9c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9c6:	4798      	blx	r3
 800c9c8:	3601      	adds	r6, #1
 800c9ca:	e7f2      	b.n	800c9b2 <__libc_init_array+0x1e>
 800c9cc:	0800cbb4 	.word	0x0800cbb4
 800c9d0:	0800cbb4 	.word	0x0800cbb4
 800c9d4:	0800cbb4 	.word	0x0800cbb4
 800c9d8:	0800cbb8 	.word	0x0800cbb8

0800c9dc <_init>:
 800c9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9de:	bf00      	nop
 800c9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9e2:	bc08      	pop	{r3}
 800c9e4:	469e      	mov	lr, r3
 800c9e6:	4770      	bx	lr

0800c9e8 <_fini>:
 800c9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ea:	bf00      	nop
 800c9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ee:	bc08      	pop	{r3}
 800c9f0:	469e      	mov	lr, r3
 800c9f2:	4770      	bx	lr
