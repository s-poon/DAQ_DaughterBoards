
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a658  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800a838  0800a838  0001a838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a91c  0800a91c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a91c  0800a91c  0001a91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a924  0800a924  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a924  0800a924  0001a924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a928  0800a928  0001a928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800a92c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b4  20000010  0800a93c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010c4  0800a93c  000210c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000304e3  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007a88  00000000  00000000  00050566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002230  00000000  00000000  00057ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001981  00000000  00000000  0005a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031b0f  00000000  00000000  0005bba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038f86  00000000  00000000  0008d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00124a6d  00000000  00000000  000c6636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008534  00000000  00000000  001eb0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f4  00000000  00000000  001f35d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a820 	.word	0x0800a820

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800a820 	.word	0x0800a820

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	; (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	; (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	; (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	; (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	; (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	; (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	20000ab8 	.word	0x20000ab8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	0019f09f 	.word	0x0019f09f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	; (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	; (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	; (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	; (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	; (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20000b54 	.word	0x20000b54
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20000abc 	.word	0x20000abc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20000ac0 	.word	0x20000ac0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	200010c0 	.word	0x200010c0

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	; (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	; (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	; (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	; (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	; (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	; (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f009 fcb3 	bl	8009d64 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f009 fc20 	bl	8009c48 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	; (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	; (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	; (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20000b60 	.word	0x20000b60
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	200010c0 	.word	0x200010c0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20000b64 	.word	0x20000b64
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20000bf0 	.word	0x20000bf0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20000bf4 	.word	0x20000bf4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20000bec 	.word	0x20000bec
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20000be8 	.word	0x20000be8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20000b54 	.word	0x20000b54
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20000abc 	.word	0x20000abc
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20000ac0 	.word	0x20000ac0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <__aeabi_drsub>:
 8000458:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800045c:	e002      	b.n	8000464 <__adddf3>
 800045e:	bf00      	nop

08000460 <__aeabi_dsub>:
 8000460:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000464 <__adddf3>:
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046e:	ea94 0f05 	teq	r4, r5
 8000472:	bf08      	it	eq
 8000474:	ea90 0f02 	teqeq	r0, r2
 8000478:	bf1f      	itttt	ne
 800047a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000482:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000486:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048a:	f000 80e2 	beq.w	8000652 <__adddf3+0x1ee>
 800048e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000492:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000496:	bfb8      	it	lt
 8000498:	426d      	neglt	r5, r5
 800049a:	dd0c      	ble.n	80004b6 <__adddf3+0x52>
 800049c:	442c      	add	r4, r5
 800049e:	ea80 0202 	eor.w	r2, r0, r2
 80004a2:	ea81 0303 	eor.w	r3, r1, r3
 80004a6:	ea82 0000 	eor.w	r0, r2, r0
 80004aa:	ea83 0101 	eor.w	r1, r3, r1
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	2d36      	cmp	r5, #54	; 0x36
 80004b8:	bf88      	it	hi
 80004ba:	bd30      	pophi	{r4, r5, pc}
 80004bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x70>
 80004ce:	4240      	negs	r0, r0
 80004d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x84>
 80004e2:	4252      	negs	r2, r2
 80004e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e8:	ea94 0f05 	teq	r4, r5
 80004ec:	f000 80a7 	beq.w	800063e <__adddf3+0x1da>
 80004f0:	f1a4 0401 	sub.w	r4, r4, #1
 80004f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f8:	db0d      	blt.n	8000516 <__adddf3+0xb2>
 80004fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000502:	1880      	adds	r0, r0, r2
 8000504:	f141 0100 	adc.w	r1, r1, #0
 8000508:	fa03 f20e 	lsl.w	r2, r3, lr
 800050c:	1880      	adds	r0, r0, r2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	4159      	adcs	r1, r3
 8000514:	e00e      	b.n	8000534 <__adddf3+0xd0>
 8000516:	f1a5 0520 	sub.w	r5, r5, #32
 800051a:	f10e 0e20 	add.w	lr, lr, #32
 800051e:	2a01      	cmp	r2, #1
 8000520:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000524:	bf28      	it	cs
 8000526:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	18c0      	adds	r0, r0, r3
 8000530:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	d507      	bpl.n	800054a <__adddf3+0xe6>
 800053a:	f04f 0e00 	mov.w	lr, #0
 800053e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000542:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000546:	eb6e 0101 	sbc.w	r1, lr, r1
 800054a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054e:	d31b      	bcc.n	8000588 <__adddf3+0x124>
 8000550:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000554:	d30c      	bcc.n	8000570 <__adddf3+0x10c>
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	ea5f 0030 	movs.w	r0, r0, rrx
 800055c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000560:	f104 0401 	add.w	r4, r4, #1
 8000564:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000568:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800056c:	f080 809a 	bcs.w	80006a4 <__adddf3+0x240>
 8000570:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	ea41 0105 	orr.w	r1, r1, r5
 8000586:	bd30      	pop	{r4, r5, pc}
 8000588:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800058c:	4140      	adcs	r0, r0
 800058e:	eb41 0101 	adc.w	r1, r1, r1
 8000592:	3c01      	subs	r4, #1
 8000594:	bf28      	it	cs
 8000596:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059a:	d2e9      	bcs.n	8000570 <__adddf3+0x10c>
 800059c:	f091 0f00 	teq	r1, #0
 80005a0:	bf04      	itt	eq
 80005a2:	4601      	moveq	r1, r0
 80005a4:	2000      	moveq	r0, #0
 80005a6:	fab1 f381 	clz	r3, r1
 80005aa:	bf08      	it	eq
 80005ac:	3320      	addeq	r3, #32
 80005ae:	f1a3 030b 	sub.w	r3, r3, #11
 80005b2:	f1b3 0220 	subs.w	r2, r3, #32
 80005b6:	da0c      	bge.n	80005d2 <__adddf3+0x16e>
 80005b8:	320c      	adds	r2, #12
 80005ba:	dd08      	ble.n	80005ce <__adddf3+0x16a>
 80005bc:	f102 0c14 	add.w	ip, r2, #20
 80005c0:	f1c2 020c 	rsb	r2, r2, #12
 80005c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c8:	fa21 f102 	lsr.w	r1, r1, r2
 80005cc:	e00c      	b.n	80005e8 <__adddf3+0x184>
 80005ce:	f102 0214 	add.w	r2, r2, #20
 80005d2:	bfd8      	it	le
 80005d4:	f1c2 0c20 	rsble	ip, r2, #32
 80005d8:	fa01 f102 	lsl.w	r1, r1, r2
 80005dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e0:	bfdc      	itt	le
 80005e2:	ea41 010c 	orrle.w	r1, r1, ip
 80005e6:	4090      	lslle	r0, r2
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	bfa2      	ittt	ge
 80005ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f0:	4329      	orrge	r1, r5
 80005f2:	bd30      	popge	{r4, r5, pc}
 80005f4:	ea6f 0404 	mvn.w	r4, r4
 80005f8:	3c1f      	subs	r4, #31
 80005fa:	da1c      	bge.n	8000636 <__adddf3+0x1d2>
 80005fc:	340c      	adds	r4, #12
 80005fe:	dc0e      	bgt.n	800061e <__adddf3+0x1ba>
 8000600:	f104 0414 	add.w	r4, r4, #20
 8000604:	f1c4 0220 	rsb	r2, r4, #32
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f302 	lsl.w	r3, r1, r2
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	fa21 f304 	lsr.w	r3, r1, r4
 8000618:	ea45 0103 	orr.w	r1, r5, r3
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	f1c4 040c 	rsb	r4, r4, #12
 8000622:	f1c4 0220 	rsb	r2, r4, #32
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 f304 	lsl.w	r3, r1, r4
 800062e:	ea40 0003 	orr.w	r0, r0, r3
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	fa21 f004 	lsr.w	r0, r1, r4
 800063a:	4629      	mov	r1, r5
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f094 0f00 	teq	r4, #0
 8000642:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000646:	bf06      	itte	eq
 8000648:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800064c:	3401      	addeq	r4, #1
 800064e:	3d01      	subne	r5, #1
 8000650:	e74e      	b.n	80004f0 <__adddf3+0x8c>
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf18      	it	ne
 8000658:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800065c:	d029      	beq.n	80006b2 <__adddf3+0x24e>
 800065e:	ea94 0f05 	teq	r4, r5
 8000662:	bf08      	it	eq
 8000664:	ea90 0f02 	teqeq	r0, r2
 8000668:	d005      	beq.n	8000676 <__adddf3+0x212>
 800066a:	ea54 0c00 	orrs.w	ip, r4, r0
 800066e:	bf04      	itt	eq
 8000670:	4619      	moveq	r1, r3
 8000672:	4610      	moveq	r0, r2
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea91 0f03 	teq	r1, r3
 800067a:	bf1e      	ittt	ne
 800067c:	2100      	movne	r1, #0
 800067e:	2000      	movne	r0, #0
 8000680:	bd30      	popne	{r4, r5, pc}
 8000682:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000686:	d105      	bne.n	8000694 <__adddf3+0x230>
 8000688:	0040      	lsls	r0, r0, #1
 800068a:	4149      	adcs	r1, r1
 800068c:	bf28      	it	cs
 800068e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000692:	bd30      	pop	{r4, r5, pc}
 8000694:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000698:	bf3c      	itt	cc
 800069a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069e:	bd30      	popcc	{r4, r5, pc}
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006ac:	f04f 0000 	mov.w	r0, #0
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b6:	bf1a      	itte	ne
 80006b8:	4619      	movne	r1, r3
 80006ba:	4610      	movne	r0, r2
 80006bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c0:	bf1c      	itt	ne
 80006c2:	460b      	movne	r3, r1
 80006c4:	4602      	movne	r2, r0
 80006c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ca:	bf06      	itte	eq
 80006cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d0:	ea91 0f03 	teqeq	r1, r3
 80006d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop

080006dc <__aeabi_ui2d>:
 80006dc:	f090 0f00 	teq	r0, #0
 80006e0:	bf04      	itt	eq
 80006e2:	2100      	moveq	r1, #0
 80006e4:	4770      	bxeq	lr
 80006e6:	b530      	push	{r4, r5, lr}
 80006e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f0:	f04f 0500 	mov.w	r5, #0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e750      	b.n	800059c <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000710:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000714:	bf48      	it	mi
 8000716:	4240      	negmi	r0, r0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e73e      	b.n	800059c <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_f2d>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000726:	ea4f 0131 	mov.w	r1, r1, rrx
 800072a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072e:	bf1f      	itttt	ne
 8000730:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000734:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000738:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800073c:	4770      	bxne	lr
 800073e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000742:	bf08      	it	eq
 8000744:	4770      	bxeq	lr
 8000746:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074a:	bf04      	itt	eq
 800074c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000758:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000760:	e71c      	b.n	800059c <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_ul2d>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	b530      	push	{r4, r5, lr}
 800076e:	f04f 0500 	mov.w	r5, #0
 8000772:	e00a      	b.n	800078a <__aeabi_l2d+0x16>

08000774 <__aeabi_l2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000782:	d502      	bpl.n	800078a <__aeabi_l2d+0x16>
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000792:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000796:	f43f aed8 	beq.w	800054a <__adddf3+0xe6>
 800079a:	f04f 0203 	mov.w	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007aa:	bf18      	it	ne
 80007ac:	3203      	addne	r2, #3
 80007ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b2:	f1c2 0320 	rsb	r3, r2, #32
 80007b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ba:	fa20 f002 	lsr.w	r0, r0, r2
 80007be:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c2:	ea40 000e 	orr.w	r0, r0, lr
 80007c6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ca:	4414      	add	r4, r2
 80007cc:	e6bd      	b.n	800054a <__adddf3+0xe6>
 80007ce:	bf00      	nop

080007d0 <__aeabi_uldivmod>:
 80007d0:	b953      	cbnz	r3, 80007e8 <__aeabi_uldivmod+0x18>
 80007d2:	b94a      	cbnz	r2, 80007e8 <__aeabi_uldivmod+0x18>
 80007d4:	2900      	cmp	r1, #0
 80007d6:	bf08      	it	eq
 80007d8:	2800      	cmpeq	r0, #0
 80007da:	bf1c      	itt	ne
 80007dc:	f04f 31ff 	movne.w	r1, #4294967295
 80007e0:	f04f 30ff 	movne.w	r0, #4294967295
 80007e4:	f000 b970 	b.w	8000ac8 <__aeabi_idiv0>
 80007e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80007ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f0:	f000 f806 	bl	8000800 <__udivmoddi4>
 80007f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007fc:	b004      	add	sp, #16
 80007fe:	4770      	bx	lr

08000800 <__udivmoddi4>:
 8000800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000804:	9e08      	ldr	r6, [sp, #32]
 8000806:	460d      	mov	r5, r1
 8000808:	4604      	mov	r4, r0
 800080a:	460f      	mov	r7, r1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d14a      	bne.n	80008a6 <__udivmoddi4+0xa6>
 8000810:	428a      	cmp	r2, r1
 8000812:	4694      	mov	ip, r2
 8000814:	d965      	bls.n	80008e2 <__udivmoddi4+0xe2>
 8000816:	fab2 f382 	clz	r3, r2
 800081a:	b143      	cbz	r3, 800082e <__udivmoddi4+0x2e>
 800081c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000820:	f1c3 0220 	rsb	r2, r3, #32
 8000824:	409f      	lsls	r7, r3
 8000826:	fa20 f202 	lsr.w	r2, r0, r2
 800082a:	4317      	orrs	r7, r2
 800082c:	409c      	lsls	r4, r3
 800082e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000832:	fa1f f58c 	uxth.w	r5, ip
 8000836:	fbb7 f1fe 	udiv	r1, r7, lr
 800083a:	0c22      	lsrs	r2, r4, #16
 800083c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000840:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000844:	fb01 f005 	mul.w	r0, r1, r5
 8000848:	4290      	cmp	r0, r2
 800084a:	d90a      	bls.n	8000862 <__udivmoddi4+0x62>
 800084c:	eb1c 0202 	adds.w	r2, ip, r2
 8000850:	f101 37ff 	add.w	r7, r1, #4294967295
 8000854:	f080 811c 	bcs.w	8000a90 <__udivmoddi4+0x290>
 8000858:	4290      	cmp	r0, r2
 800085a:	f240 8119 	bls.w	8000a90 <__udivmoddi4+0x290>
 800085e:	3902      	subs	r1, #2
 8000860:	4462      	add	r2, ip
 8000862:	1a12      	subs	r2, r2, r0
 8000864:	b2a4      	uxth	r4, r4
 8000866:	fbb2 f0fe 	udiv	r0, r2, lr
 800086a:	fb0e 2210 	mls	r2, lr, r0, r2
 800086e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000872:	fb00 f505 	mul.w	r5, r0, r5
 8000876:	42a5      	cmp	r5, r4
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x90>
 800087a:	eb1c 0404 	adds.w	r4, ip, r4
 800087e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000882:	f080 8107 	bcs.w	8000a94 <__udivmoddi4+0x294>
 8000886:	42a5      	cmp	r5, r4
 8000888:	f240 8104 	bls.w	8000a94 <__udivmoddi4+0x294>
 800088c:	4464      	add	r4, ip
 800088e:	3802      	subs	r0, #2
 8000890:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000894:	1b64      	subs	r4, r4, r5
 8000896:	2100      	movs	r1, #0
 8000898:	b11e      	cbz	r6, 80008a2 <__udivmoddi4+0xa2>
 800089a:	40dc      	lsrs	r4, r3
 800089c:	2300      	movs	r3, #0
 800089e:	e9c6 4300 	strd	r4, r3, [r6]
 80008a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a6:	428b      	cmp	r3, r1
 80008a8:	d908      	bls.n	80008bc <__udivmoddi4+0xbc>
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	f000 80ed 	beq.w	8000a8a <__udivmoddi4+0x28a>
 80008b0:	2100      	movs	r1, #0
 80008b2:	e9c6 0500 	strd	r0, r5, [r6]
 80008b6:	4608      	mov	r0, r1
 80008b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008bc:	fab3 f183 	clz	r1, r3
 80008c0:	2900      	cmp	r1, #0
 80008c2:	d149      	bne.n	8000958 <__udivmoddi4+0x158>
 80008c4:	42ab      	cmp	r3, r5
 80008c6:	d302      	bcc.n	80008ce <__udivmoddi4+0xce>
 80008c8:	4282      	cmp	r2, r0
 80008ca:	f200 80f8 	bhi.w	8000abe <__udivmoddi4+0x2be>
 80008ce:	1a84      	subs	r4, r0, r2
 80008d0:	eb65 0203 	sbc.w	r2, r5, r3
 80008d4:	2001      	movs	r0, #1
 80008d6:	4617      	mov	r7, r2
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d0e2      	beq.n	80008a2 <__udivmoddi4+0xa2>
 80008dc:	e9c6 4700 	strd	r4, r7, [r6]
 80008e0:	e7df      	b.n	80008a2 <__udivmoddi4+0xa2>
 80008e2:	b902      	cbnz	r2, 80008e6 <__udivmoddi4+0xe6>
 80008e4:	deff      	udf	#255	; 0xff
 80008e6:	fab2 f382 	clz	r3, r2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f040 8090 	bne.w	8000a10 <__udivmoddi4+0x210>
 80008f0:	1a8a      	subs	r2, r1, r2
 80008f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f6:	fa1f fe8c 	uxth.w	lr, ip
 80008fa:	2101      	movs	r1, #1
 80008fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000900:	fb07 2015 	mls	r0, r7, r5, r2
 8000904:	0c22      	lsrs	r2, r4, #16
 8000906:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800090a:	fb0e f005 	mul.w	r0, lr, r5
 800090e:	4290      	cmp	r0, r2
 8000910:	d908      	bls.n	8000924 <__udivmoddi4+0x124>
 8000912:	eb1c 0202 	adds.w	r2, ip, r2
 8000916:	f105 38ff 	add.w	r8, r5, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x122>
 800091c:	4290      	cmp	r0, r2
 800091e:	f200 80cb 	bhi.w	8000ab8 <__udivmoddi4+0x2b8>
 8000922:	4645      	mov	r5, r8
 8000924:	1a12      	subs	r2, r2, r0
 8000926:	b2a4      	uxth	r4, r4
 8000928:	fbb2 f0f7 	udiv	r0, r2, r7
 800092c:	fb07 2210 	mls	r2, r7, r0, r2
 8000930:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000934:	fb0e fe00 	mul.w	lr, lr, r0
 8000938:	45a6      	cmp	lr, r4
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x14e>
 800093c:	eb1c 0404 	adds.w	r4, ip, r4
 8000940:	f100 32ff 	add.w	r2, r0, #4294967295
 8000944:	d202      	bcs.n	800094c <__udivmoddi4+0x14c>
 8000946:	45a6      	cmp	lr, r4
 8000948:	f200 80bb 	bhi.w	8000ac2 <__udivmoddi4+0x2c2>
 800094c:	4610      	mov	r0, r2
 800094e:	eba4 040e 	sub.w	r4, r4, lr
 8000952:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000956:	e79f      	b.n	8000898 <__udivmoddi4+0x98>
 8000958:	f1c1 0720 	rsb	r7, r1, #32
 800095c:	408b      	lsls	r3, r1
 800095e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000962:	ea4c 0c03 	orr.w	ip, ip, r3
 8000966:	fa05 f401 	lsl.w	r4, r5, r1
 800096a:	fa20 f307 	lsr.w	r3, r0, r7
 800096e:	40fd      	lsrs	r5, r7
 8000970:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000974:	4323      	orrs	r3, r4
 8000976:	fbb5 f8f9 	udiv	r8, r5, r9
 800097a:	fa1f fe8c 	uxth.w	lr, ip
 800097e:	fb09 5518 	mls	r5, r9, r8, r5
 8000982:	0c1c      	lsrs	r4, r3, #16
 8000984:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000988:	fb08 f50e 	mul.w	r5, r8, lr
 800098c:	42a5      	cmp	r5, r4
 800098e:	fa02 f201 	lsl.w	r2, r2, r1
 8000992:	fa00 f001 	lsl.w	r0, r0, r1
 8000996:	d90b      	bls.n	80009b0 <__udivmoddi4+0x1b0>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a0:	f080 8088 	bcs.w	8000ab4 <__udivmoddi4+0x2b4>
 80009a4:	42a5      	cmp	r5, r4
 80009a6:	f240 8085 	bls.w	8000ab4 <__udivmoddi4+0x2b4>
 80009aa:	f1a8 0802 	sub.w	r8, r8, #2
 80009ae:	4464      	add	r4, ip
 80009b0:	1b64      	subs	r4, r4, r5
 80009b2:	b29d      	uxth	r5, r3
 80009b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b8:	fb09 4413 	mls	r4, r9, r3, r4
 80009bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80009c4:	45a6      	cmp	lr, r4
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x1da>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80009d0:	d26c      	bcs.n	8000aac <__udivmoddi4+0x2ac>
 80009d2:	45a6      	cmp	lr, r4
 80009d4:	d96a      	bls.n	8000aac <__udivmoddi4+0x2ac>
 80009d6:	3b02      	subs	r3, #2
 80009d8:	4464      	add	r4, ip
 80009da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009de:	fba3 9502 	umull	r9, r5, r3, r2
 80009e2:	eba4 040e 	sub.w	r4, r4, lr
 80009e6:	42ac      	cmp	r4, r5
 80009e8:	46c8      	mov	r8, r9
 80009ea:	46ae      	mov	lr, r5
 80009ec:	d356      	bcc.n	8000a9c <__udivmoddi4+0x29c>
 80009ee:	d053      	beq.n	8000a98 <__udivmoddi4+0x298>
 80009f0:	b156      	cbz	r6, 8000a08 <__udivmoddi4+0x208>
 80009f2:	ebb0 0208 	subs.w	r2, r0, r8
 80009f6:	eb64 040e 	sbc.w	r4, r4, lr
 80009fa:	fa04 f707 	lsl.w	r7, r4, r7
 80009fe:	40ca      	lsrs	r2, r1
 8000a00:	40cc      	lsrs	r4, r1
 8000a02:	4317      	orrs	r7, r2
 8000a04:	e9c6 7400 	strd	r7, r4, [r6]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a10:	f1c3 0120 	rsb	r1, r3, #32
 8000a14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a18:	fa20 f201 	lsr.w	r2, r0, r1
 8000a1c:	fa25 f101 	lsr.w	r1, r5, r1
 8000a20:	409d      	lsls	r5, r3
 8000a22:	432a      	orrs	r2, r5
 8000a24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a28:	fa1f fe8c 	uxth.w	lr, ip
 8000a2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a30:	fb07 1510 	mls	r5, r7, r0, r1
 8000a34:	0c11      	lsrs	r1, r2, #16
 8000a36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a3a:	fb00 f50e 	mul.w	r5, r0, lr
 8000a3e:	428d      	cmp	r5, r1
 8000a40:	fa04 f403 	lsl.w	r4, r4, r3
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x258>
 8000a46:	eb1c 0101 	adds.w	r1, ip, r1
 8000a4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a4e:	d22f      	bcs.n	8000ab0 <__udivmoddi4+0x2b0>
 8000a50:	428d      	cmp	r5, r1
 8000a52:	d92d      	bls.n	8000ab0 <__udivmoddi4+0x2b0>
 8000a54:	3802      	subs	r0, #2
 8000a56:	4461      	add	r1, ip
 8000a58:	1b49      	subs	r1, r1, r5
 8000a5a:	b292      	uxth	r2, r2
 8000a5c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a60:	fb07 1115 	mls	r1, r7, r5, r1
 8000a64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a68:	fb05 f10e 	mul.w	r1, r5, lr
 8000a6c:	4291      	cmp	r1, r2
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x282>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a78:	d216      	bcs.n	8000aa8 <__udivmoddi4+0x2a8>
 8000a7a:	4291      	cmp	r1, r2
 8000a7c:	d914      	bls.n	8000aa8 <__udivmoddi4+0x2a8>
 8000a7e:	3d02      	subs	r5, #2
 8000a80:	4462      	add	r2, ip
 8000a82:	1a52      	subs	r2, r2, r1
 8000a84:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a88:	e738      	b.n	80008fc <__udivmoddi4+0xfc>
 8000a8a:	4631      	mov	r1, r6
 8000a8c:	4630      	mov	r0, r6
 8000a8e:	e708      	b.n	80008a2 <__udivmoddi4+0xa2>
 8000a90:	4639      	mov	r1, r7
 8000a92:	e6e6      	b.n	8000862 <__udivmoddi4+0x62>
 8000a94:	4610      	mov	r0, r2
 8000a96:	e6fb      	b.n	8000890 <__udivmoddi4+0x90>
 8000a98:	4548      	cmp	r0, r9
 8000a9a:	d2a9      	bcs.n	80009f0 <__udivmoddi4+0x1f0>
 8000a9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	e7a3      	b.n	80009f0 <__udivmoddi4+0x1f0>
 8000aa8:	4645      	mov	r5, r8
 8000aaa:	e7ea      	b.n	8000a82 <__udivmoddi4+0x282>
 8000aac:	462b      	mov	r3, r5
 8000aae:	e794      	b.n	80009da <__udivmoddi4+0x1da>
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	e7d1      	b.n	8000a58 <__udivmoddi4+0x258>
 8000ab4:	46d0      	mov	r8, sl
 8000ab6:	e77b      	b.n	80009b0 <__udivmoddi4+0x1b0>
 8000ab8:	3d02      	subs	r5, #2
 8000aba:	4462      	add	r2, ip
 8000abc:	e732      	b.n	8000924 <__udivmoddi4+0x124>
 8000abe:	4608      	mov	r0, r1
 8000ac0:	e70a      	b.n	80008d8 <__udivmoddi4+0xd8>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	e742      	b.n	800094e <__udivmoddi4+0x14e>

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af02      	add	r7, sp, #8
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000ad8:	2334      	movs	r3, #52	; 0x34
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	; (8000b14 <tx_application_define+0x48>)
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <tx_application_define+0x4c>)
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <tx_application_define+0x50>)
 8000ae6:	f009 fbe7 	bl	800a2b8 <_txe_byte_pool_create>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10d      	bne.n	8000b0c <tx_application_define+0x40>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <tx_application_define+0x50>)
 8000af2:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000af4:	68b8      	ldr	r0, [r7, #8]
 8000af6:	f000 fa4b 	bl	8000f90 <App_ThreadX_Init>
 8000afa:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d000      	beq.n	8000b04 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000b02:	e7fe      	b.n	8000b02 <tx_application_define+0x36>
      }
      /* USER CODE END  App_ThreadX_Init_Error */
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    status = ThreadX_Init(memory_ptr);
 8000b04:	68b8      	ldr	r0, [r7, #8]
 8000b06:	f001 f97f 	bl	8001e08 <ThreadX_Init>
 8000b0a:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000002c 	.word	0x2000002c
 8000b18:	0800a838 	.word	0x0800a838
 8000b1c:	2000042c 	.word	0x2000042c

08000b20 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2220      	movs	r2, #32
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f009 fe45 	bl	800a7c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b3e:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b46:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b54:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b60:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b66:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b68:	2204      	movs	r2, #4
 8000b6a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b6c:	4b26      	ldr	r3, [pc, #152]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b7e:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba8:	4817      	ldr	r0, [pc, #92]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000baa:	f001 fdd1 	bl	8002750 <HAL_ADC_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000bb4:	f000 fe0a 	bl	80017cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4811      	ldr	r0, [pc, #68]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000bc4:	f003 f89e 	bl	8003d04 <HAL_ADCEx_MultiModeConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000bce:	f000 fdfd 	bl	80017cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_ADC1_Init+0xec>)
 8000bd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bde:	237f      	movs	r3, #127	; 0x7f
 8000be0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000be2:	2304      	movs	r3, #4
 8000be4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4806      	ldr	r0, [pc, #24]	; (8000c08 <MX_ADC1_Init+0xe8>)
 8000bf0:	f002 fac6 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000bfa:	f000 fde7 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	3730      	adds	r7, #48	; 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000460 	.word	0x20000460
 8000c0c:	10c00010 	.word	0x10c00010

08000c10 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2220      	movs	r2, #32
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f009 fdd3 	bl	800a7c8 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000c22:	4b5e      	ldr	r3, [pc, #376]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c24:	4a5e      	ldr	r2, [pc, #376]	; (8000da0 <MX_ADC4_Init+0x190>)
 8000c26:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c28:	4b5c      	ldr	r3, [pc, #368]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c2a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c2e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000c30:	4b5a      	ldr	r3, [pc, #360]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c36:	4b59      	ldr	r3, [pc, #356]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000c3c:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c42:	4b56      	ldr	r3, [pc, #344]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c48:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000c4e:	4b53      	ldr	r3, [pc, #332]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000c54:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 8;
 8000c5a:	4b50      	ldr	r3, [pc, #320]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c5c:	2208      	movs	r2, #8
 8000c5e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000c60:	4b4e      	ldr	r3, [pc, #312]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c68:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c6e:	4b4b      	ldr	r3, [pc, #300]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000c74:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c7c:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c82:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000c84:	4b45      	ldr	r3, [pc, #276]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000c8c:	4843      	ldr	r0, [pc, #268]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000c8e:	f001 fd5f 	bl	8002750 <HAL_ADC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f000 fd98 	bl	80017cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c9c:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <MX_ADC4_Init+0x194>)
 8000c9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca0:	2306      	movs	r3, #6
 8000ca2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ca8:	237f      	movs	r3, #127	; 0x7f
 8000caa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cac:	2304      	movs	r3, #4
 8000cae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4838      	ldr	r0, [pc, #224]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000cba:	f002 fa61 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8000cc4:	f000 fd82 	bl	80017cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000cc8:	4b37      	ldr	r3, [pc, #220]	; (8000da8 <MX_ADC4_Init+0x198>)
 8000cca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ccc:	230c      	movs	r3, #12
 8000cce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4831      	ldr	r0, [pc, #196]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000cd6:	f002 fa53 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC4_Init+0xd4>
  {
    Error_Handler();
 8000ce0:	f000 fd74 	bl	80017cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ce4:	4b31      	ldr	r3, [pc, #196]	; (8000dac <MX_ADC4_Init+0x19c>)
 8000ce6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ce8:	2312      	movs	r3, #18
 8000cea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	482a      	ldr	r0, [pc, #168]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000cf2:	f002 fa45 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_ADC4_Init+0xf0>
  {
    Error_Handler();
 8000cfc:	f000 fd66 	bl	80017cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d00:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <MX_ADC4_Init+0x1a0>)
 8000d02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d04:	2318      	movs	r3, #24
 8000d06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4823      	ldr	r0, [pc, #140]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000d0e:	f002 fa37 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC4_Init+0x10c>
  {
    Error_Handler();
 8000d18:	f000 fd58 	bl	80017cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <MX_ADC4_Init+0x1a4>)
 8000d1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	481c      	ldr	r0, [pc, #112]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000d2c:	f002 fa28 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC4_Init+0x12a>
  {
    Error_Handler();
 8000d36:	f000 fd49 	bl	80017cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_ADC4_Init+0x1a8>)
 8000d3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d3e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000d42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d44:	463b      	mov	r3, r7
 8000d46:	4619      	mov	r1, r3
 8000d48:	4814      	ldr	r0, [pc, #80]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000d4a:	f002 fa19 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC4_Init+0x148>
  {
    Error_Handler();
 8000d54:	f000 fd3a 	bl	80017cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <MX_ADC4_Init+0x1ac>)
 8000d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d5c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000d60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000d68:	f002 fa0a 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC4_Init+0x166>
  {
    Error_Handler();
 8000d72:	f000 fd2b 	bl	80017cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_ADC4_Init+0x1b0>)
 8000d78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d7a:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000d7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_ADC4_Init+0x18c>)
 8000d86:	f002 f9fb 	bl	8003180 <HAL_ADC_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ADC4_Init+0x184>
  {
    Error_Handler();
 8000d90:	f000 fd1c 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	3720      	adds	r7, #32
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200004cc 	.word	0x200004cc
 8000da0:	50000500 	.word	0x50000500
 8000da4:	14f00020 	.word	0x14f00020
 8000da8:	32601000 	.word	0x32601000
 8000dac:	2a000400 	.word	0x2a000400
 8000db0:	2e300800 	.word	0x2e300800
 8000db4:	36902000 	.word	0x36902000
 8000db8:	1d500080 	.word	0x1d500080
 8000dbc:	21800100 	.word	0x21800100
 8000dc0:	25b00200 	.word	0x25b00200

08000dc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0a2      	sub	sp, #136	; 0x88
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	2254      	movs	r2, #84	; 0x54
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f009 fcef 	bl	800a7c8 <memset>
  if(adcHandle->Instance==ADC1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df2:	d135      	bne.n	8000e60 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000df4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000df8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000dfa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dfe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	f107 0320 	add.w	r3, r7, #32
 8000e04:	4618      	mov	r0, r3
 8000e06:	f005 fe25 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e10:	f000 fcdc 	bl	80017cc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e14:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e18:	4a57      	ldr	r2, [pc, #348]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000e1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e20:	4b55      	ldr	r3, [pc, #340]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b52      	ldr	r3, [pc, #328]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a51      	ldr	r2, [pc, #324]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b4f      	ldr	r3, [pc, #316]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = FIRMWARECHECK_Pin;
 8000e44:	2308      	movs	r3, #8
 8000e46:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(FIRMWARECHECK_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f003 ff03 	bl	8004c64 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000e5e:	e086      	b.n	8000f6e <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC4)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a45      	ldr	r2, [pc, #276]	; (8000f7c <HAL_ADC_MspInit+0x1b8>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	f040 8081 	bne.w	8000f6e <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e70:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000e72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000e76:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f005 fde9 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 8000e88:	f000 fca0 	bl	80017cc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e90:	4a39      	ldr	r2, [pc, #228]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e98:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea4:	4b34      	ldr	r3, [pc, #208]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea8:	4a33      	ldr	r2, [pc, #204]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb0:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebc:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	4a2d      	ldr	r2, [pc, #180]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <HAL_ADC_MspInit+0x1b4>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8000ed4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ed8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	2303      	movs	r3, #3
 8000edc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4825      	ldr	r0, [pc, #148]	; (8000f80 <HAL_ADC_MspInit+0x1bc>)
 8000eea:	f003 febb 	bl	8004c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG_2_Pin|ANALOG_5_Pin|ANALOG_6_Pin|ANALOG_7_Pin
 8000eee:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8000ef2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f00:	4619      	mov	r1, r3
 8000f02:	4820      	ldr	r0, [pc, #128]	; (8000f84 <HAL_ADC_MspInit+0x1c0>)
 8000f04:	f003 feae 	bl	8004c64 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel3;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <HAL_ADC_MspInit+0x1c4>)
 8000f0a:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <HAL_ADC_MspInit+0x1c8>)
 8000f0c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <HAL_ADC_MspInit+0x1c4>)
 8000f10:	2226      	movs	r2, #38	; 0x26
 8000f12:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_ADC_MspInit+0x1c4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_ADC_MspInit+0x1c4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_ADC_MspInit+0x1c4>)
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_ADC_MspInit+0x1c4>)
 8000f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2c:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_ADC_MspInit+0x1c4>)
 8000f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f34:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_ADC_MspInit+0x1c4>)
 8000f38:	2220      	movs	r2, #32
 8000f3a:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_ADC_MspInit+0x1c4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <HAL_ADC_MspInit+0x1c4>)
 8000f44:	f003 f9b8 	bl	80042b8 <HAL_DMA_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 8000f4e:	f000 fc3d 	bl	80017cc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <HAL_ADC_MspInit+0x1c4>)
 8000f56:	655a      	str	r2, [r3, #84]	; 0x54
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_ADC_MspInit+0x1c4>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	203d      	movs	r0, #61	; 0x3d
 8000f64:	f003 f88e 	bl	8004084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000f68:	203d      	movs	r0, #61	; 0x3d
 8000f6a:	f003 f8a5 	bl	80040b8 <HAL_NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3788      	adds	r7, #136	; 0x88
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	50000500 	.word	0x50000500
 8000f80:	48000400 	.word	0x48000400
 8000f84:	48000c00 	.word	0x48000c00
 8000f88:	20000538 	.word	0x20000538
 8000f8c:	40020030 	.word	0x40020030

08000f90 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000fae:	f008 f819 	bl	8008fe4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <MX_CRC_Init+0x3c>)
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <MX_CRC_Init+0x40>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_CRC_Init+0x3c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <MX_CRC_Init+0x3c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_CRC_Init+0x3c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <MX_CRC_Init+0x3c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_CRC_Init+0x3c>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_CRC_Init+0x3c>)
 8000fe2:	f003 f877 	bl	80040d4 <HAL_CRC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fec:	f000 fbee 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000598 	.word	0x20000598
 8000ff8:	40023000 	.word	0x40023000

08000ffc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_CRC_MspInit+0x38>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10b      	bne.n	8001026 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_CRC_MspInit+0x3c>)
 8001010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001012:	4a09      	ldr	r2, [pc, #36]	; (8001038 <HAL_CRC_MspInit+0x3c>)
 8001014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001018:	6493      	str	r3, [r2, #72]	; 0x48
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <HAL_CRC_MspInit+0x3c>)
 800101c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023000 	.word	0x40023000
 8001038:	40021000 	.word	0x40021000

0800103c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_DMA_Init+0x70>)
 8001044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001046:	4a19      	ldr	r2, [pc, #100]	; (80010ac <MX_DMA_Init+0x70>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6493      	str	r3, [r2, #72]	; 0x48
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_DMA_Init+0x70>)
 8001050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_DMA_Init+0x70>)
 800105c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <MX_DMA_Init+0x70>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6493      	str	r3, [r2, #72]	; 0x48
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_DMA_Init+0x70>)
 8001068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	200b      	movs	r0, #11
 8001078:	f003 f804 	bl	8004084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800107c:	200b      	movs	r0, #11
 800107e:	f003 f81b 	bl	80040b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	200c      	movs	r0, #12
 8001088:	f002 fffc 	bl	8004084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800108c:	200c      	movs	r0, #12
 800108e:	f003 f813 	bl	80040b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	200d      	movs	r0, #13
 8001098:	f002 fff4 	bl	8004084 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800109c:	200d      	movs	r0, #13
 800109e:	f003 f80b 	bl	80040b8 <HAL_NVIC_EnableIRQ>

}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010b6:	4a20      	ldr	r2, [pc, #128]	; (8001138 <MX_FDCAN1_Init+0x88>)
 80010b8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010da:	2200      	movs	r2, #0
 80010dc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010e0:	2204      	movs	r2, #4
 80010e2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010ec:	2205      	movs	r2, #5
 80010ee:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_FDCAN1_Init+0x84>)
 80010fe:	2201      	movs	r2, #1
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_FDCAN1_Init+0x84>)
 8001104:	2201      	movs	r2, #1
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_FDCAN1_Init+0x84>)
 800110a:	2201      	movs	r2, #1
 800110c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_FDCAN1_Init+0x84>)
 8001110:	2200      	movs	r2, #0
 8001112:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_FDCAN1_Init+0x84>)
 8001116:	2200      	movs	r2, #0
 8001118:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_FDCAN1_Init+0x84>)
 800111c:	2200      	movs	r2, #0
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_FDCAN1_Init+0x84>)
 8001122:	f003 fbb1 	bl	8004888 <HAL_FDCAN_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800112c:	f000 fb4e 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200005bc 	.word	0x200005bc
 8001138:	40006400 	.word	0x40006400

0800113c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b09e      	sub	sp, #120	; 0x78
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2254      	movs	r2, #84	; 0x54
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f009 fb33 	bl	800a7c8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <HAL_FDCAN_MspInit+0xac>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d139      	bne.n	80011e0 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001176:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4618      	mov	r0, r3
 800117e:	f005 fc69 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001188:	f000 fb20 	bl	80017cc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_FDCAN_MspInit+0xb0>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	4a16      	ldr	r2, [pc, #88]	; (80011ec <HAL_FDCAN_MspInit+0xb0>)
 8001192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001196:	6593      	str	r3, [r2, #88]	; 0x58
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_FDCAN_MspInit+0xb0>)
 800119a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_FDCAN_MspInit+0xb0>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a10      	ldr	r2, [pc, #64]	; (80011ec <HAL_FDCAN_MspInit+0xb0>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_FDCAN_MspInit+0xb0>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011ce:	2309      	movs	r3, #9
 80011d0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011d6:	4619      	mov	r1, r3
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f003 fd42 	bl	8004c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80011e0:	bf00      	nop
 80011e2:	3778      	adds	r7, #120	; 0x78
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40006400 	.word	0x40006400
 80011ec:	40021000 	.word	0x40021000

080011f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001206:	4b5b      	ldr	r3, [pc, #364]	; (8001374 <MX_GPIO_Init+0x184>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a5a      	ldr	r2, [pc, #360]	; (8001374 <MX_GPIO_Init+0x184>)
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b58      	ldr	r3, [pc, #352]	; (8001374 <MX_GPIO_Init+0x184>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0320 	and.w	r3, r3, #32
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b55      	ldr	r3, [pc, #340]	; (8001374 <MX_GPIO_Init+0x184>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a54      	ldr	r2, [pc, #336]	; (8001374 <MX_GPIO_Init+0x184>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b52      	ldr	r3, [pc, #328]	; (8001374 <MX_GPIO_Init+0x184>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b4f      	ldr	r3, [pc, #316]	; (8001374 <MX_GPIO_Init+0x184>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a4e      	ldr	r2, [pc, #312]	; (8001374 <MX_GPIO_Init+0x184>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <MX_GPIO_Init+0x184>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b49      	ldr	r3, [pc, #292]	; (8001374 <MX_GPIO_Init+0x184>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a48      	ldr	r2, [pc, #288]	; (8001374 <MX_GPIO_Init+0x184>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b46      	ldr	r3, [pc, #280]	; (8001374 <MX_GPIO_Init+0x184>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	4b43      	ldr	r3, [pc, #268]	; (8001374 <MX_GPIO_Init+0x184>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a42      	ldr	r2, [pc, #264]	; (8001374 <MX_GPIO_Init+0x184>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b40      	ldr	r3, [pc, #256]	; (8001374 <MX_GPIO_Init+0x184>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <MX_GPIO_Init+0x184>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a3c      	ldr	r2, [pc, #240]	; (8001374 <MX_GPIO_Init+0x184>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <MX_GPIO_Init+0x184>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8001296:	2200      	movs	r2, #0
 8001298:	f641 7130 	movw	r1, #7984	; 0x1f30
 800129c:	4836      	ldr	r0, [pc, #216]	; (8001378 <MX_GPIO_Init+0x188>)
 800129e:	f003 fe63 	bl	8004f68 <HAL_GPIO_WritePin>
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRDY1_Pin|RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f246 0103 	movw	r1, #24579	; 0x6003
 80012a8:	4834      	ldr	r0, [pc, #208]	; (800137c <MX_GPIO_Init+0x18c>)
 80012aa:	f003 fe5d 	bl	8004f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STARTSYNC_2_Pin|CS2_Pin|DRDY2_Pin|RESET2_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80012b4:	4832      	ldr	r0, [pc, #200]	; (8001380 <MX_GPIO_Init+0x190>)
 80012b6:	f003 fe57 	bl	8004f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANALOGSWITCH_5_GPIO_Port, ANALOGSWITCH_5_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c0:	4830      	ldr	r0, [pc, #192]	; (8001384 <MX_GPIO_Init+0x194>)
 80012c2:	f003 fe51 	bl	8004f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d0:	f003 fe4a 	bl	8004f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 80012d4:	f641 7330 	movw	r3, #7984	; 0x1f30
 80012d8:	61fb      	str	r3, [r7, #28]
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	4822      	ldr	r0, [pc, #136]	; (8001378 <MX_GPIO_Init+0x188>)
 80012ee:	f003 fcb9 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin;
 80012f2:	f246 0303 	movw	r3, #24579	; 0x6003
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	481c      	ldr	r0, [pc, #112]	; (800137c <MX_GPIO_Init+0x18c>)
 800130c:	f003 fcaa 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STARTSYNC_2_Pin|CS2_Pin|DRDY2_Pin|RESET2_Pin;
 8001310:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4815      	ldr	r0, [pc, #84]	; (8001380 <MX_GPIO_Init+0x190>)
 800132a:	f003 fc9b 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_5_Pin;
 800132e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ANALOGSWITCH_5_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 031c 	add.w	r3, r7, #28
 8001344:	4619      	mov	r1, r3
 8001346:	480f      	ldr	r0, [pc, #60]	; (8001384 <MX_GPIO_Init+0x194>)
 8001348:	f003 fc8c 	bl	8004c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin;
 800134c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001368:	f003 fc7c 	bl	8004c64 <HAL_GPIO_Init>

}
 800136c:	bf00      	nop
 800136e:	3730      	adds	r7, #48	; 0x30
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	48000800 	.word	0x48000800
 800137c:	48000400 	.word	0x48000400
 8001380:	48001000 	.word	0x48001000
 8001384:	48000c00 	.word	0x48000c00

08001388 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_I2C1_Init+0x74>)
 800138e:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <MX_I2C1_Init+0x78>)
 8001390:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_I2C1_Init+0x74>)
 8001394:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <MX_I2C1_Init+0x7c>)
 8001396:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_I2C1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_I2C1_Init+0x74>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_I2C1_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_I2C1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_I2C1_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_I2C1_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_I2C1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c2:	480e      	ldr	r0, [pc, #56]	; (80013fc <MX_I2C1_Init+0x74>)
 80013c4:	f003 fe02 	bl	8004fcc <HAL_I2C_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ce:	f000 f9fd 	bl	80017cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	4809      	ldr	r0, [pc, #36]	; (80013fc <MX_I2C1_Init+0x74>)
 80013d6:	f004 fc92 	bl	8005cfe <HAL_I2CEx_ConfigAnalogFilter>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013e0:	f000 f9f4 	bl	80017cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013e4:	2100      	movs	r1, #0
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_I2C1_Init+0x74>)
 80013e8:	f004 fcd4 	bl	8005d94 <HAL_I2CEx_ConfigDigitalFilter>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013f2:	f000 f9eb 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000620 	.word	0x20000620
 8001400:	40005400 	.word	0x40005400
 8001404:	30a0a7fb 	.word	0x30a0a7fb

08001408 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_I2C4_Init+0x74>)
 800140e:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <MX_I2C4_Init+0x78>)
 8001410:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10802D9B;
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <MX_I2C4_Init+0x74>)
 8001414:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <MX_I2C4_Init+0x7c>)
 8001416:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_I2C4_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <MX_I2C4_Init+0x74>)
 8001420:	2201      	movs	r2, #1
 8001422:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <MX_I2C4_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800142a:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_I2C4_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_I2C4_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_I2C4_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_I2C4_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001442:	480e      	ldr	r0, [pc, #56]	; (800147c <MX_I2C4_Init+0x74>)
 8001444:	f003 fdc2 	bl	8004fcc <HAL_I2C_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800144e:	f000 f9bd 	bl	80017cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001452:	2100      	movs	r1, #0
 8001454:	4809      	ldr	r0, [pc, #36]	; (800147c <MX_I2C4_Init+0x74>)
 8001456:	f004 fc52 	bl	8005cfe <HAL_I2CEx_ConfigAnalogFilter>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001460:	f000 f9b4 	bl	80017cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001464:	2100      	movs	r1, #0
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_I2C4_Init+0x74>)
 8001468:	f004 fc94 	bl	8005d94 <HAL_I2CEx_ConfigDigitalFilter>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001472:	f000 f9ab 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000674 	.word	0x20000674
 8001480:	40008400 	.word	0x40008400
 8001484:	10802d9b 	.word	0x10802d9b

08001488 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b0a2      	sub	sp, #136	; 0x88
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a0:	f107 0320 	add.w	r3, r7, #32
 80014a4:	2254      	movs	r2, #84	; 0x54
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f009 f98d 	bl	800a7c8 <memset>
  if(i2cHandle->Instance==I2C1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a80      	ldr	r2, [pc, #512]	; (80016b4 <HAL_I2C_MspInit+0x22c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d158      	bne.n	800156a <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014b8:	2340      	movs	r3, #64	; 0x40
 80014ba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014bc:	2300      	movs	r3, #0
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	4618      	mov	r0, r3
 80014c6:	f005 fac5 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014d0:	f000 f97c 	bl	80017cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b78      	ldr	r3, [pc, #480]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	4a77      	ldr	r2, [pc, #476]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e0:	4b75      	ldr	r3, [pc, #468]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ec:	4b72      	ldr	r3, [pc, #456]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	4a71      	ldr	r2, [pc, #452]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 80014f2:	f043 0302 	orr.w	r3, r3, #2
 80014f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f8:	4b6f      	ldr	r3, [pc, #444]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001508:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150a:	2312      	movs	r3, #18
 800150c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001518:	2304      	movs	r3, #4
 800151a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001528:	f003 fb9c 	bl	8004c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001530:	2312      	movs	r3, #18
 8001532:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800153e:	2304      	movs	r3, #4
 8001540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001548:	4619      	mov	r1, r3
 800154a:	485c      	ldr	r0, [pc, #368]	; (80016bc <HAL_I2C_MspInit+0x234>)
 800154c:	f003 fb8a 	bl	8004c64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001550:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 8001556:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800155a:	6593      	str	r3, [r2, #88]	; 0x58
 800155c:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001568:	e0a0      	b.n	80016ac <HAL_I2C_MspInit+0x224>
  else if(i2cHandle->Instance==I2C4)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a54      	ldr	r2, [pc, #336]	; (80016c0 <HAL_I2C_MspInit+0x238>)
 8001570:	4293      	cmp	r3, r2
 8001572:	f040 809b 	bne.w	80016ac <HAL_I2C_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800157a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800157c:	2300      	movs	r3, #0
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001580:	f107 0320 	add.w	r3, r7, #32
 8001584:	4618      	mov	r0, r3
 8001586:	f005 fa65 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_I2C_MspInit+0x10c>
      Error_Handler();
 8001590:	f000 f91c 	bl	80017cc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001594:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	4a47      	ldr	r2, [pc, #284]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a0:	4b45      	ldr	r3, [pc, #276]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ac:	23c0      	movs	r3, #192	; 0xc0
 80015ae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b0:	2312      	movs	r3, #18
 80015b2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 80015be:	2308      	movs	r3, #8
 80015c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015c8:	4619      	mov	r1, r3
 80015ca:	483e      	ldr	r0, [pc, #248]	; (80016c4 <HAL_I2C_MspInit+0x23c>)
 80015cc:	f003 fb4a 	bl	8004c64 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80015d0:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	4a38      	ldr	r2, [pc, #224]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	65d3      	str	r3, [r2, #92]	; 0x5c
 80015dc:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <HAL_I2C_MspInit+0x230>)
 80015de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 80015e8:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <HAL_I2C_MspInit+0x240>)
 80015ea:	4a38      	ldr	r2, [pc, #224]	; (80016cc <HAL_I2C_MspInit+0x244>)
 80015ec:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 80015ee:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <HAL_I2C_MspInit+0x240>)
 80015f0:	2216      	movs	r2, #22
 80015f2:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f4:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <HAL_I2C_MspInit+0x240>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fa:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <HAL_I2C_MspInit+0x240>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001600:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HAL_I2C_MspInit+0x240>)
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_I2C_MspInit+0x240>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <HAL_I2C_MspInit+0x240>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_I2C_MspInit+0x240>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <HAL_I2C_MspInit+0x240>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 800161e:	482a      	ldr	r0, [pc, #168]	; (80016c8 <HAL_I2C_MspInit+0x240>)
 8001620:	f002 fe4a 	bl	80042b8 <HAL_DMA_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_MspInit+0x1a6>
      Error_Handler();
 800162a:	f000 f8cf 	bl	80017cc <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <HAL_I2C_MspInit+0x240>)
 8001632:	63da      	str	r2, [r3, #60]	; 0x3c
 8001634:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <HAL_I2C_MspInit+0x240>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <HAL_I2C_MspInit+0x248>)
 800163c:	4a25      	ldr	r2, [pc, #148]	; (80016d4 <HAL_I2C_MspInit+0x24c>)
 800163e:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_I2C_MspInit+0x248>)
 8001642:	2217      	movs	r2, #23
 8001644:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_I2C_MspInit+0x248>)
 8001648:	2210      	movs	r2, #16
 800164a:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_I2C_MspInit+0x248>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_I2C_MspInit+0x248>)
 8001654:	2280      	movs	r2, #128	; 0x80
 8001656:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_I2C_MspInit+0x248>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_I2C_MspInit+0x248>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <HAL_I2C_MspInit+0x248>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_I2C_MspInit+0x248>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001670:	4817      	ldr	r0, [pc, #92]	; (80016d0 <HAL_I2C_MspInit+0x248>)
 8001672:	f002 fe21 	bl	80042b8 <HAL_DMA_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_I2C_MspInit+0x1f8>
      Error_Handler();
 800167c:	f000 f8a6 	bl	80017cc <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <HAL_I2C_MspInit+0x248>)
 8001684:	639a      	str	r2, [r3, #56]	; 0x38
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <HAL_I2C_MspInit+0x248>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2100      	movs	r1, #0
 8001690:	2052      	movs	r0, #82	; 0x52
 8001692:	f002 fcf7 	bl	8004084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001696:	2052      	movs	r0, #82	; 0x52
 8001698:	f002 fd0e 	bl	80040b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	2053      	movs	r0, #83	; 0x53
 80016a2:	f002 fcef 	bl	8004084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80016a6:	2053      	movs	r0, #83	; 0x53
 80016a8:	f002 fd06 	bl	80040b8 <HAL_NVIC_EnableIRQ>
}
 80016ac:	bf00      	nop
 80016ae:	3788      	adds	r7, #136	; 0x88
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40005400 	.word	0x40005400
 80016b8:	40021000 	.word	0x40021000
 80016bc:	48000400 	.word	0x48000400
 80016c0:	40008400 	.word	0x40008400
 80016c4:	48000800 	.word	0x48000800
 80016c8:	200006c8 	.word	0x200006c8
 80016cc:	40020008 	.word	0x40020008
 80016d0:	20000728 	.word	0x20000728
 80016d4:	4002001c 	.word	0x4002001c

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016dc:	f000 fd9e 	bl	800221c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e0:	f000 f819 	bl	8001716 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e4:	f7ff fd84 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80016e8:	f7ff fca8 	bl	800103c <MX_DMA_Init>
  MX_FDCAN1_Init();
 80016ec:	f7ff fce0 	bl	80010b0 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 80016f0:	f000 fa00 	bl	8001af4 <MX_TIM2_Init>
  MX_CRC_Init();
 80016f4:	f7ff fc60 	bl	8000fb8 <MX_CRC_Init>
  MX_ADC4_Init();
 80016f8:	f7ff fa8a 	bl	8000c10 <MX_ADC4_Init>
  MX_SPI4_Init();
 80016fc:	f000 f86c 	bl	80017d8 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001700:	f7ff fa0e 	bl	8000b20 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001704:	f7ff fe40 	bl	8001388 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001708:	f7ff fe7e 	bl	8001408 <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 800170c:	f000 fab0 	bl	8001c70 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001710:	f7ff fc4b 	bl	8000faa <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001714:	e7fe      	b.n	8001714 <main+0x3c>

08001716 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b094      	sub	sp, #80	; 0x50
 800171a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171c:	f107 0318 	add.w	r3, r7, #24
 8001720:	2238      	movs	r2, #56	; 0x38
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f009 f84f 	bl	800a7c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001738:	2000      	movs	r0, #0
 800173a:	f004 fb77 	bl	8005e2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800173e:	2301      	movs	r3, #1
 8001740:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001748:	2302      	movs	r3, #2
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174c:	2303      	movs	r3, #3
 800174e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001750:	2306      	movs	r3, #6
 8001752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001754:	2355      	movs	r3, #85	; 0x55
 8001756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001758:	2302      	movs	r3, #2
 800175a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800175c:	2302      	movs	r3, #2
 800175e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001760:	2302      	movs	r3, #2
 8001762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	4618      	mov	r0, r3
 800176a:	f004 fc13 	bl	8005f94 <HAL_RCC_OscConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001774:	f000 f82a 	bl	80017cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001778:	230f      	movs	r3, #15
 800177a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177c:	2303      	movs	r3, #3
 800177e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2104      	movs	r1, #4
 8001790:	4618      	mov	r0, r3
 8001792:	f004 ff11 	bl	80065b8 <HAL_RCC_ClockConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800179c:	f000 f816 	bl	80017cc <Error_Handler>
  }
}
 80017a0:	bf00      	nop
 80017a2:	3750      	adds	r7, #80	; 0x50
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ba:	f000 fd47 	bl	800224c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40001000 	.word	0x40001000

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <Error_Handler+0x8>
	...

080017d8 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_SPI4_Init+0x74>)
 80017de:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <MX_SPI4_Init+0x78>)
 80017e0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_SPI4_Init+0x74>)
 80017e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017e8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <MX_SPI4_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_SPI4_Init+0x74>)
 80017f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017f6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_SPI4_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_SPI4_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_SPI4_Init+0x74>)
 8001806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_SPI4_Init+0x74>)
 800180e:	2210      	movs	r2, #16
 8001810:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_SPI4_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_SPI4_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_SPI4_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_SPI4_Init+0x74>)
 8001826:	2207      	movs	r2, #7
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_SPI4_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_SPI4_Init+0x74>)
 8001832:	2208      	movs	r2, #8
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_SPI4_Init+0x74>)
 8001838:	f005 fb5a 	bl	8006ef0 <HAL_SPI_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001842:	f7ff ffc3 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000788 	.word	0x20000788
 8001850:	40013c00 	.word	0x40013c00

08001854 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <HAL_SPI_MspInit+0x7c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d128      	bne.n	80018c8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_SPI_MspInit+0x80>)
 8001878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187a:	4a16      	ldr	r2, [pc, #88]	; (80018d4 <HAL_SPI_MspInit+0x80>)
 800187c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001880:	6613      	str	r3, [r2, #96]	; 0x60
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_SPI_MspInit+0x80>)
 8001884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_SPI_MspInit+0x80>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <HAL_SPI_MspInit+0x80>)
 8001894:	f043 0310 	orr.w	r3, r3, #16
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_SPI_MspInit+0x80>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80018a6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80018b8:	2305      	movs	r3, #5
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4805      	ldr	r0, [pc, #20]	; (80018d8 <HAL_SPI_MspInit+0x84>)
 80018c4:	f003 f9ce 	bl	8004c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40013c00 	.word	0x40013c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48001000 	.word	0x48001000

080018dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_MspInit+0x4c>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e6:	4a10      	ldr	r2, [pc, #64]	; (8001928 <HAL_MspInit+0x4c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6613      	str	r3, [r2, #96]	; 0x60
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_MspInit+0x4c>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_MspInit+0x4c>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6593      	str	r3, [r2, #88]	; 0x58
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_MspInit+0x4c>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001912:	f000 fccd 	bl	80022b0 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001916:	2002      	movs	r0, #2
 8001918:	f000 fcb6 	bl	8002288 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800191c:	f004 fb2a 	bl	8005f74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	; 0x30
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800193c:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <HAL_InitTick+0xc4>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	4a2b      	ldr	r2, [pc, #172]	; (80019f0 <HAL_InitTick+0xc4>)
 8001942:	f043 0310 	orr.w	r3, r3, #16
 8001946:	6593      	str	r3, [r2, #88]	; 0x58
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <HAL_InitTick+0xc4>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001954:	f107 020c 	add.w	r2, r7, #12
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f005 f800 	bl	8006964 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001964:	f004 ffd2 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 8001968:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196c:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <HAL_InitTick+0xc8>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9b      	lsrs	r3, r3, #18
 8001974:	3b01      	subs	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_InitTick+0xcc>)
 800197a:	4a20      	ldr	r2, [pc, #128]	; (80019fc <HAL_InitTick+0xd0>)
 800197c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_InitTick+0xcc>)
 8001980:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001984:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001986:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <HAL_InitTick+0xcc>)
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_InitTick+0xcc>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_InitTick+0xcc>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001998:	4817      	ldr	r0, [pc, #92]	; (80019f8 <HAL_InitTick+0xcc>)
 800199a:	f005 fb54 	bl	8007046 <HAL_TIM_Base_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80019a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d11b      	bne.n	80019e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80019ac:	4812      	ldr	r0, [pc, #72]	; (80019f8 <HAL_InitTick+0xcc>)
 80019ae:	f005 fbab 	bl	8007108 <HAL_TIM_Base_Start_IT>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80019b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d111      	bne.n	80019e4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019c0:	2036      	movs	r0, #54	; 0x36
 80019c2:	f002 fb79 	bl	80040b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d808      	bhi.n	80019de <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	2036      	movs	r0, #54	; 0x36
 80019d2:	f002 fb57 	bl	8004084 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <HAL_InitTick+0xd4>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e002      	b.n	80019e4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3730      	adds	r7, #48	; 0x30
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	431bde83 	.word	0x431bde83
 80019f8:	200007ec 	.word	0x200007ec
 80019fc:	40001000 	.word	0x40001000
 8001a00:	20000004 	.word	0x20000004

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a08:	e7fe      	b.n	8001a08 <NMI_Handler+0x4>

08001a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <HardFault_Handler+0x4>

08001a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <MemManage_Handler+0x4>

08001a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <BusFault_Handler+0x4>

08001a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <UsageFault_Handler+0x4>

08001a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <DMA1_Channel1_IRQHandler+0x10>)
 8001a36:	f002 fdc9 	bl	80045cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200006c8 	.word	0x200006c8

08001a44 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <DMA1_Channel2_IRQHandler+0x10>)
 8001a4a:	f002 fdbf 	bl	80045cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000728 	.word	0x20000728

08001a58 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <DMA1_Channel3_IRQHandler+0x10>)
 8001a5e:	f002 fdb5 	bl	80045cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000538 	.word	0x20000538

08001a6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <TIM2_IRQHandler+0x10>)
 8001a72:	f005 fc18 	bl	80072a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000838 	.word	0x20000838

08001a80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <TIM6_DAC_IRQHandler+0x10>)
 8001a86:	f005 fc0e 	bl	80072a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200007ec 	.word	0x200007ec

08001a94 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <ADC4_IRQHandler+0x10>)
 8001a9a:	f001 f8e9 	bl	8002c70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200004cc 	.word	0x200004cc

08001aa8 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <I2C4_EV_IRQHandler+0x10>)
 8001aae:	f003 fb28 	bl	8005102 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000674 	.word	0x20000674

08001abc <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <I2C4_ER_IRQHandler+0x10>)
 8001ac2:	f003 fb38 	bl	8005136 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000674 	.word	0x20000674

08001ad0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <SystemInit+0x20>)
 8001ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <SystemInit+0x20>)
 8001adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b12:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <MX_TIM2_Init+0xe4>)
 8001b14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <MX_TIM2_Init+0xe4>)
 8001b1c:	22a9      	movs	r2, #169	; 0xa9
 8001b1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <MX_TIM2_Init+0xe4>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b26:	4b2c      	ldr	r3, [pc, #176]	; (8001bd8 <MX_TIM2_Init+0xe4>)
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <MX_TIM2_Init+0xe4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <MX_TIM2_Init+0xe4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b3a:	4827      	ldr	r0, [pc, #156]	; (8001bd8 <MX_TIM2_Init+0xe4>)
 8001b3c:	f005 fb5c 	bl	80071f8 <HAL_TIM_IC_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b46:	f7ff fe41 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	481f      	ldr	r0, [pc, #124]	; (8001bd8 <MX_TIM2_Init+0xe4>)
 8001b5a:	f005 ffcf 	bl	8007afc <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001b64:	f7ff fe32 	bl	80017cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4816      	ldr	r0, [pc, #88]	; (8001bd8 <MX_TIM2_Init+0xe4>)
 8001b80:	f005 fce0 	bl	8007544 <HAL_TIM_IC_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b8a:	f7ff fe1f 	bl	80017cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2204      	movs	r2, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4810      	ldr	r0, [pc, #64]	; (8001bd8 <MX_TIM2_Init+0xe4>)
 8001b96:	f005 fcd5 	bl	8007544 <HAL_TIM_IC_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001ba0:	f7ff fe14 	bl	80017cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <MX_TIM2_Init+0xe4>)
 8001bac:	f005 fcca 	bl	8007544 <HAL_TIM_IC_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001bb6:	f7ff fe09 	bl	80017cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	220c      	movs	r2, #12
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_TIM2_Init+0xe4>)
 8001bc2:	f005 fcbf 	bl	8007544 <HAL_TIM_IC_ConfigChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001bcc:	f7ff fdfe 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000838 	.word	0x20000838

08001bdc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d12f      	bne.n	8001c5e <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_TIM_IC_MspInit+0x8c>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	4a19      	ldr	r2, [pc, #100]	; (8001c68 <HAL_TIM_IC_MspInit+0x8c>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_TIM_IC_MspInit+0x8c>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_TIM_IC_MspInit+0x8c>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <HAL_TIM_IC_MspInit+0x8c>)
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_TIM_IC_MspInit+0x8c>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FREQUENCY_3_Pin|FREQUENCY_2_Pin|FREQUENCY_1_Pin|FREQUENCY_4_Pin;
 8001c2e:	23d8      	movs	r3, #216	; 0xd8
 8001c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <HAL_TIM_IC_MspInit+0x90>)
 8001c4a:	f003 f80b 	bl	8004c64 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	201c      	movs	r0, #28
 8001c54:	f002 fa16 	bl	8004084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c58:	201c      	movs	r0, #28
 8001c5a:	f002 fa2d 	bl	80040b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	; 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	48000c00 	.word	0x48000c00

08001c70 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001c76:	4a21      	ldr	r2, [pc, #132]	; (8001cfc <MX_LPUART1_UART_Init+0x8c>)
 8001c78:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001c7c:	4a20      	ldr	r2, [pc, #128]	; (8001d00 <MX_LPUART1_UART_Init+0x90>)
 8001c7e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001c94:	220c      	movs	r2, #12
 8001c96:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c98:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001cb0:	4811      	ldr	r0, [pc, #68]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001cb2:	f005 ffff 	bl	8007cb4 <HAL_UART_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001cbc:	f7ff fd86 	bl	80017cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001cc4:	f006 fd9a 	bl	80087fc <HAL_UARTEx_SetTxFifoThreshold>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001cce:	f7ff fd7d 	bl	80017cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4808      	ldr	r0, [pc, #32]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001cd6:	f006 fdcf 	bl	8008878 <HAL_UARTEx_SetRxFifoThreshold>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001ce0:	f7ff fd74 	bl	80017cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ce4:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <MX_LPUART1_UART_Init+0x88>)
 8001ce6:	f006 fd50 	bl	800878a <HAL_UARTEx_DisableFifoMode>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001cf0:	f7ff fd6c 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000884 	.word	0x20000884
 8001cfc:	40008000 	.word	0x40008000
 8001d00:	00033324 	.word	0x00033324

08001d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b09e      	sub	sp, #120	; 0x78
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	2254      	movs	r2, #84	; 0x54
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f008 fd4f 	bl	800a7c8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <HAL_UART_MspInit+0xa4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d135      	bne.n	8001da0 <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d34:	2320      	movs	r3, #32
 8001d36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4618      	mov	r0, r3
 8001d42:	f004 fe87 	bl	8006a54 <HAL_RCCEx_PeriphCLKConfig>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d4c:	f7ff fd3e 	bl	80017cc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_UART_MspInit+0xa8>)
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	4a15      	ldr	r2, [pc, #84]	; (8001dac <HAL_UART_MspInit+0xa8>)
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_UART_MspInit+0xa8>)
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_UART_MspInit+0xa8>)
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <HAL_UART_MspInit+0xa8>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <HAL_UART_MspInit+0xa8>)
 8001d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d80:	2303      	movs	r3, #3
 8001d82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d90:	2308      	movs	r3, #8
 8001d92:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <HAL_UART_MspInit+0xac>)
 8001d9c:	f002 ff62 	bl	8004c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001da0:	bf00      	nop
 8001da2:	3778      	adds	r7, #120	; 0x78
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40008000 	.word	0x40008000
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48000800 	.word	0x48000800

08001db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001db4:	480d      	ldr	r0, [pc, #52]	; (8001dec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001db6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001db8:	f7ff fe8a 	bl	8001ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dbc:	480c      	ldr	r0, [pc, #48]	; (8001df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dbe:	490d      	ldr	r1, [pc, #52]	; (8001df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <LoopForever+0xe>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	; (8001e00 <LoopForever+0x16>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001de2:	f008 fcf9 	bl	800a7d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001de6:	f7ff fc77 	bl	80016d8 <main>

08001dea <LoopForever>:

LoopForever:
    b LoopForever
 8001dea:	e7fe      	b.n	8001dea <LoopForever>
  ldr   r0, =_estack
 8001dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001df8:	0800a92c 	.word	0x0800a92c
  ldr r2, =_sbss
 8001dfc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e00:	200010c4 	.word	0x200010c4

08001e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC1_2_IRQHandler>
	...

08001e08 <ThreadX_Init>:

uint32_t adcValues[8];
uint8_t analogRxData[16];


UINT ThreadX_Init(VOID *memory_ptr){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08e      	sub	sp, #56	; 0x38
 8001e0c:	af08      	add	r7, sp, #32
 8001e0e:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

	TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	613b      	str	r3, [r7, #16]
	CHAR *pointer;

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001e18:	f107 010c 	add.w	r1, r7, #12
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e22:	6938      	ldr	r0, [r7, #16]
 8001e24:	f008 f9d4 	bl	800a1d0 <_txe_byte_allocate>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <ThreadX_Init+0x2a>
	  return TX_POOL_ERROR;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e0a1      	b.n	8001f76 <ThreadX_Init+0x16e>
	}

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001e32:	f107 010c 	add.w	r1, r7, #12
 8001e36:	2300      	movs	r3, #0
 8001e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3c:	6938      	ldr	r0, [r7, #16]
 8001e3e:	f008 f9c7 	bl	800a1d0 <_txe_byte_allocate>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <ThreadX_Init+0x44>
	  return TX_POOL_ERROR;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e094      	b.n	8001f76 <ThreadX_Init+0x16e>
	}

	if(tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	22b0      	movs	r2, #176	; 0xb0
 8001e50:	9206      	str	r2, [sp, #24]
 8001e52:	2201      	movs	r2, #1
 8001e54:	9205      	str	r2, [sp, #20]
 8001e56:	2200      	movs	r2, #0
 8001e58:	9204      	str	r2, [sp, #16]
 8001e5a:	220a      	movs	r2, #10
 8001e5c:	9203      	str	r2, [sp, #12]
 8001e5e:	220a      	movs	r2, #10
 8001e60:	9202      	str	r2, [sp, #8]
 8001e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e66:	9201      	str	r2, [sp, #4]
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	4a44      	ldr	r2, [pc, #272]	; (8001f80 <ThreadX_Init+0x178>)
 8001e6e:	4945      	ldr	r1, [pc, #276]	; (8001f84 <ThreadX_Init+0x17c>)
 8001e70:	4845      	ldr	r0, [pc, #276]	; (8001f88 <ThreadX_Init+0x180>)
 8001e72:	f008 fbb7 	bl	800a5e4 <_txe_thread_create>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <ThreadX_Init+0x78>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
	  return TX_THREAD_ERROR;
 8001e7c:	230e      	movs	r3, #14
 8001e7e:	e07a      	b.n	8001f76 <ThreadX_Init+0x16e>
	}

	if(tx_thread_create(&txMainThread, "txAnalogThread", txAnalogThreadEntry, 0, pointer,
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	22b0      	movs	r2, #176	; 0xb0
 8001e84:	9206      	str	r2, [sp, #24]
 8001e86:	2201      	movs	r2, #1
 8001e88:	9205      	str	r2, [sp, #20]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	9204      	str	r2, [sp, #16]
 8001e8e:	220a      	movs	r2, #10
 8001e90:	9203      	str	r2, [sp, #12]
 8001e92:	220a      	movs	r2, #10
 8001e94:	9202      	str	r2, [sp, #8]
 8001e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e9a:	9201      	str	r2, [sp, #4]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	4a3a      	ldr	r2, [pc, #232]	; (8001f8c <ThreadX_Init+0x184>)
 8001ea2:	493b      	ldr	r1, [pc, #236]	; (8001f90 <ThreadX_Init+0x188>)
 8001ea4:	4838      	ldr	r0, [pc, #224]	; (8001f88 <ThreadX_Init+0x180>)
 8001ea6:	f008 fb9d 	bl	800a5e4 <_txe_thread_create>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <ThreadX_Init+0xac>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
	  return TX_THREAD_ERROR;
 8001eb0:	230e      	movs	r3, #14
 8001eb2:	e060      	b.n	8001f76 <ThreadX_Init+0x16e>
	}

	if(tx_thread_create(&txMainThread, "txAeroThread", txAeroThreadEntry, 0, pointer,
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	22b0      	movs	r2, #176	; 0xb0
 8001eb8:	9206      	str	r2, [sp, #24]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	9205      	str	r2, [sp, #20]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	9204      	str	r2, [sp, #16]
 8001ec2:	220a      	movs	r2, #10
 8001ec4:	9203      	str	r2, [sp, #12]
 8001ec6:	220a      	movs	r2, #10
 8001ec8:	9202      	str	r2, [sp, #8]
 8001eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ece:	9201      	str	r2, [sp, #4]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	4a2f      	ldr	r2, [pc, #188]	; (8001f94 <ThreadX_Init+0x18c>)
 8001ed6:	4930      	ldr	r1, [pc, #192]	; (8001f98 <ThreadX_Init+0x190>)
 8001ed8:	482b      	ldr	r0, [pc, #172]	; (8001f88 <ThreadX_Init+0x180>)
 8001eda:	f008 fb83 	bl	800a5e4 <_txe_thread_create>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <ThreadX_Init+0xe0>
					   TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
		return TX_THREAD_ERROR;
 8001ee4:	230e      	movs	r3, #14
 8001ee6:	e046      	b.n	8001f76 <ThreadX_Init+0x16e>
	}
	if(tx_thread_create(&txMainThread, "txCAN500Hz", txCAN500HzThreadEntry, 0, pointer,
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	22b0      	movs	r2, #176	; 0xb0
 8001eec:	9206      	str	r2, [sp, #24]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	9205      	str	r2, [sp, #20]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	9204      	str	r2, [sp, #16]
 8001ef6:	220a      	movs	r2, #10
 8001ef8:	9203      	str	r2, [sp, #12]
 8001efa:	220a      	movs	r2, #10
 8001efc:	9202      	str	r2, [sp, #8]
 8001efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f02:	9201      	str	r2, [sp, #4]
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2300      	movs	r3, #0
 8001f08:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <ThreadX_Init+0x194>)
 8001f0a:	4925      	ldr	r1, [pc, #148]	; (8001fa0 <ThreadX_Init+0x198>)
 8001f0c:	481e      	ldr	r0, [pc, #120]	; (8001f88 <ThreadX_Init+0x180>)
 8001f0e:	f008 fb69 	bl	800a5e4 <_txe_thread_create>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <ThreadX_Init+0x114>
					   TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
		return TX_THREAD_ERROR;
 8001f18:	230e      	movs	r3, #14
 8001f1a:	e02c      	b.n	8001f76 <ThreadX_Init+0x16e>
	}

	if(tx_thread_create(&txMainThread, "txCAN100Hz", txCAN100HzThreadEntry, 0, pointer,
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	22b0      	movs	r2, #176	; 0xb0
 8001f20:	9206      	str	r2, [sp, #24]
 8001f22:	2201      	movs	r2, #1
 8001f24:	9205      	str	r2, [sp, #20]
 8001f26:	2200      	movs	r2, #0
 8001f28:	9204      	str	r2, [sp, #16]
 8001f2a:	220a      	movs	r2, #10
 8001f2c:	9203      	str	r2, [sp, #12]
 8001f2e:	220a      	movs	r2, #10
 8001f30:	9202      	str	r2, [sp, #8]
 8001f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f36:	9201      	str	r2, [sp, #4]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <ThreadX_Init+0x19c>)
 8001f3e:	491a      	ldr	r1, [pc, #104]	; (8001fa8 <ThreadX_Init+0x1a0>)
 8001f40:	4811      	ldr	r0, [pc, #68]	; (8001f88 <ThreadX_Init+0x180>)
 8001f42:	f008 fb4f 	bl	800a5e4 <_txe_thread_create>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <ThreadX_Init+0x148>
					   TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
		return TX_THREAD_ERROR;
 8001f4c:	230e      	movs	r3, #14
 8001f4e:	e012      	b.n	8001f76 <ThreadX_Init+0x16e>
	}

	tx_semaphore_create(&analogSemaphore, "analogSemaphore", 0);
 8001f50:	231c      	movs	r3, #28
 8001f52:	2200      	movs	r2, #0
 8001f54:	4915      	ldr	r1, [pc, #84]	; (8001fac <ThreadX_Init+0x1a4>)
 8001f56:	4816      	ldr	r0, [pc, #88]	; (8001fb0 <ThreadX_Init+0x1a8>)
 8001f58:	f008 fa4e 	bl	800a3f8 <_txe_semaphore_create>
	tx_semaphore_create(&aeroSemaphore, "aeroSemaphore", 0);
 8001f5c:	231c      	movs	r3, #28
 8001f5e:	2200      	movs	r2, #0
 8001f60:	4914      	ldr	r1, [pc, #80]	; (8001fb4 <ThreadX_Init+0x1ac>)
 8001f62:	4815      	ldr	r0, [pc, #84]	; (8001fb8 <ThreadX_Init+0x1b0>)
 8001f64:	f008 fa48 	bl	800a3f8 <_txe_semaphore_create>
	tx_semaphore_create(&frequencySemaphore, "frequencySemaphore", 0);
 8001f68:	231c      	movs	r3, #28
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	4913      	ldr	r1, [pc, #76]	; (8001fbc <ThreadX_Init+0x1b4>)
 8001f6e:	4814      	ldr	r0, [pc, #80]	; (8001fc0 <ThreadX_Init+0x1b8>)
 8001f70:	f008 fa42 	bl	800a3f8 <_txe_semaphore_create>
	/* USER CODE END App_ThreadX_Init */

	return ret;
 8001f74:	697b      	ldr	r3, [r7, #20]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	08001fc5 	.word	0x08001fc5
 8001f84:	0800a84c 	.word	0x0800a84c
 8001f88:	20000918 	.word	0x20000918
 8001f8c:	08001ff1 	.word	0x08001ff1
 8001f90:	0800a85c 	.word	0x0800a85c
 8001f94:	08002061 	.word	0x08002061
 8001f98:	0800a86c 	.word	0x0800a86c
 8001f9c:	08002071 	.word	0x08002071
 8001fa0:	0800a87c 	.word	0x0800a87c
 8001fa4:	0800207d 	.word	0x0800207d
 8001fa8:	0800a888 	.word	0x0800a888
 8001fac:	0800a894 	.word	0x0800a894
 8001fb0:	200009c8 	.word	0x200009c8
 8001fb4:	0800a8a4 	.word	0x0800a8a4
 8001fb8:	200009e4 	.word	0x200009e4
 8001fbc:	0800a8b4 	.word	0x0800a8b4
 8001fc0:	20000a00 	.word	0x20000a00

08001fc4 <txMainThreadEntry>:


void txMainThreadEntry(ULONG threadInput){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

    HAL_FDCAN_Start(&hfdcan1);
 8001fcc:	4806      	ldr	r0, [pc, #24]	; (8001fe8 <txMainThreadEntry+0x24>)
 8001fce:	f002 fdb5 	bl	8004b3c <HAL_FDCAN_Start>
	while(1){
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <txMainThreadEntry+0x28>)
 8001fd8:	f002 ffde 	bl	8004f98 <HAL_GPIO_TogglePin>
	    tx_thread_sleep(1000);
 8001fdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe0:	f007 fb60 	bl	80096a4 <_tx_thread_sleep>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001fe4:	e7f5      	b.n	8001fd2 <txMainThreadEntry+0xe>
 8001fe6:	bf00      	nop
 8001fe8:	200005bc 	.word	0x200005bc
 8001fec:	48000800 	.word	0x48000800

08001ff0 <txAnalogThreadEntry>:
	}
}

void txAnalogThreadEntry(ULONG threadInput){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

    while(1){
        HAL_ADC_Start_DMA(&hadc1, adcValues, NUM_ADC_CHANNELS);
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	4915      	ldr	r1, [pc, #84]	; (8002050 <txAnalogThreadEntry+0x60>)
 8001ffc:	4815      	ldr	r0, [pc, #84]	; (8002054 <txAnalogThreadEntry+0x64>)
 8001ffe:	f000 fd63 	bl	8002ac8 <HAL_ADC_Start_DMA>
        tx_semaphore_get(&analogSemaphore, TX_WAIT_FOREVER);
 8002002:	f04f 31ff 	mov.w	r1, #4294967295
 8002006:	4814      	ldr	r0, [pc, #80]	; (8002058 <txAnalogThreadEntry+0x68>)
 8002008:	f008 fa8c 	bl	800a524 <_txe_semaphore_get>
//        data will be processed and sent over CAN here
        for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	e016      	b.n	8002040 <txAnalogThreadEntry+0x50>
        	analogRxData[i * 2] = adcValues[i];
 8002012:	4a0f      	ldr	r2, [pc, #60]	; (8002050 <txAnalogThreadEntry+0x60>)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	b2d1      	uxtb	r1, r2
 8002020:	4a0e      	ldr	r2, [pc, #56]	; (800205c <txAnalogThreadEntry+0x6c>)
 8002022:	54d1      	strb	r1, [r2, r3]
        	analogRxData[i * 2 + 1] = adcValues[i] >> 8;
 8002024:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <txAnalogThreadEntry+0x60>)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	0a1a      	lsrs	r2, r3, #8
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	3301      	adds	r3, #1
 8002034:	b2d1      	uxtb	r1, r2
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <txAnalogThreadEntry+0x6c>)
 8002038:	54d1      	strb	r1, [r2, r3]
        for(int i = 0; i < NUM_ADC_CHANNELS; i ++){
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3301      	adds	r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b07      	cmp	r3, #7
 8002044:	d9e5      	bls.n	8002012 <txAnalogThreadEntry+0x22>
        }

        tx_thread_sleep(2);
 8002046:	2002      	movs	r0, #2
 8002048:	f007 fb2c 	bl	80096a4 <_tx_thread_sleep>
        HAL_ADC_Start_DMA(&hadc1, adcValues, NUM_ADC_CHANNELS);
 800204c:	e7d4      	b.n	8001ff8 <txAnalogThreadEntry+0x8>
 800204e:	bf00      	nop
 8002050:	20000a1c 	.word	0x20000a1c
 8002054:	20000460 	.word	0x20000460
 8002058:	200009c8 	.word	0x200009c8
 800205c:	20000a3c 	.word	0x20000a3c

08002060 <txAeroThreadEntry>:
    }
}

void txAeroThreadEntry(ULONG threadInput){
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
//    	SetChannel(2);
//		ReadData();
//		SetChannel(3);
//		ReadData();

		tx_thread_sleep(10);
 8002068:	200a      	movs	r0, #10
 800206a:	f007 fb1b 	bl	80096a4 <_tx_thread_sleep>
 800206e:	e7fb      	b.n	8002068 <txAeroThreadEntry+0x8>

08002070 <txCAN500HzThreadEntry>:
    }
}

void txCAN500HzThreadEntry(ULONG threadInput){
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

    while(2){
 8002078:	e7fe      	b.n	8002078 <txCAN500HzThreadEntry+0x8>
	...

0800207c <txCAN100HzThreadEntry>:

    }
}

void txCAN100HzThreadEntry(ULONG threadInput){
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	; 0x30
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	float refClock = TIMCLOCK/(PRESCALAR);
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <txCAN100HzThreadEntry+0x5c>)
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
	double frequency[4];
    while(10){
    	tx_semaphore_get(&frequencySemaphore, TX_WAIT_FOREVER);
 8002088:	f04f 31ff 	mov.w	r1, #4294967295
 800208c:	4813      	ldr	r0, [pc, #76]	; (80020dc <txCAN100HzThreadEntry+0x60>)
 800208e:	f008 fa49 	bl	800a524 <_txe_semaphore_get>
    	for(int i = 0; i < 4; i ++){
 8002092:	2300      	movs	r3, #0
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002096:	e01b      	b.n	80020d0 <txCAN100HzThreadEntry+0x54>
			frequency[i] = refClock / difference[i];
 8002098:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <txCAN100HzThreadEntry+0x64>)
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	ee07 3a90 	vmov	s15, r3
 80020a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80020ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020b0:	ee16 0a90 	vmov	r0, s13
 80020b4:	f7fe fb34 	bl	8000720 <__aeabi_f2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020be:	00c9      	lsls	r1, r1, #3
 80020c0:	3130      	adds	r1, #48	; 0x30
 80020c2:	4439      	add	r1, r7
 80020c4:	3928      	subs	r1, #40	; 0x28
 80020c6:	e9c1 2300 	strd	r2, r3, [r1]
    	for(int i = 0; i < 4; i ++){
 80020ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020cc:	3301      	adds	r3, #1
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	dde0      	ble.n	8002098 <txCAN100HzThreadEntry+0x1c>
    	tx_semaphore_get(&frequencySemaphore, TX_WAIT_FOREVER);
 80020d6:	e7d7      	b.n	8002088 <txCAN100HzThreadEntry+0xc>
 80020d8:	4d221fe8 	.word	0x4d221fe8
 80020dc:	20000a00 	.word	0x20000a00
 80020e0:	20000a6c 	.word	0x20000a6c

080020e4 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val1[4];
uint32_t IC_Val2[4];
uint32_t difference[4];
uint8_t is_first_captured[4];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	if(TX_NO_INSTANCE == tx_semaphore_get(&frequencySemaphore, TX_NO_WAIT)){
 80020ec:	2100      	movs	r1, #0
 80020ee:	4846      	ldr	r0, [pc, #280]	; (8002208 <HAL_TIM_IC_CaptureCallback+0x124>)
 80020f0:	f008 fa18 	bl	800a524 <_txe_semaphore_get>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b0d      	cmp	r3, #13
 80020f8:	f000 8082 	beq.w	8002200 <HAL_TIM_IC_CaptureCallback+0x11c>
		return;
	}
    uint8_t channel = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
    uint8_t hal_channel = 0u;
 8002100:	2300      	movs	r3, #0
 8002102:	73bb      	strb	r3, [r7, #14]

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7f1b      	ldrb	r3, [r3, #28]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d104      	bne.n	8002116 <HAL_TIM_IC_CaptureCallback+0x32>
        channel = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_1;
 8002110:	2300      	movs	r3, #0
 8002112:	73bb      	strb	r3, [r7, #14]
 8002114:	e019      	b.n	800214a <HAL_TIM_IC_CaptureCallback+0x66>
    } else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7f1b      	ldrb	r3, [r3, #28]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d104      	bne.n	8002128 <HAL_TIM_IC_CaptureCallback+0x44>
        channel = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_2;
 8002122:	2304      	movs	r3, #4
 8002124:	73bb      	strb	r3, [r7, #14]
 8002126:	e010      	b.n	800214a <HAL_TIM_IC_CaptureCallback+0x66>
    } else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7f1b      	ldrb	r3, [r3, #28]
 800212c:	2b04      	cmp	r3, #4
 800212e:	d104      	bne.n	800213a <HAL_TIM_IC_CaptureCallback+0x56>
        channel = 2;
 8002130:	2302      	movs	r3, #2
 8002132:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_3;
 8002134:	2308      	movs	r3, #8
 8002136:	73bb      	strb	r3, [r7, #14]
 8002138:	e007      	b.n	800214a <HAL_TIM_IC_CaptureCallback+0x66>
    } else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7f1b      	ldrb	r3, [r3, #28]
 800213e:	2b08      	cmp	r3, #8
 8002140:	d103      	bne.n	800214a <HAL_TIM_IC_CaptureCallback+0x66>
        channel = 3;
 8002142:	2303      	movs	r3, #3
 8002144:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_4;
 8002146:	230c      	movs	r3, #12
 8002148:	73bb      	strb	r3, [r7, #14]
    }

    if (is_first_captured[channel] == 0) {  // check if first rising edge to begin capture
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	4a2f      	ldr	r2, [pc, #188]	; (800220c <HAL_TIM_IC_CaptureCallback+0x128>)
 800214e:	5cd3      	ldrb	r3, [r2, r3]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10e      	bne.n	8002172 <HAL_TIM_IC_CaptureCallback+0x8e>
        IC_Val1[channel] = HAL_TIM_ReadCapturedValue(htim, hal_channel);
 8002154:	7bbb      	ldrb	r3, [r7, #14]
 8002156:	7bfc      	ldrb	r4, [r7, #15]
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f005 fa8e 	bl	800767c <HAL_TIM_ReadCapturedValue>
 8002160:	4603      	mov	r3, r0
 8002162:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002164:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        is_first_captured[channel] = 1; // set flag to indicate next value will be second rising edge
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	4a28      	ldr	r2, [pc, #160]	; (800220c <HAL_TIM_IC_CaptureCallback+0x128>)
 800216c:	2101      	movs	r1, #1
 800216e:	54d1      	strb	r1, [r2, r3]
 8002170:	e042      	b.n	80021f8 <HAL_TIM_IC_CaptureCallback+0x114>
    } else if (is_first_captured[channel] == 1) {   // second rising edge
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	4a25      	ldr	r2, [pc, #148]	; (800220c <HAL_TIM_IC_CaptureCallback+0x128>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d13d      	bne.n	80021f8 <HAL_TIM_IC_CaptureCallback+0x114>
        IC_Val2[channel] = HAL_TIM_ReadCapturedValue(htim, hal_channel);
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	7bfc      	ldrb	r4, [r7, #15]
 8002180:	4619      	mov	r1, r3
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f005 fa7a 	bl	800767c <HAL_TIM_ReadCapturedValue>
 8002188:	4603      	mov	r3, r0
 800218a:	4a22      	ldr	r2, [pc, #136]	; (8002214 <HAL_TIM_IC_CaptureCallback+0x130>)
 800218c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        if (IC_Val2[channel] > IC_Val1[channel]) {  // first capture before second
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	4a20      	ldr	r2, [pc, #128]	; (8002214 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002194:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	491d      	ldr	r1, [pc, #116]	; (8002210 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800219c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d90d      	bls.n	80021c0 <HAL_TIM_IC_CaptureCallback+0xdc>
            difference[channel] = IC_Val2[channel] - IC_Val1[channel];
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <HAL_TIM_IC_CaptureCallback+0x130>)
 80021a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	4a18      	ldr	r2, [pc, #96]	; (8002210 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	1a8a      	subs	r2, r1, r2
 80021b8:	4917      	ldr	r1, [pc, #92]	; (8002218 <HAL_TIM_IC_CaptureCallback+0x134>)
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80021be:	e017      	b.n	80021f0 <HAL_TIM_IC_CaptureCallback+0x10c>
        } else if (IC_Val2[channel] < IC_Val1[channel]) {   // first capture after second robust check
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	4a14      	ldr	r2, [pc, #80]	; (8002214 <HAL_TIM_IC_CaptureCallback+0x130>)
 80021c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	4911      	ldr	r1, [pc, #68]	; (8002210 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d20d      	bcs.n	80021f0 <HAL_TIM_IC_CaptureCallback+0x10c>
            difference[channel] = ((100 - IC_Val1[channel]) + IC_Val2[channel]) + 1;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <HAL_TIM_IC_CaptureCallback+0x130>)
 80021d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	490c      	ldr	r1, [pc, #48]	; (8002210 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80021e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021e4:	1ad2      	subs	r2, r2, r3
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	3265      	adds	r2, #101	; 0x65
 80021ea:	490b      	ldr	r1, [pc, #44]	; (8002218 <HAL_TIM_IC_CaptureCallback+0x134>)
 80021ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
//        float refClock = TIMCLOCK/(PRESCALAR);
//        frequency[channel] = refClock / difference[channel];
        is_first_captured[channel] = 0;
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	4a06      	ldr	r2, [pc, #24]	; (800220c <HAL_TIM_IC_CaptureCallback+0x128>)
 80021f4:	2100      	movs	r1, #0
 80021f6:	54d1      	strb	r1, [r2, r3]
    }
    tx_semaphore_put(&frequencySemaphore);
 80021f8:	4803      	ldr	r0, [pc, #12]	; (8002208 <HAL_TIM_IC_CaptureCallback+0x124>)
 80021fa:	f008 f9d5 	bl	800a5a8 <_txe_semaphore_put>
 80021fe:	e000      	b.n	8002202 <HAL_TIM_IC_CaptureCallback+0x11e>
		return;
 8002200:	bf00      	nop
}
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	20000a00 	.word	0x20000a00
 800220c:	20000a7c 	.word	0x20000a7c
 8002210:	20000a4c 	.word	0x20000a4c
 8002214:	20000a5c 	.word	0x20000a5c
 8002218:	20000a6c 	.word	0x20000a6c

0800221c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002226:	2003      	movs	r0, #3
 8002228:	f001 ff21 	bl	800406e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800222c:	200f      	movs	r0, #15
 800222e:	f7ff fb7d 	bl	800192c <HAL_InitTick>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	e001      	b.n	8002242 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800223e:	f7ff fb4d 	bl	80018dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002242:	79fb      	ldrb	r3, [r7, #7]

}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_IncTick+0x1c>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_IncTick+0x20>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4413      	add	r3, r2
 800225a:	4a03      	ldr	r2, [pc, #12]	; (8002268 <HAL_IncTick+0x1c>)
 800225c:	6013      	str	r3, [r2, #0]
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	20000a80 	.word	0x20000a80
 800226c:	20000008 	.word	0x20000008

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000a80 	.word	0x20000a80

08002288 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 0202 	bic.w	r2, r3, #2
 8002298:	4904      	ldr	r1, [pc, #16]	; (80022ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40010030 	.word	0x40010030

080022b0 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	6013      	str	r3, [r2, #0]
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40010030 	.word	0x40010030

080022d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	609a      	str	r2, [r3, #8]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3360      	adds	r3, #96	; 0x60
 800234a:	461a      	mov	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <LL_ADC_SetOffset+0x44>)
 800235a:	4013      	ands	r3, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	4313      	orrs	r3, r2
 8002368:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002370:	bf00      	nop
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	03fff000 	.word	0x03fff000

08002380 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3360      	adds	r3, #96	; 0x60
 800238e:	461a      	mov	r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3360      	adds	r3, #96	; 0x60
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023d6:	bf00      	nop
 80023d8:	371c      	adds	r7, #28
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b087      	sub	sp, #28
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3360      	adds	r3, #96	; 0x60
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	431a      	orrs	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800240c:	bf00      	nop
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3360      	adds	r3, #96	; 0x60
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	431a      	orrs	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	615a      	str	r2, [r3, #20]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800249a:	b480      	push	{r7}
 800249c:	b087      	sub	sp, #28
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3330      	adds	r3, #48	; 0x30
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	4413      	add	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	211f      	movs	r1, #31
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	401a      	ands	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	f003 011f 	and.w	r1, r3, #31
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	431a      	orrs	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3314      	adds	r3, #20
 8002528:	461a      	mov	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	0e5b      	lsrs	r3, r3, #25
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	4413      	add	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	0d1b      	lsrs	r3, r3, #20
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2107      	movs	r1, #7
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	401a      	ands	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	0d1b      	lsrs	r3, r3, #20
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	431a      	orrs	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002588:	43db      	mvns	r3, r3
 800258a:	401a      	ands	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0318 	and.w	r3, r3, #24
 8002592:	4908      	ldr	r1, [pc, #32]	; (80025b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002594:	40d9      	lsrs	r1, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	400b      	ands	r3, r1
 800259a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259e:	431a      	orrs	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	0007ffff 	.word	0x0007ffff

080025b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 031f 	and.w	r3, r3, #31
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6093      	str	r3, [r2, #8]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002628:	d101      	bne.n	800262e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800264c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002650:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002678:	d101      	bne.n	800267e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800269c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <LL_ADC_IsEnabled+0x18>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <LL_ADC_IsEnabled+0x1a>
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026ee:	f043 0204 	orr.w	r2, r3, #4
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b04      	cmp	r3, #4
 8002714:	d101      	bne.n	800271a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b08      	cmp	r3, #8
 800273a:	d101      	bne.n	8002740 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1a9      	b.n	8002abe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7fe fb23 	bl	8000dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff3f 	bl	8002614 <LL_ADC_IsDeepPowerDownEnabled>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff25 	bl	80025f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff5a 	bl	8002664 <LL_ADC_IsInternalRegulatorEnabled>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d115      	bne.n	80027e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ff3e 	bl	800263c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c0:	4b9c      	ldr	r3, [pc, #624]	; (8002a34 <HAL_ADC_Init+0x2e4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	4a9c      	ldr	r2, [pc, #624]	; (8002a38 <HAL_ADC_Init+0x2e8>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	099b      	lsrs	r3, r3, #6
 80027ce:	3301      	adds	r3, #1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027d4:	e002      	b.n	80027dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3b01      	subs	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f9      	bne.n	80027d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff3c 	bl	8002664 <LL_ADC_IsInternalRegulatorEnabled>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10d      	bne.n	800280e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f6:	f043 0210 	orr.w	r2, r3, #16
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff75 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 8002818:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 8142 	bne.w	8002aac <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 813e 	bne.w	8002aac <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002838:	f043 0202 	orr.w	r2, r3, #2
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff35 	bl	80026b4 <LL_ADC_IsEnabled>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d141      	bne.n	80028d4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002858:	d004      	beq.n	8002864 <HAL_ADC_Init+0x114>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a77      	ldr	r2, [pc, #476]	; (8002a3c <HAL_ADC_Init+0x2ec>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d10f      	bne.n	8002884 <HAL_ADC_Init+0x134>
 8002864:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002868:	f7ff ff24 	bl	80026b4 <LL_ADC_IsEnabled>
 800286c:	4604      	mov	r4, r0
 800286e:	4873      	ldr	r0, [pc, #460]	; (8002a3c <HAL_ADC_Init+0x2ec>)
 8002870:	f7ff ff20 	bl	80026b4 <LL_ADC_IsEnabled>
 8002874:	4603      	mov	r3, r0
 8002876:	4323      	orrs	r3, r4
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e012      	b.n	80028aa <HAL_ADC_Init+0x15a>
 8002884:	486e      	ldr	r0, [pc, #440]	; (8002a40 <HAL_ADC_Init+0x2f0>)
 8002886:	f7ff ff15 	bl	80026b4 <LL_ADC_IsEnabled>
 800288a:	4604      	mov	r4, r0
 800288c:	486d      	ldr	r0, [pc, #436]	; (8002a44 <HAL_ADC_Init+0x2f4>)
 800288e:	f7ff ff11 	bl	80026b4 <LL_ADC_IsEnabled>
 8002892:	4603      	mov	r3, r0
 8002894:	431c      	orrs	r4, r3
 8002896:	486c      	ldr	r0, [pc, #432]	; (8002a48 <HAL_ADC_Init+0x2f8>)
 8002898:	f7ff ff0c 	bl	80026b4 <LL_ADC_IsEnabled>
 800289c:	4603      	mov	r3, r0
 800289e:	4323      	orrs	r3, r4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d012      	beq.n	80028d4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b6:	d004      	beq.n	80028c2 <HAL_ADC_Init+0x172>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a5f      	ldr	r2, [pc, #380]	; (8002a3c <HAL_ADC_Init+0x2ec>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_Init+0x176>
 80028c2:	4a62      	ldr	r2, [pc, #392]	; (8002a4c <HAL_ADC_Init+0x2fc>)
 80028c4:	e000      	b.n	80028c8 <HAL_ADC_Init+0x178>
 80028c6:	4a62      	ldr	r2, [pc, #392]	; (8002a50 <HAL_ADC_Init+0x300>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f7ff fcfe 	bl	80022d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7f5b      	ldrb	r3, [r3, #29]
 80028d8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028de:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028e4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028ea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028f2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d106      	bne.n	8002910 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	3b01      	subs	r3, #1
 8002908:	045b      	lsls	r3, r3, #17
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d009      	beq.n	800292c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	4b48      	ldr	r3, [pc, #288]	; (8002a54 <HAL_ADC_Init+0x304>)
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	430b      	orrs	r3, r1
 800293e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fee4 	bl	8002728 <LL_ADC_INJ_IsConversionOngoing>
 8002960:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d17f      	bne.n	8002a68 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d17c      	bne.n	8002a68 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002972:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800297a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800298a:	f023 0302 	bic.w	r3, r3, #2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	69b9      	ldr	r1, [r7, #24]
 8002994:	430b      	orrs	r3, r1
 8002996:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d017      	beq.n	80029d0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6911      	ldr	r1, [r2, #16]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80029ce:	e013      	b.n	80029f8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d12a      	bne.n	8002a58 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a24:	430a      	orrs	r2, r1
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	e019      	b.n	8002a68 <HAL_ADC_Init+0x318>
 8002a34:	20000000 	.word	0x20000000
 8002a38:	053e2d63 	.word	0x053e2d63
 8002a3c:	50000100 	.word	0x50000100
 8002a40:	50000400 	.word	0x50000400
 8002a44:	50000500 	.word	0x50000500
 8002a48:	50000600 	.word	0x50000600
 8002a4c:	50000300 	.word	0x50000300
 8002a50:	50000700 	.word	0x50000700
 8002a54:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d10c      	bne.n	8002a8a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f023 010f 	bic.w	r1, r3, #15
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	1e5a      	subs	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
 8002a88:	e007      	b.n	8002a9a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 020f 	bic.w	r2, r2, #15
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	f023 0303 	bic.w	r3, r3, #3
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aaa:	e007      	b.n	8002abc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	f043 0210 	orr.w	r2, r3, #16
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002abc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3724      	adds	r7, #36	; 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd90      	pop	{r4, r7, pc}
 8002ac6:	bf00      	nop

08002ac8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002adc:	d004      	beq.n	8002ae8 <HAL_ADC_Start_DMA+0x20>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a5a      	ldr	r2, [pc, #360]	; (8002c4c <HAL_ADC_Start_DMA+0x184>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_Start_DMA+0x24>
 8002ae8:	4b59      	ldr	r3, [pc, #356]	; (8002c50 <HAL_ADC_Start_DMA+0x188>)
 8002aea:	e000      	b.n	8002aee <HAL_ADC_Start_DMA+0x26>
 8002aec:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <HAL_ADC_Start_DMA+0x18c>)
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fd62 	bl	80025b8 <LL_ADC_GetMultimode>
 8002af4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fe01 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f040 809b 	bne.w	8002c3e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_Start_DMA+0x4e>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e096      	b.n	8002c44 <HAL_ADC_Start_DMA+0x17c>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a4d      	ldr	r2, [pc, #308]	; (8002c58 <HAL_ADC_Start_DMA+0x190>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d008      	beq.n	8002b3a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d002      	beq.n	8002b3a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	2b09      	cmp	r3, #9
 8002b38:	d17a      	bne.n	8002c30 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 ff60 	bl	8003a00 <ADC_Enable>
 8002b40:	4603      	mov	r3, r0
 8002b42:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d16d      	bne.n	8002c26 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a3a      	ldr	r2, [pc, #232]	; (8002c4c <HAL_ADC_Start_DMA+0x184>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d009      	beq.n	8002b7c <HAL_ADC_Start_DMA+0xb4>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a3b      	ldr	r2, [pc, #236]	; (8002c5c <HAL_ADC_Start_DMA+0x194>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d002      	beq.n	8002b78 <HAL_ADC_Start_DMA+0xb0>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	e003      	b.n	8002b80 <HAL_ADC_Start_DMA+0xb8>
 8002b78:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <HAL_ADC_Start_DMA+0x198>)
 8002b7a:	e001      	b.n	8002b80 <HAL_ADC_Start_DMA+0xb8>
 8002b7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d002      	beq.n	8002b8e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d105      	bne.n	8002b9a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002baa:	f023 0206 	bic.w	r2, r3, #6
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	661a      	str	r2, [r3, #96]	; 0x60
 8002bb2:	e002      	b.n	8002bba <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	4a29      	ldr	r2, [pc, #164]	; (8002c64 <HAL_ADC_Start_DMA+0x19c>)
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc6:	4a28      	ldr	r2, [pc, #160]	; (8002c68 <HAL_ADC_Start_DMA+0x1a0>)
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	4a27      	ldr	r2, [pc, #156]	; (8002c6c <HAL_ADC_Start_DMA+0x1a4>)
 8002bd0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	221c      	movs	r2, #28
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0210 	orr.w	r2, r2, #16
 8002bf0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3340      	adds	r3, #64	; 0x40
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f001 fbf9 	bl	8004408 <HAL_DMA_Start_IT>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fd5b 	bl	80026da <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c24:	e00d      	b.n	8002c42 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002c2e:	e008      	b.n	8002c42 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002c3c:	e001      	b.n	8002c42 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	50000100 	.word	0x50000100
 8002c50:	50000300 	.word	0x50000300
 8002c54:	50000700 	.word	0x50000700
 8002c58:	50000600 	.word	0x50000600
 8002c5c:	50000500 	.word	0x50000500
 8002c60:	50000400 	.word	0x50000400
 8002c64:	08003b2d 	.word	0x08003b2d
 8002c68:	08003c05 	.word	0x08003c05
 8002c6c:	08003c21 	.word	0x08003c21

08002c70 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	; 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c78:	2300      	movs	r3, #0
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c94:	d004      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x30>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a8e      	ldr	r2, [pc, #568]	; (8002ed4 <HAL_ADC_IRQHandler+0x264>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ADC_IRQHandler+0x34>
 8002ca0:	4b8d      	ldr	r3, [pc, #564]	; (8002ed8 <HAL_ADC_IRQHandler+0x268>)
 8002ca2:	e000      	b.n	8002ca6 <HAL_ADC_IRQHandler+0x36>
 8002ca4:	4b8d      	ldr	r3, [pc, #564]	; (8002edc <HAL_ADC_IRQHandler+0x26c>)
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fc86 	bl	80025b8 <LL_ADC_GetMultimode>
 8002cac:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d017      	beq.n	8002ce8 <HAL_ADC_IRQHandler+0x78>
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d012      	beq.n	8002ce8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d105      	bne.n	8002cda <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f001 f808 	bl	8003cf0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_ADC_IRQHandler+0x8c>
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10b      	bne.n	8002d14 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8094 	beq.w	8002e30 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 808e 	beq.w	8002e30 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fb9f 	bl	8002474 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d072      	beq.n	8002e22 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a64      	ldr	r2, [pc, #400]	; (8002ed4 <HAL_ADC_IRQHandler+0x264>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_ADC_IRQHandler+0xea>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a65      	ldr	r2, [pc, #404]	; (8002ee0 <HAL_ADC_IRQHandler+0x270>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d002      	beq.n	8002d56 <HAL_ADC_IRQHandler+0xe6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	e003      	b.n	8002d5e <HAL_ADC_IRQHandler+0xee>
 8002d56:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_ADC_IRQHandler+0x274>)
 8002d58:	e001      	b.n	8002d5e <HAL_ADC_IRQHandler+0xee>
 8002d5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d008      	beq.n	8002d78 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d002      	beq.n	8002d78 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b09      	cmp	r3, #9
 8002d76:	d104      	bne.n	8002d82 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	623b      	str	r3, [r7, #32]
 8002d80:	e014      	b.n	8002dac <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a53      	ldr	r2, [pc, #332]	; (8002ed4 <HAL_ADC_IRQHandler+0x264>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d009      	beq.n	8002da0 <HAL_ADC_IRQHandler+0x130>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a53      	ldr	r2, [pc, #332]	; (8002ee0 <HAL_ADC_IRQHandler+0x270>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d002      	beq.n	8002d9c <HAL_ADC_IRQHandler+0x12c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	e003      	b.n	8002da4 <HAL_ADC_IRQHandler+0x134>
 8002d9c:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <HAL_ADC_IRQHandler+0x274>)
 8002d9e:	e001      	b.n	8002da4 <HAL_ADC_IRQHandler+0x134>
 8002da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002da4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d135      	bne.n	8002e22 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d12e      	bne.n	8002e22 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fc9a 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11a      	bne.n	8002e0a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 020c 	bic.w	r2, r2, #12
 8002de2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d112      	bne.n	8002e22 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e00:	f043 0201 	orr.w	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e08:	e00b      	b.n	8002e22 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0e:	f043 0210 	orr.w	r2, r3, #16
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1a:	f043 0201 	orr.w	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f984 	bl	8003130 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	220c      	movs	r2, #12
 8002e2e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <HAL_ADC_IRQHandler+0x1d4>
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80b3 	beq.w	8002fb6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80ad 	beq.w	8002fb6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fb3a 	bl	80024f2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e7e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff faf5 	bl	8002474 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e8a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a10      	ldr	r2, [pc, #64]	; (8002ed4 <HAL_ADC_IRQHandler+0x264>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_ADC_IRQHandler+0x23a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <HAL_ADC_IRQHandler+0x270>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d002      	beq.n	8002ea6 <HAL_ADC_IRQHandler+0x236>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	e003      	b.n	8002eae <HAL_ADC_IRQHandler+0x23e>
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_ADC_IRQHandler+0x274>)
 8002ea8:	e001      	b.n	8002eae <HAL_ADC_IRQHandler+0x23e>
 8002eaa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d008      	beq.n	8002ec8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d002      	beq.n	8002ec8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b07      	cmp	r3, #7
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	e01f      	b.n	8002f12 <HAL_ADC_IRQHandler+0x2a2>
 8002ed2:	bf00      	nop
 8002ed4:	50000100 	.word	0x50000100
 8002ed8:	50000300 	.word	0x50000300
 8002edc:	50000700 	.word	0x50000700
 8002ee0:	50000500 	.word	0x50000500
 8002ee4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a8b      	ldr	r2, [pc, #556]	; (800311c <HAL_ADC_IRQHandler+0x4ac>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_ADC_IRQHandler+0x296>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a8a      	ldr	r2, [pc, #552]	; (8003120 <HAL_ADC_IRQHandler+0x4b0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d002      	beq.n	8002f02 <HAL_ADC_IRQHandler+0x292>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	e003      	b.n	8002f0a <HAL_ADC_IRQHandler+0x29a>
 8002f02:	4b88      	ldr	r3, [pc, #544]	; (8003124 <HAL_ADC_IRQHandler+0x4b4>)
 8002f04:	e001      	b.n	8002f0a <HAL_ADC_IRQHandler+0x29a>
 8002f06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f0a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d047      	beq.n	8002fa8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <HAL_ADC_IRQHandler+0x2c2>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d03f      	beq.n	8002fa8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d13a      	bne.n	8002fa8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3c:	2b40      	cmp	r3, #64	; 0x40
 8002f3e:	d133      	bne.n	8002fa8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d12e      	bne.n	8002fa8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fbea 	bl	8002728 <LL_ADC_INJ_IsConversionOngoing>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d11a      	bne.n	8002f90 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f68:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d112      	bne.n	8002fa8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f86:	f043 0201 	orr.w	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f8e:	e00b      	b.n	8002fa8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	f043 0210 	orr.w	r2, r3, #16
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fe79 	bl	8003ca0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2260      	movs	r2, #96	; 0x60
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d011      	beq.n	8002fe4 <HAL_ADC_IRQHandler+0x374>
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00c      	beq.n	8002fe4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8be 	bl	8003158 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2280      	movs	r2, #128	; 0x80
 8002fe2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d012      	beq.n	8003014 <HAL_ADC_IRQHandler+0x3a4>
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00d      	beq.n	8003014 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fe5f 	bl	8003cc8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003012:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301a:	2b00      	cmp	r3, #0
 800301c:	d012      	beq.n	8003044 <HAL_ADC_IRQHandler+0x3d4>
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00d      	beq.n	8003044 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fe51 	bl	8003cdc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003042:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d043      	beq.n	80030d6 <HAL_ADC_IRQHandler+0x466>
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d03e      	beq.n	80030d6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003060:	2301      	movs	r3, #1
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
 8003064:	e021      	b.n	80030aa <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d015      	beq.n	8003098 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003074:	d004      	beq.n	8003080 <HAL_ADC_IRQHandler+0x410>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a28      	ldr	r2, [pc, #160]	; (800311c <HAL_ADC_IRQHandler+0x4ac>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d101      	bne.n	8003084 <HAL_ADC_IRQHandler+0x414>
 8003080:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_ADC_IRQHandler+0x4b8>)
 8003082:	e000      	b.n	8003086 <HAL_ADC_IRQHandler+0x416>
 8003084:	4b29      	ldr	r3, [pc, #164]	; (800312c <HAL_ADC_IRQHandler+0x4bc>)
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff faa4 	bl	80025d4 <LL_ADC_GetMultiDMATransfer>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003092:	2301      	movs	r3, #1
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
 8003096:	e008      	b.n	80030aa <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80030a6:	2301      	movs	r3, #1
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d10e      	bne.n	80030ce <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	f043 0202 	orr.w	r2, r3, #2
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f84f 	bl	800316c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2210      	movs	r2, #16
 80030d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d018      	beq.n	8003112 <HAL_ADC_IRQHandler+0x4a2>
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d013      	beq.n	8003112 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fa:	f043 0208 	orr.w	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800310a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fdd1 	bl	8003cb4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003112:	bf00      	nop
 8003114:	3728      	adds	r7, #40	; 0x28
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	50000100 	.word	0x50000100
 8003120:	50000500 	.word	0x50000500
 8003124:	50000400 	.word	0x50000400
 8003128:	50000300 	.word	0x50000300
 800312c:	50000700 	.word	0x50000700

08003130 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b0b6      	sub	sp, #216	; 0xd8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x24>
 800319e:	2302      	movs	r3, #2
 80031a0:	f000 bc13 	b.w	80039ca <HAL_ADC_ConfigChannel+0x84a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff faa6 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f040 83f3 	bne.w	80039a4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6859      	ldr	r1, [r3, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f7ff f965 	bl	800249a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fa94 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 80031da:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff faa0 	bl	8002728 <LL_ADC_INJ_IsConversionOngoing>
 80031e8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f040 81d9 	bne.w	80035a8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 81d4 	bne.w	80035a8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003208:	d10f      	bne.n	800322a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2200      	movs	r2, #0
 8003214:	4619      	mov	r1, r3
 8003216:	f7ff f97f 	bl	8002518 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f913 	bl	800244e <LL_ADC_SetSamplingTimeCommonConfig>
 8003228:	e00e      	b.n	8003248 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	461a      	mov	r2, r3
 8003238:	f7ff f96e 	bl	8002518 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff f903 	bl	800244e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	08db      	lsrs	r3, r3, #3
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d022      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6919      	ldr	r1, [r3, #16]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800327a:	f7ff f85d 	bl	8002338 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6919      	ldr	r1, [r3, #16]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	461a      	mov	r2, r3
 800328c:	f7ff f8a9 	bl	80023e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800329c:	2b01      	cmp	r3, #1
 800329e:	d102      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x126>
 80032a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032a4:	e000      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x128>
 80032a6:	2300      	movs	r3, #0
 80032a8:	461a      	mov	r2, r3
 80032aa:	f7ff f8b5 	bl	8002418 <LL_ADC_SetOffsetSaturation>
 80032ae:	e17b      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f862 	bl	8002380 <LL_ADC_GetOffsetChannel>
 80032bc:	4603      	mov	r3, r0
 80032be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x15c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff f857 	bl	8002380 <LL_ADC_GetOffsetChannel>
 80032d2:	4603      	mov	r3, r0
 80032d4:	0e9b      	lsrs	r3, r3, #26
 80032d6:	f003 021f 	and.w	r2, r3, #31
 80032da:	e01e      	b.n	800331a <HAL_ADC_ConfigChannel+0x19a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f84c 	bl	8002380 <LL_ADC_GetOffsetChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e004      	b.n	8003318 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800330e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003322:	2b00      	cmp	r3, #0
 8003324:	d105      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x1b2>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	0e9b      	lsrs	r3, r3, #26
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	e018      	b.n	8003364 <HAL_ADC_ConfigChannel+0x1e4>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800334a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800334e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003356:	2320      	movs	r3, #32
 8003358:	e004      	b.n	8003364 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800335a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003364:	429a      	cmp	r2, r3
 8003366:	d106      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2200      	movs	r2, #0
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff f81b 	bl	80023ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2101      	movs	r1, #1
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe ffff 	bl	8002380 <LL_ADC_GetOffsetChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x222>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2101      	movs	r1, #1
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fff4 	bl	8002380 <LL_ADC_GetOffsetChannel>
 8003398:	4603      	mov	r3, r0
 800339a:	0e9b      	lsrs	r3, r3, #26
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	e01e      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x260>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe ffe9 	bl	8002380 <LL_ADC_GetOffsetChannel>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80033c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80033c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80033d0:	2320      	movs	r3, #32
 80033d2:	e004      	b.n	80033de <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80033d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x278>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0e9b      	lsrs	r3, r3, #26
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	e018      	b.n	800342a <HAL_ADC_ConfigChannel+0x2aa>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800340c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	e004      	b.n	800342a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800342a:	429a      	cmp	r2, r3
 800342c:	d106      	bne.n	800343c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	2101      	movs	r1, #1
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe ffb8 	bl	80023ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2102      	movs	r1, #2
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe ff9c 	bl	8002380 <LL_ADC_GetOffsetChannel>
 8003448:	4603      	mov	r3, r0
 800344a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x2e8>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2102      	movs	r1, #2
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe ff91 	bl	8002380 <LL_ADC_GetOffsetChannel>
 800345e:	4603      	mov	r3, r0
 8003460:	0e9b      	lsrs	r3, r3, #26
 8003462:	f003 021f 	and.w	r2, r3, #31
 8003466:	e01e      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x326>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2102      	movs	r1, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe ff86 	bl	8002380 <LL_ADC_GetOffsetChannel>
 8003474:	4603      	mov	r3, r0
 8003476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800347e:	fa93 f3a3 	rbit	r3, r3
 8003482:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800348a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800348e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003496:	2320      	movs	r3, #32
 8003498:	e004      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800349a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <HAL_ADC_ConfigChannel+0x33e>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	0e9b      	lsrs	r3, r3, #26
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	e016      	b.n	80034ec <HAL_ADC_ConfigChannel+0x36c>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80034d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80034d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80034de:	2320      	movs	r3, #32
 80034e0:	e004      	b.n	80034ec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80034e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d106      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2102      	movs	r1, #2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe ff57 	bl	80023ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2103      	movs	r1, #3
 8003504:	4618      	mov	r0, r3
 8003506:	f7fe ff3b 	bl	8002380 <LL_ADC_GetOffsetChannel>
 800350a:	4603      	mov	r3, r0
 800350c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <HAL_ADC_ConfigChannel+0x3aa>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2103      	movs	r1, #3
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe ff30 	bl	8002380 <LL_ADC_GetOffsetChannel>
 8003520:	4603      	mov	r3, r0
 8003522:	0e9b      	lsrs	r3, r3, #26
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	e017      	b.n	800355a <HAL_ADC_ConfigChannel+0x3da>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2103      	movs	r1, #3
 8003530:	4618      	mov	r0, r3
 8003532:	f7fe ff25 	bl	8002380 <LL_ADC_GetOffsetChannel>
 8003536:	4603      	mov	r3, r0
 8003538:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003544:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800354c:	2320      	movs	r3, #32
 800354e:	e003      	b.n	8003558 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003562:	2b00      	cmp	r3, #0
 8003564:	d105      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x3f2>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	0e9b      	lsrs	r3, r3, #26
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	e011      	b.n	8003596 <HAL_ADC_ConfigChannel+0x416>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800357a:	fa93 f3a3 	rbit	r3, r3
 800357e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003582:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800358a:	2320      	movs	r3, #32
 800358c:	e003      	b.n	8003596 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800358e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003590:	fab3 f383 	clz	r3, r3
 8003594:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003596:	429a      	cmp	r2, r3
 8003598:	d106      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2200      	movs	r2, #0
 80035a0:	2103      	movs	r1, #3
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe ff02 	bl	80023ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff f881 	bl	80026b4 <LL_ADC_IsEnabled>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f040 813d 	bne.w	8003834 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f7fe ffd2 	bl	8002570 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4aa2      	ldr	r2, [pc, #648]	; (800385c <HAL_ADC_ConfigChannel+0x6dc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	f040 812e 	bne.w	8003834 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x480>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	0e9b      	lsrs	r3, r3, #26
 80035ee:	3301      	adds	r3, #1
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	2b09      	cmp	r3, #9
 80035f6:	bf94      	ite	ls
 80035f8:	2301      	movls	r3, #1
 80035fa:	2300      	movhi	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e019      	b.n	8003634 <HAL_ADC_ConfigChannel+0x4b4>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003608:	fa93 f3a3 	rbit	r3, r3
 800360c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800360e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003610:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003618:	2320      	movs	r3, #32
 800361a:	e003      	b.n	8003624 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800361c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	3301      	adds	r3, #1
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	2b09      	cmp	r3, #9
 800362c:	bf94      	ite	ls
 800362e:	2301      	movls	r3, #1
 8003630:	2300      	movhi	r3, #0
 8003632:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003634:	2b00      	cmp	r3, #0
 8003636:	d079      	beq.n	800372c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003640:	2b00      	cmp	r3, #0
 8003642:	d107      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x4d4>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0e9b      	lsrs	r3, r3, #26
 800364a:	3301      	adds	r3, #1
 800364c:	069b      	lsls	r3, r3, #26
 800364e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003652:	e015      	b.n	8003680 <HAL_ADC_ConfigChannel+0x500>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003664:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800366c:	2320      	movs	r3, #32
 800366e:	e003      	b.n	8003678 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3301      	adds	r3, #1
 800367a:	069b      	lsls	r3, r3, #26
 800367c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x520>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0e9b      	lsrs	r3, r3, #26
 8003692:	3301      	adds	r3, #1
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	e017      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x550>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80036ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80036b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e003      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80036bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	2101      	movs	r1, #1
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	ea42 0103 	orr.w	r1, r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10a      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x576>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0e9b      	lsrs	r3, r3, #26
 80036e6:	3301      	adds	r3, #1
 80036e8:	f003 021f 	and.w	r2, r3, #31
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	051b      	lsls	r3, r3, #20
 80036f4:	e018      	b.n	8003728 <HAL_ADC_ConfigChannel+0x5a8>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003706:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800370e:	2320      	movs	r3, #32
 8003710:	e003      	b.n	800371a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003714:	fab3 f383 	clz	r3, r3
 8003718:	b2db      	uxtb	r3, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f003 021f 	and.w	r2, r3, #31
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003728:	430b      	orrs	r3, r1
 800372a:	e07e      	b.n	800382a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003734:	2b00      	cmp	r3, #0
 8003736:	d107      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x5c8>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	3301      	adds	r3, #1
 8003740:	069b      	lsls	r3, r3, #26
 8003742:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003746:	e015      	b.n	8003774 <HAL_ADC_ConfigChannel+0x5f4>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003758:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003760:	2320      	movs	r3, #32
 8003762:	e003      	b.n	800376c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3301      	adds	r3, #1
 800376e:	069b      	lsls	r3, r3, #26
 8003770:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x614>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	0e9b      	lsrs	r3, r3, #26
 8003786:	3301      	adds	r3, #1
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	2101      	movs	r1, #1
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	e017      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x644>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	61fb      	str	r3, [r7, #28]
  return result;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80037ac:	2320      	movs	r3, #32
 80037ae:	e003      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	3301      	adds	r3, #1
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	2101      	movs	r1, #1
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	ea42 0103 	orr.w	r1, r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10d      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x670>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0e9b      	lsrs	r3, r3, #26
 80037da:	3301      	adds	r3, #1
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	3b1e      	subs	r3, #30
 80037e8:	051b      	lsls	r3, r3, #20
 80037ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037ee:	e01b      	b.n	8003828 <HAL_ADC_ConfigChannel+0x6a8>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	613b      	str	r3, [r7, #16]
  return result;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003808:	2320      	movs	r3, #32
 800380a:	e003      	b.n	8003814 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f003 021f 	and.w	r2, r3, #31
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	3b1e      	subs	r3, #30
 8003822:	051b      	lsls	r3, r3, #20
 8003824:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003828:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800382e:	4619      	mov	r1, r3
 8003830:	f7fe fe72 	bl	8002518 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_ADC_ConfigChannel+0x6e0>)
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80be 	beq.w	80039be <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800384a:	d004      	beq.n	8003856 <HAL_ADC_ConfigChannel+0x6d6>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <HAL_ADC_ConfigChannel+0x6e4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10a      	bne.n	800386c <HAL_ADC_ConfigChannel+0x6ec>
 8003856:	4b04      	ldr	r3, [pc, #16]	; (8003868 <HAL_ADC_ConfigChannel+0x6e8>)
 8003858:	e009      	b.n	800386e <HAL_ADC_ConfigChannel+0x6ee>
 800385a:	bf00      	nop
 800385c:	407f0000 	.word	0x407f0000
 8003860:	80080000 	.word	0x80080000
 8003864:	50000100 	.word	0x50000100
 8003868:	50000300 	.word	0x50000300
 800386c:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_ADC_ConfigChannel+0x854>)
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe fd54 	bl	800231c <LL_ADC_GetCommonPathInternalCh>
 8003874:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a56      	ldr	r2, [pc, #344]	; (80039d8 <HAL_ADC_ConfigChannel+0x858>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_ADC_ConfigChannel+0x70c>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a55      	ldr	r2, [pc, #340]	; (80039dc <HAL_ADC_ConfigChannel+0x85c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d13a      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800388c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d134      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038a0:	d005      	beq.n	80038ae <HAL_ADC_ConfigChannel+0x72e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a4e      	ldr	r2, [pc, #312]	; (80039e0 <HAL_ADC_ConfigChannel+0x860>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	f040 8085 	bne.w	80039b8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038b6:	d004      	beq.n	80038c2 <HAL_ADC_ConfigChannel+0x742>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a49      	ldr	r2, [pc, #292]	; (80039e4 <HAL_ADC_ConfigChannel+0x864>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x746>
 80038c2:	4a49      	ldr	r2, [pc, #292]	; (80039e8 <HAL_ADC_ConfigChannel+0x868>)
 80038c4:	e000      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x748>
 80038c6:	4a43      	ldr	r2, [pc, #268]	; (80039d4 <HAL_ADC_ConfigChannel+0x854>)
 80038c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038d0:	4619      	mov	r1, r3
 80038d2:	4610      	mov	r0, r2
 80038d4:	f7fe fd0f 	bl	80022f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038d8:	4b44      	ldr	r3, [pc, #272]	; (80039ec <HAL_ADC_ConfigChannel+0x86c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	4a44      	ldr	r2, [pc, #272]	; (80039f0 <HAL_ADC_ConfigChannel+0x870>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	099b      	lsrs	r3, r3, #6
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038f2:	e002      	b.n	80038fa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f9      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003900:	e05a      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a3b      	ldr	r2, [pc, #236]	; (80039f4 <HAL_ADC_ConfigChannel+0x874>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d125      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800390c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d11f      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a31      	ldr	r2, [pc, #196]	; (80039e4 <HAL_ADC_ConfigChannel+0x864>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d104      	bne.n	800392c <HAL_ADC_ConfigChannel+0x7ac>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a34      	ldr	r2, [pc, #208]	; (80039f8 <HAL_ADC_ConfigChannel+0x878>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d047      	beq.n	80039bc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003934:	d004      	beq.n	8003940 <HAL_ADC_ConfigChannel+0x7c0>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2a      	ldr	r2, [pc, #168]	; (80039e4 <HAL_ADC_ConfigChannel+0x864>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x7c4>
 8003940:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <HAL_ADC_ConfigChannel+0x868>)
 8003942:	e000      	b.n	8003946 <HAL_ADC_ConfigChannel+0x7c6>
 8003944:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <HAL_ADC_ConfigChannel+0x854>)
 8003946:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800394a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fe fcd0 	bl	80022f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003956:	e031      	b.n	80039bc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a27      	ldr	r2, [pc, #156]	; (80039fc <HAL_ADC_ConfigChannel+0x87c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d12d      	bne.n	80039be <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003962:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d127      	bne.n	80039be <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <HAL_ADC_ConfigChannel+0x864>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d022      	beq.n	80039be <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003980:	d004      	beq.n	800398c <HAL_ADC_ConfigChannel+0x80c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <HAL_ADC_ConfigChannel+0x864>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x810>
 800398c:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <HAL_ADC_ConfigChannel+0x868>)
 800398e:	e000      	b.n	8003992 <HAL_ADC_ConfigChannel+0x812>
 8003990:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <HAL_ADC_ConfigChannel+0x854>)
 8003992:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003996:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f7fe fcaa 	bl	80022f6 <LL_ADC_SetCommonPathInternalCh>
 80039a2:	e00c      	b.n	80039be <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80039b6:	e002      	b.n	80039be <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80039c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	37d8      	adds	r7, #216	; 0xd8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	50000700 	.word	0x50000700
 80039d8:	c3210000 	.word	0xc3210000
 80039dc:	90c00010 	.word	0x90c00010
 80039e0:	50000600 	.word	0x50000600
 80039e4:	50000100 	.word	0x50000100
 80039e8:	50000300 	.word	0x50000300
 80039ec:	20000000 	.word	0x20000000
 80039f0:	053e2d63 	.word	0x053e2d63
 80039f4:	c7520000 	.word	0xc7520000
 80039f8:	50000500 	.word	0x50000500
 80039fc:	cb840000 	.word	0xcb840000

08003a00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe fe4f 	bl	80026b4 <LL_ADC_IsEnabled>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d176      	bne.n	8003b0a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	4b3c      	ldr	r3, [pc, #240]	; (8003b14 <ADC_Enable+0x114>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00d      	beq.n	8003a46 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	f043 0210 	orr.w	r2, r3, #16
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e062      	b.n	8003b0c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe fe1e 	bl	800268c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a58:	d004      	beq.n	8003a64 <ADC_Enable+0x64>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a2e      	ldr	r2, [pc, #184]	; (8003b18 <ADC_Enable+0x118>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d101      	bne.n	8003a68 <ADC_Enable+0x68>
 8003a64:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <ADC_Enable+0x11c>)
 8003a66:	e000      	b.n	8003a6a <ADC_Enable+0x6a>
 8003a68:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <ADC_Enable+0x120>)
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fc56 	bl	800231c <LL_ADC_GetCommonPathInternalCh>
 8003a70:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d013      	beq.n	8003aa2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a7a:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <ADC_Enable+0x124>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	099b      	lsrs	r3, r3, #6
 8003a80:	4a29      	ldr	r2, [pc, #164]	; (8003b28 <ADC_Enable+0x128>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a94:	e002      	b.n	8003a9c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f9      	bne.n	8003a96 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003aa2:	f7fe fbe5 	bl	8002270 <HAL_GetTick>
 8003aa6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aa8:	e028      	b.n	8003afc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fe00 	bl	80026b4 <LL_ADC_IsEnabled>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe fde4 	bl	800268c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ac4:	f7fe fbd4 	bl	8002270 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d914      	bls.n	8003afc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d00d      	beq.n	8003afc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae4:	f043 0210 	orr.w	r2, r3, #16
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e007      	b.n	8003b0c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d1cf      	bne.n	8003aaa <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	8000003f 	.word	0x8000003f
 8003b18:	50000100 	.word	0x50000100
 8003b1c:	50000300 	.word	0x50000300
 8003b20:	50000700 	.word	0x50000700
 8003b24:	20000000 	.word	0x20000000
 8003b28:	053e2d63 	.word	0x053e2d63

08003b2c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d14b      	bne.n	8003bde <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d021      	beq.n	8003ba4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe fc85 	bl	8002474 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d032      	beq.n	8003bd6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d12b      	bne.n	8003bd6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11f      	bne.n	8003bd6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9a:	f043 0201 	orr.w	r2, r3, #1
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ba2:	e018      	b.n	8003bd6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d111      	bne.n	8003bd6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bce:	f043 0201 	orr.w	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff faaa 	bl	8003130 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bdc:	e00e      	b.n	8003bfc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7ff fabe 	bl	800316c <HAL_ADC_ErrorCallback>
}
 8003bf0:	e004      	b.n	8003bfc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
}
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff fa96 	bl	8003144 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c3e:	f043 0204 	orr.w	r2, r3, #4
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff fa90 	bl	800316c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <LL_ADC_IsEnabled>:
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <LL_ADC_IsEnabled+0x18>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <LL_ADC_IsEnabled+0x1a>
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_ADC_REG_IsConversionOngoing>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d101      	bne.n	8003c92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b0a1      	sub	sp, #132	; 0x84
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e0e7      	b.n	8003ef2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d3a:	d102      	bne.n	8003d42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	; (8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	e009      	b.n	8003d56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6e      	ldr	r2, [pc, #440]	; (8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d102      	bne.n	8003d52 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003d4c:	4b6d      	ldr	r3, [pc, #436]	; (8003f04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	e001      	b.n	8003d56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0be      	b.n	8003ef2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff ff7f 	bl	8003c7a <LL_ADC_REG_IsConversionOngoing>
 8003d7c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff ff79 	bl	8003c7a <LL_ADC_REG_IsConversionOngoing>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 80a0 	bne.w	8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 809c 	bne.w	8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da0:	d004      	beq.n	8003dac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a55      	ldr	r2, [pc, #340]	; (8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d101      	bne.n	8003db0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003dac:	4b56      	ldr	r3, [pc, #344]	; (8003f08 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003dae:	e000      	b.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003db0:	4b56      	ldr	r3, [pc, #344]	; (8003f0c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003db2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d04b      	beq.n	8003e54 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dce:	035b      	lsls	r3, r3, #13
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de0:	d004      	beq.n	8003dec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a45      	ldr	r2, [pc, #276]	; (8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d10f      	bne.n	8003e0c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003dec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003df0:	f7ff ff30 	bl	8003c54 <LL_ADC_IsEnabled>
 8003df4:	4604      	mov	r4, r0
 8003df6:	4841      	ldr	r0, [pc, #260]	; (8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003df8:	f7ff ff2c 	bl	8003c54 <LL_ADC_IsEnabled>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	4323      	orrs	r3, r4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	bf0c      	ite	eq
 8003e04:	2301      	moveq	r3, #1
 8003e06:	2300      	movne	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e012      	b.n	8003e32 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003e0c:	483c      	ldr	r0, [pc, #240]	; (8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e0e:	f7ff ff21 	bl	8003c54 <LL_ADC_IsEnabled>
 8003e12:	4604      	mov	r4, r0
 8003e14:	483b      	ldr	r0, [pc, #236]	; (8003f04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e16:	f7ff ff1d 	bl	8003c54 <LL_ADC_IsEnabled>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	431c      	orrs	r4, r3
 8003e1e:	483c      	ldr	r0, [pc, #240]	; (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e20:	f7ff ff18 	bl	8003c54 <LL_ADC_IsEnabled>
 8003e24:	4603      	mov	r3, r0
 8003e26:	4323      	orrs	r3, r4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d056      	beq.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e3e:	f023 030f 	bic.w	r3, r3, #15
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	6811      	ldr	r1, [r2, #0]
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	6892      	ldr	r2, [r2, #8]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e50:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e52:	e047      	b.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e68:	d004      	beq.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a23      	ldr	r2, [pc, #140]	; (8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d10f      	bne.n	8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003e74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e78:	f7ff feec 	bl	8003c54 <LL_ADC_IsEnabled>
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	481f      	ldr	r0, [pc, #124]	; (8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e80:	f7ff fee8 	bl	8003c54 <LL_ADC_IsEnabled>
 8003e84:	4603      	mov	r3, r0
 8003e86:	4323      	orrs	r3, r4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf0c      	ite	eq
 8003e8c:	2301      	moveq	r3, #1
 8003e8e:	2300      	movne	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	e012      	b.n	8003eba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003e94:	481a      	ldr	r0, [pc, #104]	; (8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e96:	f7ff fedd 	bl	8003c54 <LL_ADC_IsEnabled>
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4819      	ldr	r0, [pc, #100]	; (8003f04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e9e:	f7ff fed9 	bl	8003c54 <LL_ADC_IsEnabled>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	431c      	orrs	r4, r3
 8003ea6:	481a      	ldr	r0, [pc, #104]	; (8003f10 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ea8:	f7ff fed4 	bl	8003c54 <LL_ADC_IsEnabled>
 8003eac:	4603      	mov	r3, r0
 8003eae:	4323      	orrs	r3, r4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d012      	beq.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ec6:	f023 030f 	bic.w	r3, r3, #15
 8003eca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ecc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ece:	e009      	b.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	f043 0220 	orr.w	r2, r3, #32
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003ee2:	e000      	b.n	8003ee6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ee4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003eee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3784      	adds	r7, #132	; 0x84
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd90      	pop	{r4, r7, pc}
 8003efa:	bf00      	nop
 8003efc:	50000100 	.word	0x50000100
 8003f00:	50000400 	.word	0x50000400
 8003f04:	50000500 	.word	0x50000500
 8003f08:	50000300 	.word	0x50000300
 8003f0c:	50000700 	.word	0x50000700
 8003f10:	50000600 	.word	0x50000600

08003f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <__NVIC_SetPriorityGrouping+0x44>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f30:	4013      	ands	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f46:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <__NVIC_SetPriorityGrouping+0x44>)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	60d3      	str	r3, [r2, #12]
}
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f60:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <__NVIC_GetPriorityGrouping+0x18>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	0a1b      	lsrs	r3, r3, #8
 8003f66:	f003 0307 	and.w	r3, r3, #7
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	db0b      	blt.n	8003fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	f003 021f 	and.w	r2, r3, #31
 8003f90:	4907      	ldr	r1, [pc, #28]	; (8003fb0 <__NVIC_EnableIRQ+0x38>)
 8003f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	2001      	movs	r0, #1
 8003f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	e000e100 	.word	0xe000e100

08003fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	6039      	str	r1, [r7, #0]
 8003fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	db0a      	blt.n	8003fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	490c      	ldr	r1, [pc, #48]	; (8004000 <__NVIC_SetPriority+0x4c>)
 8003fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd2:	0112      	lsls	r2, r2, #4
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fdc:	e00a      	b.n	8003ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	4908      	ldr	r1, [pc, #32]	; (8004004 <__NVIC_SetPriority+0x50>)
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	3b04      	subs	r3, #4
 8003fec:	0112      	lsls	r2, r2, #4
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	761a      	strb	r2, [r3, #24]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	e000e100 	.word	0xe000e100
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004008:	b480      	push	{r7}
 800400a:	b089      	sub	sp, #36	; 0x24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f1c3 0307 	rsb	r3, r3, #7
 8004022:	2b04      	cmp	r3, #4
 8004024:	bf28      	it	cs
 8004026:	2304      	movcs	r3, #4
 8004028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	3304      	adds	r3, #4
 800402e:	2b06      	cmp	r3, #6
 8004030:	d902      	bls.n	8004038 <NVIC_EncodePriority+0x30>
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	3b03      	subs	r3, #3
 8004036:	e000      	b.n	800403a <NVIC_EncodePriority+0x32>
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800403c:	f04f 32ff 	mov.w	r2, #4294967295
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43da      	mvns	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	401a      	ands	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004050:	f04f 31ff 	mov.w	r1, #4294967295
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	fa01 f303 	lsl.w	r3, r1, r3
 800405a:	43d9      	mvns	r1, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004060:	4313      	orrs	r3, r2
         );
}
 8004062:	4618      	mov	r0, r3
 8004064:	3724      	adds	r7, #36	; 0x24
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff ff4c 	bl	8003f14 <__NVIC_SetPriorityGrouping>
}
 800407c:	bf00      	nop
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004092:	f7ff ff63 	bl	8003f5c <__NVIC_GetPriorityGrouping>
 8004096:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	6978      	ldr	r0, [r7, #20]
 800409e:	f7ff ffb3 	bl	8004008 <NVIC_EncodePriority>
 80040a2:	4602      	mov	r2, r0
 80040a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040a8:	4611      	mov	r1, r2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff ff82 	bl	8003fb4 <__NVIC_SetPriority>
}
 80040b0:	bf00      	nop
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff ff56 	bl	8003f78 <__NVIC_EnableIRQ>
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e054      	b.n	8004190 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	7f5b      	ldrb	r3, [r3, #29]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fc ff80 	bl	8000ffc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	791b      	ldrb	r3, [r3, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10c      	bne.n	8004124 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a22      	ldr	r2, [pc, #136]	; (8004198 <HAL_CRC_Init+0xc4>)
 8004110:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0218 	bic.w	r2, r2, #24
 8004120:	609a      	str	r2, [r3, #8]
 8004122:	e00c      	b.n	800413e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6899      	ldr	r1, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	461a      	mov	r2, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f834 	bl	800419c <HAL_CRCEx_Polynomial_Set>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e028      	b.n	8004190 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	795b      	ldrb	r3, [r3, #5]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d105      	bne.n	8004152 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f04f 32ff 	mov.w	r2, #4294967295
 800414e:	611a      	str	r2, [r3, #16]
 8004150:	e004      	b.n	800415c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6912      	ldr	r2, [r2, #16]
 800415a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	04c11db7 	.word	0x04c11db7

0800419c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80041ac:	231f      	movs	r3, #31
 80041ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
 80041be:	e063      	b.n	8004288 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80041c0:	bf00      	nop
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1e5a      	subs	r2, r3, #1
 80041c6:	613a      	str	r2, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <HAL_CRCEx_Polynomial_Set+0x44>
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b18      	cmp	r3, #24
 80041e4:	d846      	bhi.n	8004274 <HAL_CRCEx_Polynomial_Set+0xd8>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <HAL_CRCEx_Polynomial_Set+0x50>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	0800427b 	.word	0x0800427b
 80041f0:	08004275 	.word	0x08004275
 80041f4:	08004275 	.word	0x08004275
 80041f8:	08004275 	.word	0x08004275
 80041fc:	08004275 	.word	0x08004275
 8004200:	08004275 	.word	0x08004275
 8004204:	08004275 	.word	0x08004275
 8004208:	08004275 	.word	0x08004275
 800420c:	08004269 	.word	0x08004269
 8004210:	08004275 	.word	0x08004275
 8004214:	08004275 	.word	0x08004275
 8004218:	08004275 	.word	0x08004275
 800421c:	08004275 	.word	0x08004275
 8004220:	08004275 	.word	0x08004275
 8004224:	08004275 	.word	0x08004275
 8004228:	08004275 	.word	0x08004275
 800422c:	0800425d 	.word	0x0800425d
 8004230:	08004275 	.word	0x08004275
 8004234:	08004275 	.word	0x08004275
 8004238:	08004275 	.word	0x08004275
 800423c:	08004275 	.word	0x08004275
 8004240:	08004275 	.word	0x08004275
 8004244:	08004275 	.word	0x08004275
 8004248:	08004275 	.word	0x08004275
 800424c:	08004251 	.word	0x08004251
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b06      	cmp	r3, #6
 8004254:	d913      	bls.n	800427e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800425a:	e010      	b.n	800427e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b07      	cmp	r3, #7
 8004260:	d90f      	bls.n	8004282 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004266:	e00c      	b.n	8004282 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b0f      	cmp	r3, #15
 800426c:	d90b      	bls.n	8004286 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004272:	e008      	b.n	8004286 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	75fb      	strb	r3, [r7, #23]
        break;
 8004278:	e006      	b.n	8004288 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800427a:	bf00      	nop
 800427c:	e004      	b.n	8004288 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800427e:	bf00      	nop
 8004280:	e002      	b.n	8004288 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004282:	bf00      	nop
 8004284:	e000      	b.n	8004288 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004286:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10d      	bne.n	80042aa <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f023 0118 	bic.w	r1, r3, #24
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e08d      	b.n	80043e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <HAL_DMA_Init+0x138>)
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d80f      	bhi.n	80042f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	4b45      	ldr	r3, [pc, #276]	; (80043f4 <HAL_DMA_Init+0x13c>)
 80042de:	4413      	add	r3, r2
 80042e0:	4a45      	ldr	r2, [pc, #276]	; (80043f8 <HAL_DMA_Init+0x140>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	009a      	lsls	r2, r3, #2
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a42      	ldr	r2, [pc, #264]	; (80043fc <HAL_DMA_Init+0x144>)
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40
 80042f4:	e00e      	b.n	8004314 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	4b40      	ldr	r3, [pc, #256]	; (8004400 <HAL_DMA_Init+0x148>)
 80042fe:	4413      	add	r3, r2
 8004300:	4a3d      	ldr	r2, [pc, #244]	; (80043f8 <HAL_DMA_Init+0x140>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	009a      	lsls	r2, r3, #2
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a3c      	ldr	r2, [pc, #240]	; (8004404 <HAL_DMA_Init+0x14c>)
 8004312:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa2c 	bl	80047c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004374:	d102      	bne.n	800437c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004390:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d010      	beq.n	80043bc <HAL_DMA_Init+0x104>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d80c      	bhi.n	80043bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fa4c 	bl	8004840 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	e008      	b.n	80043ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40020407 	.word	0x40020407
 80043f4:	bffdfff8 	.word	0xbffdfff8
 80043f8:	cccccccd 	.word	0xcccccccd
 80043fc:	40020000 	.word	0x40020000
 8004400:	bffdfbf8 	.word	0xbffdfbf8
 8004404:	40020400 	.word	0x40020400

08004408 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_DMA_Start_IT+0x20>
 8004424:	2302      	movs	r3, #2
 8004426:	e066      	b.n	80044f6 <HAL_DMA_Start_IT+0xee>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d155      	bne.n	80044e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f970 	bl	8004746 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 020e 	orr.w	r2, r2, #14
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e00f      	b.n	80044a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0204 	bic.w	r2, r2, #4
 800448e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 020a 	orr.w	r2, r2, #10
 800449e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e005      	b.n	80044f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
 80044f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d00d      	beq.n	8004532 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2204      	movs	r2, #4
 800451a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	e047      	b.n	80045c2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 020e 	bic.w	r2, r2, #14
 8004540:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0201 	bic.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004560:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	f003 021f 	and.w	r2, r3, #31
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	2101      	movs	r1, #1
 8004570:	fa01 f202 	lsl.w	r2, r1, r2
 8004574:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800457e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00c      	beq.n	80045a2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004596:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
    }
  }
  return status;
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e8:	f003 031f 	and.w	r3, r3, #31
 80045ec:	2204      	movs	r2, #4
 80045ee:	409a      	lsls	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d026      	beq.n	8004646 <HAL_DMA_IRQHandler+0x7a>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d021      	beq.n	8004646 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b00      	cmp	r3, #0
 800460e:	d107      	bne.n	8004620 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0204 	bic.w	r2, r2, #4
 800461e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004624:	f003 021f 	and.w	r2, r3, #31
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	2104      	movs	r1, #4
 800462e:	fa01 f202 	lsl.w	r2, r1, r2
 8004632:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	2b00      	cmp	r3, #0
 800463a:	d071      	beq.n	8004720 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004644:	e06c      	b.n	8004720 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	2202      	movs	r2, #2
 8004650:	409a      	lsls	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d02e      	beq.n	80046b8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d029      	beq.n	80046b8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 020a 	bic.w	r2, r2, #10
 8004680:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	f003 021f 	and.w	r2, r3, #31
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	2102      	movs	r1, #2
 8004698:	fa01 f202 	lsl.w	r2, r1, r2
 800469c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d038      	beq.n	8004720 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80046b6:	e033      	b.n	8004720 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	2208      	movs	r2, #8
 80046c2:	409a      	lsls	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d02a      	beq.n	8004722 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d025      	beq.n	8004722 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 020e 	bic.w	r2, r2, #14
 80046e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	f003 021f 	and.w	r2, r3, #31
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	2101      	movs	r1, #1
 80046f4:	fa01 f202 	lsl.w	r2, r1, r2
 80046f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004720:	bf00      	nop
 8004722:	bf00      	nop
}
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004738:	b2db      	uxtb	r3, r3
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	607a      	str	r2, [r7, #4]
 8004752:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800475c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800476e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004774:	f003 021f 	and.w	r2, r3, #31
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	2101      	movs	r1, #1
 800477e:	fa01 f202 	lsl.w	r2, r1, r2
 8004782:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b10      	cmp	r3, #16
 8004792:	d108      	bne.n	80047a6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80047a4:	e007      	b.n	80047b6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	4b16      	ldr	r3, [pc, #88]	; (800482c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d802      	bhi.n	80047de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e001      	b.n	80047e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80047de:	4b15      	ldr	r3, [pc, #84]	; (8004834 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80047e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3b08      	subs	r3, #8
 80047ee:	4a12      	ldr	r2, [pc, #72]	; (8004838 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80047f0:	fba2 2303 	umull	r2, r3, r2, r3
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	009a      	lsls	r2, r3, #2
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4413      	add	r3, r2
 8004804:	461a      	mov	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a0b      	ldr	r2, [pc, #44]	; (800483c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800480e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2201      	movs	r2, #1
 8004818:	409a      	lsls	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40020407 	.word	0x40020407
 8004830:	40020800 	.word	0x40020800
 8004834:	40020820 	.word	0x40020820
 8004838:	cccccccd 	.word	0xcccccccd
 800483c:	40020880 	.word	0x40020880

08004840 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	b2db      	uxtb	r3, r3
 800484e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	461a      	mov	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a08      	ldr	r2, [pc, #32]	; (8004884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004862:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3b01      	subs	r3, #1
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	2201      	movs	r2, #1
 800486e:	409a      	lsls	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	1000823f 	.word	0x1000823f
 8004884:	40020940 	.word	0x40020940

08004888 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e147      	b.n	8004b2a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fc fc44 	bl	800113c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699a      	ldr	r2, [r3, #24]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0210 	bic.w	r2, r2, #16
 80048c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048c4:	f7fd fcd4 	bl	8002270 <HAL_GetTick>
 80048c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80048ca:	e012      	b.n	80048f2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80048cc:	f7fd fcd0 	bl	8002270 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b0a      	cmp	r3, #10
 80048d8:	d90b      	bls.n	80048f2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048de:	f043 0201 	orr.w	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2203      	movs	r2, #3
 80048ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e11b      	b.n	8004b2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d0e5      	beq.n	80048cc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004910:	f7fd fcae 	bl	8002270 <HAL_GetTick>
 8004914:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004916:	e012      	b.n	800493e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004918:	f7fd fcaa 	bl	8002270 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b0a      	cmp	r3, #10
 8004924:	d90b      	bls.n	800493e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492a:	f043 0201 	orr.w	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2203      	movs	r2, #3
 8004936:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e0f5      	b.n	8004b2a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0e5      	beq.n	8004918 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0202 	orr.w	r2, r2, #2
 800495a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a74      	ldr	r2, [pc, #464]	; (8004b34 <HAL_FDCAN_Init+0x2ac>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d103      	bne.n	800496e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004966:	4a74      	ldr	r2, [pc, #464]	; (8004b38 <HAL_FDCAN_Init+0x2b0>)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	7c1b      	ldrb	r3, [r3, #16]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d108      	bne.n	8004988 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004984:	619a      	str	r2, [r3, #24]
 8004986:	e007      	b.n	8004998 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004996:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7c5b      	ldrb	r3, [r3, #17]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d108      	bne.n	80049b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ae:	619a      	str	r2, [r3, #24]
 80049b0:	e007      	b.n	80049c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	7c9b      	ldrb	r3, [r3, #18]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d108      	bne.n	80049dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699a      	ldr	r2, [r3, #24]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049d8:	619a      	str	r2, [r3, #24]
 80049da:	e007      	b.n	80049ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004a10:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0210 	bic.w	r2, r2, #16
 8004a20:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d108      	bne.n	8004a3c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699a      	ldr	r2, [r3, #24]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0204 	orr.w	r2, r2, #4
 8004a38:	619a      	str	r2, [r3, #24]
 8004a3a:	e02c      	b.n	8004a96 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d028      	beq.n	8004a96 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d01c      	beq.n	8004a86 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a5a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0210 	orr.w	r2, r2, #16
 8004a6a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d110      	bne.n	8004a96 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0220 	orr.w	r2, r2, #32
 8004a82:	619a      	str	r2, [r3, #24]
 8004a84:	e007      	b.n	8004a96 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0220 	orr.w	r2, r2, #32
 8004a94:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004aa6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004aae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004abe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004ac0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aca:	d115      	bne.n	8004af8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004ada:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004ae4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	3b01      	subs	r3, #1
 8004aee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004af4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004af6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f83c 	bl	8004b8c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40006400 	.word	0x40006400
 8004b38:	40006500 	.word	0x40006500

08004b3c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d110      	bne.n	8004b72 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e006      	b.n	8004b80 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b76:	f043 0204 	orr.w	r2, r3, #4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
  }
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004b94:	4b30      	ldr	r3, [pc, #192]	; (8004c58 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004b96:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a2f      	ldr	r2, [pc, #188]	; (8004c5c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d103      	bne.n	8004baa <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004ba8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a2c      	ldr	r2, [pc, #176]	; (8004c60 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d103      	bne.n	8004bbc <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004bba:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bca:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd2:	041a      	lsls	r2, r3, #16
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	061a      	lsls	r2, r3, #24
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e005      	b.n	8004c3e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d3f3      	bcc.n	8004c32 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004c4a:	bf00      	nop
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	4000a400 	.word	0x4000a400
 8004c5c:	40006800 	.word	0x40006800
 8004c60:	40006c00 	.word	0x40006c00

08004c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c72:	e15a      	b.n	8004f2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	2101      	movs	r1, #1
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c80:	4013      	ands	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 814c 	beq.w	8004f24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d005      	beq.n	8004ca4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d130      	bne.n	8004d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	2203      	movs	r2, #3
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cda:	2201      	movs	r2, #1
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	f003 0201 	and.w	r2, r3, #1
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d017      	beq.n	8004d42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	2203      	movs	r2, #3
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4013      	ands	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d123      	bne.n	8004d96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	08da      	lsrs	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3208      	adds	r2, #8
 8004d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	220f      	movs	r2, #15
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	08da      	lsrs	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3208      	adds	r2, #8
 8004d90:	6939      	ldr	r1, [r7, #16]
 8004d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	2203      	movs	r2, #3
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	43db      	mvns	r3, r3
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4013      	ands	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 0203 	and.w	r2, r3, #3
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80a6 	beq.w	8004f24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd8:	4b5b      	ldr	r3, [pc, #364]	; (8004f48 <HAL_GPIO_Init+0x2e4>)
 8004dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ddc:	4a5a      	ldr	r2, [pc, #360]	; (8004f48 <HAL_GPIO_Init+0x2e4>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	6613      	str	r3, [r2, #96]	; 0x60
 8004de4:	4b58      	ldr	r3, [pc, #352]	; (8004f48 <HAL_GPIO_Init+0x2e4>)
 8004de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004df0:	4a56      	ldr	r2, [pc, #344]	; (8004f4c <HAL_GPIO_Init+0x2e8>)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	089b      	lsrs	r3, r3, #2
 8004df6:	3302      	adds	r3, #2
 8004df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	220f      	movs	r2, #15
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4013      	ands	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e1a:	d01f      	beq.n	8004e5c <HAL_GPIO_Init+0x1f8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a4c      	ldr	r2, [pc, #304]	; (8004f50 <HAL_GPIO_Init+0x2ec>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d019      	beq.n	8004e58 <HAL_GPIO_Init+0x1f4>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a4b      	ldr	r2, [pc, #300]	; (8004f54 <HAL_GPIO_Init+0x2f0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d013      	beq.n	8004e54 <HAL_GPIO_Init+0x1f0>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a4a      	ldr	r2, [pc, #296]	; (8004f58 <HAL_GPIO_Init+0x2f4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00d      	beq.n	8004e50 <HAL_GPIO_Init+0x1ec>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a49      	ldr	r2, [pc, #292]	; (8004f5c <HAL_GPIO_Init+0x2f8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d007      	beq.n	8004e4c <HAL_GPIO_Init+0x1e8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a48      	ldr	r2, [pc, #288]	; (8004f60 <HAL_GPIO_Init+0x2fc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_GPIO_Init+0x1e4>
 8004e44:	2305      	movs	r3, #5
 8004e46:	e00a      	b.n	8004e5e <HAL_GPIO_Init+0x1fa>
 8004e48:	2306      	movs	r3, #6
 8004e4a:	e008      	b.n	8004e5e <HAL_GPIO_Init+0x1fa>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	e006      	b.n	8004e5e <HAL_GPIO_Init+0x1fa>
 8004e50:	2303      	movs	r3, #3
 8004e52:	e004      	b.n	8004e5e <HAL_GPIO_Init+0x1fa>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e002      	b.n	8004e5e <HAL_GPIO_Init+0x1fa>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <HAL_GPIO_Init+0x1fa>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	f002 0203 	and.w	r2, r2, #3
 8004e64:	0092      	lsls	r2, r2, #2
 8004e66:	4093      	lsls	r3, r2
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e6e:	4937      	ldr	r1, [pc, #220]	; (8004f4c <HAL_GPIO_Init+0x2e8>)
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	3302      	adds	r3, #2
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e7c:	4b39      	ldr	r3, [pc, #228]	; (8004f64 <HAL_GPIO_Init+0x300>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	43db      	mvns	r3, r3
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ea0:	4a30      	ldr	r2, [pc, #192]	; (8004f64 <HAL_GPIO_Init+0x300>)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ea6:	4b2f      	ldr	r3, [pc, #188]	; (8004f64 <HAL_GPIO_Init+0x300>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004eca:	4a26      	ldr	r2, [pc, #152]	; (8004f64 <HAL_GPIO_Init+0x300>)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004ed0:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <HAL_GPIO_Init+0x300>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4013      	ands	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ef4:	4a1b      	ldr	r2, [pc, #108]	; (8004f64 <HAL_GPIO_Init+0x300>)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004efa:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <HAL_GPIO_Init+0x300>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	43db      	mvns	r3, r3
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4013      	ands	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f1e:	4a11      	ldr	r2, [pc, #68]	; (8004f64 <HAL_GPIO_Init+0x300>)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	3301      	adds	r3, #1
 8004f28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f47f ae9d 	bne.w	8004c74 <HAL_GPIO_Init+0x10>
  }
}
 8004f3a:	bf00      	nop
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	48000400 	.word	0x48000400
 8004f54:	48000800 	.word	0x48000800
 8004f58:	48000c00 	.word	0x48000c00
 8004f5c:	48001000 	.word	0x48001000
 8004f60:	48001400 	.word	0x48001400
 8004f64:	40010400 	.word	0x40010400

08004f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
 8004f74:	4613      	mov	r3, r2
 8004f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f78:	787b      	ldrb	r3, [r7, #1]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f7e:	887a      	ldrh	r2, [r7, #2]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f84:	e002      	b.n	8004f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f86:	887a      	ldrh	r2, [r7, #2]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	041a      	lsls	r2, r3, #16
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	43d9      	mvns	r1, r3
 8004fb6:	887b      	ldrh	r3, [r7, #2]
 8004fb8:	400b      	ands	r3, r1
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	619a      	str	r2, [r3, #24]
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e08d      	b.n	80050fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fc fa48 	bl	8001488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2224      	movs	r2, #36	; 0x24
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800501c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800502c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d107      	bne.n	8005046 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	e006      	b.n	8005054 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005052:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d108      	bne.n	800506e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800506a:	605a      	str	r2, [r3, #4]
 800506c:	e007      	b.n	800507e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800507c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800508c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005090:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691a      	ldr	r2, [r3, #16]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69d9      	ldr	r1, [r3, #28]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1a      	ldr	r2, [r3, #32]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	68f9      	ldr	r1, [r7, #12]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	4798      	blx	r3
  }
}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b086      	sub	sp, #24
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00f      	beq.n	8005178 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005166:	f043 0201 	orr.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005176:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00f      	beq.n	80051a2 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005190:	f043 0208 	orr.w	r2, r3, #8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051a0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00f      	beq.n	80051cc <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ba:	f043 0202 	orr.w	r2, r3, #2
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ca:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 030b 	and.w	r3, r3, #11
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fbd6 	bl	8005990 <I2C_ITError>
  }
}
 80051e4:	bf00      	nop
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	70fb      	strb	r3, [r7, #3]
 8005220:	4613      	mov	r3, r2
 8005222:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <I2C_Slave_ISR_IT+0x24>
 800528c:	2302      	movs	r3, #2
 800528e:	e0e2      	b.n	8005456 <I2C_Slave_ISR_IT+0x1ea>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d009      	beq.n	80052b6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d004      	beq.n	80052b6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80052ac:	6939      	ldr	r1, [r7, #16]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f9b6 	bl	8005620 <I2C_ITSlaveCplt>
 80052b4:	e0ca      	b.n	800544c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d04b      	beq.n	8005358 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d046      	beq.n	8005358 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d128      	bne.n	8005326 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b28      	cmp	r3, #40	; 0x28
 80052de:	d108      	bne.n	80052f2 <I2C_Slave_ISR_IT+0x86>
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052e6:	d104      	bne.n	80052f2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80052e8:	6939      	ldr	r1, [r7, #16]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 fafc 	bl	80058e8 <I2C_ITListenCplt>
 80052f0:	e031      	b.n	8005356 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b29      	cmp	r3, #41	; 0x29
 80052fc:	d10e      	bne.n	800531c <I2C_Slave_ISR_IT+0xb0>
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005304:	d00a      	beq.n	800531c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2210      	movs	r2, #16
 800530c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fc55 	bl	8005bbe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f926 	bl	8005566 <I2C_ITSlaveSeqCplt>
 800531a:	e01c      	b.n	8005356 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2210      	movs	r2, #16
 8005322:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005324:	e08f      	b.n	8005446 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2210      	movs	r2, #16
 800532c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	f043 0204 	orr.w	r2, r3, #4
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <I2C_Slave_ISR_IT+0xdc>
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005346:	d17e      	bne.n	8005446 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534c:	4619      	mov	r1, r3
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 fb1e 	bl	8005990 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005354:	e077      	b.n	8005446 <I2C_Slave_ISR_IT+0x1da>
 8005356:	e076      	b.n	8005446 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d02f      	beq.n	80053c2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005368:	2b00      	cmp	r3, #0
 800536a:	d02a      	beq.n	80053c2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d018      	beq.n	80053a8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d14b      	bne.n	800544a <I2C_Slave_ISR_IT+0x1de>
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053b8:	d047      	beq.n	800544a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f8d3 	bl	8005566 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80053c0:	e043      	b.n	800544a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d009      	beq.n	80053e0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80053d6:	6939      	ldr	r1, [r7, #16]
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f840 	bl	800545e <I2C_ITAddrCplt>
 80053de:	e035      	b.n	800544c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d030      	beq.n	800544c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d02b      	beq.n	800544c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d018      	beq.n	8005430 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	781a      	ldrb	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	851a      	strh	r2, [r3, #40]	; 0x28
 800542e:	e00d      	b.n	800544c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005436:	d002      	beq.n	800543e <I2C_Slave_ISR_IT+0x1d2>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f891 	bl	8005566 <I2C_ITSlaveSeqCplt>
 8005444:	e002      	b.n	800544c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005446:	bf00      	nop
 8005448:	e000      	b.n	800544c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800544a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005474:	2b28      	cmp	r3, #40	; 0x28
 8005476:	d16a      	bne.n	800554e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	0c1b      	lsrs	r3, r3, #16
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	0c1b      	lsrs	r3, r3, #16
 8005490:	b29b      	uxth	r3, r3
 8005492:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005496:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80054b2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d138      	bne.n	800552e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80054bc:	897b      	ldrh	r3, [r7, #10]
 80054be:	09db      	lsrs	r3, r3, #7
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	89bb      	ldrh	r3, [r7, #12]
 80054c4:	4053      	eors	r3, r2
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f003 0306 	and.w	r3, r3, #6
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d11c      	bne.n	800550a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80054d0:	897b      	ldrh	r3, [r7, #10]
 80054d2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d13b      	bne.n	800555e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2208      	movs	r2, #8
 80054f2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80054fc:	89ba      	ldrh	r2, [r7, #12]
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff fe86 	bl	8005214 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005508:	e029      	b.n	800555e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800550a:	893b      	ldrh	r3, [r7, #8]
 800550c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800550e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fb95 	bl	8005c42 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005520:	89ba      	ldrh	r2, [r7, #12]
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7ff fe74 	bl	8005214 <HAL_I2C_AddrCallback>
}
 800552c:	e017      	b.n	800555e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800552e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fb85 	bl	8005c42 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005540:	89ba      	ldrh	r2, [r7, #12]
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff fe64 	bl	8005214 <HAL_I2C_AddrCallback>
}
 800554c:	e007      	b.n	800555e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2208      	movs	r2, #8
 8005554:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	e00c      	b.n	80055b4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055b2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b29      	cmp	r3, #41	; 0x29
 80055be:	d112      	bne.n	80055e6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2228      	movs	r2, #40	; 0x28
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2221      	movs	r2, #33	; 0x21
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80055ce:	2101      	movs	r1, #1
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fb36 	bl	8005c42 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff fe04 	bl	80051ec <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80055e4:	e017      	b.n	8005616 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b2a      	cmp	r3, #42	; 0x2a
 80055f0:	d111      	bne.n	8005616 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2228      	movs	r2, #40	; 0x28
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2222      	movs	r2, #34	; 0x22
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005600:	2102      	movs	r1, #2
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fb1d 	bl	8005c42 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fdf5 	bl	8005200 <HAL_I2C_SlaveRxCpltCallback>
}
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005642:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2220      	movs	r2, #32
 800564a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800564c:	7afb      	ldrb	r3, [r7, #11]
 800564e:	2b21      	cmp	r3, #33	; 0x21
 8005650:	d002      	beq.n	8005658 <I2C_ITSlaveCplt+0x38>
 8005652:	7afb      	ldrb	r3, [r7, #11]
 8005654:	2b29      	cmp	r3, #41	; 0x29
 8005656:	d108      	bne.n	800566a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005658:	f248 0101 	movw	r1, #32769	; 0x8001
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 faf0 	bl	8005c42 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2221      	movs	r2, #33	; 0x21
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
 8005668:	e019      	b.n	800569e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800566a:	7afb      	ldrb	r3, [r7, #11]
 800566c:	2b22      	cmp	r3, #34	; 0x22
 800566e:	d002      	beq.n	8005676 <I2C_ITSlaveCplt+0x56>
 8005670:	7afb      	ldrb	r3, [r7, #11]
 8005672:	2b2a      	cmp	r3, #42	; 0x2a
 8005674:	d108      	bne.n	8005688 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005676:	f248 0102 	movw	r1, #32770	; 0x8002
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fae1 	bl	8005c42 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2222      	movs	r2, #34	; 0x22
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
 8005686:	e00a      	b.n	800569e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005688:	7afb      	ldrb	r3, [r7, #11]
 800568a:	2b28      	cmp	r3, #40	; 0x28
 800568c:	d107      	bne.n	800569e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800568e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fad5 	bl	8005c42 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ac:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6859      	ldr	r1, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4b89      	ldr	r3, [pc, #548]	; (80058e0 <I2C_ITSlaveCplt+0x2c0>)
 80056ba:	400b      	ands	r3, r1
 80056bc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa7d 	bl	8005bbe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d013      	beq.n	80056f6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056dc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01f      	beq.n	8005726 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056f4:	e017      	b.n	8005726 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d012      	beq.n	8005726 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800570e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d006      	beq.n	8005726 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	b29a      	uxth	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d020      	beq.n	8005772 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0304 	bic.w	r3, r3, #4
 8005736:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00c      	beq.n	8005772 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575c:	3b01      	subs	r3, #1
 800575e:	b29a      	uxth	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005780:	f043 0204 	orr.w	r2, r3, #4
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b00      	cmp	r3, #0
 8005790:	d049      	beq.n	8005826 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005798:	2b00      	cmp	r3, #0
 800579a:	d044      	beq.n	8005826 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d128      	bne.n	80057f8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b28      	cmp	r3, #40	; 0x28
 80057b0:	d108      	bne.n	80057c4 <I2C_ITSlaveCplt+0x1a4>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057b8:	d104      	bne.n	80057c4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80057ba:	6979      	ldr	r1, [r7, #20]
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f893 	bl	80058e8 <I2C_ITListenCplt>
 80057c2:	e030      	b.n	8005826 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b29      	cmp	r3, #41	; 0x29
 80057ce:	d10e      	bne.n	80057ee <I2C_ITSlaveCplt+0x1ce>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057d6:	d00a      	beq.n	80057ee <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2210      	movs	r2, #16
 80057de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f9ec 	bl	8005bbe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff febd 	bl	8005566 <I2C_ITSlaveSeqCplt>
 80057ec:	e01b      	b.n	8005826 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2210      	movs	r2, #16
 80057f4:	61da      	str	r2, [r3, #28]
 80057f6:	e016      	b.n	8005826 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2210      	movs	r2, #16
 80057fe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005804:	f043 0204 	orr.w	r2, r3, #4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <I2C_ITSlaveCplt+0x1fa>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005818:	d105      	bne.n	8005826 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f8b5 	bl	8005990 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005838:	2b00      	cmp	r3, #0
 800583a:	d010      	beq.n	800585e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f8a4 	bl	8005990 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b28      	cmp	r3, #40	; 0x28
 8005852:	d141      	bne.n	80058d8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005854:	6979      	ldr	r1, [r7, #20]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f846 	bl	80058e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800585c:	e03c      	b.n	80058d8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005866:	d014      	beq.n	8005892 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff fe7c 	bl	8005566 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a1c      	ldr	r2, [pc, #112]	; (80058e4 <I2C_ITSlaveCplt+0x2c4>)
 8005872:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fcd0 	bl	8005230 <HAL_I2C_ListenCpltCallback>
}
 8005890:	e022      	b.n	80058d8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b22      	cmp	r3, #34	; 0x22
 800589c:	d10e      	bne.n	80058bc <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff fca3 	bl	8005200 <HAL_I2C_SlaveRxCpltCallback>
}
 80058ba:	e00d      	b.n	80058d8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff fc8a 	bl	80051ec <HAL_I2C_SlaveTxCpltCallback>
}
 80058d8:	bf00      	nop
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	fe00e800 	.word	0xfe00e800
 80058e4:	ffff0000 	.word	0xffff0000

080058e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a25      	ldr	r2, [pc, #148]	; (800598c <I2C_ITListenCplt+0xa4>)
 80058f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d022      	beq.n	8005964 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d012      	beq.n	8005964 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595c:	f043 0204 	orr.w	r2, r3, #4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005964:	f248 0103 	movw	r1, #32771	; 0x8003
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f96a 	bl	8005c42 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2210      	movs	r2, #16
 8005974:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff fc56 	bl	8005230 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005984:	bf00      	nop
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	ffff0000 	.word	0xffff0000

08005990 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a6d      	ldr	r2, [pc, #436]	; (8005b64 <I2C_ITError+0x1d4>)
 80059ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2b28      	cmp	r3, #40	; 0x28
 80059c6:	d005      	beq.n	80059d4 <I2C_ITError+0x44>
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b29      	cmp	r3, #41	; 0x29
 80059cc:	d002      	beq.n	80059d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b2a      	cmp	r3, #42	; 0x2a
 80059d2:	d10b      	bne.n	80059ec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80059d4:	2103      	movs	r1, #3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f933 	bl	8005c42 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2228      	movs	r2, #40	; 0x28
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a60      	ldr	r2, [pc, #384]	; (8005b68 <I2C_ITError+0x1d8>)
 80059e8:	635a      	str	r2, [r3, #52]	; 0x34
 80059ea:	e030      	b.n	8005a4e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80059ec:	f248 0103 	movw	r1, #32771	; 0x8003
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f926 	bl	8005c42 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f8e1 	bl	8005bbe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b60      	cmp	r3, #96	; 0x60
 8005a06:	d01f      	beq.n	8005a48 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d114      	bne.n	8005a48 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d109      	bne.n	8005a40 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2210      	movs	r2, #16
 8005a32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	f043 0204 	orr.w	r2, r3, #4
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2220      	movs	r2, #32
 8005a46:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d039      	beq.n	8005ad0 <I2C_ITError+0x140>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b11      	cmp	r3, #17
 8005a60:	d002      	beq.n	8005a68 <I2C_ITError+0xd8>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b21      	cmp	r3, #33	; 0x21
 8005a66:	d133      	bne.n	8005ad0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a76:	d107      	bne.n	8005a88 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a86:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fe fe4c 	bl	800472a <HAL_DMA_GetState>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d017      	beq.n	8005ac8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	4a33      	ldr	r2, [pc, #204]	; (8005b6c <I2C_ITError+0x1dc>)
 8005a9e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe fd26 	bl	80044fe <HAL_DMA_Abort_IT>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d04d      	beq.n	8005b54 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ac6:	e045      	b.n	8005b54 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f851 	bl	8005b70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ace:	e041      	b.n	8005b54 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d039      	beq.n	8005b4c <I2C_ITError+0x1bc>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b12      	cmp	r3, #18
 8005adc:	d002      	beq.n	8005ae4 <I2C_ITError+0x154>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b22      	cmp	r3, #34	; 0x22
 8005ae2:	d133      	bne.n	8005b4c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af2:	d107      	bne.n	8005b04 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe fe0e 	bl	800472a <HAL_DMA_GetState>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d017      	beq.n	8005b44 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b18:	4a14      	ldr	r2, [pc, #80]	; (8005b6c <I2C_ITError+0x1dc>)
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe fce8 	bl	80044fe <HAL_DMA_Abort_IT>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d011      	beq.n	8005b58 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b3e:	4610      	mov	r0, r2
 8005b40:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b42:	e009      	b.n	8005b58 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f813 	bl	8005b70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b4a:	e005      	b.n	8005b58 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f80f 	bl	8005b70 <I2C_TreatErrorCallback>
  }
}
 8005b52:	e002      	b.n	8005b5a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b54:	bf00      	nop
 8005b56:	e000      	b.n	8005b5a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b58:	bf00      	nop
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	ffff0000 	.word	0xffff0000
 8005b68:	0800526d 	.word	0x0800526d
 8005b6c:	08005c07 	.word	0x08005c07

08005b70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b60      	cmp	r3, #96	; 0x60
 8005b82:	d10e      	bne.n	8005ba2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff fb5c 	bl	8005258 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ba0:	e009      	b.n	8005bb6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff fb47 	bl	8005244 <HAL_I2C_ErrorCallback>
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d103      	bne.n	8005bdc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d007      	beq.n	8005bfa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699a      	ldr	r2, [r3, #24]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0201 	orr.w	r2, r2, #1
 8005bf8:	619a      	str	r2, [r3, #24]
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	2200      	movs	r2, #0
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c30:	2200      	movs	r2, #0
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7ff ff9b 	bl	8005b70 <I2C_TreatErrorCallback>
}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005c52:	887b      	ldrh	r3, [r7, #2]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00f      	beq.n	8005c7c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005c62:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c70:	2b28      	cmp	r3, #40	; 0x28
 8005c72:	d003      	beq.n	8005c7c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005c7a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005c7c:	887b      	ldrh	r3, [r7, #2]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00f      	beq.n	8005ca6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005c8c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c9a:	2b28      	cmp	r3, #40	; 0x28
 8005c9c:	d003      	beq.n	8005ca6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005ca4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ca6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	da03      	bge.n	8005cb6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005cb4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005cb6:	887b      	ldrh	r3, [r7, #2]
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	d103      	bne.n	8005cc4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005cc2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005cc4:	887b      	ldrh	r3, [r7, #2]
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d103      	bne.n	8005cd2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f043 0320 	orr.w	r3, r3, #32
 8005cd0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005cd2:	887b      	ldrh	r3, [r7, #2]
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	d103      	bne.n	8005ce0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cde:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6819      	ldr	r1, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	43da      	mvns	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	400a      	ands	r2, r1
 8005cf0:	601a      	str	r2, [r3, #0]
}
 8005cf2:	bf00      	nop
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d138      	bne.n	8005d86 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e032      	b.n	8005d88 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2224      	movs	r2, #36	; 0x24
 8005d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0201 	bic.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d50:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6819      	ldr	r1, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0201 	orr.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e000      	b.n	8005d88 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d86:	2302      	movs	r3, #2
  }
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b20      	cmp	r3, #32
 8005da8:	d139      	bne.n	8005e1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e033      	b.n	8005e20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2224      	movs	r2, #36	; 0x24
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0201 	bic.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005de6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0201 	orr.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d141      	bne.n	8005ebe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e3a:	4b4b      	ldr	r3, [pc, #300]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e46:	d131      	bne.n	8005eac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e48:	4b47      	ldr	r3, [pc, #284]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e4e:	4a46      	ldr	r2, [pc, #280]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e58:	4b43      	ldr	r3, [pc, #268]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e60:	4a41      	ldr	r2, [pc, #260]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e68:	4b40      	ldr	r3, [pc, #256]	; (8005f6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2232      	movs	r2, #50	; 0x32
 8005e6e:	fb02 f303 	mul.w	r3, r2, r3
 8005e72:	4a3f      	ldr	r2, [pc, #252]	; (8005f70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e74:	fba2 2303 	umull	r2, r3, r2, r3
 8005e78:	0c9b      	lsrs	r3, r3, #18
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e7e:	e002      	b.n	8005e86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e86:	4b38      	ldr	r3, [pc, #224]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e92:	d102      	bne.n	8005e9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f2      	bne.n	8005e80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e9a:	4b33      	ldr	r3, [pc, #204]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea6:	d158      	bne.n	8005f5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e057      	b.n	8005f5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005eac:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb2:	4a2d      	ldr	r2, [pc, #180]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ebc:	e04d      	b.n	8005f5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec4:	d141      	bne.n	8005f4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ec6:	4b28      	ldr	r3, [pc, #160]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed2:	d131      	bne.n	8005f38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ed4:	4b24      	ldr	r3, [pc, #144]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eda:	4a23      	ldr	r2, [pc, #140]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ee4:	4b20      	ldr	r3, [pc, #128]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005eec:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ef2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ef4:	4b1d      	ldr	r3, [pc, #116]	; (8005f6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2232      	movs	r2, #50	; 0x32
 8005efa:	fb02 f303 	mul.w	r3, r2, r3
 8005efe:	4a1c      	ldr	r2, [pc, #112]	; (8005f70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	0c9b      	lsrs	r3, r3, #18
 8005f06:	3301      	adds	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f0a:	e002      	b.n	8005f12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f12:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f1e:	d102      	bne.n	8005f26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f2      	bne.n	8005f0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f26:	4b10      	ldr	r3, [pc, #64]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f32:	d112      	bne.n	8005f5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e011      	b.n	8005f5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f38:	4b0b      	ldr	r3, [pc, #44]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f3e:	4a0a      	ldr	r2, [pc, #40]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005f48:	e007      	b.n	8005f5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f52:	4a05      	ldr	r2, [pc, #20]	; (8005f68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	40007000 	.word	0x40007000
 8005f6c:	20000000 	.word	0x20000000
 8005f70:	431bde83 	.word	0x431bde83

08005f74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005f78:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4a04      	ldr	r2, [pc, #16]	; (8005f90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f82:	6093      	str	r3, [r2, #8]
}
 8005f84:	bf00      	nop
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40007000 	.word	0x40007000

08005f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e2fe      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d075      	beq.n	800609e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fb2:	4b97      	ldr	r3, [pc, #604]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 030c 	and.w	r3, r3, #12
 8005fba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fbc:	4b94      	ldr	r3, [pc, #592]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0303 	and.w	r3, r3, #3
 8005fc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b0c      	cmp	r3, #12
 8005fca:	d102      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x3e>
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d002      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x44>
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d10b      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd8:	4b8d      	ldr	r3, [pc, #564]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d05b      	beq.n	800609c <HAL_RCC_OscConfig+0x108>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d157      	bne.n	800609c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e2d9      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff8:	d106      	bne.n	8006008 <HAL_RCC_OscConfig+0x74>
 8005ffa:	4b85      	ldr	r3, [pc, #532]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a84      	ldr	r2, [pc, #528]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8006000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	e01d      	b.n	8006044 <HAL_RCC_OscConfig+0xb0>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006010:	d10c      	bne.n	800602c <HAL_RCC_OscConfig+0x98>
 8006012:	4b7f      	ldr	r3, [pc, #508]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a7e      	ldr	r2, [pc, #504]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8006018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	4b7c      	ldr	r3, [pc, #496]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a7b      	ldr	r2, [pc, #492]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8006024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	e00b      	b.n	8006044 <HAL_RCC_OscConfig+0xb0>
 800602c:	4b78      	ldr	r3, [pc, #480]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a77      	ldr	r2, [pc, #476]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8006032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	4b75      	ldr	r3, [pc, #468]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a74      	ldr	r2, [pc, #464]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 800603e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d013      	beq.n	8006074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604c:	f7fc f910 	bl	8002270 <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006054:	f7fc f90c 	bl	8002270 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b64      	cmp	r3, #100	; 0x64
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e29e      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006066:	4b6a      	ldr	r3, [pc, #424]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f0      	beq.n	8006054 <HAL_RCC_OscConfig+0xc0>
 8006072:	e014      	b.n	800609e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006074:	f7fc f8fc 	bl	8002270 <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800607c:	f7fc f8f8 	bl	8002270 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b64      	cmp	r3, #100	; 0x64
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e28a      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800608e:	4b60      	ldr	r3, [pc, #384]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1f0      	bne.n	800607c <HAL_RCC_OscConfig+0xe8>
 800609a:	e000      	b.n	800609e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800609c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d075      	beq.n	8006196 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060aa:	4b59      	ldr	r3, [pc, #356]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 030c 	and.w	r3, r3, #12
 80060b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060b4:	4b56      	ldr	r3, [pc, #344]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0303 	and.w	r3, r3, #3
 80060bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b0c      	cmp	r3, #12
 80060c2:	d102      	bne.n	80060ca <HAL_RCC_OscConfig+0x136>
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d002      	beq.n	80060d0 <HAL_RCC_OscConfig+0x13c>
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d11f      	bne.n	8006110 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060d0:	4b4f      	ldr	r3, [pc, #316]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_RCC_OscConfig+0x154>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e25d      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e8:	4b49      	ldr	r3, [pc, #292]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	061b      	lsls	r3, r3, #24
 80060f6:	4946      	ldr	r1, [pc, #280]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80060fc:	4b45      	ldr	r3, [pc, #276]	; (8006214 <HAL_RCC_OscConfig+0x280>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f7fb fc13 	bl	800192c <HAL_InitTick>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d043      	beq.n	8006194 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e249      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d023      	beq.n	8006160 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006118:	4b3d      	ldr	r3, [pc, #244]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a3c      	ldr	r2, [pc, #240]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 800611e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fc f8a4 	bl	8002270 <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800612c:	f7fc f8a0 	bl	8002270 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e232      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800613e:	4b34      	ldr	r3, [pc, #208]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	061b      	lsls	r3, r3, #24
 8006158:	492d      	ldr	r1, [pc, #180]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 800615a:	4313      	orrs	r3, r2
 800615c:	604b      	str	r3, [r1, #4]
 800615e:	e01a      	b.n	8006196 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006160:	4b2b      	ldr	r3, [pc, #172]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2a      	ldr	r2, [pc, #168]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8006166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800616a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616c:	f7fc f880 	bl	8002270 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006174:	f7fc f87c 	bl	8002270 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e20e      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006186:	4b22      	ldr	r3, [pc, #136]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <HAL_RCC_OscConfig+0x1e0>
 8006192:	e000      	b.n	8006196 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006194:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0308 	and.w	r3, r3, #8
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d041      	beq.n	8006226 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d01c      	beq.n	80061e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061aa:	4b19      	ldr	r3, [pc, #100]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 80061ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b0:	4a17      	ldr	r2, [pc, #92]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ba:	f7fc f859 	bl	8002270 <HAL_GetTick>
 80061be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061c0:	e008      	b.n	80061d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061c2:	f7fc f855 	bl	8002270 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e1e7      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061d4:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 80061d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0ef      	beq.n	80061c2 <HAL_RCC_OscConfig+0x22e>
 80061e2:	e020      	b.n	8006226 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061e4:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 80061e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ea:	4a09      	ldr	r2, [pc, #36]	; (8006210 <HAL_RCC_OscConfig+0x27c>)
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f4:	f7fc f83c 	bl	8002270 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061fa:	e00d      	b.n	8006218 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061fc:	f7fc f838 	bl	8002270 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d906      	bls.n	8006218 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e1ca      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
 800620e:	bf00      	nop
 8006210:	40021000 	.word	0x40021000
 8006214:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006218:	4b8c      	ldr	r3, [pc, #560]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 800621a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1ea      	bne.n	80061fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80a6 	beq.w	8006380 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006234:	2300      	movs	r3, #0
 8006236:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006238:	4b84      	ldr	r3, [pc, #528]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_RCC_OscConfig+0x2b4>
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <HAL_RCC_OscConfig+0x2b6>
 8006248:	2300      	movs	r3, #0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00d      	beq.n	800626a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800624e:	4b7f      	ldr	r3, [pc, #508]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 8006250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006252:	4a7e      	ldr	r2, [pc, #504]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 8006254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006258:	6593      	str	r3, [r2, #88]	; 0x58
 800625a:	4b7c      	ldr	r3, [pc, #496]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 800625c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006266:	2301      	movs	r3, #1
 8006268:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800626a:	4b79      	ldr	r3, [pc, #484]	; (8006450 <HAL_RCC_OscConfig+0x4bc>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d118      	bne.n	80062a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006276:	4b76      	ldr	r3, [pc, #472]	; (8006450 <HAL_RCC_OscConfig+0x4bc>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a75      	ldr	r2, [pc, #468]	; (8006450 <HAL_RCC_OscConfig+0x4bc>)
 800627c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006282:	f7fb fff5 	bl	8002270 <HAL_GetTick>
 8006286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800628a:	f7fb fff1 	bl	8002270 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e183      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800629c:	4b6c      	ldr	r3, [pc, #432]	; (8006450 <HAL_RCC_OscConfig+0x4bc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0f0      	beq.n	800628a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d108      	bne.n	80062c2 <HAL_RCC_OscConfig+0x32e>
 80062b0:	4b66      	ldr	r3, [pc, #408]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	4a65      	ldr	r2, [pc, #404]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062c0:	e024      	b.n	800630c <HAL_RCC_OscConfig+0x378>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	2b05      	cmp	r3, #5
 80062c8:	d110      	bne.n	80062ec <HAL_RCC_OscConfig+0x358>
 80062ca:	4b60      	ldr	r3, [pc, #384]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80062cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d0:	4a5e      	ldr	r2, [pc, #376]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80062d2:	f043 0304 	orr.w	r3, r3, #4
 80062d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062da:	4b5c      	ldr	r3, [pc, #368]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80062dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e0:	4a5a      	ldr	r2, [pc, #360]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80062e2:	f043 0301 	orr.w	r3, r3, #1
 80062e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062ea:	e00f      	b.n	800630c <HAL_RCC_OscConfig+0x378>
 80062ec:	4b57      	ldr	r3, [pc, #348]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f2:	4a56      	ldr	r2, [pc, #344]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062fc:	4b53      	ldr	r3, [pc, #332]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006302:	4a52      	ldr	r2, [pc, #328]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 8006304:	f023 0304 	bic.w	r3, r3, #4
 8006308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d016      	beq.n	8006342 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006314:	f7fb ffac 	bl	8002270 <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800631a:	e00a      	b.n	8006332 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800631c:	f7fb ffa8 	bl	8002270 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	; 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e138      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006332:	4b46      	ldr	r3, [pc, #280]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 8006334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0ed      	beq.n	800631c <HAL_RCC_OscConfig+0x388>
 8006340:	e015      	b.n	800636e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006342:	f7fb ff95 	bl	8002270 <HAL_GetTick>
 8006346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006348:	e00a      	b.n	8006360 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800634a:	f7fb ff91 	bl	8002270 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	f241 3288 	movw	r2, #5000	; 0x1388
 8006358:	4293      	cmp	r3, r2
 800635a:	d901      	bls.n	8006360 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e121      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006360:	4b3a      	ldr	r3, [pc, #232]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1ed      	bne.n	800634a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800636e:	7ffb      	ldrb	r3, [r7, #31]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d105      	bne.n	8006380 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006374:	4b35      	ldr	r3, [pc, #212]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 8006376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006378:	4a34      	ldr	r2, [pc, #208]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 800637a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800637e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d03c      	beq.n	8006406 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01c      	beq.n	80063ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006394:	4b2d      	ldr	r3, [pc, #180]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 8006396:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800639a:	4a2c      	ldr	r2, [pc, #176]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a4:	f7fb ff64 	bl	8002270 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063ac:	f7fb ff60 	bl	8002270 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e0f2      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063be:	4b23      	ldr	r3, [pc, #140]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80063c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0ef      	beq.n	80063ac <HAL_RCC_OscConfig+0x418>
 80063cc:	e01b      	b.n	8006406 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063ce:	4b1f      	ldr	r3, [pc, #124]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80063d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063d4:	4a1d      	ldr	r2, [pc, #116]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80063d6:	f023 0301 	bic.w	r3, r3, #1
 80063da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063de:	f7fb ff47 	bl	8002270 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063e6:	f7fb ff43 	bl	8002270 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e0d5      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063f8:	4b14      	ldr	r3, [pc, #80]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 80063fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1ef      	bne.n	80063e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 80c9 	beq.w	80065a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006410:	4b0e      	ldr	r3, [pc, #56]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 030c 	and.w	r3, r3, #12
 8006418:	2b0c      	cmp	r3, #12
 800641a:	f000 8083 	beq.w	8006524 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d15e      	bne.n	80064e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006426:	4b09      	ldr	r3, [pc, #36]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a08      	ldr	r2, [pc, #32]	; (800644c <HAL_RCC_OscConfig+0x4b8>)
 800642c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006432:	f7fb ff1d 	bl	8002270 <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006438:	e00c      	b.n	8006454 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800643a:	f7fb ff19 	bl	8002270 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d905      	bls.n	8006454 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e0ab      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
 800644c:	40021000 	.word	0x40021000
 8006450:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006454:	4b55      	ldr	r3, [pc, #340]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1ec      	bne.n	800643a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006460:	4b52      	ldr	r3, [pc, #328]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	4b52      	ldr	r3, [pc, #328]	; (80065b0 <HAL_RCC_OscConfig+0x61c>)
 8006466:	4013      	ands	r3, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6a11      	ldr	r1, [r2, #32]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006470:	3a01      	subs	r2, #1
 8006472:	0112      	lsls	r2, r2, #4
 8006474:	4311      	orrs	r1, r2
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800647a:	0212      	lsls	r2, r2, #8
 800647c:	4311      	orrs	r1, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006482:	0852      	lsrs	r2, r2, #1
 8006484:	3a01      	subs	r2, #1
 8006486:	0552      	lsls	r2, r2, #21
 8006488:	4311      	orrs	r1, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800648e:	0852      	lsrs	r2, r2, #1
 8006490:	3a01      	subs	r2, #1
 8006492:	0652      	lsls	r2, r2, #25
 8006494:	4311      	orrs	r1, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800649a:	06d2      	lsls	r2, r2, #27
 800649c:	430a      	orrs	r2, r1
 800649e:	4943      	ldr	r1, [pc, #268]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064a4:	4b41      	ldr	r3, [pc, #260]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a40      	ldr	r2, [pc, #256]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 80064aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064b0:	4b3e      	ldr	r3, [pc, #248]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	4a3d      	ldr	r2, [pc, #244]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 80064b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064bc:	f7fb fed8 	bl	8002270 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064c4:	f7fb fed4 	bl	8002270 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e066      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064d6:	4b35      	ldr	r3, [pc, #212]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f0      	beq.n	80064c4 <HAL_RCC_OscConfig+0x530>
 80064e2:	e05e      	b.n	80065a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064e4:	4b31      	ldr	r3, [pc, #196]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a30      	ldr	r2, [pc, #192]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 80064ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f0:	f7fb febe 	bl	8002270 <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f8:	f7fb feba 	bl	8002270 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e04c      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800650a:	4b28      	ldr	r3, [pc, #160]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f0      	bne.n	80064f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006516:	4b25      	ldr	r3, [pc, #148]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	4924      	ldr	r1, [pc, #144]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 800651c:	4b25      	ldr	r3, [pc, #148]	; (80065b4 <HAL_RCC_OscConfig+0x620>)
 800651e:	4013      	ands	r3, r2
 8006520:	60cb      	str	r3, [r1, #12]
 8006522:	e03e      	b.n	80065a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e039      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006530:	4b1e      	ldr	r3, [pc, #120]	; (80065ac <HAL_RCC_OscConfig+0x618>)
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f003 0203 	and.w	r2, r3, #3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	429a      	cmp	r2, r3
 8006542:	d12c      	bne.n	800659e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	3b01      	subs	r3, #1
 8006550:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006552:	429a      	cmp	r2, r3
 8006554:	d123      	bne.n	800659e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006562:	429a      	cmp	r2, r3
 8006564:	d11b      	bne.n	800659e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006572:	429a      	cmp	r2, r3
 8006574:	d113      	bne.n	800659e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	085b      	lsrs	r3, r3, #1
 8006582:	3b01      	subs	r3, #1
 8006584:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006586:	429a      	cmp	r2, r3
 8006588:	d109      	bne.n	800659e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006594:	085b      	lsrs	r3, r3, #1
 8006596:	3b01      	subs	r3, #1
 8006598:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800659a:	429a      	cmp	r2, r3
 800659c:	d001      	beq.n	80065a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3720      	adds	r7, #32
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40021000 	.word	0x40021000
 80065b0:	019f800c 	.word	0x019f800c
 80065b4:	feeefffc 	.word	0xfeeefffc

080065b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e11e      	b.n	800680e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065d0:	4b91      	ldr	r3, [pc, #580]	; (8006818 <HAL_RCC_ClockConfig+0x260>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d910      	bls.n	8006600 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065de:	4b8e      	ldr	r3, [pc, #568]	; (8006818 <HAL_RCC_ClockConfig+0x260>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f023 020f 	bic.w	r2, r3, #15
 80065e6:	498c      	ldr	r1, [pc, #560]	; (8006818 <HAL_RCC_ClockConfig+0x260>)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ee:	4b8a      	ldr	r3, [pc, #552]	; (8006818 <HAL_RCC_ClockConfig+0x260>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d001      	beq.n	8006600 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e106      	b.n	800680e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d073      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2b03      	cmp	r3, #3
 8006612:	d129      	bne.n	8006668 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006614:	4b81      	ldr	r3, [pc, #516]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e0f4      	b.n	800680e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006624:	f000 f9d0 	bl	80069c8 <RCC_GetSysClockFreqFromPLLSource>
 8006628:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	4a7c      	ldr	r2, [pc, #496]	; (8006820 <HAL_RCC_ClockConfig+0x268>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d93f      	bls.n	80066b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006632:	4b7a      	ldr	r3, [pc, #488]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006646:	2b00      	cmp	r3, #0
 8006648:	d033      	beq.n	80066b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800664e:	2b00      	cmp	r3, #0
 8006650:	d12f      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006652:	4b72      	ldr	r3, [pc, #456]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800665a:	4a70      	ldr	r2, [pc, #448]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 800665c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006660:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006662:	2380      	movs	r3, #128	; 0x80
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	e024      	b.n	80066b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d107      	bne.n	8006680 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006670:	4b6a      	ldr	r3, [pc, #424]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d109      	bne.n	8006690 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e0c6      	b.n	800680e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006680:	4b66      	ldr	r3, [pc, #408]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0be      	b.n	800680e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006690:	f000 f8ce 	bl	8006830 <HAL_RCC_GetSysClockFreq>
 8006694:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	4a61      	ldr	r2, [pc, #388]	; (8006820 <HAL_RCC_ClockConfig+0x268>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d909      	bls.n	80066b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800669e:	4b5f      	ldr	r3, [pc, #380]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066a6:	4a5d      	ldr	r2, [pc, #372]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 80066a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066b2:	4b5a      	ldr	r3, [pc, #360]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f023 0203 	bic.w	r2, r3, #3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4957      	ldr	r1, [pc, #348]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c4:	f7fb fdd4 	bl	8002270 <HAL_GetTick>
 80066c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ca:	e00a      	b.n	80066e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066cc:	f7fb fdd0 	bl	8002270 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066da:	4293      	cmp	r3, r2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e095      	b.n	800680e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066e2:	4b4e      	ldr	r3, [pc, #312]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 020c 	and.w	r2, r3, #12
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d1eb      	bne.n	80066cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d023      	beq.n	8006748 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800670c:	4b43      	ldr	r3, [pc, #268]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	4a42      	ldr	r2, [pc, #264]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 8006712:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006716:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0308 	and.w	r3, r3, #8
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006724:	4b3d      	ldr	r3, [pc, #244]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800672c:	4a3b      	ldr	r2, [pc, #236]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 800672e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006734:	4b39      	ldr	r3, [pc, #228]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	4936      	ldr	r1, [pc, #216]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 8006742:	4313      	orrs	r3, r2
 8006744:	608b      	str	r3, [r1, #8]
 8006746:	e008      	b.n	800675a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2b80      	cmp	r3, #128	; 0x80
 800674c:	d105      	bne.n	800675a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800674e:	4b33      	ldr	r3, [pc, #204]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	4a32      	ldr	r2, [pc, #200]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 8006754:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006758:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800675a:	4b2f      	ldr	r3, [pc, #188]	; (8006818 <HAL_RCC_ClockConfig+0x260>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d21d      	bcs.n	80067a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006768:	4b2b      	ldr	r3, [pc, #172]	; (8006818 <HAL_RCC_ClockConfig+0x260>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f023 020f 	bic.w	r2, r3, #15
 8006770:	4929      	ldr	r1, [pc, #164]	; (8006818 <HAL_RCC_ClockConfig+0x260>)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	4313      	orrs	r3, r2
 8006776:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006778:	f7fb fd7a 	bl	8002270 <HAL_GetTick>
 800677c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800677e:	e00a      	b.n	8006796 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006780:	f7fb fd76 	bl	8002270 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	f241 3288 	movw	r2, #5000	; 0x1388
 800678e:	4293      	cmp	r3, r2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e03b      	b.n	800680e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006796:	4b20      	ldr	r3, [pc, #128]	; (8006818 <HAL_RCC_ClockConfig+0x260>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d1ed      	bne.n	8006780 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067b0:	4b1a      	ldr	r3, [pc, #104]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	4917      	ldr	r1, [pc, #92]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d009      	beq.n	80067e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067ce:	4b13      	ldr	r3, [pc, #76]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	490f      	ldr	r1, [pc, #60]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067e2:	f000 f825 	bl	8006830 <HAL_RCC_GetSysClockFreq>
 80067e6:	4602      	mov	r2, r0
 80067e8:	4b0c      	ldr	r3, [pc, #48]	; (800681c <HAL_RCC_ClockConfig+0x264>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	091b      	lsrs	r3, r3, #4
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	490c      	ldr	r1, [pc, #48]	; (8006824 <HAL_RCC_ClockConfig+0x26c>)
 80067f4:	5ccb      	ldrb	r3, [r1, r3]
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	fa22 f303 	lsr.w	r3, r2, r3
 80067fe:	4a0a      	ldr	r2, [pc, #40]	; (8006828 <HAL_RCC_ClockConfig+0x270>)
 8006800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006802:	4b0a      	ldr	r3, [pc, #40]	; (800682c <HAL_RCC_ClockConfig+0x274>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f7fb f890 	bl	800192c <HAL_InitTick>
 800680c:	4603      	mov	r3, r0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	40022000 	.word	0x40022000
 800681c:	40021000 	.word	0x40021000
 8006820:	04c4b400 	.word	0x04c4b400
 8006824:	0800a8dc 	.word	0x0800a8dc
 8006828:	20000000 	.word	0x20000000
 800682c:	20000004 	.word	0x20000004

08006830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006836:	4b2c      	ldr	r3, [pc, #176]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 030c 	and.w	r3, r3, #12
 800683e:	2b04      	cmp	r3, #4
 8006840:	d102      	bne.n	8006848 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006842:	4b2a      	ldr	r3, [pc, #168]	; (80068ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	e047      	b.n	80068d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006848:	4b27      	ldr	r3, [pc, #156]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f003 030c 	and.w	r3, r3, #12
 8006850:	2b08      	cmp	r3, #8
 8006852:	d102      	bne.n	800685a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006854:	4b26      	ldr	r3, [pc, #152]	; (80068f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	e03e      	b.n	80068d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800685a:	4b23      	ldr	r3, [pc, #140]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 030c 	and.w	r3, r3, #12
 8006862:	2b0c      	cmp	r3, #12
 8006864:	d136      	bne.n	80068d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006866:	4b20      	ldr	r3, [pc, #128]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006870:	4b1d      	ldr	r3, [pc, #116]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	091b      	lsrs	r3, r3, #4
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	3301      	adds	r3, #1
 800687c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b03      	cmp	r3, #3
 8006882:	d10c      	bne.n	800689e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006884:	4a1a      	ldr	r2, [pc, #104]	; (80068f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	fbb2 f3f3 	udiv	r3, r2, r3
 800688c:	4a16      	ldr	r2, [pc, #88]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800688e:	68d2      	ldr	r2, [r2, #12]
 8006890:	0a12      	lsrs	r2, r2, #8
 8006892:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006896:	fb02 f303 	mul.w	r3, r2, r3
 800689a:	617b      	str	r3, [r7, #20]
      break;
 800689c:	e00c      	b.n	80068b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800689e:	4a13      	ldr	r2, [pc, #76]	; (80068ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a6:	4a10      	ldr	r2, [pc, #64]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068a8:	68d2      	ldr	r2, [r2, #12]
 80068aa:	0a12      	lsrs	r2, r2, #8
 80068ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068b0:	fb02 f303 	mul.w	r3, r2, r3
 80068b4:	617b      	str	r3, [r7, #20]
      break;
 80068b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068b8:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	0e5b      	lsrs	r3, r3, #25
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	3301      	adds	r3, #1
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	e001      	b.n	80068d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80068d8:	693b      	ldr	r3, [r7, #16]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	40021000 	.word	0x40021000
 80068ec:	00f42400 	.word	0x00f42400
 80068f0:	016e3600 	.word	0x016e3600

080068f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068f8:	4b03      	ldr	r3, [pc, #12]	; (8006908 <HAL_RCC_GetHCLKFreq+0x14>)
 80068fa:	681b      	ldr	r3, [r3, #0]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	20000000 	.word	0x20000000

0800690c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006910:	f7ff fff0 	bl	80068f4 <HAL_RCC_GetHCLKFreq>
 8006914:	4602      	mov	r2, r0
 8006916:	4b06      	ldr	r3, [pc, #24]	; (8006930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	0a1b      	lsrs	r3, r3, #8
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	4904      	ldr	r1, [pc, #16]	; (8006934 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006922:	5ccb      	ldrb	r3, [r1, r3]
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800692c:	4618      	mov	r0, r3
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40021000 	.word	0x40021000
 8006934:	0800a8ec 	.word	0x0800a8ec

08006938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800693c:	f7ff ffda 	bl	80068f4 <HAL_RCC_GetHCLKFreq>
 8006940:	4602      	mov	r2, r0
 8006942:	4b06      	ldr	r3, [pc, #24]	; (800695c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	0adb      	lsrs	r3, r3, #11
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	4904      	ldr	r1, [pc, #16]	; (8006960 <HAL_RCC_GetPCLK2Freq+0x28>)
 800694e:	5ccb      	ldrb	r3, [r1, r3]
 8006950:	f003 031f 	and.w	r3, r3, #31
 8006954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006958:	4618      	mov	r0, r3
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40021000 	.word	0x40021000
 8006960:	0800a8ec 	.word	0x0800a8ec

08006964 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	220f      	movs	r2, #15
 8006972:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006974:	4b12      	ldr	r3, [pc, #72]	; (80069c0 <HAL_RCC_GetClockConfig+0x5c>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0203 	and.w	r2, r3, #3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <HAL_RCC_GetClockConfig+0x5c>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800698c:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <HAL_RCC_GetClockConfig+0x5c>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006998:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <HAL_RCC_GetClockConfig+0x5c>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	08db      	lsrs	r3, r3, #3
 800699e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <HAL_RCC_GetClockConfig+0x60>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 020f 	and.w	r2, r3, #15
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	601a      	str	r2, [r3, #0]
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40021000 	.word	0x40021000
 80069c4:	40022000 	.word	0x40022000

080069c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80069ce:	4b1e      	ldr	r3, [pc, #120]	; (8006a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069d8:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	091b      	lsrs	r3, r3, #4
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	3301      	adds	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d10c      	bne.n	8006a06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069ec:	4a17      	ldr	r2, [pc, #92]	; (8006a4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	4a14      	ldr	r2, [pc, #80]	; (8006a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80069f6:	68d2      	ldr	r2, [r2, #12]
 80069f8:	0a12      	lsrs	r2, r2, #8
 80069fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069fe:	fb02 f303 	mul.w	r3, r2, r3
 8006a02:	617b      	str	r3, [r7, #20]
    break;
 8006a04:	e00c      	b.n	8006a20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a06:	4a12      	ldr	r2, [pc, #72]	; (8006a50 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0e:	4a0e      	ldr	r2, [pc, #56]	; (8006a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a10:	68d2      	ldr	r2, [r2, #12]
 8006a12:	0a12      	lsrs	r2, r2, #8
 8006a14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006a18:	fb02 f303 	mul.w	r3, r2, r3
 8006a1c:	617b      	str	r3, [r7, #20]
    break;
 8006a1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a20:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	0e5b      	lsrs	r3, r3, #25
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006a3a:	687b      	ldr	r3, [r7, #4]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	371c      	adds	r7, #28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	016e3600 	.word	0x016e3600
 8006a50:	00f42400 	.word	0x00f42400

08006a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a60:	2300      	movs	r3, #0
 8006a62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 8098 	beq.w	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a72:	2300      	movs	r3, #0
 8006a74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a76:	4b43      	ldr	r3, [pc, #268]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10d      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a82:	4b40      	ldr	r3, [pc, #256]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a86:	4a3f      	ldr	r2, [pc, #252]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8006a8e:	4b3d      	ldr	r3, [pc, #244]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a96:	60bb      	str	r3, [r7, #8]
 8006a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a9e:	4b3a      	ldr	r3, [pc, #232]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a39      	ldr	r2, [pc, #228]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006aaa:	f7fb fbe1 	bl	8002270 <HAL_GetTick>
 8006aae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ab0:	e009      	b.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ab2:	f7fb fbdd 	bl	8002270 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d902      	bls.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	74fb      	strb	r3, [r7, #19]
        break;
 8006ac4:	e005      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ac6:	4b30      	ldr	r3, [pc, #192]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0ef      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006ad2:	7cfb      	ldrb	r3, [r7, #19]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d159      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ad8:	4b2a      	ldr	r3, [pc, #168]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ae2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d01e      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d019      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006af4:	4b23      	ldr	r3, [pc, #140]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b00:	4b20      	ldr	r3, [pc, #128]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b06:	4a1f      	ldr	r2, [pc, #124]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b10:	4b1c      	ldr	r3, [pc, #112]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b16:	4a1b      	ldr	r2, [pc, #108]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b20:	4a18      	ldr	r2, [pc, #96]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d016      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b32:	f7fb fb9d 	bl	8002270 <HAL_GetTick>
 8006b36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b38:	e00b      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b3a:	f7fb fb99 	bl	8002270 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d902      	bls.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	74fb      	strb	r3, [r7, #19]
            break;
 8006b50:	e006      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b52:	4b0c      	ldr	r3, [pc, #48]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0ec      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006b60:	7cfb      	ldrb	r3, [r7, #19]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10b      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b66:	4b07      	ldr	r3, [pc, #28]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b74:	4903      	ldr	r1, [pc, #12]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006b7c:	e008      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b7e:	7cfb      	ldrb	r3, [r7, #19]
 8006b80:	74bb      	strb	r3, [r7, #18]
 8006b82:	e005      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006b84:	40021000 	.word	0x40021000
 8006b88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8c:	7cfb      	ldrb	r3, [r7, #19]
 8006b8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b90:	7c7b      	ldrb	r3, [r7, #17]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d105      	bne.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b96:	4ba7      	ldr	r3, [pc, #668]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9a:	4aa6      	ldr	r2, [pc, #664]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ba0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bae:	4ba1      	ldr	r3, [pc, #644]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb4:	f023 0203 	bic.w	r2, r3, #3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	499d      	ldr	r1, [pc, #628]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bd0:	4b98      	ldr	r3, [pc, #608]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd6:	f023 020c 	bic.w	r2, r3, #12
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	4995      	ldr	r1, [pc, #596]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006bf2:	4b90      	ldr	r3, [pc, #576]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	498c      	ldr	r1, [pc, #560]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00a      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c14:	4b87      	ldr	r3, [pc, #540]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	4984      	ldr	r1, [pc, #528]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0310 	and.w	r3, r3, #16
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c36:	4b7f      	ldr	r3, [pc, #508]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	497b      	ldr	r1, [pc, #492]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0320 	and.w	r3, r3, #32
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c58:	4b76      	ldr	r3, [pc, #472]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	4973      	ldr	r1, [pc, #460]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c7a:	4b6e      	ldr	r3, [pc, #440]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	496a      	ldr	r1, [pc, #424]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c9c:	4b65      	ldr	r3, [pc, #404]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	4962      	ldr	r1, [pc, #392]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006cbe:	4b5d      	ldr	r3, [pc, #372]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	4959      	ldr	r1, [pc, #356]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ce0:	4b54      	ldr	r3, [pc, #336]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ce6:	f023 0203 	bic.w	r2, r3, #3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cee:	4951      	ldr	r1, [pc, #324]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d02:	4b4c      	ldr	r3, [pc, #304]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	4948      	ldr	r1, [pc, #288]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d015      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d24:	4b43      	ldr	r3, [pc, #268]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	4940      	ldr	r1, [pc, #256]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d42:	d105      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d44:	4b3b      	ldr	r3, [pc, #236]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	4a3a      	ldr	r2, [pc, #232]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d015      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d5c:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6a:	4932      	ldr	r1, [pc, #200]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d7a:	d105      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d7c:	4b2d      	ldr	r3, [pc, #180]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	4a2c      	ldr	r2, [pc, #176]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d86:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d015      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d94:	4b27      	ldr	r3, [pc, #156]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da2:	4924      	ldr	r1, [pc, #144]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006db2:	d105      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006db4:	4b1f      	ldr	r3, [pc, #124]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	4a1e      	ldr	r2, [pc, #120]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dbe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d015      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006dcc:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dda:	4916      	ldr	r1, [pc, #88]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dea:	d105      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dec:	4b11      	ldr	r3, [pc, #68]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	4a10      	ldr	r2, [pc, #64]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006df6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d019      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e04:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	4908      	ldr	r1, [pc, #32]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e22:	d109      	bne.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e24:	4b03      	ldr	r3, [pc, #12]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	4a02      	ldr	r2, [pc, #8]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e2e:	60d3      	str	r3, [r2, #12]
 8006e30:	e002      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006e32:	bf00      	nop
 8006e34:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d015      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006e44:	4b29      	ldr	r3, [pc, #164]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e52:	4926      	ldr	r1, [pc, #152]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e62:	d105      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e64:	4b21      	ldr	r3, [pc, #132]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	4a20      	ldr	r2, [pc, #128]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e6e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d015      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006e7c:	4b1b      	ldr	r3, [pc, #108]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e82:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e8a:	4918      	ldr	r1, [pc, #96]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9a:	d105      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e9c:	4b13      	ldr	r3, [pc, #76]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	4a12      	ldr	r2, [pc, #72]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d015      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006eb4:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec2:	490a      	ldr	r1, [pc, #40]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ece:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ed2:	d105      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ed4:	4b05      	ldr	r3, [pc, #20]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	4a04      	ldr	r2, [pc, #16]	; (8006eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ede:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006ee0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	40021000 	.word	0x40021000

08006ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e09d      	b.n	800703e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d108      	bne.n	8006f1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f12:	d009      	beq.n	8006f28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	61da      	str	r2, [r3, #28]
 8006f1a:	e005      	b.n	8006f28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fa fc86 	bl	8001854 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f68:	d902      	bls.n	8006f70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
 8006f6e:	e002      	b.n	8006f76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006f7e:	d007      	beq.n	8006f90 <HAL_SPI_Init+0xa0>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f88:	d002      	beq.n	8006f90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd2:	ea42 0103 	orr.w	r1, r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	0c1b      	lsrs	r3, r3, #16
 8006fec:	f003 0204 	and.w	r2, r3, #4
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800700c:	ea42 0103 	orr.w	r1, r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69da      	ldr	r2, [r3, #28]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800702c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e049      	b.n	80070ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d106      	bne.n	8007072 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f841 	bl	80070f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2202      	movs	r2, #2
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	3304      	adds	r3, #4
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f000 fb5b 	bl	8007740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b01      	cmp	r3, #1
 800711a:	d001      	beq.n	8007120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e054      	b.n	80071ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0201 	orr.w	r2, r2, #1
 8007136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a26      	ldr	r2, [pc, #152]	; (80071d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d022      	beq.n	8007188 <HAL_TIM_Base_Start_IT+0x80>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800714a:	d01d      	beq.n	8007188 <HAL_TIM_Base_Start_IT+0x80>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a22      	ldr	r2, [pc, #136]	; (80071dc <HAL_TIM_Base_Start_IT+0xd4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d018      	beq.n	8007188 <HAL_TIM_Base_Start_IT+0x80>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a21      	ldr	r2, [pc, #132]	; (80071e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d013      	beq.n	8007188 <HAL_TIM_Base_Start_IT+0x80>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1f      	ldr	r2, [pc, #124]	; (80071e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d00e      	beq.n	8007188 <HAL_TIM_Base_Start_IT+0x80>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1e      	ldr	r2, [pc, #120]	; (80071e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d009      	beq.n	8007188 <HAL_TIM_Base_Start_IT+0x80>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a1c      	ldr	r2, [pc, #112]	; (80071ec <HAL_TIM_Base_Start_IT+0xe4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d004      	beq.n	8007188 <HAL_TIM_Base_Start_IT+0x80>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a1b      	ldr	r2, [pc, #108]	; (80071f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d115      	bne.n	80071b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	4b19      	ldr	r3, [pc, #100]	; (80071f4 <HAL_TIM_Base_Start_IT+0xec>)
 8007190:	4013      	ands	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2b06      	cmp	r3, #6
 8007198:	d015      	beq.n	80071c6 <HAL_TIM_Base_Start_IT+0xbe>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a0:	d011      	beq.n	80071c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f042 0201 	orr.w	r2, r2, #1
 80071b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b2:	e008      	b.n	80071c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	e000      	b.n	80071c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	40012c00 	.word	0x40012c00
 80071dc:	40000400 	.word	0x40000400
 80071e0:	40000800 	.word	0x40000800
 80071e4:	40000c00 	.word	0x40000c00
 80071e8:	40013400 	.word	0x40013400
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40015000 	.word	0x40015000
 80071f4:	00010007 	.word	0x00010007

080071f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e049      	b.n	800729e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d106      	bne.n	8007224 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fa fcdc 	bl	8001bdc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3304      	adds	r3, #4
 8007234:	4619      	mov	r1, r3
 8007236:	4610      	mov	r0, r2
 8007238:	f000 fa82 	bl	8007740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d020      	beq.n	800730a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01b      	beq.n	800730a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f06f 0202 	mvn.w	r2, #2
 80072da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	f003 0303 	and.w	r3, r3, #3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7fa fef7 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 80072f6:	e005      	b.n	8007304 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fa03 	bl	8007704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa0a 	bl	8007718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d020      	beq.n	8007356 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01b      	beq.n	8007356 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f06f 0204 	mvn.w	r2, #4
 8007326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7fa fed1 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 8007342:	e005      	b.n	8007350 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f9dd 	bl	8007704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f9e4 	bl	8007718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	d020      	beq.n	80073a2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d01b      	beq.n	80073a2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f06f 0208 	mvn.w	r2, #8
 8007372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2204      	movs	r2, #4
 8007378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7fa feab 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 800738e:	e005      	b.n	800739c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f9b7 	bl	8007704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f9be 	bl	8007718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d020      	beq.n	80073ee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f003 0310 	and.w	r3, r3, #16
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01b      	beq.n	80073ee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f06f 0210 	mvn.w	r2, #16
 80073be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2208      	movs	r2, #8
 80073c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7fa fe85 	bl	80020e4 <HAL_TIM_IC_CaptureCallback>
 80073da:	e005      	b.n	80073e8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f991 	bl	8007704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f998 	bl	8007718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00c      	beq.n	8007412 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f06f 0201 	mvn.w	r2, #1
 800740a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7fa f9cb 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007418:	2b00      	cmp	r3, #0
 800741a:	d104      	bne.n	8007426 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00c      	beq.n	8007440 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742c:	2b00      	cmp	r3, #0
 800742e:	d007      	beq.n	8007440 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fbfe 	bl	8007c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00c      	beq.n	8007464 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800745c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fbf6 	bl	8007c50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00c      	beq.n	8007488 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f952 	bl	800772c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00c      	beq.n	80074ac <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b00      	cmp	r3, #0
 800749a:	d007      	beq.n	80074ac <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f06f 0220 	mvn.w	r2, #32
 80074a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fbbe 	bl	8007c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00c      	beq.n	80074d0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80074c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fbca 	bl	8007c64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00c      	beq.n	80074f4 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d007      	beq.n	80074f4 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80074ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fbc2 	bl	8007c78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00c      	beq.n	8007518 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d007      	beq.n	8007518 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fbba 	bl	8007c8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00c      	beq.n	800753c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d007      	beq.n	800753c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fbb2 	bl	8007ca0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800753c:	bf00      	nop
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800755a:	2b01      	cmp	r3, #1
 800755c:	d101      	bne.n	8007562 <HAL_TIM_IC_ConfigChannel+0x1e>
 800755e:	2302      	movs	r3, #2
 8007560:	e088      	b.n	8007674 <HAL_TIM_IC_ConfigChannel+0x130>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d11b      	bne.n	80075a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007580:	f000 f992 	bl	80078a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699a      	ldr	r2, [r3, #24]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 020c 	bic.w	r2, r2, #12
 8007592:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6999      	ldr	r1, [r3, #24]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	619a      	str	r2, [r3, #24]
 80075a6:	e060      	b.n	800766a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d11c      	bne.n	80075e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80075be:	f000 f9e7 	bl	8007990 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	699a      	ldr	r2, [r3, #24]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80075d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6999      	ldr	r1, [r3, #24]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	021a      	lsls	r2, r3, #8
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	619a      	str	r2, [r3, #24]
 80075e6:	e040      	b.n	800766a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b08      	cmp	r3, #8
 80075ec:	d11b      	bne.n	8007626 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80075fe:	f000 fa04 	bl	8007a0a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69da      	ldr	r2, [r3, #28]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 020c 	bic.w	r2, r2, #12
 8007610:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69d9      	ldr	r1, [r3, #28]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	430a      	orrs	r2, r1
 8007622:	61da      	str	r2, [r3, #28]
 8007624:	e021      	b.n	800766a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b0c      	cmp	r3, #12
 800762a:	d11c      	bne.n	8007666 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800763c:	f000 fa21 	bl	8007a82 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69da      	ldr	r2, [r3, #28]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800764e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	69d9      	ldr	r1, [r3, #28]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	021a      	lsls	r2, r3, #8
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	61da      	str	r2, [r3, #28]
 8007664:	e001      	b.n	800766a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007672:	7dfb      	ldrb	r3, [r7, #23]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b0c      	cmp	r3, #12
 800768e:	d831      	bhi.n	80076f4 <HAL_TIM_ReadCapturedValue+0x78>
 8007690:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007696:	bf00      	nop
 8007698:	080076cd 	.word	0x080076cd
 800769c:	080076f5 	.word	0x080076f5
 80076a0:	080076f5 	.word	0x080076f5
 80076a4:	080076f5 	.word	0x080076f5
 80076a8:	080076d7 	.word	0x080076d7
 80076ac:	080076f5 	.word	0x080076f5
 80076b0:	080076f5 	.word	0x080076f5
 80076b4:	080076f5 	.word	0x080076f5
 80076b8:	080076e1 	.word	0x080076e1
 80076bc:	080076f5 	.word	0x080076f5
 80076c0:	080076f5 	.word	0x080076f5
 80076c4:	080076f5 	.word	0x080076f5
 80076c8:	080076eb 	.word	0x080076eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d2:	60fb      	str	r3, [r7, #12]

      break;
 80076d4:	e00f      	b.n	80076f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076dc:	60fb      	str	r3, [r7, #12]

      break;
 80076de:	e00a      	b.n	80076f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e6:	60fb      	str	r3, [r7, #12]

      break;
 80076e8:	e005      	b.n	80076f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	60fb      	str	r3, [r7, #12]

      break;
 80076f2:	e000      	b.n	80076f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80076f4:	bf00      	nop
  }

  return tmpreg;
 80076f6:	68fb      	ldr	r3, [r7, #12]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800770c:	bf00      	nop
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a4c      	ldr	r2, [pc, #304]	; (8007884 <TIM_Base_SetConfig+0x144>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d017      	beq.n	8007788 <TIM_Base_SetConfig+0x48>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775e:	d013      	beq.n	8007788 <TIM_Base_SetConfig+0x48>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a49      	ldr	r2, [pc, #292]	; (8007888 <TIM_Base_SetConfig+0x148>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00f      	beq.n	8007788 <TIM_Base_SetConfig+0x48>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a48      	ldr	r2, [pc, #288]	; (800788c <TIM_Base_SetConfig+0x14c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d00b      	beq.n	8007788 <TIM_Base_SetConfig+0x48>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a47      	ldr	r2, [pc, #284]	; (8007890 <TIM_Base_SetConfig+0x150>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d007      	beq.n	8007788 <TIM_Base_SetConfig+0x48>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a46      	ldr	r2, [pc, #280]	; (8007894 <TIM_Base_SetConfig+0x154>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_Base_SetConfig+0x48>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a45      	ldr	r2, [pc, #276]	; (8007898 <TIM_Base_SetConfig+0x158>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d108      	bne.n	800779a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a39      	ldr	r2, [pc, #228]	; (8007884 <TIM_Base_SetConfig+0x144>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d023      	beq.n	80077ea <TIM_Base_SetConfig+0xaa>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a8:	d01f      	beq.n	80077ea <TIM_Base_SetConfig+0xaa>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a36      	ldr	r2, [pc, #216]	; (8007888 <TIM_Base_SetConfig+0x148>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d01b      	beq.n	80077ea <TIM_Base_SetConfig+0xaa>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a35      	ldr	r2, [pc, #212]	; (800788c <TIM_Base_SetConfig+0x14c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d017      	beq.n	80077ea <TIM_Base_SetConfig+0xaa>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a34      	ldr	r2, [pc, #208]	; (8007890 <TIM_Base_SetConfig+0x150>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d013      	beq.n	80077ea <TIM_Base_SetConfig+0xaa>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a33      	ldr	r2, [pc, #204]	; (8007894 <TIM_Base_SetConfig+0x154>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00f      	beq.n	80077ea <TIM_Base_SetConfig+0xaa>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a33      	ldr	r2, [pc, #204]	; (800789c <TIM_Base_SetConfig+0x15c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d00b      	beq.n	80077ea <TIM_Base_SetConfig+0xaa>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a32      	ldr	r2, [pc, #200]	; (80078a0 <TIM_Base_SetConfig+0x160>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d007      	beq.n	80077ea <TIM_Base_SetConfig+0xaa>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a31      	ldr	r2, [pc, #196]	; (80078a4 <TIM_Base_SetConfig+0x164>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d003      	beq.n	80077ea <TIM_Base_SetConfig+0xaa>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a2c      	ldr	r2, [pc, #176]	; (8007898 <TIM_Base_SetConfig+0x158>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d108      	bne.n	80077fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	689a      	ldr	r2, [r3, #8]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a18      	ldr	r2, [pc, #96]	; (8007884 <TIM_Base_SetConfig+0x144>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d013      	beq.n	8007850 <TIM_Base_SetConfig+0x110>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a1a      	ldr	r2, [pc, #104]	; (8007894 <TIM_Base_SetConfig+0x154>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d00f      	beq.n	8007850 <TIM_Base_SetConfig+0x110>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a1a      	ldr	r2, [pc, #104]	; (800789c <TIM_Base_SetConfig+0x15c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d00b      	beq.n	8007850 <TIM_Base_SetConfig+0x110>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a19      	ldr	r2, [pc, #100]	; (80078a0 <TIM_Base_SetConfig+0x160>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d007      	beq.n	8007850 <TIM_Base_SetConfig+0x110>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a18      	ldr	r2, [pc, #96]	; (80078a4 <TIM_Base_SetConfig+0x164>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d003      	beq.n	8007850 <TIM_Base_SetConfig+0x110>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a13      	ldr	r2, [pc, #76]	; (8007898 <TIM_Base_SetConfig+0x158>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d103      	bne.n	8007858 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	691a      	ldr	r2, [r3, #16]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b01      	cmp	r3, #1
 8007868:	d105      	bne.n	8007876 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f023 0201 	bic.w	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	611a      	str	r2, [r3, #16]
  }
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40012c00 	.word	0x40012c00
 8007888:	40000400 	.word	0x40000400
 800788c:	40000800 	.word	0x40000800
 8007890:	40000c00 	.word	0x40000c00
 8007894:	40013400 	.word	0x40013400
 8007898:	40015000 	.word	0x40015000
 800789c:	40014000 	.word	0x40014000
 80078a0:	40014400 	.word	0x40014400
 80078a4:	40014800 	.word	0x40014800

080078a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6a1b      	ldr	r3, [r3, #32]
 80078c0:	f023 0201 	bic.w	r2, r3, #1
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4a28      	ldr	r2, [pc, #160]	; (8007974 <TIM_TI1_SetConfig+0xcc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d01b      	beq.n	800790e <TIM_TI1_SetConfig+0x66>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078dc:	d017      	beq.n	800790e <TIM_TI1_SetConfig+0x66>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4a25      	ldr	r2, [pc, #148]	; (8007978 <TIM_TI1_SetConfig+0xd0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d013      	beq.n	800790e <TIM_TI1_SetConfig+0x66>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4a24      	ldr	r2, [pc, #144]	; (800797c <TIM_TI1_SetConfig+0xd4>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00f      	beq.n	800790e <TIM_TI1_SetConfig+0x66>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4a23      	ldr	r2, [pc, #140]	; (8007980 <TIM_TI1_SetConfig+0xd8>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00b      	beq.n	800790e <TIM_TI1_SetConfig+0x66>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a22      	ldr	r2, [pc, #136]	; (8007984 <TIM_TI1_SetConfig+0xdc>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d007      	beq.n	800790e <TIM_TI1_SetConfig+0x66>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4a21      	ldr	r2, [pc, #132]	; (8007988 <TIM_TI1_SetConfig+0xe0>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d003      	beq.n	800790e <TIM_TI1_SetConfig+0x66>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4a20      	ldr	r2, [pc, #128]	; (800798c <TIM_TI1_SetConfig+0xe4>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d101      	bne.n	8007912 <TIM_TI1_SetConfig+0x6a>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <TIM_TI1_SetConfig+0x6c>
 8007912:	2300      	movs	r3, #0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d008      	beq.n	800792a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f023 0303 	bic.w	r3, r3, #3
 800791e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4313      	orrs	r3, r2
 8007926:	617b      	str	r3, [r7, #20]
 8007928:	e003      	b.n	8007932 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f043 0301 	orr.w	r3, r3, #1
 8007930:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	011b      	lsls	r3, r3, #4
 800793e:	b2db      	uxtb	r3, r3
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	4313      	orrs	r3, r2
 8007944:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f023 030a 	bic.w	r3, r3, #10
 800794c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f003 030a 	and.w	r3, r3, #10
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	621a      	str	r2, [r3, #32]
}
 8007966:	bf00      	nop
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	40012c00 	.word	0x40012c00
 8007978:	40000400 	.word	0x40000400
 800797c:	40000800 	.word	0x40000800
 8007980:	40000c00 	.word	0x40000c00
 8007984:	40013400 	.word	0x40013400
 8007988:	40014000 	.word	0x40014000
 800798c:	40015000 	.word	0x40015000

08007990 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	f023 0210 	bic.w	r2, r3, #16
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	031b      	lsls	r3, r3, #12
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	4313      	orrs	r3, r2
 80079da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079e2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	011b      	lsls	r3, r3, #4
 80079e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	621a      	str	r2, [r3, #32]
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b087      	sub	sp, #28
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	607a      	str	r2, [r7, #4]
 8007a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f023 0303 	bic.w	r3, r3, #3
 8007a36:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a46:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007a5a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	021b      	lsls	r3, r3, #8
 8007a60:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	621a      	str	r2, [r3, #32]
}
 8007a76:	bf00      	nop
 8007a78:	371c      	adds	r7, #28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b087      	sub	sp, #28
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	60b9      	str	r1, [r7, #8]
 8007a8c:	607a      	str	r2, [r7, #4]
 8007a8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	021b      	lsls	r3, r3, #8
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ac0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	031b      	lsls	r3, r3, #12
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	031b      	lsls	r3, r3, #12
 8007ada:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	621a      	str	r2, [r3, #32]
}
 8007af0:	bf00      	nop
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e074      	b.n	8007bfe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a34      	ldr	r2, [pc, #208]	; (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d009      	beq.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a33      	ldr	r2, [pc, #204]	; (8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d004      	beq.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a31      	ldr	r2, [pc, #196]	; (8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d108      	bne.n	8007b64 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a21      	ldr	r2, [pc, #132]	; (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d022      	beq.n	8007bd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b94:	d01d      	beq.n	8007bd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a1f      	ldr	r2, [pc, #124]	; (8007c18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d018      	beq.n	8007bd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a1d      	ldr	r2, [pc, #116]	; (8007c1c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d013      	beq.n	8007bd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a1c      	ldr	r2, [pc, #112]	; (8007c20 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d00e      	beq.n	8007bd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a15      	ldr	r2, [pc, #84]	; (8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d009      	beq.n	8007bd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a18      	ldr	r2, [pc, #96]	; (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d004      	beq.n	8007bd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a11      	ldr	r2, [pc, #68]	; (8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d10c      	bne.n	8007bec <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	40012c00 	.word	0x40012c00
 8007c10:	40013400 	.word	0x40013400
 8007c14:	40015000 	.word	0x40015000
 8007c18:	40000400 	.word	0x40000400
 8007c1c:	40000800 	.word	0x40000800
 8007c20:	40000c00 	.word	0x40000c00
 8007c24:	40014000 	.word	0x40014000

08007c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e042      	b.n	8007d4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d106      	bne.n	8007cde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fa f813 	bl	8001d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2224      	movs	r2, #36	; 0x24
 8007ce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0201 	bic.w	r2, r2, #1
 8007cf4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fb24 	bl	800834c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f825 	bl	8007d54 <UART_SetConfig>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e01b      	b.n	8007d4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fba3 	bl	8008490 <UART_CheckIdleState>
 8007d4a:	4603      	mov	r3, r0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d58:	b08c      	sub	sp, #48	; 0x30
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4baa      	ldr	r3, [pc, #680]	; (800802c <UART_SetConfig+0x2d8>)
 8007d84:	4013      	ands	r3, r2
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	6812      	ldr	r2, [r2, #0]
 8007d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	430a      	orrs	r2, r1
 8007da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a9f      	ldr	r2, [pc, #636]	; (8008030 <UART_SetConfig+0x2dc>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d004      	beq.n	8007dc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007dca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	6812      	ldr	r2, [r2, #0]
 8007dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dd4:	430b      	orrs	r3, r1
 8007dd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dde:	f023 010f 	bic.w	r1, r3, #15
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a90      	ldr	r2, [pc, #576]	; (8008034 <UART_SetConfig+0x2e0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d125      	bne.n	8007e44 <UART_SetConfig+0xf0>
 8007df8:	4b8f      	ldr	r3, [pc, #572]	; (8008038 <UART_SetConfig+0x2e4>)
 8007dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d81a      	bhi.n	8007e3c <UART_SetConfig+0xe8>
 8007e06:	a201      	add	r2, pc, #4	; (adr r2, 8007e0c <UART_SetConfig+0xb8>)
 8007e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e0c:	08007e1d 	.word	0x08007e1d
 8007e10:	08007e2d 	.word	0x08007e2d
 8007e14:	08007e25 	.word	0x08007e25
 8007e18:	08007e35 	.word	0x08007e35
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e22:	e116      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007e24:	2302      	movs	r3, #2
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e2a:	e112      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007e2c:	2304      	movs	r3, #4
 8007e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e32:	e10e      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007e34:	2308      	movs	r3, #8
 8007e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e3a:	e10a      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007e3c:	2310      	movs	r3, #16
 8007e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e42:	e106      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a7c      	ldr	r2, [pc, #496]	; (800803c <UART_SetConfig+0x2e8>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d138      	bne.n	8007ec0 <UART_SetConfig+0x16c>
 8007e4e:	4b7a      	ldr	r3, [pc, #488]	; (8008038 <UART_SetConfig+0x2e4>)
 8007e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e54:	f003 030c 	and.w	r3, r3, #12
 8007e58:	2b0c      	cmp	r3, #12
 8007e5a:	d82d      	bhi.n	8007eb8 <UART_SetConfig+0x164>
 8007e5c:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <UART_SetConfig+0x110>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e99 	.word	0x08007e99
 8007e68:	08007eb9 	.word	0x08007eb9
 8007e6c:	08007eb9 	.word	0x08007eb9
 8007e70:	08007eb9 	.word	0x08007eb9
 8007e74:	08007ea9 	.word	0x08007ea9
 8007e78:	08007eb9 	.word	0x08007eb9
 8007e7c:	08007eb9 	.word	0x08007eb9
 8007e80:	08007eb9 	.word	0x08007eb9
 8007e84:	08007ea1 	.word	0x08007ea1
 8007e88:	08007eb9 	.word	0x08007eb9
 8007e8c:	08007eb9 	.word	0x08007eb9
 8007e90:	08007eb9 	.word	0x08007eb9
 8007e94:	08007eb1 	.word	0x08007eb1
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e9e:	e0d8      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ea6:	e0d4      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007ea8:	2304      	movs	r3, #4
 8007eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eae:	e0d0      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eb6:	e0cc      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007eb8:	2310      	movs	r3, #16
 8007eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ebe:	e0c8      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a5e      	ldr	r2, [pc, #376]	; (8008040 <UART_SetConfig+0x2ec>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d125      	bne.n	8007f16 <UART_SetConfig+0x1c2>
 8007eca:	4b5b      	ldr	r3, [pc, #364]	; (8008038 <UART_SetConfig+0x2e4>)
 8007ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ed4:	2b30      	cmp	r3, #48	; 0x30
 8007ed6:	d016      	beq.n	8007f06 <UART_SetConfig+0x1b2>
 8007ed8:	2b30      	cmp	r3, #48	; 0x30
 8007eda:	d818      	bhi.n	8007f0e <UART_SetConfig+0x1ba>
 8007edc:	2b20      	cmp	r3, #32
 8007ede:	d00a      	beq.n	8007ef6 <UART_SetConfig+0x1a2>
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	d814      	bhi.n	8007f0e <UART_SetConfig+0x1ba>
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <UART_SetConfig+0x19a>
 8007ee8:	2b10      	cmp	r3, #16
 8007eea:	d008      	beq.n	8007efe <UART_SetConfig+0x1aa>
 8007eec:	e00f      	b.n	8007f0e <UART_SetConfig+0x1ba>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ef4:	e0ad      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007efc:	e0a9      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007efe:	2304      	movs	r3, #4
 8007f00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f04:	e0a5      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007f06:	2308      	movs	r3, #8
 8007f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f0c:	e0a1      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007f0e:	2310      	movs	r3, #16
 8007f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f14:	e09d      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a4a      	ldr	r2, [pc, #296]	; (8008044 <UART_SetConfig+0x2f0>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d125      	bne.n	8007f6c <UART_SetConfig+0x218>
 8007f20:	4b45      	ldr	r3, [pc, #276]	; (8008038 <UART_SetConfig+0x2e4>)
 8007f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8007f2c:	d016      	beq.n	8007f5c <UART_SetConfig+0x208>
 8007f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8007f30:	d818      	bhi.n	8007f64 <UART_SetConfig+0x210>
 8007f32:	2b80      	cmp	r3, #128	; 0x80
 8007f34:	d00a      	beq.n	8007f4c <UART_SetConfig+0x1f8>
 8007f36:	2b80      	cmp	r3, #128	; 0x80
 8007f38:	d814      	bhi.n	8007f64 <UART_SetConfig+0x210>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <UART_SetConfig+0x1f0>
 8007f3e:	2b40      	cmp	r3, #64	; 0x40
 8007f40:	d008      	beq.n	8007f54 <UART_SetConfig+0x200>
 8007f42:	e00f      	b.n	8007f64 <UART_SetConfig+0x210>
 8007f44:	2300      	movs	r3, #0
 8007f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f4a:	e082      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f52:	e07e      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007f54:	2304      	movs	r3, #4
 8007f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f5a:	e07a      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007f5c:	2308      	movs	r3, #8
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f62:	e076      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007f64:	2310      	movs	r3, #16
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f6a:	e072      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a35      	ldr	r2, [pc, #212]	; (8008048 <UART_SetConfig+0x2f4>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d12a      	bne.n	8007fcc <UART_SetConfig+0x278>
 8007f76:	4b30      	ldr	r3, [pc, #192]	; (8008038 <UART_SetConfig+0x2e4>)
 8007f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f84:	d01a      	beq.n	8007fbc <UART_SetConfig+0x268>
 8007f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f8a:	d81b      	bhi.n	8007fc4 <UART_SetConfig+0x270>
 8007f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f90:	d00c      	beq.n	8007fac <UART_SetConfig+0x258>
 8007f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f96:	d815      	bhi.n	8007fc4 <UART_SetConfig+0x270>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <UART_SetConfig+0x250>
 8007f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa0:	d008      	beq.n	8007fb4 <UART_SetConfig+0x260>
 8007fa2:	e00f      	b.n	8007fc4 <UART_SetConfig+0x270>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007faa:	e052      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007fac:	2302      	movs	r3, #2
 8007fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb2:	e04e      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007fb4:	2304      	movs	r3, #4
 8007fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fba:	e04a      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007fbc:	2308      	movs	r3, #8
 8007fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc2:	e046      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007fc4:	2310      	movs	r3, #16
 8007fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fca:	e042      	b.n	8008052 <UART_SetConfig+0x2fe>
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a17      	ldr	r2, [pc, #92]	; (8008030 <UART_SetConfig+0x2dc>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d13a      	bne.n	800804c <UART_SetConfig+0x2f8>
 8007fd6:	4b18      	ldr	r3, [pc, #96]	; (8008038 <UART_SetConfig+0x2e4>)
 8007fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fe0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fe4:	d01a      	beq.n	800801c <UART_SetConfig+0x2c8>
 8007fe6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fea:	d81b      	bhi.n	8008024 <UART_SetConfig+0x2d0>
 8007fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff0:	d00c      	beq.n	800800c <UART_SetConfig+0x2b8>
 8007ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff6:	d815      	bhi.n	8008024 <UART_SetConfig+0x2d0>
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <UART_SetConfig+0x2b0>
 8007ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008000:	d008      	beq.n	8008014 <UART_SetConfig+0x2c0>
 8008002:	e00f      	b.n	8008024 <UART_SetConfig+0x2d0>
 8008004:	2300      	movs	r3, #0
 8008006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800800a:	e022      	b.n	8008052 <UART_SetConfig+0x2fe>
 800800c:	2302      	movs	r3, #2
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008012:	e01e      	b.n	8008052 <UART_SetConfig+0x2fe>
 8008014:	2304      	movs	r3, #4
 8008016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800801a:	e01a      	b.n	8008052 <UART_SetConfig+0x2fe>
 800801c:	2308      	movs	r3, #8
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008022:	e016      	b.n	8008052 <UART_SetConfig+0x2fe>
 8008024:	2310      	movs	r3, #16
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800802a:	e012      	b.n	8008052 <UART_SetConfig+0x2fe>
 800802c:	cfff69f3 	.word	0xcfff69f3
 8008030:	40008000 	.word	0x40008000
 8008034:	40013800 	.word	0x40013800
 8008038:	40021000 	.word	0x40021000
 800803c:	40004400 	.word	0x40004400
 8008040:	40004800 	.word	0x40004800
 8008044:	40004c00 	.word	0x40004c00
 8008048:	40005000 	.word	0x40005000
 800804c:	2310      	movs	r3, #16
 800804e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4aae      	ldr	r2, [pc, #696]	; (8008310 <UART_SetConfig+0x5bc>)
 8008058:	4293      	cmp	r3, r2
 800805a:	f040 8097 	bne.w	800818c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800805e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008062:	2b08      	cmp	r3, #8
 8008064:	d823      	bhi.n	80080ae <UART_SetConfig+0x35a>
 8008066:	a201      	add	r2, pc, #4	; (adr r2, 800806c <UART_SetConfig+0x318>)
 8008068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806c:	08008091 	.word	0x08008091
 8008070:	080080af 	.word	0x080080af
 8008074:	08008099 	.word	0x08008099
 8008078:	080080af 	.word	0x080080af
 800807c:	0800809f 	.word	0x0800809f
 8008080:	080080af 	.word	0x080080af
 8008084:	080080af 	.word	0x080080af
 8008088:	080080af 	.word	0x080080af
 800808c:	080080a7 	.word	0x080080a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008090:	f7fe fc3c 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 8008094:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008096:	e010      	b.n	80080ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008098:	4b9e      	ldr	r3, [pc, #632]	; (8008314 <UART_SetConfig+0x5c0>)
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800809c:	e00d      	b.n	80080ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800809e:	f7fe fbc7 	bl	8006830 <HAL_RCC_GetSysClockFreq>
 80080a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080a4:	e009      	b.n	80080ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080ac:	e005      	b.n	80080ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80080b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 8130 	beq.w	8008322 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	4a94      	ldr	r2, [pc, #592]	; (8008318 <UART_SetConfig+0x5c4>)
 80080c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080cc:	461a      	mov	r2, r3
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80080d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	4613      	mov	r3, r2
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	4413      	add	r3, r2
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d305      	bcc.n	80080f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d903      	bls.n	80080fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80080f8:	e113      	b.n	8008322 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	2200      	movs	r2, #0
 80080fe:	60bb      	str	r3, [r7, #8]
 8008100:	60fa      	str	r2, [r7, #12]
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	4a84      	ldr	r2, [pc, #528]	; (8008318 <UART_SetConfig+0x5c4>)
 8008108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800810c:	b29b      	uxth	r3, r3
 800810e:	2200      	movs	r2, #0
 8008110:	603b      	str	r3, [r7, #0]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008118:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800811c:	f7f8 fb58 	bl	80007d0 <__aeabi_uldivmod>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4610      	mov	r0, r2
 8008126:	4619      	mov	r1, r3
 8008128:	f04f 0200 	mov.w	r2, #0
 800812c:	f04f 0300 	mov.w	r3, #0
 8008130:	020b      	lsls	r3, r1, #8
 8008132:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008136:	0202      	lsls	r2, r0, #8
 8008138:	6979      	ldr	r1, [r7, #20]
 800813a:	6849      	ldr	r1, [r1, #4]
 800813c:	0849      	lsrs	r1, r1, #1
 800813e:	2000      	movs	r0, #0
 8008140:	460c      	mov	r4, r1
 8008142:	4605      	mov	r5, r0
 8008144:	eb12 0804 	adds.w	r8, r2, r4
 8008148:	eb43 0905 	adc.w	r9, r3, r5
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	469a      	mov	sl, r3
 8008154:	4693      	mov	fp, r2
 8008156:	4652      	mov	r2, sl
 8008158:	465b      	mov	r3, fp
 800815a:	4640      	mov	r0, r8
 800815c:	4649      	mov	r1, r9
 800815e:	f7f8 fb37 	bl	80007d0 <__aeabi_uldivmod>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	4613      	mov	r3, r2
 8008168:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008170:	d308      	bcc.n	8008184 <UART_SetConfig+0x430>
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008178:	d204      	bcs.n	8008184 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6a3a      	ldr	r2, [r7, #32]
 8008180:	60da      	str	r2, [r3, #12]
 8008182:	e0ce      	b.n	8008322 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800818a:	e0ca      	b.n	8008322 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008194:	d166      	bne.n	8008264 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008196:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800819a:	2b08      	cmp	r3, #8
 800819c:	d827      	bhi.n	80081ee <UART_SetConfig+0x49a>
 800819e:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <UART_SetConfig+0x450>)
 80081a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a4:	080081c9 	.word	0x080081c9
 80081a8:	080081d1 	.word	0x080081d1
 80081ac:	080081d9 	.word	0x080081d9
 80081b0:	080081ef 	.word	0x080081ef
 80081b4:	080081df 	.word	0x080081df
 80081b8:	080081ef 	.word	0x080081ef
 80081bc:	080081ef 	.word	0x080081ef
 80081c0:	080081ef 	.word	0x080081ef
 80081c4:	080081e7 	.word	0x080081e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081c8:	f7fe fba0 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 80081cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081ce:	e014      	b.n	80081fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081d0:	f7fe fbb2 	bl	8006938 <HAL_RCC_GetPCLK2Freq>
 80081d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081d6:	e010      	b.n	80081fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081d8:	4b4e      	ldr	r3, [pc, #312]	; (8008314 <UART_SetConfig+0x5c0>)
 80081da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081dc:	e00d      	b.n	80081fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081de:	f7fe fb27 	bl	8006830 <HAL_RCC_GetSysClockFreq>
 80081e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081e4:	e009      	b.n	80081fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081ec:	e005      	b.n	80081fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8090 	beq.w	8008322 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	4a44      	ldr	r2, [pc, #272]	; (8008318 <UART_SetConfig+0x5c4>)
 8008208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800820c:	461a      	mov	r2, r3
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	fbb3 f3f2 	udiv	r3, r3, r2
 8008214:	005a      	lsls	r2, r3, #1
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	085b      	lsrs	r3, r3, #1
 800821c:	441a      	add	r2, r3
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	fbb2 f3f3 	udiv	r3, r2, r3
 8008226:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	2b0f      	cmp	r3, #15
 800822c:	d916      	bls.n	800825c <UART_SetConfig+0x508>
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008234:	d212      	bcs.n	800825c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	b29b      	uxth	r3, r3
 800823a:	f023 030f 	bic.w	r3, r3, #15
 800823e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	085b      	lsrs	r3, r3, #1
 8008244:	b29b      	uxth	r3, r3
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	b29a      	uxth	r2, r3
 800824c:	8bfb      	ldrh	r3, [r7, #30]
 800824e:	4313      	orrs	r3, r2
 8008250:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	8bfa      	ldrh	r2, [r7, #30]
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	e062      	b.n	8008322 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008262:	e05e      	b.n	8008322 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008268:	2b08      	cmp	r3, #8
 800826a:	d828      	bhi.n	80082be <UART_SetConfig+0x56a>
 800826c:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <UART_SetConfig+0x520>)
 800826e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008272:	bf00      	nop
 8008274:	08008299 	.word	0x08008299
 8008278:	080082a1 	.word	0x080082a1
 800827c:	080082a9 	.word	0x080082a9
 8008280:	080082bf 	.word	0x080082bf
 8008284:	080082af 	.word	0x080082af
 8008288:	080082bf 	.word	0x080082bf
 800828c:	080082bf 	.word	0x080082bf
 8008290:	080082bf 	.word	0x080082bf
 8008294:	080082b7 	.word	0x080082b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008298:	f7fe fb38 	bl	800690c <HAL_RCC_GetPCLK1Freq>
 800829c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800829e:	e014      	b.n	80082ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082a0:	f7fe fb4a 	bl	8006938 <HAL_RCC_GetPCLK2Freq>
 80082a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082a6:	e010      	b.n	80082ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082a8:	4b1a      	ldr	r3, [pc, #104]	; (8008314 <UART_SetConfig+0x5c0>)
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082ac:	e00d      	b.n	80082ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ae:	f7fe fabf 	bl	8006830 <HAL_RCC_GetSysClockFreq>
 80082b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082b4:	e009      	b.n	80082ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082bc:	e005      	b.n	80082ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082c8:	bf00      	nop
    }

    if (pclk != 0U)
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d028      	beq.n	8008322 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	4a10      	ldr	r2, [pc, #64]	; (8008318 <UART_SetConfig+0x5c4>)
 80082d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082da:	461a      	mov	r2, r3
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	fbb3 f2f2 	udiv	r2, r3, r2
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	085b      	lsrs	r3, r3, #1
 80082e8:	441a      	add	r2, r3
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	2b0f      	cmp	r3, #15
 80082f8:	d910      	bls.n	800831c <UART_SetConfig+0x5c8>
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008300:	d20c      	bcs.n	800831c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	b29a      	uxth	r2, r3
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	60da      	str	r2, [r3, #12]
 800830c:	e009      	b.n	8008322 <UART_SetConfig+0x5ce>
 800830e:	bf00      	nop
 8008310:	40008000 	.word	0x40008000
 8008314:	00f42400 	.word	0x00f42400
 8008318:	0800a8f4 	.word	0x0800a8f4
      }
      else
      {
        ret = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2201      	movs	r2, #1
 8008326:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2201      	movs	r2, #1
 800832e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2200      	movs	r2, #0
 8008336:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	2200      	movs	r2, #0
 800833c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800833e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008342:	4618      	mov	r0, r3
 8008344:	3730      	adds	r7, #48	; 0x30
 8008346:	46bd      	mov	sp, r7
 8008348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800834c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008358:	f003 0308 	and.w	r3, r3, #8
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083be:	f003 0304 	and.w	r3, r3, #4
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e0:	f003 0310 	and.w	r3, r3, #16
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00a      	beq.n	8008420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008428:	2b00      	cmp	r3, #0
 800842a:	d01a      	beq.n	8008462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	430a      	orrs	r2, r1
 8008440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800844a:	d10a      	bne.n	8008462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	605a      	str	r2, [r3, #4]
  }
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b098      	sub	sp, #96	; 0x60
 8008494:	af02      	add	r7, sp, #8
 8008496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084a0:	f7f9 fee6 	bl	8002270 <HAL_GetTick>
 80084a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0308 	and.w	r3, r3, #8
 80084b0:	2b08      	cmp	r3, #8
 80084b2:	d12f      	bne.n	8008514 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084bc:	2200      	movs	r2, #0
 80084be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f88e 	bl	80085e4 <UART_WaitOnFlagUntilTimeout>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d022      	beq.n	8008514 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084e2:	653b      	str	r3, [r7, #80]	; 0x50
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ec:	647b      	str	r3, [r7, #68]	; 0x44
 80084ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e6      	bne.n	80084ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2220      	movs	r2, #32
 8008504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e063      	b.n	80085dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0304 	and.w	r3, r3, #4
 800851e:	2b04      	cmp	r3, #4
 8008520:	d149      	bne.n	80085b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008522:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800852a:	2200      	movs	r2, #0
 800852c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f857 	bl	80085e4 <UART_WaitOnFlagUntilTimeout>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d03c      	beq.n	80085b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	e853 3f00 	ldrex	r3, [r3]
 8008548:	623b      	str	r3, [r7, #32]
   return(result);
 800854a:	6a3b      	ldr	r3, [r7, #32]
 800854c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800855a:	633b      	str	r3, [r7, #48]	; 0x30
 800855c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008562:	e841 2300 	strex	r3, r2, [r1]
 8008566:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1e6      	bne.n	800853c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3308      	adds	r3, #8
 8008574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	60fb      	str	r3, [r7, #12]
   return(result);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f023 0301 	bic.w	r3, r3, #1
 8008584:	64bb      	str	r3, [r7, #72]	; 0x48
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3308      	adds	r3, #8
 800858c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800858e:	61fa      	str	r2, [r7, #28]
 8008590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	69b9      	ldr	r1, [r7, #24]
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	617b      	str	r3, [r7, #20]
   return(result);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e5      	bne.n	800856e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e012      	b.n	80085dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3758      	adds	r7, #88	; 0x58
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	603b      	str	r3, [r7, #0]
 80085f0:	4613      	mov	r3, r2
 80085f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f4:	e04f      	b.n	8008696 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fc:	d04b      	beq.n	8008696 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085fe:	f7f9 fe37 	bl	8002270 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	429a      	cmp	r2, r3
 800860c:	d302      	bcc.n	8008614 <UART_WaitOnFlagUntilTimeout+0x30>
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e04e      	b.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0304 	and.w	r3, r3, #4
 8008622:	2b00      	cmp	r3, #0
 8008624:	d037      	beq.n	8008696 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b80      	cmp	r3, #128	; 0x80
 800862a:	d034      	beq.n	8008696 <UART_WaitOnFlagUntilTimeout+0xb2>
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2b40      	cmp	r3, #64	; 0x40
 8008630:	d031      	beq.n	8008696 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	f003 0308 	and.w	r3, r3, #8
 800863c:	2b08      	cmp	r3, #8
 800863e:	d110      	bne.n	8008662 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2208      	movs	r2, #8
 8008646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f838 	bl	80086be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2208      	movs	r2, #8
 8008652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e029      	b.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800866c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008670:	d111      	bne.n	8008696 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800867a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f81e 	bl	80086be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2220      	movs	r2, #32
 8008686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e00f      	b.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69da      	ldr	r2, [r3, #28]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4013      	ands	r3, r2
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	bf0c      	ite	eq
 80086a6:	2301      	moveq	r3, #1
 80086a8:	2300      	movne	r3, #0
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	461a      	mov	r2, r3
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d0a0      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086be:	b480      	push	{r7}
 80086c0:	b095      	sub	sp, #84	; 0x54
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ce:	e853 3f00 	ldrex	r3, [r3]
 80086d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	461a      	mov	r2, r3
 80086e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e4:	643b      	str	r3, [r7, #64]	; 0x40
 80086e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e6      	bne.n	80086c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3308      	adds	r3, #8
 80086fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	61fb      	str	r3, [r7, #28]
   return(result);
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	64bb      	str	r3, [r7, #72]	; 0x48
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3308      	adds	r3, #8
 800871a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800871c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800871e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e3      	bne.n	80086f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008734:	2b01      	cmp	r3, #1
 8008736:	d118      	bne.n	800876a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	60bb      	str	r3, [r7, #8]
   return(result);
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f023 0310 	bic.w	r3, r3, #16
 800874c:	647b      	str	r3, [r7, #68]	; 0x44
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008756:	61bb      	str	r3, [r7, #24]
 8008758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	6979      	ldr	r1, [r7, #20]
 800875c:	69ba      	ldr	r2, [r7, #24]
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	613b      	str	r3, [r7, #16]
   return(result);
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1e6      	bne.n	8008738 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2220      	movs	r2, #32
 800876e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800877e:	bf00      	nop
 8008780:	3754      	adds	r7, #84	; 0x54
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800878a:	b480      	push	{r7}
 800878c:	b085      	sub	sp, #20
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800879c:	2302      	movs	r3, #2
 800879e:	e027      	b.n	80087f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2224      	movs	r2, #36	; 0x24
 80087ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0201 	bic.w	r2, r2, #1
 80087c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800880c:	2b01      	cmp	r3, #1
 800880e:	d101      	bne.n	8008814 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008810:	2302      	movs	r3, #2
 8008812:	e02d      	b.n	8008870 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2224      	movs	r2, #36	; 0x24
 8008820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0201 	bic.w	r2, r2, #1
 800883a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f84f 	bl	80088f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2220      	movs	r2, #32
 8008862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008888:	2b01      	cmp	r3, #1
 800888a:	d101      	bne.n	8008890 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800888c:	2302      	movs	r3, #2
 800888e:	e02d      	b.n	80088ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2224      	movs	r2, #36	; 0x24
 800889c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0201 	bic.w	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f811 	bl	80088f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2220      	movs	r2, #32
 80088de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008900:	2b00      	cmp	r3, #0
 8008902:	d108      	bne.n	8008916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008914:	e031      	b.n	800897a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008916:	2308      	movs	r3, #8
 8008918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800891a:	2308      	movs	r3, #8
 800891c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	0e5b      	lsrs	r3, r3, #25
 8008926:	b2db      	uxtb	r3, r3
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	0f5b      	lsrs	r3, r3, #29
 8008936:	b2db      	uxtb	r3, r3
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800893e:	7bbb      	ldrb	r3, [r7, #14]
 8008940:	7b3a      	ldrb	r2, [r7, #12]
 8008942:	4911      	ldr	r1, [pc, #68]	; (8008988 <UARTEx_SetNbDataToProcess+0x94>)
 8008944:	5c8a      	ldrb	r2, [r1, r2]
 8008946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800894a:	7b3a      	ldrb	r2, [r7, #12]
 800894c:	490f      	ldr	r1, [pc, #60]	; (800898c <UARTEx_SetNbDataToProcess+0x98>)
 800894e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008950:	fb93 f3f2 	sdiv	r3, r3, r2
 8008954:	b29a      	uxth	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	7b7a      	ldrb	r2, [r7, #13]
 8008960:	4909      	ldr	r1, [pc, #36]	; (8008988 <UARTEx_SetNbDataToProcess+0x94>)
 8008962:	5c8a      	ldrb	r2, [r1, r2]
 8008964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008968:	7b7a      	ldrb	r2, [r7, #13]
 800896a:	4908      	ldr	r1, [pc, #32]	; (800898c <UARTEx_SetNbDataToProcess+0x98>)
 800896c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800896e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008972:	b29a      	uxth	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800897a:	bf00      	nop
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	0800a90c 	.word	0x0800a90c
 800898c:	0800a914 	.word	0x0800a914

08008990 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b096      	sub	sp, #88	; 0x58
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3303      	adds	r3, #3
 80089a2:	f023 0303 	bic.w	r3, r3, #3
 80089a6:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80089a8:	f3ef 8310 	mrs	r3, PRIMASK
 80089ac:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 80089ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80089b0:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80089b2:	b672      	cpsid	i
#endif
    return(int_posture);
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 80089b6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80089b8:	4b55      	ldr	r3, [pc, #340]	; (8008b10 <_tx_byte_allocate+0x180>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 80089be:	2300      	movs	r3, #0
 80089c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089c6:	621a      	str	r2, [r3, #32]
 80089c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ca:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	f383 8810 	msr	PRIMASK, r3
}
 80089d2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 f9b2 	bl	8008d40 <_tx_byte_pool_search>
 80089dc:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80089de:	f3ef 8310 	mrs	r3, PRIMASK
 80089e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80089e6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80089e8:	b672      	cpsid	i
    return(int_posture);
 80089ea:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80089ec:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80089ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80089f4:	2301      	movs	r3, #1
 80089f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089f8:	e006      	b.n	8008a08 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d101      	bne.n	8008a08 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8008a04:	2301      	movs	r3, #1
 8008a06:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8008a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0d9      	beq.n	80089c2 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a12:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8008a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d008      	beq.n	8008a2c <_tx_byte_allocate+0x9c>
 8008a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a1c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	f383 8810 	msr	PRIMASK, r3
}
 8008a24:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8008a26:	2300      	movs	r3, #0
 8008a28:	653b      	str	r3, [r7, #80]	; 0x50
 8008a2a:	e06c      	b.n	8008b06 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d061      	beq.n	8008af6 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8008a32:	4b38      	ldr	r3, [pc, #224]	; (8008b14 <_tx_byte_allocate+0x184>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d007      	beq.n	8008a4a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8008a3a:	2310      	movs	r3, #16
 8008a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8008a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a40:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	f383 8810 	msr	PRIMASK, r3
}
 8008a48:	e05d      	b.n	8008b06 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8008a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a4c:	4a32      	ldr	r2, [pc, #200]	; (8008b18 <_tx_byte_allocate+0x188>)
 8008a4e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8008a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8008a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8008a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8008a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a6c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a74:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8008a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d109      	bne.n	8008a9a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a8a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8008a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a90:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8008a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a96:	675a      	str	r2, [r3, #116]	; 0x74
 8008a98:	e011      	b.n	8008abe <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8008aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008aa4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8008aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aaa:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8008aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ab0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ab6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8008ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008abc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8008abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ac0:	2209      	movs	r2, #9
 8008ac2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8008ad0:	4b10      	ldr	r3, [pc, #64]	; (8008b14 <_tx_byte_allocate+0x184>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	4a0f      	ldr	r2, [pc, #60]	; (8008b14 <_tx_byte_allocate+0x184>)
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008adc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	f383 8810 	msr	PRIMASK, r3
}
 8008ae4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8008ae6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8008ae8:	f000 ff96 	bl	8009a18 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8008aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008af2:	653b      	str	r3, [r7, #80]	; 0x50
 8008af4:	e007      	b.n	8008b06 <_tx_byte_allocate+0x176>
 8008af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008af8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f383 8810 	msr	PRIMASK, r3
}
 8008b00:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8008b02:	2310      	movs	r3, #16
 8008b04:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8008b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3758      	adds	r7, #88	; 0x58
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20000abc 	.word	0x20000abc
 8008b14:	20000b54 	.word	0x20000b54
 8008b18:	08008b1d 	.word	0x08008b1d

08008b1c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08e      	sub	sp, #56	; 0x38
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b26:	f3ef 8310 	mrs	r3, PRIMASK
 8008b2a:	623b      	str	r3, [r7, #32]
    return(posture);
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008b2e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008b30:	b672      	cpsid	i
    return(int_posture);
 8008b32:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8008b34:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b3a:	4a33      	ldr	r2, [pc, #204]	; (8008c08 <_tx_byte_pool_cleanup+0xec>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d158      	bne.n	8008bf2 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d152      	bne.n	8008bf2 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b50:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8008b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d04c      	beq.n	8008bf2 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8008b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a2b      	ldr	r2, [pc, #172]	; (8008c0c <_tx_byte_pool_cleanup+0xf0>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d147      	bne.n	8008bf2 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d043      	beq.n	8008bf2 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	1e5a      	subs	r2, r3, #1
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d103      	bne.n	8008b8e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	2200      	movs	r2, #0
 8008b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8008b8c:	e013      	b.n	8008bb6 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b92:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b98:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ba4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d102      	bne.n	8008bb6 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb4:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bba:	2b09      	cmp	r3, #9
 8008bbc:	d119      	bne.n	8008bf2 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2210      	movs	r2, #16
 8008bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008bc6:	4b12      	ldr	r3, [pc, #72]	; (8008c10 <_tx_byte_pool_cleanup+0xf4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	4a10      	ldr	r2, [pc, #64]	; (8008c10 <_tx_byte_pool_cleanup+0xf4>)
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f383 8810 	msr	PRIMASK, r3
}
 8008bda:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fe1b 	bl	8009818 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008be2:	f3ef 8310 	mrs	r3, PRIMASK
 8008be6:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008be8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008bea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008bec:	b672      	cpsid	i
    return(int_posture);
 8008bee:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f383 8810 	msr	PRIMASK, r3
}
 8008bfc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008bfe:	bf00      	nop
 8008c00:	3738      	adds	r7, #56	; 0x38
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	08008b1d 	.word	0x08008b1d
 8008c0c:	42595445 	.word	0x42595445
 8008c10:	20000b54 	.word	0x20000b54

08008c14 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08e      	sub	sp, #56	; 0x38
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
 8008c20:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8008c22:	2234      	movs	r2, #52	; 0x34
 8008c24:	2100      	movs	r1, #0
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f001 fdce 	bl	800a7c8 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f023 0303 	bic.w	r3, r3, #3
 8008c32:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	f1a3 0208 	sub.w	r2, r3, #8
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8008c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c70:	3b04      	subs	r3, #4
 8008c72:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8008c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c80:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8008c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c84:	3b04      	subs	r3, #4
 8008c86:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c9e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8008ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8008caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cac:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8008cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb0:	4a1f      	ldr	r2, [pc, #124]	; (8008d30 <_tx_byte_pool_create+0x11c>)
 8008cb2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008cba:	f3ef 8310 	mrs	r3, PRIMASK
 8008cbe:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008cc0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008cc2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008cc4:	b672      	cpsid	i
    return(int_posture);
 8008cc6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	4a19      	ldr	r2, [pc, #100]	; (8008d34 <_tx_byte_pool_create+0x120>)
 8008cce:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8008cd0:	4b19      	ldr	r3, [pc, #100]	; (8008d38 <_tx_byte_pool_create+0x124>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d109      	bne.n	8008cec <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8008cd8:	4a18      	ldr	r2, [pc, #96]	; (8008d3c <_tx_byte_pool_create+0x128>)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8008cea:	e011      	b.n	8008d10 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8008cec:	4b13      	ldr	r3, [pc, #76]	; (8008d3c <_tx_byte_pool_create+0x128>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	69fa      	ldr	r2, [r7, #28]
 8008d08:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6a3a      	ldr	r2, [r7, #32]
 8008d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8008d10:	4b09      	ldr	r3, [pc, #36]	; (8008d38 <_tx_byte_pool_create+0x124>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3301      	adds	r3, #1
 8008d16:	4a08      	ldr	r2, [pc, #32]	; (8008d38 <_tx_byte_pool_create+0x124>)
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f383 8810 	msr	PRIMASK, r3
}
 8008d24:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3738      	adds	r7, #56	; 0x38
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	ffffeeee 	.word	0xffffeeee
 8008d34:	42595445 	.word	0x42595445
 8008d38:	20000ab0 	.word	0x20000ab0
 8008d3c:	20000aac 	.word	0x20000aac

08008d40 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b097      	sub	sp, #92	; 0x5c
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8008d56:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008d58:	b672      	cpsid	i
    return(int_posture);
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8008d5c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	689a      	ldr	r2, [r3, #8]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	3b02      	subs	r3, #2
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	4413      	add	r3, r2
 8008d6c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d308      	bcc.n	8008d88 <_tx_byte_pool_search+0x48>
 8008d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d78:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	f383 8810 	msr	PRIMASK, r3
}
 8008d80:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	653b      	str	r3, [r7, #80]	; 0x50
 8008d86:	e0dd      	b.n	8008f44 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008d88:	4b72      	ldr	r3, [pc, #456]	; (8008f54 <_tx_byte_pool_search+0x214>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d92:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8008da2:	2300      	movs	r3, #0
 8008da4:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008da8:	3304      	adds	r3, #4
 8008daa:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8008db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a68      	ldr	r2, [pc, #416]	; (8008f58 <_tx_byte_pool_search+0x218>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d143      	bne.n	8008e42 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8008dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d104      	bne.n	8008dca <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008dc4:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dcc:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8008dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8008ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dde:	3b08      	subs	r3, #8
 8008de0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8008de2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d257      	bcs.n	8008e9a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8008dea:	2300      	movs	r3, #0
 8008dec:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df0:	3304      	adds	r3, #4
 8008df2:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8008df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a56      	ldr	r2, [pc, #344]	; (8008f58 <_tx_byte_pool_search+0x218>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d113      	bne.n	8008e2a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	1e5a      	subs	r2, r3, #1
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d114      	bne.n	8008e4c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e26:	615a      	str	r2, [r3, #20]
 8008e28:	e010      	b.n	8008e4c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8008e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d008      	beq.n	8008e4c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8008e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e40:	e004      	b.n	8008e4c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e44:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8008e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8008e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e54:	3b01      	subs	r3, #1
 8008e56:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e5a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	f383 8810 	msr	PRIMASK, r3
}
 8008e62:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e64:	f3ef 8310 	mrs	r3, PRIMASK
 8008e68:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008e6a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008e6c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e6e:	b672      	cpsid	i
    return(int_posture);
 8008e70:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8008e72:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d009      	beq.n	8008e92 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e90:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8008e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d186      	bne.n	8008da6 <_tx_byte_pool_search+0x66>
 8008e98:	e000      	b.n	8008e9c <_tx_byte_pool_search+0x15c>
                    break;
 8008e9a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8008e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d048      	beq.n	8008f34 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8008ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b13      	cmp	r3, #19
 8008eaa:	d91e      	bls.n	8008eea <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	3308      	adds	r3, #8
 8008eb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008eb2:	4413      	add	r3, r2
 8008eb4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ebc:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	3304      	adds	r3, #4
 8008eca:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8008ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed2:	4a21      	ldr	r2, [pc, #132]	; (8008f58 <_tx_byte_pool_search+0x218>)
 8008ed4:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ee4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eec:	3304      	adds	r3, #4
 8008eee:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef2:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	f1a3 0208 	sub.w	r2, r3, #8
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d105      	bne.n	8008f20 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f16:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	615a      	str	r2, [r3, #20]
 8008f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f22:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f383 8810 	msr	PRIMASK, r3
}
 8008f2a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8008f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f2e:	3308      	adds	r3, #8
 8008f30:	653b      	str	r3, [r7, #80]	; 0x50
 8008f32:	e007      	b.n	8008f44 <_tx_byte_pool_search+0x204>
 8008f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f36:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f383 8810 	msr	PRIMASK, r3
}
 8008f3e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8008f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	375c      	adds	r7, #92	; 0x5c
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	20000abc 	.word	0x20000abc
 8008f58:	ffffeeee 	.word	0xffffeeee

08008f5c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8008f60:	f000 fb18 	bl	8009594 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8008f64:	f000 ff20 	bl	8009da8 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8008f68:	4b12      	ldr	r3, [pc, #72]	; (8008fb4 <_tx_initialize_high_level+0x58>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	4b12      	ldr	r3, [pc, #72]	; (8008fb8 <_tx_initialize_high_level+0x5c>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8008f74:	4b11      	ldr	r3, [pc, #68]	; (8008fbc <_tx_initialize_high_level+0x60>)
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <_tx_initialize_high_level+0x64>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8008f80:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <_tx_initialize_high_level+0x68>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <_tx_initialize_high_level+0x6c>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8008f8c:	4b0f      	ldr	r3, [pc, #60]	; (8008fcc <_tx_initialize_high_level+0x70>)
 8008f8e:	2200      	movs	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	4b0f      	ldr	r3, [pc, #60]	; (8008fd0 <_tx_initialize_high_level+0x74>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8008f98:	4b0e      	ldr	r3, [pc, #56]	; (8008fd4 <_tx_initialize_high_level+0x78>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	4b0e      	ldr	r3, [pc, #56]	; (8008fd8 <_tx_initialize_high_level+0x7c>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8008fa4:	4b0d      	ldr	r3, [pc, #52]	; (8008fdc <_tx_initialize_high_level+0x80>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	4b0d      	ldr	r3, [pc, #52]	; (8008fe0 <_tx_initialize_high_level+0x84>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]
#endif
}
 8008fb0:	bf00      	nop
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20000a84 	.word	0x20000a84
 8008fb8:	20000a88 	.word	0x20000a88
 8008fbc:	20000a8c 	.word	0x20000a8c
 8008fc0:	20000a90 	.word	0x20000a90
 8008fc4:	20000a94 	.word	0x20000a94
 8008fc8:	20000a98 	.word	0x20000a98
 8008fcc:	20000aa4 	.word	0x20000aa4
 8008fd0:	20000aa8 	.word	0x20000aa8
 8008fd4:	20000aac 	.word	0x20000aac
 8008fd8:	20000ab0 	.word	0x20000ab0
 8008fdc:	20000a9c 	.word	0x20000a9c
 8008fe0:	20000aa0 	.word	0x20000aa0

08008fe4 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8008fe8:	4b10      	ldr	r3, [pc, #64]	; (800902c <_tx_initialize_kernel_enter+0x48>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8008ff0:	d00c      	beq.n	800900c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8008ff2:	4b0e      	ldr	r3, [pc, #56]	; (800902c <_tx_initialize_kernel_enter+0x48>)
 8008ff4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8008ff8:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8008ffa:	f7f7 f911 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8008ffe:	f7ff ffad 	bl	8008f5c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8009002:	4b0b      	ldr	r3, [pc, #44]	; (8009030 <_tx_initialize_kernel_enter+0x4c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3301      	adds	r3, #1
 8009008:	4a09      	ldr	r2, [pc, #36]	; (8009030 <_tx_initialize_kernel_enter+0x4c>)
 800900a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800900c:	4b07      	ldr	r3, [pc, #28]	; (800902c <_tx_initialize_kernel_enter+0x48>)
 800900e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8009012:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8009014:	4b07      	ldr	r3, [pc, #28]	; (8009034 <_tx_initialize_kernel_enter+0x50>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4618      	mov	r0, r3
 800901a:	f7f7 fd57 	bl	8000acc <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800901e:	4b03      	ldr	r3, [pc, #12]	; (800902c <_tx_initialize_kernel_enter+0x48>)
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8009024:	f7f7 f93c 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009028:	bf00      	nop
 800902a:	bd80      	pop	{r7, pc}
 800902c:	2000000c 	.word	0x2000000c
 8009030:	20000b54 	.word	0x20000b54
 8009034:	20000ab4 	.word	0x20000ab4

08009038 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08e      	sub	sp, #56	; 0x38
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009042:	f3ef 8310 	mrs	r3, PRIMASK
 8009046:	623b      	str	r3, [r7, #32]
    return(posture);
 8009048:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800904a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800904c:	b672      	cpsid	i
    return(int_posture);
 800904e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8009050:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009056:	4a33      	ldr	r2, [pc, #204]	; (8009124 <_tx_semaphore_cleanup+0xec>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d158      	bne.n	800910e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d152      	bne.n	800910e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800906c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	2b00      	cmp	r3, #0
 8009072:	d04c      	beq.n	800910e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a2b      	ldr	r2, [pc, #172]	; (8009128 <_tx_semaphore_cleanup+0xf0>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d147      	bne.n	800910e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d043      	beq.n	800910e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	1e5a      	subs	r2, r3, #1
 8009092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009094:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800909c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d103      	bne.n	80090aa <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	2200      	movs	r2, #0
 80090a6:	60da      	str	r2, [r3, #12]
 80090a8:	e013      	b.n	80090d2 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ae:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090b4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ba:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090c0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 80090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d102      	bne.n	80090d2 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090d0:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d6:	2b06      	cmp	r3, #6
 80090d8:	d119      	bne.n	800910e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	220d      	movs	r2, #13
 80090de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80090e2:	4b12      	ldr	r3, [pc, #72]	; (800912c <_tx_semaphore_cleanup+0xf4>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3301      	adds	r3, #1
 80090e8:	4a10      	ldr	r2, [pc, #64]	; (800912c <_tx_semaphore_cleanup+0xf4>)
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f383 8810 	msr	PRIMASK, r3
}
 80090f6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fb8d 	bl	8009818 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80090fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009102:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009104:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009106:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009108:	b672      	cpsid	i
    return(int_posture);
 800910a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800910c:	637b      	str	r3, [r7, #52]	; 0x34
 800910e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009110:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f383 8810 	msr	PRIMASK, r3
}
 8009118:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800911a:	bf00      	nop
 800911c:	3738      	adds	r7, #56	; 0x38
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	08009039 	.word	0x08009039
 8009128:	53454d41 	.word	0x53454d41
 800912c:	20000b54 	.word	0x20000b54

08009130 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08a      	sub	sp, #40	; 0x28
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800913c:	221c      	movs	r2, #28
 800913e:	2100      	movs	r1, #0
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f001 fb41 	bl	800a7c8 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009152:	f3ef 8310 	mrs	r3, PRIMASK
 8009156:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009158:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800915a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800915c:	b672      	cpsid	i
    return(int_posture);
 800915e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8009160:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	4a18      	ldr	r2, [pc, #96]	; (80091c8 <_tx_semaphore_create+0x98>)
 8009166:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8009168:	4b18      	ldr	r3, [pc, #96]	; (80091cc <_tx_semaphore_create+0x9c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d109      	bne.n	8009184 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8009170:	4a17      	ldr	r2, [pc, #92]	; (80091d0 <_tx_semaphore_create+0xa0>)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	619a      	str	r2, [r3, #24]
 8009182:	e011      	b.n	80091a8 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8009184:	4b12      	ldr	r3, [pc, #72]	; (80091d0 <_tx_semaphore_create+0xa0>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	69fa      	ldr	r2, [r7, #28]
 80091a0:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6a3a      	ldr	r2, [r7, #32]
 80091a6:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 80091a8:	4b08      	ldr	r3, [pc, #32]	; (80091cc <_tx_semaphore_create+0x9c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3301      	adds	r3, #1
 80091ae:	4a07      	ldr	r2, [pc, #28]	; (80091cc <_tx_semaphore_create+0x9c>)
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f383 8810 	msr	PRIMASK, r3
}
 80091bc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3728      	adds	r7, #40	; 0x28
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	53454d41 	.word	0x53454d41
 80091cc:	20000a88 	.word	0x20000a88
 80091d0:	20000a84 	.word	0x20000a84

080091d4 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b08e      	sub	sp, #56	; 0x38
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80091de:	2300      	movs	r3, #0
 80091e0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80091e2:	f3ef 8310 	mrs	r3, PRIMASK
 80091e6:	623b      	str	r3, [r7, #32]
    return(posture);
 80091e8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80091ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80091ec:	b672      	cpsid	i
    return(int_posture);
 80091ee:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 80091f0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00a      	beq.n	8009210 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	1e5a      	subs	r2, r3, #1
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	609a      	str	r2, [r3, #8]
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	f383 8810 	msr	PRIMASK, r3
}
 800920e:	e068      	b.n	80092e2 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d05d      	beq.n	80092d2 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009216:	4b35      	ldr	r3, [pc, #212]	; (80092ec <_tx_semaphore_get+0x118>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d008      	beq.n	8009230 <_tx_semaphore_get+0x5c>
 800921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009220:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f383 8810 	msr	PRIMASK, r3
}
 8009228:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800922a:	230d      	movs	r3, #13
 800922c:	637b      	str	r3, [r7, #52]	; 0x34
 800922e:	e058      	b.n	80092e2 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009230:	4b2f      	ldr	r3, [pc, #188]	; (80092f0 <_tx_semaphore_get+0x11c>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8009236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009238:	4a2e      	ldr	r2, [pc, #184]	; (80092f4 <_tx_semaphore_get+0x120>)
 800923a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8009242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009244:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009248:	1c5a      	adds	r2, r3, #1
 800924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d109      	bne.n	800926c <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800925c:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009262:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8009264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009268:	675a      	str	r2, [r3, #116]	; 0x74
 800926a:	e011      	b.n	8009290 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009276:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800927c:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800927e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009282:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009288:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800928e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	1c5a      	adds	r2, r3, #1
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	2206      	movs	r2, #6
 800929e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80092a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a2:	2201      	movs	r2, #1
 80092a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80092ac:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <_tx_semaphore_get+0x118>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3301      	adds	r3, #1
 80092b2:	4a0e      	ldr	r2, [pc, #56]	; (80092ec <_tx_semaphore_get+0x118>)
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f383 8810 	msr	PRIMASK, r3
}
 80092c0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80092c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092c4:	f000 fba8 	bl	8009a18 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80092c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
 80092d0:	e007      	b.n	80092e2 <_tx_semaphore_get+0x10e>
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f383 8810 	msr	PRIMASK, r3
}
 80092dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 80092de:	230d      	movs	r3, #13
 80092e0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 80092e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3738      	adds	r7, #56	; 0x38
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20000b54 	.word	0x20000b54
 80092f0:	20000abc 	.word	0x20000abc
 80092f4:	08009039 	.word	0x08009039

080092f8 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08c      	sub	sp, #48	; 0x30
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009300:	f3ef 8310 	mrs	r3, PRIMASK
 8009304:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009306:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009308:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800930a:	b672      	cpsid	i
    return(int_posture);
 800930c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800930e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10a      	bne.n	8009332 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	609a      	str	r2, [r3, #8]
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	f383 8810 	msr	PRIMASK, r3
}
 8009330:	e033      	b.n	800939a <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	3b01      	subs	r3, #1
 800933c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	2b00      	cmp	r3, #0
 8009342:	d103      	bne.n	800934c <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	60da      	str	r2, [r3, #12]
 800934a:	e00e      	b.n	800936a <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009350:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a3a      	ldr	r2, [r7, #32]
 8009356:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800935c:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	69fa      	ldr	r2, [r7, #28]
 8009362:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	6a3a      	ldr	r2, [r7, #32]
 8009368:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800936e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	2200      	movs	r2, #0
 8009374:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	2200      	movs	r2, #0
 800937a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800937e:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <_tx_semaphore_put+0xac>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3301      	adds	r3, #1
 8009384:	4a07      	ldr	r2, [pc, #28]	; (80093a4 <_tx_semaphore_put+0xac>)
 8009386:	6013      	str	r3, [r2, #0]
 8009388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f383 8810 	msr	PRIMASK, r3
}
 8009392:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009396:	f000 fa3f 	bl	8009818 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3730      	adds	r7, #48	; 0x30
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20000b54 	.word	0x20000b54

080093a8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b092      	sub	sp, #72	; 0x48
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80093b6:	2300      	movs	r3, #0
 80093b8:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80093ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093bc:	21ef      	movs	r1, #239	; 0xef
 80093be:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80093c0:	f001 fa02 	bl	800a7c8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80093c4:	22b0      	movs	r2, #176	; 0xb0
 80093c6:	2100      	movs	r1, #0
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f001 f9fd 	bl	800a7c8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093e4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093ea:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093f0:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093fe:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009404:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800940e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009410:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8009412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009414:	3b01      	subs	r3, #1
 8009416:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009418:	4413      	add	r3, r2
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009420:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8009422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009426:	429a      	cmp	r2, r3
 8009428:	d007      	beq.n	800943a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8009438:	e006      	b.n	8009448 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800943e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009444:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2203      	movs	r2, #3
 800944c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4a48      	ldr	r2, [pc, #288]	; (8009574 <_tx_thread_create+0x1cc>)
 8009452:	655a      	str	r2, [r3, #84]	; 0x54
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800945a:	4947      	ldr	r1, [pc, #284]	; (8009578 <_tx_thread_create+0x1d0>)
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f7f6 ff7f 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009462:	f3ef 8310 	mrs	r3, PRIMASK
 8009466:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8009468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800946a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800946c:	b672      	cpsid	i
    return(int_posture);
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8009470:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	4a41      	ldr	r2, [pc, #260]	; (800957c <_tx_thread_create+0x1d4>)
 8009476:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8009478:	4b41      	ldr	r3, [pc, #260]	; (8009580 <_tx_thread_create+0x1d8>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10b      	bne.n	8009498 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8009480:	4a40      	ldr	r2, [pc, #256]	; (8009584 <_tx_thread_create+0x1dc>)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8009496:	e016      	b.n	80094c6 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8009498:	4b3a      	ldr	r3, [pc, #232]	; (8009584 <_tx_thread_create+0x1dc>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800949e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094a4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80094a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80094c6:	4b2e      	ldr	r3, [pc, #184]	; (8009580 <_tx_thread_create+0x1d8>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	4a2c      	ldr	r2, [pc, #176]	; (8009580 <_tx_thread_create+0x1d8>)
 80094ce:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80094d0:	4b2d      	ldr	r3, [pc, #180]	; (8009588 <_tx_thread_create+0x1e0>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	4a2c      	ldr	r2, [pc, #176]	; (8009588 <_tx_thread_create+0x1e0>)
 80094d8:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80094da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d129      	bne.n	8009534 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80094e0:	f3ef 8305 	mrs	r3, IPSR
 80094e4:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80094e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80094e8:	4b28      	ldr	r3, [pc, #160]	; (800958c <_tx_thread_create+0x1e4>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80094f2:	d30d      	bcc.n	8009510 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80094f4:	4b26      	ldr	r3, [pc, #152]	; (8009590 <_tx_thread_create+0x1e8>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80094fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d009      	beq.n	8009514 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8009500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009504:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8009506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800950c:	63da      	str	r2, [r3, #60]	; 0x3c
 800950e:	e001      	b.n	8009514 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8009510:	2300      	movs	r3, #0
 8009512:	647b      	str	r3, [r7, #68]	; 0x44
 8009514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009516:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	f383 8810 	msr	PRIMASK, r3
}
 800951e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 f979 	bl	8009818 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8009526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01e      	beq.n	800956a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800952c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800952e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009530:	63da      	str	r2, [r3, #60]	; 0x3c
 8009532:	e01a      	b.n	800956a <_tx_thread_create+0x1c2>
 8009534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009536:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f383 8810 	msr	PRIMASK, r3
}
 800953e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009540:	f3ef 8310 	mrs	r3, PRIMASK
 8009544:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009546:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009548:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800954a:	b672      	cpsid	i
    return(int_posture);
 800954c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800954e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8009550:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <_tx_thread_create+0x1e0>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3b01      	subs	r3, #1
 8009556:	4a0c      	ldr	r2, [pc, #48]	; (8009588 <_tx_thread_create+0x1e0>)
 8009558:	6013      	str	r3, [r2, #0]
 800955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	f383 8810 	msr	PRIMASK, r3
}
 8009564:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009566:	f000 f91d 	bl	80097a4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3748      	adds	r7, #72	; 0x48
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	08009ced 	.word	0x08009ced
 8009578:	0800960d 	.word	0x0800960d
 800957c:	54485244 	.word	0x54485244
 8009580:	20000ac8 	.word	0x20000ac8
 8009584:	20000ac4 	.word	0x20000ac4
 8009588:	20000b54 	.word	0x20000b54
 800958c:	2000000c 	.word	0x2000000c
 8009590:	20000ac0 	.word	0x20000ac0

08009594 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8009598:	4b12      	ldr	r3, [pc, #72]	; (80095e4 <_tx_thread_initialize+0x50>)
 800959a:	2200      	movs	r2, #0
 800959c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800959e:	4b12      	ldr	r3, [pc, #72]	; (80095e8 <_tx_thread_initialize+0x54>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	4b11      	ldr	r3, [pc, #68]	; (80095ec <_tx_thread_initialize+0x58>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80095aa:	4b11      	ldr	r3, [pc, #68]	; (80095f0 <_tx_thread_initialize+0x5c>)
 80095ac:	2220      	movs	r2, #32
 80095ae:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80095b0:	2280      	movs	r2, #128	; 0x80
 80095b2:	2100      	movs	r1, #0
 80095b4:	480f      	ldr	r0, [pc, #60]	; (80095f4 <_tx_thread_initialize+0x60>)
 80095b6:	f001 f907 	bl	800a7c8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80095ba:	4b0f      	ldr	r3, [pc, #60]	; (80095f8 <_tx_thread_initialize+0x64>)
 80095bc:	2200      	movs	r2, #0
 80095be:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80095c0:	4b0e      	ldr	r3, [pc, #56]	; (80095fc <_tx_thread_initialize+0x68>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80095c6:	4b0e      	ldr	r3, [pc, #56]	; (8009600 <_tx_thread_initialize+0x6c>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80095cc:	4b0d      	ldr	r3, [pc, #52]	; (8009604 <_tx_thread_initialize+0x70>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80095d2:	4b0d      	ldr	r3, [pc, #52]	; (8009608 <_tx_thread_initialize+0x74>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80095da:	4a0b      	ldr	r2, [pc, #44]	; (8009608 <_tx_thread_initialize+0x74>)
 80095dc:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80095de:	bf00      	nop
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20000abc 	.word	0x20000abc
 80095e8:	20000ac0 	.word	0x20000ac0
 80095ec:	20000acc 	.word	0x20000acc
 80095f0:	20000ad0 	.word	0x20000ad0
 80095f4:	20000ad4 	.word	0x20000ad4
 80095f8:	20000ac4 	.word	0x20000ac4
 80095fc:	20000ac8 	.word	0x20000ac8
 8009600:	20000b54 	.word	0x20000b54
 8009604:	20000b58 	.word	0x20000b58
 8009608:	20000b5c 	.word	0x20000b5c

0800960c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b088      	sub	sp, #32
 8009610:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009612:	4b21      	ldr	r3, [pc, #132]	; (8009698 <_tx_thread_shell_entry+0x8c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961c:	69fa      	ldr	r2, [r7, #28]
 800961e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009620:	4610      	mov	r0, r2
 8009622:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8009624:	4b1d      	ldr	r3, [pc, #116]	; (800969c <_tx_thread_shell_entry+0x90>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800962c:	4b1b      	ldr	r3, [pc, #108]	; (800969c <_tx_thread_shell_entry+0x90>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	69f8      	ldr	r0, [r7, #28]
 8009632:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009634:	f3ef 8310 	mrs	r3, PRIMASK
 8009638:	607b      	str	r3, [r7, #4]
    return(posture);
 800963a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800963c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800963e:	b672      	cpsid	i
    return(int_posture);
 8009640:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8009642:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	2201      	movs	r2, #1
 8009648:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	2201      	movs	r2, #1
 800964e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	2200      	movs	r2, #0
 8009654:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009656:	4b12      	ldr	r3, [pc, #72]	; (80096a0 <_tx_thread_shell_entry+0x94>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	3301      	adds	r3, #1
 800965c:	4a10      	ldr	r2, [pc, #64]	; (80096a0 <_tx_thread_shell_entry+0x94>)
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f383 8810 	msr	PRIMASK, r3
}
 800966a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800966c:	f3ef 8314 	mrs	r3, CONTROL
 8009670:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8009672:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8009674:	617b      	str	r3, [r7, #20]
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f023 0304 	bic.w	r3, r3, #4
 800967c:	617b      	str	r3, [r7, #20]
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f383 8814 	msr	CONTROL, r3
}
 8009688:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800968a:	69f8      	ldr	r0, [r7, #28]
 800968c:	f000 f9c4 	bl	8009a18 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8009690:	bf00      	nop
 8009692:	3720      	adds	r7, #32
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20000abc 	.word	0x20000abc
 800969c:	20000b58 	.word	0x20000b58
 80096a0:	20000b54 	.word	0x20000b54

080096a4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08e      	sub	sp, #56	; 0x38
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096ac:	f3ef 8310 	mrs	r3, PRIMASK
 80096b0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80096b4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80096b6:	b672      	cpsid	i
    return(int_posture);
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80096ba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80096bc:	4b35      	ldr	r3, [pc, #212]	; (8009794 <_tx_thread_sleep+0xf0>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80096c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d108      	bne.n	80096da <_tx_thread_sleep+0x36>
 80096c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ca:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	f383 8810 	msr	PRIMASK, r3
}
 80096d2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80096d4:	2313      	movs	r3, #19
 80096d6:	637b      	str	r3, [r7, #52]	; 0x34
 80096d8:	e056      	b.n	8009788 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80096da:	f3ef 8305 	mrs	r3, IPSR
 80096de:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80096e0:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80096e2:	4b2d      	ldr	r3, [pc, #180]	; (8009798 <_tx_thread_sleep+0xf4>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d008      	beq.n	80096fe <_tx_thread_sleep+0x5a>
 80096ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	f383 8810 	msr	PRIMASK, r3
}
 80096f6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80096f8:	2313      	movs	r3, #19
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34
 80096fc:	e044      	b.n	8009788 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80096fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009700:	4a26      	ldr	r2, [pc, #152]	; (800979c <_tx_thread_sleep+0xf8>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d108      	bne.n	8009718 <_tx_thread_sleep+0x74>
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f383 8810 	msr	PRIMASK, r3
}
 8009710:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009712:	2313      	movs	r3, #19
 8009714:	637b      	str	r3, [r7, #52]	; 0x34
 8009716:	e037      	b.n	8009788 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d108      	bne.n	8009730 <_tx_thread_sleep+0x8c>
 800971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009720:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	f383 8810 	msr	PRIMASK, r3
}
 8009728:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800972a:	2300      	movs	r3, #0
 800972c:	637b      	str	r3, [r7, #52]	; 0x34
 800972e:	e02b      	b.n	8009788 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009730:	4b1b      	ldr	r3, [pc, #108]	; (80097a0 <_tx_thread_sleep+0xfc>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d008      	beq.n	800974a <_tx_thread_sleep+0xa6>
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f383 8810 	msr	PRIMASK, r3
}
 8009742:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8009744:	2313      	movs	r3, #19
 8009746:	637b      	str	r3, [r7, #52]	; 0x34
 8009748:	e01e      	b.n	8009788 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974c:	2204      	movs	r2, #4
 800974e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009752:	2201      	movs	r2, #1
 8009754:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009758:	2200      	movs	r2, #0
 800975a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009764:	4b0e      	ldr	r3, [pc, #56]	; (80097a0 <_tx_thread_sleep+0xfc>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3301      	adds	r3, #1
 800976a:	4a0d      	ldr	r2, [pc, #52]	; (80097a0 <_tx_thread_sleep+0xfc>)
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f383 8810 	msr	PRIMASK, r3
}
 8009778:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800977a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800977c:	f000 f94c 	bl	8009a18 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009786:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8009788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800978a:	4618      	mov	r0, r3
 800978c:	3738      	adds	r7, #56	; 0x38
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20000abc 	.word	0x20000abc
 8009798:	2000000c 	.word	0x2000000c
 800979c:	20000c04 	.word	0x20000c04
 80097a0:	20000b54 	.word	0x20000b54

080097a4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b089      	sub	sp, #36	; 0x24
 80097a8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80097aa:	4b17      	ldr	r3, [pc, #92]	; (8009808 <_tx_thread_system_preempt_check+0x64>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d121      	bne.n	80097fa <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80097b6:	4b15      	ldr	r3, [pc, #84]	; (800980c <_tx_thread_system_preempt_check+0x68>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80097bc:	4b14      	ldr	r3, [pc, #80]	; (8009810 <_tx_thread_system_preempt_check+0x6c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d017      	beq.n	80097fa <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80097ca:	4b12      	ldr	r3, [pc, #72]	; (8009814 <_tx_thread_system_preempt_check+0x70>)
 80097cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80097d2:	f3ef 8305 	mrs	r3, IPSR
 80097d6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80097d8:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10c      	bne.n	80097f8 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80097de:	f3ef 8310 	mrs	r3, PRIMASK
 80097e2:	60fb      	str	r3, [r7, #12]
    return(posture);
 80097e4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80097e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80097e8:	b662      	cpsie	i
}
 80097ea:	bf00      	nop
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f383 8810 	msr	PRIMASK, r3
}
 80097f6:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80097f8:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80097fa:	bf00      	nop
 80097fc:	3724      	adds	r7, #36	; 0x24
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	20000b54 	.word	0x20000b54
 800980c:	20000abc 	.word	0x20000abc
 8009810:	20000ac0 	.word	0x20000ac0
 8009814:	e000ed04 	.word	0xe000ed04

08009818 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b096      	sub	sp, #88	; 0x58
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009820:	f3ef 8310 	mrs	r3, PRIMASK
 8009824:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8009826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8009828:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800982a:	b672      	cpsid	i
    return(int_posture);
 800982c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800982e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009834:	2b00      	cmp	r3, #0
 8009836:	d005      	beq.n	8009844 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	334c      	adds	r3, #76	; 0x4c
 800983c:	4618      	mov	r0, r3
 800983e:	f000 fb91 	bl	8009f64 <_tx_timer_system_deactivate>
 8009842:	e002      	b.n	800984a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800984a:	4b6c      	ldr	r3, [pc, #432]	; (80099fc <_tx_thread_system_resume+0x1e4>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3b01      	subs	r3, #1
 8009850:	4a6a      	ldr	r2, [pc, #424]	; (80099fc <_tx_thread_system_resume+0x1e4>)
 8009852:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	2b00      	cmp	r3, #0
 800985a:	f040 8083 	bne.w	8009964 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 8097 	beq.w	8009996 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800986c:	2b00      	cmp	r3, #0
 800986e:	d172      	bne.n	8009956 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800987c:	4a60      	ldr	r2, [pc, #384]	; (8009a00 <_tx_thread_system_resume+0x1e8>)
 800987e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009884:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8009886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009888:	2b00      	cmp	r3, #0
 800988a:	d154      	bne.n	8009936 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800988c:	495c      	ldr	r1, [pc, #368]	; (8009a00 <_tx_thread_system_resume+0x1e8>)
 800988e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80098a2:	2201      	movs	r2, #1
 80098a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098a6:	fa02 f303 	lsl.w	r3, r2, r3
 80098aa:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80098ac:	4b55      	ldr	r3, [pc, #340]	; (8009a04 <_tx_thread_system_resume+0x1ec>)
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098b2:	4313      	orrs	r3, r2
 80098b4:	4a53      	ldr	r2, [pc, #332]	; (8009a04 <_tx_thread_system_resume+0x1ec>)
 80098b6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80098b8:	4b53      	ldr	r3, [pc, #332]	; (8009a08 <_tx_thread_system_resume+0x1f0>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098be:	429a      	cmp	r2, r3
 80098c0:	d269      	bcs.n	8009996 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80098c2:	4a51      	ldr	r2, [pc, #324]	; (8009a08 <_tx_thread_system_resume+0x1f0>)
 80098c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80098c8:	4b50      	ldr	r3, [pc, #320]	; (8009a0c <_tx_thread_system_resume+0x1f4>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80098ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d103      	bne.n	80098dc <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80098d4:	4a4d      	ldr	r2, [pc, #308]	; (8009a0c <_tx_thread_system_resume+0x1f4>)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	e05c      	b.n	8009996 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80098dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d257      	bcs.n	8009996 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80098e6:	4a49      	ldr	r2, [pc, #292]	; (8009a0c <_tx_thread_system_resume+0x1f4>)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	f383 8810 	msr	PRIMASK, r3
}
 80098f6:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80098f8:	4b40      	ldr	r3, [pc, #256]	; (80099fc <_tx_thread_system_resume+0x1e4>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80098fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009900:	2b00      	cmp	r3, #0
 8009902:	d174      	bne.n	80099ee <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009904:	4b42      	ldr	r3, [pc, #264]	; (8009a10 <_tx_thread_system_resume+0x1f8>)
 8009906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800990a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800990c:	f3ef 8305 	mrs	r3, IPSR
 8009910:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10c      	bne.n	8009932 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009918:	f3ef 8310 	mrs	r3, PRIMASK
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8009920:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009922:	b662      	cpsie	i
}
 8009924:	bf00      	nop
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	f383 8810 	msr	PRIMASK, r3
}
 8009930:	bf00      	nop
}
 8009932:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8009934:	e05b      	b.n	80099ee <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8009936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993a:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800993c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8009942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800994c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009952:	621a      	str	r2, [r3, #32]
 8009954:	e01f      	b.n	8009996 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2203      	movs	r2, #3
 8009960:	631a      	str	r2, [r3, #48]	; 0x30
 8009962:	e018      	b.n	8009996 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009968:	2b01      	cmp	r3, #1
 800996a:	d014      	beq.n	8009996 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009970:	2b02      	cmp	r3, #2
 8009972:	d010      	beq.n	8009996 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009978:	2b00      	cmp	r3, #0
 800997a:	d106      	bne.n	800998a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	631a      	str	r2, [r3, #48]	; 0x30
 8009988:	e005      	b.n	8009996 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2203      	movs	r2, #3
 8009994:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009996:	4b1f      	ldr	r3, [pc, #124]	; (8009a14 <_tx_thread_system_resume+0x1fc>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	63bb      	str	r3, [r7, #56]	; 0x38
 800999c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800999e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	f383 8810 	msr	PRIMASK, r3
}
 80099a6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80099a8:	4b18      	ldr	r3, [pc, #96]	; (8009a0c <_tx_thread_system_resume+0x1f4>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d020      	beq.n	80099f4 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80099b2:	4b12      	ldr	r3, [pc, #72]	; (80099fc <_tx_thread_system_resume+0x1e4>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80099b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d11a      	bne.n	80099f4 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80099be:	4b14      	ldr	r3, [pc, #80]	; (8009a10 <_tx_thread_system_resume+0x1f8>)
 80099c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099c6:	f3ef 8305 	mrs	r3, IPSR
 80099ca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80099cc:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10f      	bne.n	80099f2 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80099d2:	f3ef 8310 	mrs	r3, PRIMASK
 80099d6:	613b      	str	r3, [r7, #16]
    return(posture);
 80099d8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80099da:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80099dc:	b662      	cpsie	i
}
 80099de:	bf00      	nop
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f383 8810 	msr	PRIMASK, r3
}
 80099ea:	bf00      	nop
}
 80099ec:	e001      	b.n	80099f2 <_tx_thread_system_resume+0x1da>
                                return;
 80099ee:	bf00      	nop
 80099f0:	e000      	b.n	80099f4 <_tx_thread_system_resume+0x1dc>
 80099f2:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80099f4:	3758      	adds	r7, #88	; 0x58
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	20000b54 	.word	0x20000b54
 8009a00:	20000ad4 	.word	0x20000ad4
 8009a04:	20000acc 	.word	0x20000acc
 8009a08:	20000ad0 	.word	0x20000ad0
 8009a0c:	20000ac0 	.word	0x20000ac0
 8009a10:	e000ed04 	.word	0xe000ed04
 8009a14:	20000abc 	.word	0x20000abc

08009a18 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b09e      	sub	sp, #120	; 0x78
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009a20:	4b81      	ldr	r3, [pc, #516]	; (8009c28 <_tx_thread_system_suspend+0x210>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a26:	f3ef 8310 	mrs	r3, PRIMASK
 8009a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8009a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8009a2e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a30:	b672      	cpsid	i
    return(int_posture);
 8009a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8009a34:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d112      	bne.n	8009a64 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a42:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8009a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d008      	beq.n	8009a5c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8009a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a50:	d004      	beq.n	8009a5c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	334c      	adds	r3, #76	; 0x4c
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fa22 	bl	8009ea0 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	4a72      	ldr	r2, [pc, #456]	; (8009c2c <_tx_thread_system_suspend+0x214>)
 8009a62:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8009a64:	4b72      	ldr	r3, [pc, #456]	; (8009c30 <_tx_thread_system_suspend+0x218>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	4a71      	ldr	r2, [pc, #452]	; (8009c30 <_tx_thread_system_suspend+0x218>)
 8009a6c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	f040 80a6 	bne.w	8009bc4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a82:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a1b      	ldr	r3, [r3, #32]
 8009a88:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8009a8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d015      	beq.n	8009abe <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a96:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8009a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a9c:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8009a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aa0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009aa2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8009aa4:	4a63      	ldr	r2, [pc, #396]	; (8009c34 <_tx_thread_system_suspend+0x21c>)
 8009aa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d157      	bne.n	8009b62 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8009ab2:	4960      	ldr	r1, [pc, #384]	; (8009c34 <_tx_thread_system_suspend+0x21c>)
 8009ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ab6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009abc:	e051      	b.n	8009b62 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8009abe:	4a5d      	ldr	r2, [pc, #372]	; (8009c34 <_tx_thread_system_suspend+0x21c>)
 8009ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8009ac8:	2201      	movs	r2, #1
 8009aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009acc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad0:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8009ad2:	4b59      	ldr	r3, [pc, #356]	; (8009c38 <_tx_thread_system_suspend+0x220>)
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ad8:	43db      	mvns	r3, r3
 8009ada:	4013      	ands	r3, r2
 8009adc:	4a56      	ldr	r2, [pc, #344]	; (8009c38 <_tx_thread_system_suspend+0x220>)
 8009ade:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8009ae4:	4b54      	ldr	r3, [pc, #336]	; (8009c38 <_tx_thread_system_suspend+0x220>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8009aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d12b      	bne.n	8009b48 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009af0:	4b52      	ldr	r3, [pc, #328]	; (8009c3c <_tx_thread_system_suspend+0x224>)
 8009af2:	2220      	movs	r2, #32
 8009af4:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8009af6:	4b52      	ldr	r3, [pc, #328]	; (8009c40 <_tx_thread_system_suspend+0x228>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009afe:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b02:	f383 8810 	msr	PRIMASK, r3
}
 8009b06:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009b08:	4b49      	ldr	r3, [pc, #292]	; (8009c30 <_tx_thread_system_suspend+0x218>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8009b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f040 8081 	bne.w	8009c18 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009b16:	4b4b      	ldr	r3, [pc, #300]	; (8009c44 <_tx_thread_system_suspend+0x22c>)
 8009b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b1c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009b1e:	f3ef 8305 	mrs	r3, IPSR
 8009b22:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8009b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10c      	bne.n	8009b44 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8009b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8009b32:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009b34:	b662      	cpsie	i
}
 8009b36:	bf00      	nop
 8009b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3e:	f383 8810 	msr	PRIMASK, r3
}
 8009b42:	bf00      	nop
}
 8009b44:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8009b46:	e067      	b.n	8009c18 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8009b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b4a:	fa93 f3a3 	rbit	r3, r3
 8009b4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b52:	fab3 f383 	clz	r3, r3
 8009b56:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8009b58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b5c:	4413      	add	r3, r2
 8009b5e:	4a37      	ldr	r2, [pc, #220]	; (8009c3c <_tx_thread_system_suspend+0x224>)
 8009b60:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8009b62:	4b37      	ldr	r3, [pc, #220]	; (8009c40 <_tx_thread_system_suspend+0x228>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d12b      	bne.n	8009bc4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8009b6c:	4b33      	ldr	r3, [pc, #204]	; (8009c3c <_tx_thread_system_suspend+0x224>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a30      	ldr	r2, [pc, #192]	; (8009c34 <_tx_thread_system_suspend+0x21c>)
 8009b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b76:	4a32      	ldr	r2, [pc, #200]	; (8009c40 <_tx_thread_system_suspend+0x228>)
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b7c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	f383 8810 	msr	PRIMASK, r3
}
 8009b84:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009b86:	4b2a      	ldr	r3, [pc, #168]	; (8009c30 <_tx_thread_system_suspend+0x218>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8009b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d144      	bne.n	8009c1c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009b92:	4b2c      	ldr	r3, [pc, #176]	; (8009c44 <_tx_thread_system_suspend+0x22c>)
 8009b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b98:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009b9a:	f3ef 8305 	mrs	r3, IPSR
 8009b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8009ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10c      	bne.n	8009bc0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8009baa:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8009bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009bb0:	b662      	cpsie	i
}
 8009bb2:	bf00      	nop
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	f383 8810 	msr	PRIMASK, r3
}
 8009bbe:	bf00      	nop
}
 8009bc0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8009bc2:	e02b      	b.n	8009c1c <_tx_thread_system_suspend+0x204>
 8009bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bc6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	f383 8810 	msr	PRIMASK, r3
}
 8009bce:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8009bd0:	4b1b      	ldr	r3, [pc, #108]	; (8009c40 <_tx_thread_system_suspend+0x228>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d022      	beq.n	8009c20 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009bda:	4b15      	ldr	r3, [pc, #84]	; (8009c30 <_tx_thread_system_suspend+0x218>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8009be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d11c      	bne.n	8009c20 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009be6:	4b17      	ldr	r3, [pc, #92]	; (8009c44 <_tx_thread_system_suspend+0x22c>)
 8009be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bec:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009bee:	f3ef 8305 	mrs	r3, IPSR
 8009bf2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009bf4:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10c      	bne.n	8009c14 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8009bfe:	617b      	str	r3, [r7, #20]
    return(posture);
 8009c00:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8009c02:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009c04:	b662      	cpsie	i
}
 8009c06:	bf00      	nop
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f383 8810 	msr	PRIMASK, r3
}
 8009c12:	bf00      	nop
}
 8009c14:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8009c16:	e003      	b.n	8009c20 <_tx_thread_system_suspend+0x208>
                return;
 8009c18:	bf00      	nop
 8009c1a:	e002      	b.n	8009c22 <_tx_thread_system_suspend+0x20a>
            return;
 8009c1c:	bf00      	nop
 8009c1e:	e000      	b.n	8009c22 <_tx_thread_system_suspend+0x20a>
    return;
 8009c20:	bf00      	nop
}
 8009c22:	3778      	adds	r7, #120	; 0x78
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	20000abc 	.word	0x20000abc
 8009c2c:	200010c0 	.word	0x200010c0
 8009c30:	20000b54 	.word	0x20000b54
 8009c34:	20000ad4 	.word	0x20000ad4
 8009c38:	20000acc 	.word	0x20000acc
 8009c3c:	20000ad0 	.word	0x20000ad0
 8009c40:	20000ac0 	.word	0x20000ac0
 8009c44:	e000ed04 	.word	0xe000ed04

08009c48 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b087      	sub	sp, #28
 8009c4c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009c4e:	4b21      	ldr	r3, [pc, #132]	; (8009cd4 <_tx_thread_time_slice+0x8c>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009c54:	f3ef 8310 	mrs	r3, PRIMASK
 8009c58:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009c5c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009c5e:	b672      	cpsid	i
    return(int_posture);
 8009c60:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8009c62:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009c64:	4b1c      	ldr	r3, [pc, #112]	; (8009cd8 <_tx_thread_time_slice+0x90>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d024      	beq.n	8009cba <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d120      	bne.n	8009cba <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	69da      	ldr	r2, [r3, #28]
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	4a15      	ldr	r2, [pc, #84]	; (8009cdc <_tx_thread_time_slice+0x94>)
 8009c86:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d013      	beq.n	8009cba <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d10d      	bne.n	8009cba <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	6a12      	ldr	r2, [r2, #32]
 8009ca6:	490e      	ldr	r1, [pc, #56]	; (8009ce0 <_tx_thread_time_slice+0x98>)
 8009ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8009cac:	4b0d      	ldr	r3, [pc, #52]	; (8009ce4 <_tx_thread_time_slice+0x9c>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a0b      	ldr	r2, [pc, #44]	; (8009ce0 <_tx_thread_time_slice+0x98>)
 8009cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cb6:	4a0c      	ldr	r2, [pc, #48]	; (8009ce8 <_tx_thread_time_slice+0xa0>)
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f383 8810 	msr	PRIMASK, r3
}
 8009cc4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8009cc6:	bf00      	nop
 8009cc8:	371c      	adds	r7, #28
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	20000abc 	.word	0x20000abc
 8009cd8:	20000b64 	.word	0x20000b64
 8009cdc:	200010c0 	.word	0x200010c0
 8009ce0:	20000ad4 	.word	0x20000ad4
 8009ce4:	20000ad0 	.word	0x20000ad0
 8009ce8:	20000ac0 	.word	0x20000ac0

08009cec <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08a      	sub	sp, #40	; 0x28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8009cfc:	617b      	str	r3, [r7, #20]
    return(posture);
 8009cfe:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009d00:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009d02:	b672      	cpsid	i
    return(int_posture);
 8009d04:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8009d06:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	d10e      	bne.n	8009d2e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8009d10:	4b13      	ldr	r3, [pc, #76]	; (8009d60 <_tx_thread_timeout+0x74>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3301      	adds	r3, #1
 8009d16:	4a12      	ldr	r2, [pc, #72]	; (8009d60 <_tx_thread_timeout+0x74>)
 8009d18:	6013      	str	r3, [r2, #0]
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f383 8810 	msr	PRIMASK, r3
}
 8009d24:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009d26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d28:	f7ff fd76 	bl	8009818 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8009d2c:	e013      	b.n	8009d56 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d32:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d3a:	61bb      	str	r3, [r7, #24]
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f383 8810 	msr	PRIMASK, r3
}
 8009d46:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	69b9      	ldr	r1, [r7, #24]
 8009d52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d54:	4798      	blx	r3
}
 8009d56:	bf00      	nop
 8009d58:	3728      	adds	r7, #40	; 0x28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	20000b54 	.word	0x20000b54

08009d64 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d6e:	607b      	str	r3, [r7, #4]
    return(posture);
 8009d70:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8009d72:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009d74:	b672      	cpsid	i
    return(int_posture);
 8009d76:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8009d78:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8009d7a:	4b09      	ldr	r3, [pc, #36]	; (8009da0 <_tx_timer_expiration_process+0x3c>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	4a07      	ldr	r2, [pc, #28]	; (8009da0 <_tx_timer_expiration_process+0x3c>)
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f383 8810 	msr	PRIMASK, r3
}
 8009d8e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8009d90:	4804      	ldr	r0, [pc, #16]	; (8009da4 <_tx_timer_expiration_process+0x40>)
 8009d92:	f7ff fd41 	bl	8009818 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009d96:	bf00      	nop
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20000b54 	.word	0x20000b54
 8009da4:	20000c04 	.word	0x20000c04

08009da8 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8009da8:	b590      	push	{r4, r7, lr}
 8009daa:	b089      	sub	sp, #36	; 0x24
 8009dac:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8009dae:	4b28      	ldr	r3, [pc, #160]	; (8009e50 <_tx_timer_initialize+0xa8>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8009db4:	4b27      	ldr	r3, [pc, #156]	; (8009e54 <_tx_timer_initialize+0xac>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009dba:	4b27      	ldr	r3, [pc, #156]	; (8009e58 <_tx_timer_initialize+0xb0>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8009dc0:	4b26      	ldr	r3, [pc, #152]	; (8009e5c <_tx_timer_initialize+0xb4>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8009dc6:	4b26      	ldr	r3, [pc, #152]	; (8009e60 <_tx_timer_initialize+0xb8>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8009dcc:	2280      	movs	r2, #128	; 0x80
 8009dce:	2100      	movs	r1, #0
 8009dd0:	4824      	ldr	r0, [pc, #144]	; (8009e64 <_tx_timer_initialize+0xbc>)
 8009dd2:	f000 fcf9 	bl	800a7c8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8009dd6:	4b24      	ldr	r3, [pc, #144]	; (8009e68 <_tx_timer_initialize+0xc0>)
 8009dd8:	4a22      	ldr	r2, [pc, #136]	; (8009e64 <_tx_timer_initialize+0xbc>)
 8009dda:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8009ddc:	4b23      	ldr	r3, [pc, #140]	; (8009e6c <_tx_timer_initialize+0xc4>)
 8009dde:	4a21      	ldr	r2, [pc, #132]	; (8009e64 <_tx_timer_initialize+0xbc>)
 8009de0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8009de2:	4b23      	ldr	r3, [pc, #140]	; (8009e70 <_tx_timer_initialize+0xc8>)
 8009de4:	4a23      	ldr	r2, [pc, #140]	; (8009e74 <_tx_timer_initialize+0xcc>)
 8009de6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8009de8:	4b21      	ldr	r3, [pc, #132]	; (8009e70 <_tx_timer_initialize+0xc8>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3304      	adds	r3, #4
 8009dee:	4a20      	ldr	r2, [pc, #128]	; (8009e70 <_tx_timer_initialize+0xc8>)
 8009df0:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8009df2:	4b21      	ldr	r3, [pc, #132]	; (8009e78 <_tx_timer_initialize+0xd0>)
 8009df4:	4a21      	ldr	r2, [pc, #132]	; (8009e7c <_tx_timer_initialize+0xd4>)
 8009df6:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8009df8:	4b21      	ldr	r3, [pc, #132]	; (8009e80 <_tx_timer_initialize+0xd8>)
 8009dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009dfe:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8009e00:	4b20      	ldr	r3, [pc, #128]	; (8009e84 <_tx_timer_initialize+0xdc>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8009e06:	4b1c      	ldr	r3, [pc, #112]	; (8009e78 <_tx_timer_initialize+0xd0>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a1d      	ldr	r2, [pc, #116]	; (8009e80 <_tx_timer_initialize+0xd8>)
 8009e0c:	6812      	ldr	r2, [r2, #0]
 8009e0e:	491d      	ldr	r1, [pc, #116]	; (8009e84 <_tx_timer_initialize+0xdc>)
 8009e10:	6809      	ldr	r1, [r1, #0]
 8009e12:	481c      	ldr	r0, [pc, #112]	; (8009e84 <_tx_timer_initialize+0xdc>)
 8009e14:	6800      	ldr	r0, [r0, #0]
 8009e16:	2400      	movs	r4, #0
 8009e18:	9405      	str	r4, [sp, #20]
 8009e1a:	2400      	movs	r4, #0
 8009e1c:	9404      	str	r4, [sp, #16]
 8009e1e:	9003      	str	r0, [sp, #12]
 8009e20:	9102      	str	r1, [sp, #8]
 8009e22:	9201      	str	r2, [sp, #4]
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	4b18      	ldr	r3, [pc, #96]	; (8009e88 <_tx_timer_initialize+0xe0>)
 8009e28:	4a18      	ldr	r2, [pc, #96]	; (8009e8c <_tx_timer_initialize+0xe4>)
 8009e2a:	4919      	ldr	r1, [pc, #100]	; (8009e90 <_tx_timer_initialize+0xe8>)
 8009e2c:	4819      	ldr	r0, [pc, #100]	; (8009e94 <_tx_timer_initialize+0xec>)
 8009e2e:	f7ff fabb 	bl	80093a8 <_tx_thread_create>
 8009e32:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e5      	bne.n	8009e06 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8009e3a:	4b17      	ldr	r3, [pc, #92]	; (8009e98 <_tx_timer_initialize+0xf0>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8009e40:	4b16      	ldr	r3, [pc, #88]	; (8009e9c <_tx_timer_initialize+0xf4>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8009e46:	bf00      	nop
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd90      	pop	{r4, r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	20000b60 	.word	0x20000b60
 8009e54:	200010c0 	.word	0x200010c0
 8009e58:	20000b64 	.word	0x20000b64
 8009e5c:	20000bf4 	.word	0x20000bf4
 8009e60:	20000c00 	.word	0x20000c00
 8009e64:	20000b68 	.word	0x20000b68
 8009e68:	20000be8 	.word	0x20000be8
 8009e6c:	20000bf0 	.word	0x20000bf0
 8009e70:	20000bec 	.word	0x20000bec
 8009e74:	20000be4 	.word	0x20000be4
 8009e78:	20000cb4 	.word	0x20000cb4
 8009e7c:	20000cc0 	.word	0x20000cc0
 8009e80:	20000cb8 	.word	0x20000cb8
 8009e84:	20000cbc 	.word	0x20000cbc
 8009e88:	4154494d 	.word	0x4154494d
 8009e8c:	08009fd5 	.word	0x08009fd5
 8009e90:	0800a8c8 	.word	0x0800a8c8
 8009e94:	20000c04 	.word	0x20000c04
 8009e98:	20000bf8 	.word	0x20000bf8
 8009e9c:	20000bfc 	.word	0x20000bfc

08009ea0 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b089      	sub	sp, #36	; 0x24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d04a      	beq.n	8009f4a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eba:	d046      	beq.n	8009f4a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d142      	bne.n	8009f4a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	2b20      	cmp	r3, #32
 8009ec8:	d902      	bls.n	8009ed0 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8009eca:	231f      	movs	r3, #31
 8009ecc:	61bb      	str	r3, [r7, #24]
 8009ece:	e002      	b.n	8009ed6 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8009ed6:	4b20      	ldr	r3, [pc, #128]	; (8009f58 <_tx_timer_system_activate+0xb8>)
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8009ee2:	4b1e      	ldr	r3, [pc, #120]	; (8009f5c <_tx_timer_system_activate+0xbc>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69fa      	ldr	r2, [r7, #28]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d30b      	bcc.n	8009f04 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8009eec:	4b1b      	ldr	r3, [pc, #108]	; (8009f5c <_tx_timer_system_activate+0xbc>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	69fa      	ldr	r2, [r7, #28]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	109b      	asrs	r3, r3, #2
 8009ef6:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8009ef8:	4b19      	ldr	r3, [pc, #100]	; (8009f60 <_tx_timer_system_activate+0xc0>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d109      	bne.n	8009f20 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	e011      	b.n	8009f44 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	69fa      	ldr	r2, [r7, #28]
 8009f48:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8009f4a:	bf00      	nop
 8009f4c:	3724      	adds	r7, #36	; 0x24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	20000bf0 	.word	0x20000bf0
 8009f5c:	20000bec 	.word	0x20000bec
 8009f60:	20000be8 	.word	0x20000be8

08009f64 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b087      	sub	sp, #28
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d026      	beq.n	8009fc6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d108      	bne.n	8009f98 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d117      	bne.n	8009fc0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	e013      	b.n	8009fc0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d105      	bne.n	8009fc0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	619a      	str	r2, [r3, #24]
    }
}
 8009fc6:	bf00      	nop
 8009fc8:	371c      	adds	r7, #28
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
	...

08009fd4 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b098      	sub	sp, #96	; 0x60
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8009fdc:	2300      	movs	r3, #0
 8009fde:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a73      	ldr	r2, [pc, #460]	; (800a1b0 <_tx_timer_thread_entry+0x1dc>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	f040 80de 	bne.w	800a1a6 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009fea:	f3ef 8310 	mrs	r3, PRIMASK
 8009fee:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8009ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009ff4:	b672      	cpsid	i
    return(int_posture);
 8009ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8009ff8:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8009ffa:	4b6e      	ldr	r3, [pc, #440]	; (800a1b4 <_tx_timer_thread_entry+0x1e0>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d003      	beq.n	800a010 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f107 020c 	add.w	r2, r7, #12
 800a00e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800a010:	4b68      	ldr	r3, [pc, #416]	; (800a1b4 <_tx_timer_thread_entry+0x1e0>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2200      	movs	r2, #0
 800a016:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800a018:	4b66      	ldr	r3, [pc, #408]	; (800a1b4 <_tx_timer_thread_entry+0x1e0>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3304      	adds	r3, #4
 800a01e:	4a65      	ldr	r2, [pc, #404]	; (800a1b4 <_tx_timer_thread_entry+0x1e0>)
 800a020:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800a022:	4b64      	ldr	r3, [pc, #400]	; (800a1b4 <_tx_timer_thread_entry+0x1e0>)
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	4b64      	ldr	r3, [pc, #400]	; (800a1b8 <_tx_timer_thread_entry+0x1e4>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d103      	bne.n	800a036 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800a02e:	4b63      	ldr	r3, [pc, #396]	; (800a1bc <_tx_timer_thread_entry+0x1e8>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a60      	ldr	r2, [pc, #384]	; (800a1b4 <_tx_timer_thread_entry+0x1e0>)
 800a034:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800a036:	4b62      	ldr	r3, [pc, #392]	; (800a1c0 <_tx_timer_thread_entry+0x1ec>)
 800a038:	2200      	movs	r2, #0
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a03e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a042:	f383 8810 	msr	PRIMASK, r3
}
 800a046:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a048:	f3ef 8310 	mrs	r3, PRIMASK
 800a04c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800a04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800a050:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800a052:	b672      	cpsid	i
    return(int_posture);
 800a054:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800a056:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800a058:	e07f      	b.n	800a15a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800a064:	2300      	movs	r3, #0
 800a066:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800a068:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a06a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d102      	bne.n	800a076 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800a070:	2300      	movs	r3, #0
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	e00e      	b.n	800a094 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800a076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800a07c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a07e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a080:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800a082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a086:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800a088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a08a:	f107 020c 	add.w	r2, r7, #12
 800a08e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800a090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a092:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800a094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b20      	cmp	r3, #32
 800a09a:	d911      	bls.n	800a0c0 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800a09c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800a0a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0a6:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800a0ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ae:	f107 0208 	add.w	r2, r7, #8
 800a0b2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800a0b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0b8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800a0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0bc:	60bb      	str	r3, [r7, #8]
 800a0be:	e01a      	b.n	800a0f6 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800a0c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800a0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800a0cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d2:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800a0d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800a0dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0de:	f107 0208 	add.w	r2, r7, #8
 800a0e2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800a0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0e8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800a0ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ec:	60bb      	str	r3, [r7, #8]
 800a0ee:	e002      	b.n	800a0f6 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800a0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800a0f6:	4a33      	ldr	r2, [pc, #204]	; (800a1c4 <_tx_timer_thread_entry+0x1f0>)
 800a0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0fa:	6013      	str	r3, [r2, #0]
 800a0fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a102:	f383 8810 	msr	PRIMASK, r3
}
 800a106:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800a108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800a10e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a110:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a112:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a114:	f3ef 8310 	mrs	r3, PRIMASK
 800a118:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a11e:	b672      	cpsid	i
    return(int_posture);
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800a122:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800a124:	4b27      	ldr	r3, [pc, #156]	; (800a1c4 <_tx_timer_thread_entry+0x1f0>)
 800a126:	2200      	movs	r2, #0
 800a128:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a12e:	429a      	cmp	r2, r3
 800a130:	d105      	bne.n	800a13e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800a132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a134:	2200      	movs	r2, #0
 800a136:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800a138:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a13a:	f7ff feb1 	bl	8009ea0 <_tx_timer_system_activate>
 800a13e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a140:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	f383 8810 	msr	PRIMASK, r3
}
 800a148:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a14a:	f3ef 8310 	mrs	r3, PRIMASK
 800a14e:	623b      	str	r3, [r7, #32]
    return(posture);
 800a150:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a152:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a154:	b672      	cpsid	i
    return(int_posture);
 800a156:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800a158:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f47f af7c 	bne.w	800a05a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800a162:	4b17      	ldr	r3, [pc, #92]	; (800a1c0 <_tx_timer_thread_entry+0x1ec>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d116      	bne.n	800a198 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800a16a:	4b17      	ldr	r3, [pc, #92]	; (800a1c8 <_tx_timer_thread_entry+0x1f4>)
 800a16c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800a16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a170:	2203      	movs	r2, #3
 800a172:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a176:	2201      	movs	r2, #1
 800a178:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800a17a:	4b14      	ldr	r3, [pc, #80]	; (800a1cc <_tx_timer_thread_entry+0x1f8>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	3301      	adds	r3, #1
 800a180:	4a12      	ldr	r2, [pc, #72]	; (800a1cc <_tx_timer_thread_entry+0x1f8>)
 800a182:	6013      	str	r3, [r2, #0]
 800a184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a186:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	f383 8810 	msr	PRIMASK, r3
}
 800a18e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a190:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a192:	f7ff fc41 	bl	8009a18 <_tx_thread_system_suspend>
 800a196:	e728      	b.n	8009fea <_tx_timer_thread_entry+0x16>
 800a198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a19a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f383 8810 	msr	PRIMASK, r3
}
 800a1a2:	bf00      	nop
            TX_DISABLE
 800a1a4:	e721      	b.n	8009fea <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800a1a6:	bf00      	nop
 800a1a8:	3760      	adds	r7, #96	; 0x60
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	4154494d 	.word	0x4154494d
 800a1b4:	20000bf0 	.word	0x20000bf0
 800a1b8:	20000bec 	.word	0x20000bec
 800a1bc:	20000be8 	.word	0x20000be8
 800a1c0:	20000bf4 	.word	0x20000bf4
 800a1c4:	20000c00 	.word	0x20000c00
 800a1c8:	20000c04 	.word	0x20000c04
 800a1cc:	20000b54 	.word	0x20000b54

0800a1d0 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b08a      	sub	sp, #40	; 0x28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
 800a1dc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ec:	e029      	b.n	800a242 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a2d      	ldr	r2, [pc, #180]	; (800a2a8 <_txe_byte_allocate+0xd8>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d002      	beq.n	800a1fe <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a1fc:	e021      	b.n	800a242 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d102      	bne.n	800a20a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800a204:	2303      	movs	r3, #3
 800a206:	627b      	str	r3, [r7, #36]	; 0x24
 800a208:	e01b      	b.n	800a242 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d102      	bne.n	800a216 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800a210:	2305      	movs	r3, #5
 800a212:	627b      	str	r3, [r7, #36]	; 0x24
 800a214:	e015      	b.n	800a242 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	69db      	ldr	r3, [r3, #28]
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d902      	bls.n	800a226 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800a220:	2305      	movs	r3, #5
 800a222:	627b      	str	r3, [r7, #36]	; 0x24
 800a224:	e00d      	b.n	800a242 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00a      	beq.n	800a242 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a22c:	f3ef 8305 	mrs	r3, IPSR
 800a230:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800a232:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a234:	4b1d      	ldr	r3, [pc, #116]	; (800a2ac <_txe_byte_allocate+0xdc>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4313      	orrs	r3, r2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a23e:	2304      	movs	r3, #4
 800a240:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	d108      	bne.n	800a25a <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a248:	4b19      	ldr	r3, [pc, #100]	; (800a2b0 <_txe_byte_allocate+0xe0>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	4a18      	ldr	r2, [pc, #96]	; (800a2b4 <_txe_byte_allocate+0xe4>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d101      	bne.n	800a25a <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800a256:	2313      	movs	r3, #19
 800a258:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d114      	bne.n	800a28a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a260:	f3ef 8305 	mrs	r3, IPSR
 800a264:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a266:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a268:	4b10      	ldr	r3, [pc, #64]	; (800a2ac <_txe_byte_allocate+0xdc>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00b      	beq.n	800a28a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a272:	f3ef 8305 	mrs	r3, IPSR
 800a276:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a278:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a27a:	4b0c      	ldr	r3, [pc, #48]	; (800a2ac <_txe_byte_allocate+0xdc>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4313      	orrs	r3, r2
 800a280:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a284:	d201      	bcs.n	800a28a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a286:	2313      	movs	r3, #19
 800a288:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d106      	bne.n	800a29e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	68b9      	ldr	r1, [r7, #8]
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f7fe fb7a 	bl	8008990 <_tx_byte_allocate>
 800a29c:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3728      	adds	r7, #40	; 0x28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	42595445 	.word	0x42595445
 800a2ac:	2000000c 	.word	0x2000000c
 800a2b0:	20000abc 	.word	0x20000abc
 800a2b4:	20000c04 	.word	0x20000c04

0800a2b8 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b092      	sub	sp, #72	; 0x48
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
 800a2c4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d102      	bne.n	800a2d6 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	647b      	str	r3, [r7, #68]	; 0x44
 800a2d4:	e075      	b.n	800a3c2 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800a2d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2d8:	2b34      	cmp	r3, #52	; 0x34
 800a2da:	d002      	beq.n	800a2e2 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	647b      	str	r3, [r7, #68]	; 0x44
 800a2e0:	e06f      	b.n	800a3c2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a2e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a2ea:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a2ec:	b672      	cpsid	i
    return(int_posture);
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a2f0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a2f2:	4b3b      	ldr	r3, [pc, #236]	; (800a3e0 <_txe_byte_pool_create+0x128>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	4a39      	ldr	r2, [pc, #228]	; (800a3e0 <_txe_byte_pool_create+0x128>)
 800a2fa:	6013      	str	r3, [r2, #0]
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a302:	f383 8810 	msr	PRIMASK, r3
}
 800a306:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800a308:	4b36      	ldr	r3, [pc, #216]	; (800a3e4 <_txe_byte_pool_create+0x12c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a30e:	2300      	movs	r3, #0
 800a310:	643b      	str	r3, [r7, #64]	; 0x40
 800a312:	e009      	b.n	800a328 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a318:	429a      	cmp	r2, r3
 800a31a:	d00b      	beq.n	800a334 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800a31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a320:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a324:	3301      	adds	r3, #1
 800a326:	643b      	str	r3, [r7, #64]	; 0x40
 800a328:	4b2f      	ldr	r3, [pc, #188]	; (800a3e8 <_txe_byte_pool_create+0x130>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a32e:	429a      	cmp	r2, r3
 800a330:	d3f0      	bcc.n	800a314 <_txe_byte_pool_create+0x5c>
 800a332:	e000      	b.n	800a336 <_txe_byte_pool_create+0x7e>
                break;
 800a334:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a336:	f3ef 8310 	mrs	r3, PRIMASK
 800a33a:	623b      	str	r3, [r7, #32]
    return(posture);
 800a33c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a33e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a340:	b672      	cpsid	i
    return(int_posture);
 800a342:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a344:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a346:	4b26      	ldr	r3, [pc, #152]	; (800a3e0 <_txe_byte_pool_create+0x128>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	4a24      	ldr	r2, [pc, #144]	; (800a3e0 <_txe_byte_pool_create+0x128>)
 800a34e:	6013      	str	r3, [r2, #0]
 800a350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a352:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	f383 8810 	msr	PRIMASK, r3
}
 800a35a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a35c:	f7ff fa22 	bl	80097a4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a364:	429a      	cmp	r2, r3
 800a366:	d102      	bne.n	800a36e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800a368:	2302      	movs	r3, #2
 800a36a:	647b      	str	r3, [r7, #68]	; 0x44
 800a36c:	e029      	b.n	800a3c2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d102      	bne.n	800a37a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800a374:	2303      	movs	r3, #3
 800a376:	647b      	str	r3, [r7, #68]	; 0x44
 800a378:	e023      	b.n	800a3c2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b63      	cmp	r3, #99	; 0x63
 800a37e:	d802      	bhi.n	800a386 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800a380:	2305      	movs	r3, #5
 800a382:	647b      	str	r3, [r7, #68]	; 0x44
 800a384:	e01d      	b.n	800a3c2 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a386:	4b19      	ldr	r3, [pc, #100]	; (800a3ec <_txe_byte_pool_create+0x134>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38e:	4a18      	ldr	r2, [pc, #96]	; (800a3f0 <_txe_byte_pool_create+0x138>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d101      	bne.n	800a398 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a394:	2313      	movs	r3, #19
 800a396:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a398:	f3ef 8305 	mrs	r3, IPSR
 800a39c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a39e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a3a0:	4b14      	ldr	r3, [pc, #80]	; (800a3f4 <_txe_byte_pool_create+0x13c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00b      	beq.n	800a3c2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a3aa:	f3ef 8305 	mrs	r3, IPSR
 800a3ae:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a3b0:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a3b2:	4b10      	ldr	r3, [pc, #64]	; (800a3f4 <_txe_byte_pool_create+0x13c>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a3bc:	d201      	bcs.n	800a3c2 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a3be:	2313      	movs	r3, #19
 800a3c0:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d106      	bne.n	800a3d6 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	68b9      	ldr	r1, [r7, #8]
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f7fe fc20 	bl	8008c14 <_tx_byte_pool_create>
 800a3d4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800a3d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3748      	adds	r7, #72	; 0x48
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	20000b54 	.word	0x20000b54
 800a3e4:	20000aac 	.word	0x20000aac
 800a3e8:	20000ab0 	.word	0x20000ab0
 800a3ec:	20000abc 	.word	0x20000abc
 800a3f0:	20000c04 	.word	0x20000c04
 800a3f4:	2000000c 	.word	0x2000000c

0800a3f8 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b092      	sub	sp, #72	; 0x48
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a406:	2300      	movs	r3, #0
 800a408:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d102      	bne.n	800a416 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a410:	230c      	movs	r3, #12
 800a412:	647b      	str	r3, [r7, #68]	; 0x44
 800a414:	e054      	b.n	800a4c0 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	2b1c      	cmp	r3, #28
 800a41a:	d002      	beq.n	800a422 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a41c:	230c      	movs	r3, #12
 800a41e:	647b      	str	r3, [r7, #68]	; 0x44
 800a420:	e04e      	b.n	800a4c0 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a422:	f3ef 8310 	mrs	r3, PRIMASK
 800a426:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a42a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a42c:	b672      	cpsid	i
    return(int_posture);
 800a42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a430:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a432:	4b36      	ldr	r3, [pc, #216]	; (800a50c <_txe_semaphore_create+0x114>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3301      	adds	r3, #1
 800a438:	4a34      	ldr	r2, [pc, #208]	; (800a50c <_txe_semaphore_create+0x114>)
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	f383 8810 	msr	PRIMASK, r3
}
 800a446:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800a448:	4b31      	ldr	r3, [pc, #196]	; (800a510 <_txe_semaphore_create+0x118>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800a44e:	2300      	movs	r3, #0
 800a450:	643b      	str	r3, [r7, #64]	; 0x40
 800a452:	e009      	b.n	800a468 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a458:	429a      	cmp	r2, r3
 800a45a:	d00b      	beq.n	800a474 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800a45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800a462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a464:	3301      	adds	r3, #1
 800a466:	643b      	str	r3, [r7, #64]	; 0x40
 800a468:	4b2a      	ldr	r3, [pc, #168]	; (800a514 <_txe_semaphore_create+0x11c>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a46e:	429a      	cmp	r2, r3
 800a470:	d3f0      	bcc.n	800a454 <_txe_semaphore_create+0x5c>
 800a472:	e000      	b.n	800a476 <_txe_semaphore_create+0x7e>
                break;
 800a474:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a476:	f3ef 8310 	mrs	r3, PRIMASK
 800a47a:	623b      	str	r3, [r7, #32]
    return(posture);
 800a47c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a47e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a480:	b672      	cpsid	i
    return(int_posture);
 800a482:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a484:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a486:	4b21      	ldr	r3, [pc, #132]	; (800a50c <_txe_semaphore_create+0x114>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3b01      	subs	r3, #1
 800a48c:	4a1f      	ldr	r2, [pc, #124]	; (800a50c <_txe_semaphore_create+0x114>)
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	f383 8810 	msr	PRIMASK, r3
}
 800a49a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a49c:	f7ff f982 	bl	80097a4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d102      	bne.n	800a4ae <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800a4a8:	230c      	movs	r3, #12
 800a4aa:	647b      	str	r3, [r7, #68]	; 0x44
 800a4ac:	e008      	b.n	800a4c0 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a4ae:	4b1a      	ldr	r3, [pc, #104]	; (800a518 <_txe_semaphore_create+0x120>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b6:	4a19      	ldr	r2, [pc, #100]	; (800a51c <_txe_semaphore_create+0x124>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d101      	bne.n	800a4c0 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a4bc:	2313      	movs	r3, #19
 800a4be:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a4c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d114      	bne.n	800a4f0 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a4c6:	f3ef 8305 	mrs	r3, IPSR
 800a4ca:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a4cc:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a4ce:	4b14      	ldr	r3, [pc, #80]	; (800a520 <_txe_semaphore_create+0x128>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00b      	beq.n	800a4f0 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a4d8:	f3ef 8305 	mrs	r3, IPSR
 800a4dc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a4de:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a4e0:	4b0f      	ldr	r3, [pc, #60]	; (800a520 <_txe_semaphore_create+0x128>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a4ea:	d201      	bcs.n	800a4f0 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a4ec:	2313      	movs	r3, #19
 800a4ee:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a4f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d105      	bne.n	800a502 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	68b9      	ldr	r1, [r7, #8]
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f7fe fe18 	bl	8009130 <_tx_semaphore_create>
 800a500:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800a502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800a504:	4618      	mov	r0, r3
 800a506:	3748      	adds	r7, #72	; 0x48
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	20000b54 	.word	0x20000b54
 800a510:	20000a84 	.word	0x20000a84
 800a514:	20000a88 	.word	0x20000a88
 800a518:	20000abc 	.word	0x20000abc
 800a51c:	20000c04 	.word	0x20000c04
 800a520:	2000000c 	.word	0x2000000c

0800a524 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b086      	sub	sp, #24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a52e:	2300      	movs	r3, #0
 800a530:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d102      	bne.n	800a53e <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a538:	230c      	movs	r3, #12
 800a53a:	617b      	str	r3, [r7, #20]
 800a53c:	e01f      	b.n	800a57e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a15      	ldr	r2, [pc, #84]	; (800a598 <_txe_semaphore_get+0x74>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d002      	beq.n	800a54e <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a548:	230c      	movs	r3, #12
 800a54a:	617b      	str	r3, [r7, #20]
 800a54c:	e017      	b.n	800a57e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d014      	beq.n	800a57e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a554:	f3ef 8305 	mrs	r3, IPSR
 800a558:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a55a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a55c:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <_txe_semaphore_get+0x78>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4313      	orrs	r3, r2
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a566:	2304      	movs	r3, #4
 800a568:	617b      	str	r3, [r7, #20]
 800a56a:	e008      	b.n	800a57e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800a56c:	4b0c      	ldr	r3, [pc, #48]	; (800a5a0 <_txe_semaphore_get+0x7c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	4a0b      	ldr	r2, [pc, #44]	; (800a5a4 <_txe_semaphore_get+0x80>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d101      	bne.n	800a57e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800a57a:	2304      	movs	r3, #4
 800a57c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d104      	bne.n	800a58e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7fe fe24 	bl	80091d4 <_tx_semaphore_get>
 800a58c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800a58e:	697b      	ldr	r3, [r7, #20]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3718      	adds	r7, #24
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	53454d41 	.word	0x53454d41
 800a59c:	2000000c 	.word	0x2000000c
 800a5a0:	20000abc 	.word	0x20000abc
 800a5a4:	20000c04 	.word	0x20000c04

0800a5a8 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d102      	bne.n	800a5bc <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a5b6:	230c      	movs	r3, #12
 800a5b8:	60fb      	str	r3, [r7, #12]
 800a5ba:	e00b      	b.n	800a5d4 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a07      	ldr	r2, [pc, #28]	; (800a5e0 <_txe_semaphore_put+0x38>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d002      	beq.n	800a5cc <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	60fb      	str	r3, [r7, #12]
 800a5ca:	e003      	b.n	800a5d4 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7fe fe93 	bl	80092f8 <_tx_semaphore_put>
 800a5d2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	53454d41 	.word	0x53454d41

0800a5e4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b09a      	sub	sp, #104	; 0x68
 800a5e8:	af06      	add	r7, sp, #24
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
 800a5f0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d102      	bne.n	800a602 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800a5fc:	230e      	movs	r3, #14
 800a5fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a600:	e0bb      	b.n	800a77a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800a602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a604:	2bb0      	cmp	r3, #176	; 0xb0
 800a606:	d002      	beq.n	800a60e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800a608:	230e      	movs	r3, #14
 800a60a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a60c:	e0b5      	b.n	800a77a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a60e:	f3ef 8310 	mrs	r3, PRIMASK
 800a612:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800a614:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800a616:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a618:	b672      	cpsid	i
    return(int_posture);
 800a61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a61c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a61e:	4b64      	ldr	r3, [pc, #400]	; (800a7b0 <_txe_thread_create+0x1cc>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3301      	adds	r3, #1
 800a624:	4a62      	ldr	r2, [pc, #392]	; (800a7b0 <_txe_thread_create+0x1cc>)
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a62a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62e:	f383 8810 	msr	PRIMASK, r3
}
 800a632:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800a634:	2300      	movs	r3, #0
 800a636:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800a638:	4b5e      	ldr	r3, [pc, #376]	; (800a7b4 <_txe_thread_create+0x1d0>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800a63e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a640:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800a642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a644:	3b01      	subs	r3, #1
 800a646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a648:	4413      	add	r3, r2
 800a64a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800a64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800a650:	2300      	movs	r3, #0
 800a652:	647b      	str	r3, [r7, #68]	; 0x44
 800a654:	e02b      	b.n	800a6ae <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d101      	bne.n	800a662 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800a65e:	2301      	movs	r3, #1
 800a660:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800a662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a664:	2b01      	cmp	r3, #1
 800a666:	d028      	beq.n	800a6ba <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800a668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a66e:	429a      	cmp	r2, r3
 800a670:	d308      	bcc.n	800a684 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800a672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a678:	429a      	cmp	r2, r3
 800a67a:	d203      	bcs.n	800a684 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800a680:	2301      	movs	r3, #1
 800a682:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800a684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d308      	bcc.n	800a6a0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800a68e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a694:	429a      	cmp	r2, r3
 800a696:	d203      	bcs.n	800a6a0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800a698:	2300      	movs	r3, #0
 800a69a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800a69c:	2301      	movs	r3, #1
 800a69e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800a6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a6:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800a6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	647b      	str	r3, [r7, #68]	; 0x44
 800a6ae:	4b42      	ldr	r3, [pc, #264]	; (800a7b8 <_txe_thread_create+0x1d4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d3ce      	bcc.n	800a656 <_txe_thread_create+0x72>
 800a6b8:	e000      	b.n	800a6bc <_txe_thread_create+0xd8>
                break;
 800a6ba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a6bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a6c0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a6c2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a6c4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a6c6:	b672      	cpsid	i
    return(int_posture);
 800a6c8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a6ca:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a6cc:	4b38      	ldr	r3, [pc, #224]	; (800a7b0 <_txe_thread_create+0x1cc>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	4a37      	ldr	r2, [pc, #220]	; (800a7b0 <_txe_thread_create+0x1cc>)
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	f383 8810 	msr	PRIMASK, r3
}
 800a6e0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a6e2:	f7ff f85f 	bl	80097a4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d102      	bne.n	800a6f4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800a6ee:	230e      	movs	r3, #14
 800a6f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6f2:	e042      	b.n	800a77a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800a6f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d102      	bne.n	800a700 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6fe:	e03c      	b.n	800a77a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d102      	bne.n	800a70c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800a706:	2303      	movs	r3, #3
 800a708:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a70a:	e036      	b.n	800a77a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800a70c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a70e:	2bc7      	cmp	r3, #199	; 0xc7
 800a710:	d802      	bhi.n	800a718 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800a712:	2305      	movs	r3, #5
 800a714:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a716:	e030      	b.n	800a77a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800a718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a71a:	2b1f      	cmp	r3, #31
 800a71c:	d902      	bls.n	800a724 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800a71e:	230f      	movs	r3, #15
 800a720:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a722:	e02a      	b.n	800a77a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800a724:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a728:	429a      	cmp	r2, r3
 800a72a:	d902      	bls.n	800a732 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800a72c:	2318      	movs	r3, #24
 800a72e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a730:	e023      	b.n	800a77a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800a732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a734:	2b01      	cmp	r3, #1
 800a736:	d902      	bls.n	800a73e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800a738:	2310      	movs	r3, #16
 800a73a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a73c:	e01d      	b.n	800a77a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800a73e:	4b1f      	ldr	r3, [pc, #124]	; (800a7bc <_txe_thread_create+0x1d8>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	4a1e      	ldr	r2, [pc, #120]	; (800a7c0 <_txe_thread_create+0x1dc>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d101      	bne.n	800a750 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a74c:	2313      	movs	r3, #19
 800a74e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a750:	f3ef 8305 	mrs	r3, IPSR
 800a754:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a756:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a758:	4b1a      	ldr	r3, [pc, #104]	; (800a7c4 <_txe_thread_create+0x1e0>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00b      	beq.n	800a77a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a762:	f3ef 8305 	mrs	r3, IPSR
 800a766:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a768:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a76a:	4b16      	ldr	r3, [pc, #88]	; (800a7c4 <_txe_thread_create+0x1e0>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4313      	orrs	r3, r2
 800a770:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a774:	d201      	bcs.n	800a77a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a776:	2313      	movs	r3, #19
 800a778:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d112      	bne.n	800a7a6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800a780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a782:	9305      	str	r3, [sp, #20]
 800a784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a78a:	9303      	str	r3, [sp, #12]
 800a78c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a78e:	9302      	str	r3, [sp, #8]
 800a790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a792:	9301      	str	r3, [sp, #4]
 800a794:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	68b9      	ldr	r1, [r7, #8]
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f7fe fe02 	bl	80093a8 <_tx_thread_create>
 800a7a4:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800a7a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3750      	adds	r7, #80	; 0x50
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	20000b54 	.word	0x20000b54
 800a7b4:	20000ac4 	.word	0x20000ac4
 800a7b8:	20000ac8 	.word	0x20000ac8
 800a7bc:	20000abc 	.word	0x20000abc
 800a7c0:	20000c04 	.word	0x20000c04
 800a7c4:	2000000c 	.word	0x2000000c

0800a7c8 <memset>:
 800a7c8:	4402      	add	r2, r0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d100      	bne.n	800a7d2 <memset+0xa>
 800a7d0:	4770      	bx	lr
 800a7d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7d6:	e7f9      	b.n	800a7cc <memset+0x4>

0800a7d8 <__libc_init_array>:
 800a7d8:	b570      	push	{r4, r5, r6, lr}
 800a7da:	4d0d      	ldr	r5, [pc, #52]	; (800a810 <__libc_init_array+0x38>)
 800a7dc:	4c0d      	ldr	r4, [pc, #52]	; (800a814 <__libc_init_array+0x3c>)
 800a7de:	1b64      	subs	r4, r4, r5
 800a7e0:	10a4      	asrs	r4, r4, #2
 800a7e2:	2600      	movs	r6, #0
 800a7e4:	42a6      	cmp	r6, r4
 800a7e6:	d109      	bne.n	800a7fc <__libc_init_array+0x24>
 800a7e8:	4d0b      	ldr	r5, [pc, #44]	; (800a818 <__libc_init_array+0x40>)
 800a7ea:	4c0c      	ldr	r4, [pc, #48]	; (800a81c <__libc_init_array+0x44>)
 800a7ec:	f000 f818 	bl	800a820 <_init>
 800a7f0:	1b64      	subs	r4, r4, r5
 800a7f2:	10a4      	asrs	r4, r4, #2
 800a7f4:	2600      	movs	r6, #0
 800a7f6:	42a6      	cmp	r6, r4
 800a7f8:	d105      	bne.n	800a806 <__libc_init_array+0x2e>
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}
 800a7fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a800:	4798      	blx	r3
 800a802:	3601      	adds	r6, #1
 800a804:	e7ee      	b.n	800a7e4 <__libc_init_array+0xc>
 800a806:	f855 3b04 	ldr.w	r3, [r5], #4
 800a80a:	4798      	blx	r3
 800a80c:	3601      	adds	r6, #1
 800a80e:	e7f2      	b.n	800a7f6 <__libc_init_array+0x1e>
 800a810:	0800a924 	.word	0x0800a924
 800a814:	0800a924 	.word	0x0800a924
 800a818:	0800a924 	.word	0x0800a924
 800a81c:	0800a928 	.word	0x0800a928

0800a820 <_init>:
 800a820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a822:	bf00      	nop
 800a824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a826:	bc08      	pop	{r3}
 800a828:	469e      	mov	lr, r3
 800a82a:	4770      	bx	lr

0800a82c <_fini>:
 800a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82e:	bf00      	nop
 800a830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a832:	bc08      	pop	{r3}
 800a834:	469e      	mov	lr, r3
 800a836:	4770      	bx	lr
