
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c194  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800c374  0800c374  0000d374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c530  0800c530  0000e010  2**0
                  CONTENTS
  4 .ARM          00000008  0800c530  0800c530  0000d530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c538  0800c538  0000e010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c538  0800c538  0000d538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c53c  0800c53c  0000d53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800c540  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010f00  20000010  0800c550  0000e010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20010f10  0800c550  0000ef10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039163  00000000  00000000  0000e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008b85  00000000  00000000  000471a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002bf0  00000000  00000000  0004fd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000020bf  00000000  00000000  00052918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033e5e  00000000  00000000  000549d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000418b3  00000000  00000000  00088835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012ab2e  00000000  00000000  000ca0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f4c16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae48  00000000  00000000  001f4c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f4  00000000  00000000  001ffaa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c35c 	.word	0x0800c35c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800c35c 	.word	0x0800c35c

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	@ (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	@ (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	@ (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	@ (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	@ (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	20010904 	.word	0x20010904
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	@ (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	@ (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	200109a0 	.word	0x200109a0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20010908 	.word	0x20010908
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	2001090c 	.word	0x2001090c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	20010f0c 	.word	0x20010f0c

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f00b f9df 	bl	800b7bc <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f00b f850 	bl	800b4a8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	@ (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	@ (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	200109ac 	.word	0x200109ac
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	20010f0c 	.word	0x20010f0c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	200109b0 	.word	0x200109b0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20010a3c 	.word	0x20010a3c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20010a40 	.word	0x20010a40
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20010a38 	.word	0x20010a38
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20010a34 	.word	0x20010a34
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	200109a0 	.word	0x200109a0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20010908 	.word	0x20010908
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	2001090c 	.word	0x2001090c
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <__aeabi_uldivmod>:
 8000458:	b953      	cbnz	r3, 8000470 <__aeabi_uldivmod+0x18>
 800045a:	b94a      	cbnz	r2, 8000470 <__aeabi_uldivmod+0x18>
 800045c:	2900      	cmp	r1, #0
 800045e:	bf08      	it	eq
 8000460:	2800      	cmpeq	r0, #0
 8000462:	bf1c      	itt	ne
 8000464:	f04f 31ff 	movne.w	r1, #4294967295
 8000468:	f04f 30ff 	movne.w	r0, #4294967295
 800046c:	f000 b96a 	b.w	8000744 <__aeabi_idiv0>
 8000470:	f1ad 0c08 	sub.w	ip, sp, #8
 8000474:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000478:	f000 f806 	bl	8000488 <__udivmoddi4>
 800047c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000484:	b004      	add	sp, #16
 8000486:	4770      	bx	lr

08000488 <__udivmoddi4>:
 8000488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800048c:	9d08      	ldr	r5, [sp, #32]
 800048e:	460c      	mov	r4, r1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d14e      	bne.n	8000532 <__udivmoddi4+0xaa>
 8000494:	4694      	mov	ip, r2
 8000496:	458c      	cmp	ip, r1
 8000498:	4686      	mov	lr, r0
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	d962      	bls.n	8000566 <__udivmoddi4+0xde>
 80004a0:	b14a      	cbz	r2, 80004b6 <__udivmoddi4+0x2e>
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	4091      	lsls	r1, r2
 80004a8:	fa20 f303 	lsr.w	r3, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	4319      	orrs	r1, r3
 80004b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ba:	fa1f f68c 	uxth.w	r6, ip
 80004be:	fbb1 f4f7 	udiv	r4, r1, r7
 80004c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004c6:	fb07 1114 	mls	r1, r7, r4, r1
 80004ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ce:	fb04 f106 	mul.w	r1, r4, r6
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d90a      	bls.n	80004ec <__udivmoddi4+0x64>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f104 30ff 	add.w	r0, r4, #4294967295
 80004de:	f080 8112 	bcs.w	8000706 <__udivmoddi4+0x27e>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 810f 	bls.w	8000706 <__udivmoddi4+0x27e>
 80004e8:	3c02      	subs	r4, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a59      	subs	r1, r3, r1
 80004ee:	fa1f f38e 	uxth.w	r3, lr
 80004f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f6:	fb07 1110 	mls	r1, r7, r0, r1
 80004fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fe:	fb00 f606 	mul.w	r6, r0, r6
 8000502:	429e      	cmp	r6, r3
 8000504:	d90a      	bls.n	800051c <__udivmoddi4+0x94>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 31ff 	add.w	r1, r0, #4294967295
 800050e:	f080 80fc 	bcs.w	800070a <__udivmoddi4+0x282>
 8000512:	429e      	cmp	r6, r3
 8000514:	f240 80f9 	bls.w	800070a <__udivmoddi4+0x282>
 8000518:	4463      	add	r3, ip
 800051a:	3802      	subs	r0, #2
 800051c:	1b9b      	subs	r3, r3, r6
 800051e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000522:	2100      	movs	r1, #0
 8000524:	b11d      	cbz	r5, 800052e <__udivmoddi4+0xa6>
 8000526:	40d3      	lsrs	r3, r2
 8000528:	2200      	movs	r2, #0
 800052a:	e9c5 3200 	strd	r3, r2, [r5]
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	428b      	cmp	r3, r1
 8000534:	d905      	bls.n	8000542 <__udivmoddi4+0xba>
 8000536:	b10d      	cbz	r5, 800053c <__udivmoddi4+0xb4>
 8000538:	e9c5 0100 	strd	r0, r1, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	4608      	mov	r0, r1
 8000540:	e7f5      	b.n	800052e <__udivmoddi4+0xa6>
 8000542:	fab3 f183 	clz	r1, r3
 8000546:	2900      	cmp	r1, #0
 8000548:	d146      	bne.n	80005d8 <__udivmoddi4+0x150>
 800054a:	42a3      	cmp	r3, r4
 800054c:	d302      	bcc.n	8000554 <__udivmoddi4+0xcc>
 800054e:	4290      	cmp	r0, r2
 8000550:	f0c0 80f0 	bcc.w	8000734 <__udivmoddi4+0x2ac>
 8000554:	1a86      	subs	r6, r0, r2
 8000556:	eb64 0303 	sbc.w	r3, r4, r3
 800055a:	2001      	movs	r0, #1
 800055c:	2d00      	cmp	r5, #0
 800055e:	d0e6      	beq.n	800052e <__udivmoddi4+0xa6>
 8000560:	e9c5 6300 	strd	r6, r3, [r5]
 8000564:	e7e3      	b.n	800052e <__udivmoddi4+0xa6>
 8000566:	2a00      	cmp	r2, #0
 8000568:	f040 8090 	bne.w	800068c <__udivmoddi4+0x204>
 800056c:	eba1 040c 	sub.w	r4, r1, ip
 8000570:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000574:	fa1f f78c 	uxth.w	r7, ip
 8000578:	2101      	movs	r1, #1
 800057a:	fbb4 f6f8 	udiv	r6, r4, r8
 800057e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000582:	fb08 4416 	mls	r4, r8, r6, r4
 8000586:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800058a:	fb07 f006 	mul.w	r0, r7, r6
 800058e:	4298      	cmp	r0, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x11c>
 8000592:	eb1c 0303 	adds.w	r3, ip, r3
 8000596:	f106 34ff 	add.w	r4, r6, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x11a>
 800059c:	4298      	cmp	r0, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2b4>
 80005a2:	4626      	mov	r6, r4
 80005a4:	1a1c      	subs	r4, r3, r0
 80005a6:	fa1f f38e 	uxth.w	r3, lr
 80005aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80005ae:	fb08 4410 	mls	r4, r8, r0, r4
 80005b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005b6:	fb00 f707 	mul.w	r7, r0, r7
 80005ba:	429f      	cmp	r7, r3
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x148>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c6:	d202      	bcs.n	80005ce <__udivmoddi4+0x146>
 80005c8:	429f      	cmp	r7, r3
 80005ca:	f200 80b0 	bhi.w	800072e <__udivmoddi4+0x2a6>
 80005ce:	4620      	mov	r0, r4
 80005d0:	1bdb      	subs	r3, r3, r7
 80005d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005d6:	e7a5      	b.n	8000524 <__udivmoddi4+0x9c>
 80005d8:	f1c1 0620 	rsb	r6, r1, #32
 80005dc:	408b      	lsls	r3, r1
 80005de:	fa22 f706 	lsr.w	r7, r2, r6
 80005e2:	431f      	orrs	r7, r3
 80005e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e8:	fa04 f301 	lsl.w	r3, r4, r1
 80005ec:	ea43 030c 	orr.w	r3, r3, ip
 80005f0:	40f4      	lsrs	r4, r6
 80005f2:	fa00 f801 	lsl.w	r8, r0, r1
 80005f6:	0c38      	lsrs	r0, r7, #16
 80005f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000600:	fa1f fc87 	uxth.w	ip, r7
 8000604:	fb00 441e 	mls	r4, r0, lr, r4
 8000608:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800060c:	fb0e f90c 	mul.w	r9, lr, ip
 8000610:	45a1      	cmp	r9, r4
 8000612:	fa02 f201 	lsl.w	r2, r2, r1
 8000616:	d90a      	bls.n	800062e <__udivmoddi4+0x1a6>
 8000618:	193c      	adds	r4, r7, r4
 800061a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800061e:	f080 8084 	bcs.w	800072a <__udivmoddi4+0x2a2>
 8000622:	45a1      	cmp	r9, r4
 8000624:	f240 8081 	bls.w	800072a <__udivmoddi4+0x2a2>
 8000628:	f1ae 0e02 	sub.w	lr, lr, #2
 800062c:	443c      	add	r4, r7
 800062e:	eba4 0409 	sub.w	r4, r4, r9
 8000632:	fa1f f983 	uxth.w	r9, r3
 8000636:	fbb4 f3f0 	udiv	r3, r4, r0
 800063a:	fb00 4413 	mls	r4, r0, r3, r4
 800063e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000642:	fb03 fc0c 	mul.w	ip, r3, ip
 8000646:	45a4      	cmp	ip, r4
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0x1d2>
 800064a:	193c      	adds	r4, r7, r4
 800064c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000650:	d267      	bcs.n	8000722 <__udivmoddi4+0x29a>
 8000652:	45a4      	cmp	ip, r4
 8000654:	d965      	bls.n	8000722 <__udivmoddi4+0x29a>
 8000656:	3b02      	subs	r3, #2
 8000658:	443c      	add	r4, r7
 800065a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800065e:	fba0 9302 	umull	r9, r3, r0, r2
 8000662:	eba4 040c 	sub.w	r4, r4, ip
 8000666:	429c      	cmp	r4, r3
 8000668:	46ce      	mov	lr, r9
 800066a:	469c      	mov	ip, r3
 800066c:	d351      	bcc.n	8000712 <__udivmoddi4+0x28a>
 800066e:	d04e      	beq.n	800070e <__udivmoddi4+0x286>
 8000670:	b155      	cbz	r5, 8000688 <__udivmoddi4+0x200>
 8000672:	ebb8 030e 	subs.w	r3, r8, lr
 8000676:	eb64 040c 	sbc.w	r4, r4, ip
 800067a:	fa04 f606 	lsl.w	r6, r4, r6
 800067e:	40cb      	lsrs	r3, r1
 8000680:	431e      	orrs	r6, r3
 8000682:	40cc      	lsrs	r4, r1
 8000684:	e9c5 6400 	strd	r6, r4, [r5]
 8000688:	2100      	movs	r1, #0
 800068a:	e750      	b.n	800052e <__udivmoddi4+0xa6>
 800068c:	f1c2 0320 	rsb	r3, r2, #32
 8000690:	fa20 f103 	lsr.w	r1, r0, r3
 8000694:	fa0c fc02 	lsl.w	ip, ip, r2
 8000698:	fa24 f303 	lsr.w	r3, r4, r3
 800069c:	4094      	lsls	r4, r2
 800069e:	430c      	orrs	r4, r1
 80006a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a8:	fa1f f78c 	uxth.w	r7, ip
 80006ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b0:	fb08 3110 	mls	r1, r8, r0, r3
 80006b4:	0c23      	lsrs	r3, r4, #16
 80006b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ba:	fb00 f107 	mul.w	r1, r0, r7
 80006be:	4299      	cmp	r1, r3
 80006c0:	d908      	bls.n	80006d4 <__udivmoddi4+0x24c>
 80006c2:	eb1c 0303 	adds.w	r3, ip, r3
 80006c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80006ca:	d22c      	bcs.n	8000726 <__udivmoddi4+0x29e>
 80006cc:	4299      	cmp	r1, r3
 80006ce:	d92a      	bls.n	8000726 <__udivmoddi4+0x29e>
 80006d0:	3802      	subs	r0, #2
 80006d2:	4463      	add	r3, ip
 80006d4:	1a5b      	subs	r3, r3, r1
 80006d6:	b2a4      	uxth	r4, r4
 80006d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80006dc:	fb08 3311 	mls	r3, r8, r1, r3
 80006e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e4:	fb01 f307 	mul.w	r3, r1, r7
 80006e8:	42a3      	cmp	r3, r4
 80006ea:	d908      	bls.n	80006fe <__udivmoddi4+0x276>
 80006ec:	eb1c 0404 	adds.w	r4, ip, r4
 80006f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80006f4:	d213      	bcs.n	800071e <__udivmoddi4+0x296>
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	d911      	bls.n	800071e <__udivmoddi4+0x296>
 80006fa:	3902      	subs	r1, #2
 80006fc:	4464      	add	r4, ip
 80006fe:	1ae4      	subs	r4, r4, r3
 8000700:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000704:	e739      	b.n	800057a <__udivmoddi4+0xf2>
 8000706:	4604      	mov	r4, r0
 8000708:	e6f0      	b.n	80004ec <__udivmoddi4+0x64>
 800070a:	4608      	mov	r0, r1
 800070c:	e706      	b.n	800051c <__udivmoddi4+0x94>
 800070e:	45c8      	cmp	r8, r9
 8000710:	d2ae      	bcs.n	8000670 <__udivmoddi4+0x1e8>
 8000712:	ebb9 0e02 	subs.w	lr, r9, r2
 8000716:	eb63 0c07 	sbc.w	ip, r3, r7
 800071a:	3801      	subs	r0, #1
 800071c:	e7a8      	b.n	8000670 <__udivmoddi4+0x1e8>
 800071e:	4631      	mov	r1, r6
 8000720:	e7ed      	b.n	80006fe <__udivmoddi4+0x276>
 8000722:	4603      	mov	r3, r0
 8000724:	e799      	b.n	800065a <__udivmoddi4+0x1d2>
 8000726:	4630      	mov	r0, r6
 8000728:	e7d4      	b.n	80006d4 <__udivmoddi4+0x24c>
 800072a:	46d6      	mov	lr, sl
 800072c:	e77f      	b.n	800062e <__udivmoddi4+0x1a6>
 800072e:	4463      	add	r3, ip
 8000730:	3802      	subs	r0, #2
 8000732:	e74d      	b.n	80005d0 <__udivmoddi4+0x148>
 8000734:	4606      	mov	r6, r0
 8000736:	4623      	mov	r3, r4
 8000738:	4608      	mov	r0, r1
 800073a:	e70f      	b.n	800055c <__udivmoddi4+0xd4>
 800073c:	3e02      	subs	r6, #2
 800073e:	4463      	add	r3, ip
 8000740:	e730      	b.n	80005a4 <__udivmoddi4+0x11c>
 8000742:	bf00      	nop

08000744 <__aeabi_idiv0>:
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000754:	2334      	movs	r3, #52	@ 0x34
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <tx_application_define+0x4c>)
 800075e:	490e      	ldr	r1, [pc, #56]	@ (8000798 <tx_application_define+0x50>)
 8000760:	480e      	ldr	r0, [pc, #56]	@ (800079c <tx_application_define+0x54>)
 8000762:	f00b fad5 	bl	800bd10 <_txe_byte_pool_create>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10e      	bne.n	800078a <tx_application_define+0x42>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800076c:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <tx_application_define+0x54>)
 800076e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f000 fa4d 	bl	8000c10 <App_ThreadX_Init>
 8000776:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <tx_application_define+0x36>
      }
      /* USER CODE END  App_ThreadX_Init_Error */
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    status = ThreadX_Init(memory_ptr);
 8000782:	68b8      	ldr	r0, [r7, #8]
 8000784:	f001 f98e 	bl	8001aa4 <ThreadX_Init>
 8000788:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000002c 	.word	0x2000002c
 8000798:	0800c374 	.word	0x0800c374
 800079c:	2001002c 	.word	0x2001002c

080007a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	@ 0x30
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00b fda3 	bl	800c304 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007be:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f2:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000828:	4817      	ldr	r0, [pc, #92]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800082a:	f002 fc93 	bl	8003154 <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000834:	f000 fde4 	bl	8001400 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000844:	f003 fd4e 	bl	80042e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800084e:	f000 fdd7 	bl	8001400 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_ADC1_Init+0xec>)
 8000854:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000856:	2306      	movs	r3, #6
 8000858:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085e:	237f      	movs	r3, #127	@ 0x7f
 8000860:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000862:	2304      	movs	r3, #4
 8000864:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000870:	f003 f8a0 	bl	80039b4 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800087a:	f000 fdc1 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	@ 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20010060 	.word	0x20010060
 800088c:	10c00010 	.word	0x10c00010

08000890 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2220      	movs	r2, #32
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f00b fd31 	bl	800c304 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008a2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008a4:	4a5e      	ldr	r2, [pc, #376]	@ (8000a20 <MX_ADC4_Init+0x190>)
 80008a6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a8:	4b5c      	ldr	r3, [pc, #368]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008ae:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008b0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b59      	ldr	r3, [pc, #356]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008bc:	4b57      	ldr	r3, [pc, #348]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008c2:	4b56      	ldr	r3, [pc, #344]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008c8:	4b54      	ldr	r3, [pc, #336]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008ce:	4b53      	ldr	r3, [pc, #332]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008d4:	4b51      	ldr	r3, [pc, #324]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 8;
 80008da:	4b50      	ldr	r3, [pc, #320]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008dc:	2208      	movs	r2, #8
 80008de:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008e0:	4b4e      	ldr	r3, [pc, #312]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e8:	4b4c      	ldr	r3, [pc, #304]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ee:	4b4b      	ldr	r3, [pc, #300]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80008f4:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008fc:	4b47      	ldr	r3, [pc, #284]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000902:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000904:	4b45      	ldr	r3, [pc, #276]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800090c:	4843      	ldr	r0, [pc, #268]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800090e:	f002 fc21 	bl	8003154 <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 fd72 	bl	8001400 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800091c:	4b41      	ldr	r3, [pc, #260]	@ (8000a24 <MX_ADC4_Init+0x194>)
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000920:	2306      	movs	r3, #6
 8000922:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000928:	237f      	movs	r3, #127	@ 0x7f
 800092a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092c:	2304      	movs	r3, #4
 800092e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4838      	ldr	r0, [pc, #224]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800093a:	f003 f83b 	bl	80039b4 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8000944:	f000 fd5c 	bl	8001400 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000948:	4b37      	ldr	r3, [pc, #220]	@ (8000a28 <MX_ADC4_Init+0x198>)
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800094c:	230c      	movs	r3, #12
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4831      	ldr	r0, [pc, #196]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000956:	f003 f82d 	bl	80039b4 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC4_Init+0xd4>
  {
    Error_Handler();
 8000960:	f000 fd4e 	bl	8001400 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000964:	4b31      	ldr	r3, [pc, #196]	@ (8000a2c <MX_ADC4_Init+0x19c>)
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000968:	2312      	movs	r3, #18
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	482a      	ldr	r0, [pc, #168]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000972:	f003 f81f 	bl	80039b4 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC4_Init+0xf0>
  {
    Error_Handler();
 800097c:	f000 fd40 	bl	8001400 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_ADC4_Init+0x1a0>)
 8000982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000984:	2318      	movs	r3, #24
 8000986:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4823      	ldr	r0, [pc, #140]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800098e:	f003 f811 	bl	80039b4 <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC4_Init+0x10c>
  {
    Error_Handler();
 8000998:	f000 fd32 	bl	8001400 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <MX_ADC4_Init+0x1a4>)
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	481c      	ldr	r0, [pc, #112]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009ac:	f003 f802 	bl	80039b4 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC4_Init+0x12a>
  {
    Error_Handler();
 80009b6:	f000 fd23 	bl	8001400 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_ADC4_Init+0x1a8>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009be:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009ca:	f002 fff3 	bl	80039b4 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC4_Init+0x148>
  {
    Error_Handler();
 80009d4:	f000 fd14 	bl	8001400 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_ADC4_Init+0x1ac>)
 80009da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009dc:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80009e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009e8:	f002 ffe4 	bl	80039b4 <HAL_ADC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC4_Init+0x166>
  {
    Error_Handler();
 80009f2:	f000 fd05 	bl	8001400 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_ADC4_Init+0x1b0>)
 80009f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009fa:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80009fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000a06:	f002 ffd5 	bl	80039b4 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC4_Init+0x184>
  {
    Error_Handler();
 8000a10:	f000 fcf6 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200100cc 	.word	0x200100cc
 8000a20:	50000500 	.word	0x50000500
 8000a24:	14f00020 	.word	0x14f00020
 8000a28:	32601000 	.word	0x32601000
 8000a2c:	2a000400 	.word	0x2a000400
 8000a30:	2e300800 	.word	0x2e300800
 8000a34:	36902000 	.word	0x36902000
 8000a38:	1d500080 	.word	0x1d500080
 8000a3c:	21800100 	.word	0x21800100
 8000a40:	25b00200 	.word	0x25b00200

08000a44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0a2      	sub	sp, #136	@ 0x88
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	2254      	movs	r2, #84	@ 0x54
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00b fc4d 	bl	800c304 <memset>
  if(adcHandle->Instance==ADC1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a72:	d135      	bne.n	8000ae0 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a7a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a7e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	4618      	mov	r0, r3
 8000a86:	f006 fc8d 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a90:	f000 fcb6 	bl	8001400 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a94:	4b58      	ldr	r3, [pc, #352]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	4a57      	ldr	r2, [pc, #348]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000a9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa0:	4b55      	ldr	r3, [pc, #340]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b52      	ldr	r3, [pc, #328]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab0:	4a51      	ldr	r2, [pc, #324]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = FIRMWARECHECK_Pin;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(FIRMWARECHECK_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f004 fd53 	bl	8005584 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000ade:	e086      	b.n	8000bee <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC4)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a45      	ldr	r2, [pc, #276]	@ (8000bfc <HAL_ADC_MspInit+0x1b8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	f040 8081 	bne.w	8000bee <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000af2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000af6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4618      	mov	r0, r3
 8000afe:	f006 fc51 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 8000b08:	f000 fc7a 	bl	8001400 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	4a39      	ldr	r2, [pc, #228]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b18:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b28:	4a33      	ldr	r2, [pc, #204]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b40:	4a2d      	ldr	r2, [pc, #180]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8000b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b58:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b66:	4619      	mov	r1, r3
 8000b68:	4825      	ldr	r0, [pc, #148]	@ (8000c00 <HAL_ADC_MspInit+0x1bc>)
 8000b6a:	f004 fd0b 	bl	8005584 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG_2_Pin|ANALOG_5_Pin|ANALOG_6_Pin|ANALOG_7_Pin
 8000b6e:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8000b72:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b74:	2303      	movs	r3, #3
 8000b76:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b80:	4619      	mov	r1, r3
 8000b82:	4820      	ldr	r0, [pc, #128]	@ (8000c04 <HAL_ADC_MspInit+0x1c0>)
 8000b84:	f004 fcfe 	bl	8005584 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel3;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b8a:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <HAL_ADC_MspInit+0x1c8>)
 8000b8c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b90:	2226      	movs	r2, #38	@ 0x26
 8000b92:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000ba2:	2280      	movs	r2, #128	@ 0x80
 8000ba4:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bac:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bb4:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bb8:	2220      	movs	r2, #32
 8000bba:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000bc2:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bc4:	f003 fe68 	bl	8004898 <HAL_DMA_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 8000bce:	f000 fc17 	bl	8001400 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	203d      	movs	r0, #61	@ 0x3d
 8000be4:	f003 fd3e 	bl	8004664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000be8:	203d      	movs	r0, #61	@ 0x3d
 8000bea:	f003 fd55 	bl	8004698 <HAL_NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3788      	adds	r7, #136	@ 0x88
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000500 	.word	0x50000500
 8000c00:	48000400 	.word	0x48000400
 8000c04:	48000c00 	.word	0x48000c00
 8000c08:	20010138 	.word	0x20010138
 8000c0c:	40020030 	.word	0x40020030

08000c10 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  ret = ThreadX_Init(memory_ptr);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 ff41 	bl	8001aa4 <ThreadX_Init>
 8000c22:	60f8      	str	r0, [r7, #12]
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000c32:	f009 fe07 	bl	800a844 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <MX_CRC_Init+0x40>)
 8000c44:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_CRC_Init+0x3c>)
 8000c66:	f003 fd25 	bl	80046b4 <HAL_CRC_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c70:	f000 fbc6 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20010198 	.word	0x20010198
 8000c7c:	40023000 	.word	0x40023000

08000c80 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <HAL_CRC_MspInit+0x38>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d10b      	bne.n	8000caa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c96:	4a09      	ldr	r2, [pc, #36]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <HAL_CRC_MspInit+0x3c>)
 8000ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ca2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023000 	.word	0x40023000
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cca:	4a11      	ldr	r2, [pc, #68]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_DMA_Init+0x50>)
 8000cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	200d      	movs	r0, #13
 8000cfc:	f003 fcb2 	bl	8004664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d00:	200d      	movs	r0, #13
 8000d02:	f003 fcc9 	bl	8004698 <HAL_NVIC_EnableIRQ>

}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d18:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d1a:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <MX_FDCAN1_Init+0x8c>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d26:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d2a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d38:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000d44:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d46:	2202      	movs	r2, #2
 8000d48:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d52:	221f      	movs	r2, #31
 8000d54:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d58:	2208      	movs	r2, #8
 8000d5a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d5e:	2202      	movs	r2, #2
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d64:	2204      	movs	r2, #4
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d70:	2204      	movs	r2, #4
 8000d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_FDCAN1_Init+0x88>)
 8000d88:	f003 ffb4 	bl	8004cf4 <HAL_FDCAN_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000d92:	f000 fb35 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200101bc 	.word	0x200101bc
 8000da0:	40006400 	.word	0x40006400

08000da4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b09e      	sub	sp, #120	@ 0x78
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	2254      	movs	r2, #84	@ 0x54
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00b fa9d 	bl	800c304 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a28      	ldr	r2, [pc, #160]	@ (8000e70 <HAL_FDCAN_MspInit+0xcc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d149      	bne.n	8000e68 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000dda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000dde:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4618      	mov	r0, r3
 8000de6:	f006 fadd 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000df0:	f000 fb06 	bl	8001400 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000dfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e00:	4b1c      	ldr	r3, [pc, #112]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <HAL_FDCAN_MspInit+0xd0>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e24:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e28:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e36:	2309      	movs	r3, #9
 8000e38:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f004 fb9e 	bl	8005584 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2015      	movs	r0, #21
 8000e4e:	f003 fc09 	bl	8004664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000e52:	2015      	movs	r0, #21
 8000e54:	f003 fc20 	bl	8004698 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2016      	movs	r0, #22
 8000e5e:	f003 fc01 	bl	8004664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000e62:	2016      	movs	r0, #22
 8000e64:	f003 fc18 	bl	8004698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3778      	adds	r7, #120	@ 0x78
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40006400 	.word	0x40006400
 8000e74:	40021000 	.word	0x40021000

08000e78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	@ 0x30
 8000e7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8e:	4b71      	ldr	r3, [pc, #452]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	4a70      	ldr	r2, [pc, #448]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000e94:	f043 0320 	orr.w	r3, r3, #32
 8000e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	f003 0320 	and.w	r3, r3, #32
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b6b      	ldr	r3, [pc, #428]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	4a6a      	ldr	r2, [pc, #424]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb2:	4b68      	ldr	r3, [pc, #416]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b65      	ldr	r3, [pc, #404]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	4a64      	ldr	r2, [pc, #400]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eca:	4b62      	ldr	r3, [pc, #392]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	4a5e      	ldr	r2, [pc, #376]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eee:	4b59      	ldr	r3, [pc, #356]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a58      	ldr	r2, [pc, #352]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b56      	ldr	r3, [pc, #344]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	4b53      	ldr	r3, [pc, #332]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a52      	ldr	r2, [pc, #328]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b50      	ldr	r3, [pc, #320]	@ (8001054 <MX_GPIO_Init+0x1dc>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f641 7130 	movw	r1, #7984	@ 0x1f30
 8000f24:	484c      	ldr	r0, [pc, #304]	@ (8001058 <MX_GPIO_Init+0x1e0>)
 8000f26:	f004 fcaf 	bl	8005888 <HAL_GPIO_WritePin>
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f246 0102 	movw	r1, #24578	@ 0x6002
 8000f30:	484a      	ldr	r0, [pc, #296]	@ (800105c <MX_GPIO_Init+0x1e4>)
 8000f32:	f004 fca9 	bl	8005888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STARTSYNC_2_Pin|CS2_Pin|RESET2_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000f3c:	4848      	ldr	r0, [pc, #288]	@ (8001060 <MX_GPIO_Init+0x1e8>)
 8000f3e:	f004 fca3 	bl	8005888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANALOGSWITCH_5_GPIO_Port, ANALOGSWITCH_5_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f48:	4846      	ldr	r0, [pc, #280]	@ (8001064 <MX_GPIO_Init+0x1ec>)
 8000f4a:	f004 fc9d 	bl	8005888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f004 fc96 	bl	8005888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8000f5c:	f641 7330 	movw	r3, #7984	@ 0x1f30
 8000f60:	61fb      	str	r3, [r7, #28]
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4838      	ldr	r0, [pc, #224]	@ (8001058 <MX_GPIO_Init+0x1e0>)
 8000f76:	f004 fb05 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY1_Pin;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY1_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4833      	ldr	r0, [pc, #204]	@ (800105c <MX_GPIO_Init+0x1e4>)
 8000f90:	f004 faf8 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin;
 8000f94:	f246 0302 	movw	r3, #24578	@ 0x6002
 8000f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	482b      	ldr	r0, [pc, #172]	@ (800105c <MX_GPIO_Init+0x1e4>)
 8000fae:	f004 fae9 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STARTSYNC_2_Pin|CS2_Pin|RESET2_Pin;
 8000fb2:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4825      	ldr	r0, [pc, #148]	@ (8001060 <MX_GPIO_Init+0x1e8>)
 8000fcc:	f004 fada 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRDY2_Pin;
 8000fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY2_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481e      	ldr	r0, [pc, #120]	@ (8001060 <MX_GPIO_Init+0x1e8>)
 8000fe8:	f004 facc 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_5_Pin;
 8000fec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ANALOGSWITCH_5_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4817      	ldr	r0, [pc, #92]	@ (8001064 <MX_GPIO_Init+0x1ec>)
 8001006:	f004 fabd 	bl	8005584 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin;
 800100a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800100e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001026:	f004 faad 	bl	8005584 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2101      	movs	r1, #1
 800102e:	2006      	movs	r0, #6
 8001030:	f003 fb18 	bl	8004664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001034:	2006      	movs	r0, #6
 8001036:	f003 fb2f 	bl	8004698 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2101      	movs	r1, #1
 800103e:	2017      	movs	r0, #23
 8001040:	f003 fb10 	bl	8004664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001044:	2017      	movs	r0, #23
 8001046:	f003 fb27 	bl	8004698 <HAL_NVIC_EnableIRQ>

}
 800104a:	bf00      	nop
 800104c:	3730      	adds	r7, #48	@ 0x30
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	48000800 	.word	0x48000800
 800105c:	48000400 	.word	0x48000400
 8001060:	48001000 	.word	0x48001000
 8001064:	48000c00 	.word	0x48000c00

08001068 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <MX_I2C1_Init+0x74>)
 800106e:	4a1c      	ldr	r2, [pc, #112]	@ (80010e0 <MX_I2C1_Init+0x78>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <MX_I2C1_Init+0x7c>)
 8001076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MX_I2C1_Init+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107e:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001080:	2201      	movs	r2, #1
 8001082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_I2C1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a2:	480e      	ldr	r0, [pc, #56]	@ (80010dc <MX_I2C1_Init+0x74>)
 80010a4:	f004 fc3a 	bl	800591c <HAL_I2C_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ae:	f000 f9a7 	bl	8001400 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4809      	ldr	r0, [pc, #36]	@ (80010dc <MX_I2C1_Init+0x74>)
 80010b6:	f005 faca 	bl	800664e <HAL_I2CEx_ConfigAnalogFilter>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010c0:	f000 f99e 	bl	8001400 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_I2C1_Init+0x74>)
 80010c8:	f005 fb0c 	bl	80066e4 <HAL_I2CEx_ConfigDigitalFilter>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010d2:	f000 f995 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20010220 	.word	0x20010220
 80010e0:	40005400 	.word	0x40005400
 80010e4:	30909dec 	.word	0x30909dec

080010e8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */
//    hi2c4.XferCount
  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <MX_I2C4_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <MX_I2C4_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00F07BFF;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_I2C4_Init+0x74>)
 80010f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <MX_I2C4_Init+0x7c>)
 80010f6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <MX_I2C4_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_I2C4_Init+0x74>)
 8001100:	2201      	movs	r2, #1
 8001102:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_I2C4_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_I2C4_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_I2C4_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_I2C4_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_I2C4_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001122:	480e      	ldr	r0, [pc, #56]	@ (800115c <MX_I2C4_Init+0x74>)
 8001124:	f004 fbfa 	bl	800591c <HAL_I2C_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800112e:	f000 f967 	bl	8001400 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001132:	2100      	movs	r1, #0
 8001134:	4809      	ldr	r0, [pc, #36]	@ (800115c <MX_I2C4_Init+0x74>)
 8001136:	f005 fa8a 	bl	800664e <HAL_I2CEx_ConfigAnalogFilter>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001140:	f000 f95e 	bl	8001400 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001144:	2100      	movs	r1, #0
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_I2C4_Init+0x74>)
 8001148:	f005 facc 	bl	80066e4 <HAL_I2CEx_ConfigDigitalFilter>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 f955 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20010274 	.word	0x20010274
 8001160:	40008400 	.word	0x40008400
 8001164:	00f07bff 	.word	0x00f07bff

08001168 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0a2      	sub	sp, #136	@ 0x88
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	2254      	movs	r2, #84	@ 0x54
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f00b f8bb 	bl	800c304 <memset>
  if(i2cHandle->Instance==I2C1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a57      	ldr	r2, [pc, #348]	@ (80012f0 <HAL_I2C_MspInit+0x188>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d158      	bne.n	800124a <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001198:	2340      	movs	r3, #64	@ 0x40
 800119a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800119c:	2300      	movs	r3, #0
 800119e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4618      	mov	r0, r3
 80011a6:	f006 f8fd 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011b0:	f000 f926 	bl	8001400 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b4f      	ldr	r3, [pc, #316]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b8:	4a4e      	ldr	r2, [pc, #312]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011c0:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b49      	ldr	r3, [pc, #292]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d0:	4a48      	ldr	r2, [pc, #288]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d8:	4b46      	ldr	r3, [pc, #280]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
 80011e2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011e8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ea:	2312      	movs	r3, #18
 80011ec:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f8:	2304      	movs	r3, #4
 80011fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001208:	f004 f9bc 	bl	8005584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800120c:	2380      	movs	r3, #128	@ 0x80
 800120e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001210:	2312      	movs	r3, #18
 8001212:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121e:	2304      	movs	r3, #4
 8001220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001228:	4619      	mov	r1, r3
 800122a:	4833      	ldr	r0, [pc, #204]	@ (80012f8 <HAL_I2C_MspInit+0x190>)
 800122c:	f004 f9aa 	bl	8005584 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001230:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001234:	4a2f      	ldr	r2, [pc, #188]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800123a:	6593      	str	r3, [r2, #88]	@ 0x58
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 800123e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001248:	e04d      	b.n	80012e6 <HAL_I2C_MspInit+0x17e>
  else if(i2cHandle->Instance==I2C4)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a2b      	ldr	r2, [pc, #172]	@ (80012fc <HAL_I2C_MspInit+0x194>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d148      	bne.n	80012e6 <HAL_I2C_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001254:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001258:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800125a:	2300      	movs	r3, #0
 800125c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	4618      	mov	r0, r3
 8001264:	f006 f89e 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2C_MspInit+0x10a>
      Error_Handler();
 800126e:	f000 f8c7 	bl	8001400 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a1f      	ldr	r2, [pc, #124]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001278:	f043 0304 	orr.w	r3, r3, #4
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b1d      	ldr	r3, [pc, #116]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128a:	23c0      	movs	r3, #192	@ 0xc0
 800128c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128e:	2312      	movs	r3, #18
 8001290:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 800129c:	2308      	movs	r3, #8
 800129e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012a6:	4619      	mov	r1, r3
 80012a8:	4815      	ldr	r0, [pc, #84]	@ (8001300 <HAL_I2C_MspInit+0x198>)
 80012aa:	f004 f96b 	bl	8005584 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80012b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b2:	4a10      	ldr	r2, [pc, #64]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80012ba:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <HAL_I2C_MspInit+0x18c>)
 80012bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2052      	movs	r0, #82	@ 0x52
 80012cc:	f003 f9ca 	bl	8004664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80012d0:	2052      	movs	r0, #82	@ 0x52
 80012d2:	f003 f9e1 	bl	8004698 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2053      	movs	r0, #83	@ 0x53
 80012dc:	f003 f9c2 	bl	8004664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80012e0:	2053      	movs	r0, #83	@ 0x53
 80012e2:	f003 f9d9 	bl	8004698 <HAL_NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3788      	adds	r7, #136	@ 0x88
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48000400 	.word	0x48000400
 80012fc:	40008400 	.word	0x40008400
 8001300:	48000800 	.word	0x48000800

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001308:	f001 fc90 	bl	8002c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130c:	f000 f81a 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001310:	f7ff fdb2 	bl	8000e78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001314:	f7ff fcd4 	bl	8000cc0 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8001318:	f7ff fcfc 	bl	8000d14 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 800131c:	f000 fa2a 	bl	8001774 <MX_TIM2_Init>
  MX_CRC_Init();
 8001320:	f7ff fc8c 	bl	8000c3c <MX_CRC_Init>
  MX_ADC4_Init();
 8001324:	f7ff fab4 	bl	8000890 <MX_ADC4_Init>
  MX_SPI4_Init();
 8001328:	f000 f870 	bl	800140c <MX_SPI4_Init>
  MX_ADC1_Init();
 800132c:	f7ff fa38 	bl	80007a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001330:	f7ff fe9a 	bl	8001068 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001334:	f7ff fed8 	bl	80010e8 <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 8001338:	f000 fada 	bl	80018f0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800133c:	f7ff fc77 	bl	8000c2e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <main+0x3c>

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	@ 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0318 	add.w	r3, r7, #24
 800134e:	2238      	movs	r2, #56	@ 0x38
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f00a ffd6 	bl	800c304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001366:	2000      	movs	r0, #0
 8001368:	f005 fa08 	bl	800677c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800136c:	2302      	movs	r3, #2
 800136e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001370:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001376:	2340      	movs	r3, #64	@ 0x40
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137a:	2302      	movs	r3, #2
 800137c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800137e:	2302      	movs	r3, #2
 8001380:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001382:	2304      	movs	r3, #4
 8001384:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001386:	2350      	movs	r3, #80	@ 0x50
 8001388:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800138a:	2302      	movs	r3, #2
 800138c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800138e:	2304      	movs	r3, #4
 8001390:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001392:	2302      	movs	r3, #2
 8001394:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	4618      	mov	r0, r3
 800139c:	f005 faa2 	bl	80068e4 <HAL_RCC_OscConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013a6:	f000 f82b 	bl	8001400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013aa:	230f      	movs	r3, #15
 80013ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ae:	2303      	movs	r3, #3
 80013b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2104      	movs	r1, #4
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 fda0 	bl	8006f08 <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013ce:	f000 f817 	bl	8001400 <Error_Handler>
  }
}
 80013d2:	bf00      	nop
 80013d4:	3750      	adds	r7, #80	@ 0x50
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ee:	f001 fc35 	bl	8002c5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40001000 	.word	0x40001000

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <Error_Handler+0x8>

0800140c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <MX_SPI4_Init+0x74>)
 8001412:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <MX_SPI4_Init+0x78>)
 8001414:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <MX_SPI4_Init+0x74>)
 8001418:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800141c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800141e:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <MX_SPI4_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <MX_SPI4_Init+0x74>)
 8001426:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800142a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <MX_SPI4_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001432:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <MX_SPI4_Init+0x74>)
 8001434:	2201      	movs	r2, #1
 8001436:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_SPI4_Init+0x74>)
 800143a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800143e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <MX_SPI4_Init+0x74>)
 8001442:	2220      	movs	r2, #32
 8001444:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_SPI4_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <MX_SPI4_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <MX_SPI4_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <MX_SPI4_Init+0x74>)
 800145a:	2207      	movs	r2, #7
 800145c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800145e:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <MX_SPI4_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MX_SPI4_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_SPI4_Init+0x74>)
 800146c:	f006 f9e8 	bl	8007840 <HAL_SPI_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001476:	f7ff ffc3 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200102c8 	.word	0x200102c8
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	@ 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001514 <HAL_SPI_MspInit+0x8c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d130      	bne.n	800150c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80014aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <HAL_SPI_MspInit+0x90>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <HAL_SPI_MspInit+0x90>)
 80014b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <HAL_SPI_MspInit+0x90>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <HAL_SPI_MspInit+0x90>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	4a14      	ldr	r2, [pc, #80]	@ (8001518 <HAL_SPI_MspInit+0x90>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ce:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_SPI_MspInit+0x90>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80014da:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014ec:	2305      	movs	r3, #5
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4809      	ldr	r0, [pc, #36]	@ (800151c <HAL_SPI_MspInit+0x94>)
 80014f8:	f004 f844 	bl	8005584 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	2054      	movs	r0, #84	@ 0x54
 8001502:	f003 f8af 	bl	8004664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001506:	2054      	movs	r0, #84	@ 0x54
 8001508:	f003 f8c6 	bl	8004698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	@ 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40013c00 	.word	0x40013c00
 8001518:	40021000 	.word	0x40021000
 800151c:	48001000 	.word	0x48001000

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <HAL_MspInit+0x4c>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152a:	4a10      	ldr	r2, [pc, #64]	@ (800156c <HAL_MspInit+0x4c>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6613      	str	r3, [r2, #96]	@ 0x60
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <HAL_MspInit+0x4c>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <HAL_MspInit+0x4c>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <HAL_MspInit+0x4c>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001548:	6593      	str	r3, [r2, #88]	@ 0x58
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <HAL_MspInit+0x4c>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001556:	f001 fbd5 	bl	8002d04 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800155a:	2002      	movs	r0, #2
 800155c:	f001 fbbe 	bl	8002cdc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001560:	f005 f9b0 	bl	80068c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	@ 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001580:	4b2c      	ldr	r3, [pc, #176]	@ (8001634 <HAL_InitTick+0xc4>)
 8001582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001584:	4a2b      	ldr	r2, [pc, #172]	@ (8001634 <HAL_InitTick+0xc4>)
 8001586:	f043 0310 	orr.w	r3, r3, #16
 800158a:	6593      	str	r3, [r2, #88]	@ 0x58
 800158c:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <HAL_InitTick+0xc4>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001590:	f003 0310 	and.w	r3, r3, #16
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001598:	f107 020c 	add.w	r2, r7, #12
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f005 fe86 	bl	80072b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015a8:	f005 fe58 	bl	800725c <HAL_RCC_GetPCLK1Freq>
 80015ac:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b0:	4a21      	ldr	r2, [pc, #132]	@ (8001638 <HAL_InitTick+0xc8>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	0c9b      	lsrs	r3, r3, #18
 80015b8:	3b01      	subs	r3, #1
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015bc:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <HAL_InitTick+0xcc>)
 80015be:	4a20      	ldr	r2, [pc, #128]	@ (8001640 <HAL_InitTick+0xd0>)
 80015c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015c2:	4b1e      	ldr	r3, [pc, #120]	@ (800163c <HAL_InitTick+0xcc>)
 80015c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015ca:	4a1c      	ldr	r2, [pc, #112]	@ (800163c <HAL_InitTick+0xcc>)
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <HAL_InitTick+0xcc>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d6:	4b19      	ldr	r3, [pc, #100]	@ (800163c <HAL_InitTick+0xcc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80015dc:	4817      	ldr	r0, [pc, #92]	@ (800163c <HAL_InitTick+0xcc>)
 80015de:	f006 ffe9 	bl	80085b4 <HAL_TIM_Base_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d11b      	bne.n	8001628 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015f0:	4812      	ldr	r0, [pc, #72]	@ (800163c <HAL_InitTick+0xcc>)
 80015f2:	f007 f841 	bl	8008678 <HAL_TIM_Base_Start_IT>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001600:	2b00      	cmp	r3, #0
 8001602:	d111      	bne.n	8001628 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001604:	2036      	movs	r0, #54	@ 0x36
 8001606:	f003 f847 	bl	8004698 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d808      	bhi.n	8001622 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	2036      	movs	r0, #54	@ 0x36
 8001616:	f003 f825 	bl	8004664 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <HAL_InitTick+0xd4>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	e002      	b.n	8001628 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001628:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800162c:	4618      	mov	r0, r3
 800162e:	3730      	adds	r7, #48	@ 0x30
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000
 8001638:	431bde83 	.word	0x431bde83
 800163c:	2001032c 	.word	0x2001032c
 8001640:	40001000 	.word	0x40001000
 8001644:	20000004 	.word	0x20000004

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <NMI_Handler+0x4>

08001650 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <MemManage_Handler+0x4>

08001660 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <UsageFault_Handler+0x4>

08001670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY1_Pin);
 8001682:	2001      	movs	r0, #1
 8001684:	f004 f932 	bl	80058ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}

0800168c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <DMA1_Channel3_IRQHandler+0x10>)
 8001692:	f003 fa10 	bl	8004ab6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20010138 	.word	0x20010138

080016a0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <FDCAN1_IT0_IRQHandler+0x10>)
 80016a6:	f003 fceb 	bl	8005080 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200101bc 	.word	0x200101bc

080016b4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <FDCAN1_IT1_IRQHandler+0x10>)
 80016ba:	f003 fce1 	bl	8005080 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200101bc 	.word	0x200101bc

080016c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY2_Pin);
 80016cc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016d0:	f004 f90c 	bl	80058ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <TIM2_IRQHandler+0x10>)
 80016de:	f007 f9eb 	bl	8008ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20010378 	.word	0x20010378

080016ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <TIM6_DAC_IRQHandler+0x10>)
 80016f2:	f007 f9e1 	bl	8008ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2001032c 	.word	0x2001032c

08001700 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001704:	4802      	ldr	r0, [pc, #8]	@ (8001710 <ADC4_IRQHandler+0x10>)
 8001706:	f001 fee1 	bl	80034cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200100cc 	.word	0x200100cc

08001714 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <I2C4_EV_IRQHandler+0x10>)
 800171a:	f004 f99a 	bl	8005a52 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20010274 	.word	0x20010274

08001728 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 800172c:	4802      	ldr	r0, [pc, #8]	@ (8001738 <I2C4_ER_IRQHandler+0x10>)
 800172e:	f004 f9aa 	bl	8005a86 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20010274 	.word	0x20010274

0800173c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <SPI4_IRQHandler+0x10>)
 8001742:	f006 fcbf 	bl	80080c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200102c8 	.word	0x200102c8

08001750 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	@ (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001792:	4b31      	ldr	r3, [pc, #196]	@ (8001858 <MX_TIM2_Init+0xe4>)
 8001794:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800179a:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <MX_TIM2_Init+0xe4>)
 800179c:	2200      	movs	r2, #0
 800179e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001858 <MX_TIM2_Init+0xe4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001858 <MX_TIM2_Init+0xe4>)
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <MX_TIM2_Init+0xe4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	4b28      	ldr	r3, [pc, #160]	@ (8001858 <MX_TIM2_Init+0xe4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017ba:	4827      	ldr	r0, [pc, #156]	@ (8001858 <MX_TIM2_Init+0xe4>)
 80017bc:	f006 ffd4 	bl	8008768 <HAL_TIM_IC_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017c6:	f7ff fe1b 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	481f      	ldr	r0, [pc, #124]	@ (8001858 <MX_TIM2_Init+0xe4>)
 80017da:	f007 fdbf 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017e4:	f7ff fe0c 	bl	8001400 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017ec:	2301      	movs	r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	4619      	mov	r1, r3
 80017fe:	4816      	ldr	r0, [pc, #88]	@ (8001858 <MX_TIM2_Init+0xe4>)
 8001800:	f007 faa9 	bl	8008d56 <HAL_TIM_IC_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800180a:	f7ff fdf9 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2204      	movs	r2, #4
 8001812:	4619      	mov	r1, r3
 8001814:	4810      	ldr	r0, [pc, #64]	@ (8001858 <MX_TIM2_Init+0xe4>)
 8001816:	f007 fa9e 	bl	8008d56 <HAL_TIM_IC_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001820:	f7ff fdee 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2208      	movs	r2, #8
 8001828:	4619      	mov	r1, r3
 800182a:	480b      	ldr	r0, [pc, #44]	@ (8001858 <MX_TIM2_Init+0xe4>)
 800182c:	f007 fa93 	bl	8008d56 <HAL_TIM_IC_ConfigChannel>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001836:	f7ff fde3 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	220c      	movs	r2, #12
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_TIM2_Init+0xe4>)
 8001842:	f007 fa88 	bl	8008d56 <HAL_TIM_IC_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800184c:	f7ff fdd8 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20010378 	.word	0x20010378

0800185c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800187c:	d12f      	bne.n	80018de <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187e:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <HAL_TIM_IC_MspInit+0x8c>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	4a19      	ldr	r2, [pc, #100]	@ (80018e8 <HAL_TIM_IC_MspInit+0x8c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6593      	str	r3, [r2, #88]	@ 0x58
 800188a:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <HAL_TIM_IC_MspInit+0x8c>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001896:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <HAL_TIM_IC_MspInit+0x8c>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	4a13      	ldr	r2, [pc, #76]	@ (80018e8 <HAL_TIM_IC_MspInit+0x8c>)
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_TIM_IC_MspInit+0x8c>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FREQUENCY_3_Pin|FREQUENCY_2_Pin|FREQUENCY_1_Pin|FREQUENCY_4_Pin;
 80018ae:	23d8      	movs	r3, #216	@ 0xd8
 80018b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b6:	2302      	movs	r3, #2
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80018be:	2302      	movs	r3, #2
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4808      	ldr	r0, [pc, #32]	@ (80018ec <HAL_TIM_IC_MspInit+0x90>)
 80018ca:	f003 fe5b 	bl	8005584 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	201c      	movs	r0, #28
 80018d4:	f002 fec6 	bl	8004664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d8:	201c      	movs	r0, #28
 80018da:	f002 fedd 	bl	8004698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018de:	bf00      	nop
 80018e0:	3728      	adds	r7, #40	@ 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	48000c00 	.word	0x48000c00

080018f0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018f4:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 80018f6:	4a21      	ldr	r2, [pc, #132]	@ (800197c <MX_LPUART1_UART_Init+0x8c>)
 80018f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80018fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 80018fc:	4a20      	ldr	r2, [pc, #128]	@ (8001980 <MX_LPUART1_UART_Init+0x90>)
 80018fe:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001900:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001906:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800190c:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001912:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 8001914:	220c      	movs	r2, #12
 8001916:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001918:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 800191a:	2200      	movs	r2, #0
 800191c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001924:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192a:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001930:	4811      	ldr	r0, [pc, #68]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 8001932:	f007 fdef 	bl	8009514 <HAL_UART_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800193c:	f7ff fd60 	bl	8001400 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001940:	2100      	movs	r1, #0
 8001942:	480d      	ldr	r0, [pc, #52]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 8001944:	f008 fb8a 	bl	800a05c <HAL_UARTEx_SetTxFifoThreshold>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800194e:	f7ff fd57 	bl	8001400 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001952:	2100      	movs	r1, #0
 8001954:	4808      	ldr	r0, [pc, #32]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 8001956:	f008 fbbf 	bl	800a0d8 <HAL_UARTEx_SetRxFifoThreshold>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001960:	f7ff fd4e 	bl	8001400 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	@ (8001978 <MX_LPUART1_UART_Init+0x88>)
 8001966:	f008 fb40 	bl	8009fea <HAL_UARTEx_DisableFifoMode>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001970:	f7ff fd46 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200103c4 	.word	0x200103c4
 800197c:	40008000 	.word	0x40008000
 8001980:	00033324 	.word	0x00033324

08001984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b09e      	sub	sp, #120	@ 0x78
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	2254      	movs	r2, #84	@ 0x54
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00a fcad 	bl	800c304 <memset>
  if(uartHandle->Instance==LPUART1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001a28 <HAL_UART_MspInit+0xa4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d135      	bne.n	8001a20 <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019b4:	2320      	movs	r3, #32
 80019b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	4618      	mov	r0, r3
 80019c2:	f005 fcef 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019cc:	f7ff fd18 	bl	8001400 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019d0:	4b16      	ldr	r3, [pc, #88]	@ (8001a2c <HAL_UART_MspInit+0xa8>)
 80019d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d4:	4a15      	ldr	r2, [pc, #84]	@ (8001a2c <HAL_UART_MspInit+0xa8>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80019dc:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <HAL_UART_MspInit+0xa8>)
 80019de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e8:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <HAL_UART_MspInit+0xa8>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ec:	4a0f      	ldr	r2, [pc, #60]	@ (8001a2c <HAL_UART_MspInit+0xa8>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <HAL_UART_MspInit+0xa8>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a00:	2303      	movs	r3, #3
 8001a02:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a10:	2308      	movs	r3, #8
 8001a12:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <HAL_UART_MspInit+0xac>)
 8001a1c:	f003 fdb2 	bl	8005584 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001a20:	bf00      	nop
 8001a22:	3778      	adds	r7, #120	@ 0x78
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40008000 	.word	0x40008000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48000800 	.word	0x48000800

08001a34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a34:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a38:	f7ff fe8a 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a3c:	480c      	ldr	r0, [pc, #48]	@ (8001a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a3e:	490d      	ldr	r1, [pc, #52]	@ (8001a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a40:	4a0d      	ldr	r2, [pc, #52]	@ (8001a78 <LoopForever+0xe>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a44:	e002      	b.n	8001a4c <LoopCopyDataInit>

08001a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4a:	3304      	adds	r3, #4

08001a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a50:	d3f9      	bcc.n	8001a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a52:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a54:	4c0a      	ldr	r4, [pc, #40]	@ (8001a80 <LoopForever+0x16>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a58:	e001      	b.n	8001a5e <LoopFillZerobss>

08001a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a5c:	3204      	adds	r2, #4

08001a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a60:	d3fb      	bcc.n	8001a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a62:	f00a fc57 	bl	800c314 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a66:	f7ff fc4d 	bl	8001304 <main>

08001a6a <LoopForever>:

LoopForever:
    b LoopForever
 8001a6a:	e7fe      	b.n	8001a6a <LoopForever>
  ldr   r0, =_estack
 8001a6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a74:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001a78:	0800c540 	.word	0x0800c540
  ldr r2, =_sbss
 8001a7c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a80:	20010f10 	.word	0x20010f10

08001a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC1_2_IRQHandler>
	...

08001a88 <HAL_ADC_ConvCpltCallback>:
	analogSwitch8
};

void HAL_ADC_ConvCpltCallback(
    ADC_HandleTypeDef* hadc
){
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    tx_semaphore_put(&semaphoreAnalog);
 8001a90:	4803      	ldr	r0, [pc, #12]	@ (8001aa0 <HAL_ADC_ConvCpltCallback+0x18>)
 8001a92:	f00a fab5 	bl	800c000 <_txe_semaphore_put>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200105b8 	.word	0x200105b8

08001aa4 <ThreadX_Init>:
};


UINT ThreadX_Init(
        VOID *memory_ptr
){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08e      	sub	sp, #56	@ 0x38
 8001aa8:	af08      	add	r7, sp, #32
 8001aaa:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

	TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	613b      	str	r3, [r7, #16]
	CHAR *pointer;

	if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001ab4:	f107 010c 	add.w	r1, r7, #12
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001abe:	6938      	ldr	r0, [r7, #16]
 8001ac0:	f00a f8b2 	bl	800bc28 <_txe_byte_allocate>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <ThreadX_Init+0x2a>
	    return TX_POOL_ERROR;
 8001aca:	2302      	movs	r3, #2
 8001acc:	e065      	b.n	8001b9a <ThreadX_Init+0xf6>
	}

	if(tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	22b0      	movs	r2, #176	@ 0xb0
 8001ad2:	9206      	str	r2, [sp, #24]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	9205      	str	r2, [sp, #20]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	9204      	str	r2, [sp, #16]
 8001adc:	220a      	movs	r2, #10
 8001ade:	9203      	str	r2, [sp, #12]
 8001ae0:	220a      	movs	r2, #10
 8001ae2:	9202      	str	r2, [sp, #8]
 8001ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ae8:	9201      	str	r2, [sp, #4]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2300      	movs	r3, #0
 8001aee:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba4 <ThreadX_Init+0x100>)
 8001af0:	492d      	ldr	r1, [pc, #180]	@ (8001ba8 <ThreadX_Init+0x104>)
 8001af2:	482e      	ldr	r0, [pc, #184]	@ (8001bac <ThreadX_Init+0x108>)
 8001af4:	f00a faa2 	bl	800c03c <_txe_thread_create>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <ThreadX_Init+0x5e>
						 TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
						 TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
	    return TX_THREAD_ERROR;
 8001afe:	230e      	movs	r3, #14
 8001b00:	e04b      	b.n	8001b9a <ThreadX_Init+0xf6>
//					   TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
//    ){
//		return TX_THREAD_ERROR;
//	}

    if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001b02:	f107 010c 	add.w	r1, r7, #12
 8001b06:	2300      	movs	r3, #0
 8001b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b0c:	6938      	ldr	r0, [r7, #16]
 8001b0e:	f00a f88b 	bl	800bc28 <_txe_byte_allocate>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <ThreadX_Init+0x78>
        return TX_POOL_ERROR;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e03e      	b.n	8001b9a <ThreadX_Init+0xf6>
    }

	if(tx_thread_create(&txStrainThread, "txStrainThread", txADS1ThreadInput, 0, pointer,
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	22b0      	movs	r2, #176	@ 0xb0
 8001b20:	9206      	str	r2, [sp, #24]
 8001b22:	2201      	movs	r2, #1
 8001b24:	9205      	str	r2, [sp, #20]
 8001b26:	2200      	movs	r2, #0
 8001b28:	9204      	str	r2, [sp, #16]
 8001b2a:	220a      	movs	r2, #10
 8001b2c:	9203      	str	r2, [sp, #12]
 8001b2e:	220f      	movs	r2, #15
 8001b30:	9202      	str	r2, [sp, #8]
 8001b32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b36:	9201      	str	r2, [sp, #4]
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb0 <ThreadX_Init+0x10c>)
 8001b3e:	491d      	ldr	r1, [pc, #116]	@ (8001bb4 <ThreadX_Init+0x110>)
 8001b40:	481d      	ldr	r0, [pc, #116]	@ (8001bb8 <ThreadX_Init+0x114>)
 8001b42:	f00a fa7b 	bl	800c03c <_txe_thread_create>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <ThreadX_Init+0xac>
                       TX_APP_STACK_SIZE, 15, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                       TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS
    ){
        return TX_THREAD_ERROR;
 8001b4c:	230e      	movs	r3, #14
 8001b4e:	e024      	b.n	8001b9a <ThreadX_Init+0xf6>
    }

	tx_semaphore_create(&semaphoreAnalog, "semaphoreAnalog", 0);
 8001b50:	231c      	movs	r3, #28
 8001b52:	2200      	movs	r2, #0
 8001b54:	4919      	ldr	r1, [pc, #100]	@ (8001bbc <ThreadX_Init+0x118>)
 8001b56:	481a      	ldr	r0, [pc, #104]	@ (8001bc0 <ThreadX_Init+0x11c>)
 8001b58:	f00a f97a 	bl	800be50 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreAero, "semaphoreAero", 0);
 8001b5c:	231c      	movs	r3, #28
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4918      	ldr	r1, [pc, #96]	@ (8001bc4 <ThreadX_Init+0x120>)
 8001b62:	4819      	ldr	r0, [pc, #100]	@ (8001bc8 <ThreadX_Init+0x124>)
 8001b64:	f00a f974 	bl	800be50 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreFrequency, "semaphoreFrequency", 1);
 8001b68:	231c      	movs	r3, #28
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4917      	ldr	r1, [pc, #92]	@ (8001bcc <ThreadX_Init+0x128>)
 8001b6e:	4818      	ldr	r0, [pc, #96]	@ (8001bd0 <ThreadX_Init+0x12c>)
 8001b70:	f00a f96e 	bl	800be50 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreExADC1, "semaphoreExADC1", 0);
 8001b74:	231c      	movs	r3, #28
 8001b76:	2200      	movs	r2, #0
 8001b78:	4916      	ldr	r1, [pc, #88]	@ (8001bd4 <ThreadX_Init+0x130>)
 8001b7a:	4817      	ldr	r0, [pc, #92]	@ (8001bd8 <ThreadX_Init+0x134>)
 8001b7c:	f00a f968 	bl	800be50 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreExADC2, "semaphoreExADC2", 0);
 8001b80:	231c      	movs	r3, #28
 8001b82:	2200      	movs	r2, #0
 8001b84:	4915      	ldr	r1, [pc, #84]	@ (8001bdc <ThreadX_Init+0x138>)
 8001b86:	4816      	ldr	r0, [pc, #88]	@ (8001be0 <ThreadX_Init+0x13c>)
 8001b88:	f00a f962 	bl	800be50 <_txe_semaphore_create>
	tx_semaphore_create(&semaphoreSPI, "semaphoreSPI", 0);
 8001b8c:	231c      	movs	r3, #28
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4914      	ldr	r1, [pc, #80]	@ (8001be4 <ThreadX_Init+0x140>)
 8001b92:	4815      	ldr	r0, [pc, #84]	@ (8001be8 <ThreadX_Init+0x144>)
 8001b94:	f00a f95c 	bl	800be50 <_txe_semaphore_create>
    

	return ret;
 8001b98:	697b      	ldr	r3, [r7, #20]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	08001bed 	.word	0x08001bed
 8001ba8:	0800c388 	.word	0x0800c388
 8001bac:	20010458 	.word	0x20010458
 8001bb0:	08001c3d 	.word	0x08001c3d
 8001bb4:	0800c398 	.word	0x0800c398
 8001bb8:	20010508 	.word	0x20010508
 8001bbc:	0800c3a8 	.word	0x0800c3a8
 8001bc0:	200105b8 	.word	0x200105b8
 8001bc4:	0800c3b8 	.word	0x0800c3b8
 8001bc8:	200105d4 	.word	0x200105d4
 8001bcc:	0800c3c8 	.word	0x0800c3c8
 8001bd0:	200105f0 	.word	0x200105f0
 8001bd4:	0800c3dc 	.word	0x0800c3dc
 8001bd8:	2001060c 	.word	0x2001060c
 8001bdc:	0800c3ec 	.word	0x0800c3ec
 8001be0:	20010628 	.word	0x20010628
 8001be4:	0800c3fc 	.word	0x0800c3fc
 8001be8:	20010644 	.word	0x20010644

08001bec <txMainThreadEntry>:


void txMainThreadEntry(
    ULONG threadInput
){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
    HAL_FDCAN_Start(&hfdcan1);
 8001bf4:	480e      	ldr	r0, [pc, #56]	@ (8001c30 <txMainThreadEntry+0x44>)
 8001bf6:	f003 f9d7 	bl	8004fa8 <HAL_FDCAN_Start>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	480d      	ldr	r0, [pc, #52]	@ (8001c34 <txMainThreadEntry+0x48>)
 8001bfe:	f006 fe0b 	bl	8008818 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001c02:	2104      	movs	r1, #4
 8001c04:	480b      	ldr	r0, [pc, #44]	@ (8001c34 <txMainThreadEntry+0x48>)
 8001c06:	f006 fe07 	bl	8008818 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001c0a:	2108      	movs	r1, #8
 8001c0c:	4809      	ldr	r0, [pc, #36]	@ (8001c34 <txMainThreadEntry+0x48>)
 8001c0e:	f006 fe03 	bl	8008818 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001c12:	210c      	movs	r1, #12
 8001c14:	4807      	ldr	r0, [pc, #28]	@ (8001c34 <txMainThreadEntry+0x48>)
 8001c16:	f006 fdff 	bl	8008818 <HAL_TIM_IC_Start_IT>


	while(1){
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001c1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c1e:	4806      	ldr	r0, [pc, #24]	@ (8001c38 <txMainThreadEntry+0x4c>)
 8001c20:	f003 fe4a 	bl	80058b8 <HAL_GPIO_TogglePin>

	    tx_thread_sleep(1000);
 8001c24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c28:	f009 f96c 	bl	800af04 <_tx_thread_sleep>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001c2c:	bf00      	nop
 8001c2e:	e7f4      	b.n	8001c1a <txMainThreadEntry+0x2e>
 8001c30:	200101bc 	.word	0x200101bc
 8001c34:	20010378 	.word	0x20010378
 8001c38:	48000800 	.word	0x48000800

08001c3c <txADS1ThreadInput>:
    }
}

void txADS1ThreadInput(
    ULONG threadInput
){
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b0b4      	sub	sp, #208	@ 0xd0
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
//    uint8_t rxData[3];
//    uint8_t inputSet = 0;
    uint8_t canTxData[20];
//    uint64_t combinedData[6];
    externalADC1.csPinPort = CS1_GPIO_Port;
 8001c44:	4b9a      	ldr	r3, [pc, #616]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001c46:	4a9b      	ldr	r2, [pc, #620]	@ (8001eb4 <txADS1ThreadInput+0x278>)
 8001c48:	61da      	str	r2, [r3, #28]
    externalADC1.csPin = CS1_Pin;
 8001c4a:	4b99      	ldr	r3, [pc, #612]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	841a      	strh	r2, [r3, #32]
    externalADC1.startSyncPinPort = STARTSYNC_1_GPIO_Port;
 8001c50:	4b97      	ldr	r3, [pc, #604]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001c52:	4a98      	ldr	r2, [pc, #608]	@ (8001eb4 <txADS1ThreadInput+0x278>)
 8001c54:	615a      	str	r2, [r3, #20]
    externalADC1.startSyncPin = STARTSYNC_1_Pin;
 8001c56:	4b96      	ldr	r3, [pc, #600]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001c58:	2210      	movs	r2, #16
 8001c5a:	831a      	strh	r2, [r3, #24]
    externalADC1.resetPinPort = RESET1_GPIO_Port;
 8001c5c:	4b94      	ldr	r3, [pc, #592]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001c5e:	4a96      	ldr	r2, [pc, #600]	@ (8001eb8 <txADS1ThreadInput+0x27c>)
 8001c60:	62da      	str	r2, [r3, #44]	@ 0x2c
    externalADC1.resetPin = RESET1_Pin;
 8001c62:	4b93      	ldr	r3, [pc, #588]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001c64:	2202      	movs	r2, #2
 8001c66:	861a      	strh	r2, [r3, #48]	@ 0x30
    externalADC1.drdyPinPort = DRDY1_GPIO_Port;
 8001c68:	4b91      	ldr	r3, [pc, #580]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001c6a:	4a93      	ldr	r2, [pc, #588]	@ (8001eb8 <txADS1ThreadInput+0x27c>)
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24
    externalADC1.drdyPin = DRDY1_Pin;
 8001c6e:	4b90      	ldr	r3, [pc, #576]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	851a      	strh	r2, [r3, #40]	@ 0x28

    externalADC2.csPinPort = CS2_GPIO_Port;
 8001c74:	4b91      	ldr	r3, [pc, #580]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001c76:	4a92      	ldr	r2, [pc, #584]	@ (8001ec0 <txADS1ThreadInput+0x284>)
 8001c78:	61da      	str	r2, [r3, #28]
    externalADC2.csPin = CS2_Pin;
 8001c7a:	4b90      	ldr	r3, [pc, #576]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001c7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c80:	841a      	strh	r2, [r3, #32]
    externalADC2.startSyncPinPort = STARTSYNC_2_GPIO_Port;
 8001c82:	4b8e      	ldr	r3, [pc, #568]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001c84:	4a8e      	ldr	r2, [pc, #568]	@ (8001ec0 <txADS1ThreadInput+0x284>)
 8001c86:	615a      	str	r2, [r3, #20]
    externalADC2.startSyncPin = STARTSYNC_2_Pin;
 8001c88:	4b8c      	ldr	r3, [pc, #560]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001c8a:	2280      	movs	r2, #128	@ 0x80
 8001c8c:	831a      	strh	r2, [r3, #24]
    externalADC2.resetPinPort = RESET2_GPIO_Port;
 8001c8e:	4b8b      	ldr	r3, [pc, #556]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001c90:	4a8b      	ldr	r2, [pc, #556]	@ (8001ec0 <txADS1ThreadInput+0x284>)
 8001c92:	62da      	str	r2, [r3, #44]	@ 0x2c
    externalADC2.resetPin = RESET2_Pin;
 8001c94:	4b89      	ldr	r3, [pc, #548]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001c96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c9a:	861a      	strh	r2, [r3, #48]	@ 0x30
    externalADC2.drdyPinPort = DRDY2_GPIO_Port;
 8001c9c:	4b87      	ldr	r3, [pc, #540]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001c9e:	4a88      	ldr	r2, [pc, #544]	@ (8001ec0 <txADS1ThreadInput+0x284>)
 8001ca0:	625a      	str	r2, [r3, #36]	@ 0x24
    externalADC2.drdyPin = DRDY2_Pin;
 8001ca2:	4b86      	ldr	r3, [pc, #536]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ca8:	851a      	strh	r2, [r3, #40]	@ 0x28

    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	2120      	movs	r1, #32
 8001cae:	4881      	ldr	r0, [pc, #516]	@ (8001eb4 <txADS1ThreadInput+0x278>)
 8001cb0:	f003 fdea 	bl	8005888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cba:	4881      	ldr	r0, [pc, #516]	@ (8001ec0 <txADS1ThreadInput+0x284>)
 8001cbc:	f003 fde4 	bl	8005888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(STARTSYNC_1_GPIO_Port, STARTSYNC_1_Pin, RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2110      	movs	r1, #16
 8001cc4:	487b      	ldr	r0, [pc, #492]	@ (8001eb4 <txADS1ThreadInput+0x278>)
 8001cc6:	f003 fddf 	bl	8005888 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(STARTSYNC_2_GPIO_Port, STARTSYNC_2_Pin, RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2180      	movs	r1, #128	@ 0x80
 8001cce:	487c      	ldr	r0, [pc, #496]	@ (8001ec0 <txADS1ThreadInput+0x284>)
 8001cd0:	f003 fdda 	bl	8005888 <HAL_GPIO_WritePin>
    // Delay to allow power supplies to settle
    tx_thread_sleep(1000);
 8001cd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cd8:	f009 f914 	bl	800af04 <_tx_thread_sleep>

    // Set up registers
    StartUpRoutine(&externalADC1);
 8001cdc:	4874      	ldr	r0, [pc, #464]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001cde:	f000 f9c5 	bl	800206c <StartUpRoutine>
    StartUpRoutine(&externalADC2);
 8001ce2:	4876      	ldr	r0, [pc, #472]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001ce4:	f000 f9c2 	bl	800206c <StartUpRoutine>

//    WriteRegister(&externalADC1, STATUS_ADDR_MASK, data);
//
//    // Set the PGA
    uint8_t data = ADS_DELAY_14 + ADS_PGA_ENABLED + ADS_GAIN_64;
 8001ce8:	230e      	movs	r3, #14
 8001cea:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    WriteRegister(&externalADC1, REG_ADDR_PGA, data);
 8001cee:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	2103      	movs	r1, #3
 8001cf6:	486e      	ldr	r0, [pc, #440]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001cf8:	f000 fa50 	bl	800219c <WriteRegister>
    WriteRegister(&externalADC2, REG_ADDR_PGA, data);
 8001cfc:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001d00:	461a      	mov	r2, r3
 8001d02:	2103      	movs	r1, #3
 8001d04:	486d      	ldr	r0, [pc, #436]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001d06:	f000 fa49 	bl	800219c <WriteRegister>
//
//    // Use single shot conversions/
    data = ADS_CONVMODE_SS + ADS_DR_4000 + ADS_FILTERTYPE_LL;
 8001d0a:	233d      	movs	r3, #61	@ 0x3d
 8001d0c:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    WriteRegister(&externalADC1, REG_ADDR_DATARATE, data);
 8001d10:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001d14:	461a      	mov	r2, r3
 8001d16:	2104      	movs	r1, #4
 8001d18:	4865      	ldr	r0, [pc, #404]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001d1a:	f000 fa3f 	bl	800219c <WriteRegister>
    WriteRegister(&externalADC2, REG_ADDR_DATARATE, data);
 8001d1e:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001d22:	461a      	mov	r2, r3
 8001d24:	2104      	movs	r1, #4
 8001d26:	4865      	ldr	r0, [pc, #404]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001d28:	f000 fa38 	bl	800219c <WriteRegister>

    data = ADS_REFP_BYP_DISABLE + ADS_REFN_BYP_DISABLE + ADS_REFSEL_INT + ADS_REFINT_ON_PDWN;
 8001d2c:	2339      	movs	r3, #57	@ 0x39
 8001d2e:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    WriteRegister(&externalADC1, REG_ADDR_REF, data);
 8001d32:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001d36:	461a      	mov	r2, r3
 8001d38:	2105      	movs	r1, #5
 8001d3a:	485d      	ldr	r0, [pc, #372]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001d3c:	f000 fa2e 	bl	800219c <WriteRegister>
    WriteRegister(&externalADC2, REG_ADDR_REF, data);
 8001d40:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001d44:	461a      	mov	r2, r3
 8001d46:	2105      	movs	r1, #5
 8001d48:	485c      	ldr	r0, [pc, #368]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001d4a:	f000 fa27 	bl	800219c <WriteRegister>

    data = ADS_P_AIN0 + ADS_N_AIN1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
    WriteRegister(&externalADC1, REG_ADDR_INPMUX, data);
 8001d54:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	4854      	ldr	r0, [pc, #336]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001d5e:	f000 fa1d 	bl	800219c <WriteRegister>
    WriteRegister(&externalADC2, REG_ADDR_INPMUX, data);
 8001d62:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001d66:	461a      	mov	r2, r3
 8001d68:	2102      	movs	r1, #2
 8001d6a:	4854      	ldr	r0, [pc, #336]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001d6c:	f000 fa16 	bl	800219c <WriteRegister>
//        REGWR_OPCODE_MASK + INPMUX_ADDR_MASK,
//        0x00,
//        adcMuxStates[inputSet]
//    };
//    uint32_t combinedData[6];
   FDCAN_TxHeaderTypeDef exADC1Header = {
 8001d70:	4b54      	ldr	r3, [pc, #336]	@ (8001ec4 <txADS1ThreadInput+0x288>)
 8001d72:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001d76:	461d      	mov	r5, r3
 8001d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d80:	682b      	ldr	r3, [r5, #0]
 8001d82:	6023      	str	r3, [r4, #0]
       .FDFormat = FDCAN_FD_CAN,
       .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
       .MessageMarker = 0
   };

   FDCAN_TxHeaderTypeDef exADC2Header = {
 8001d84:	4b50      	ldr	r3, [pc, #320]	@ (8001ec8 <txADS1ThreadInput+0x28c>)
 8001d86:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8001d8a:	461d      	mov	r5, r3
 8001d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	6023      	str	r3, [r4, #0]
       .FDFormat = FDCAN_FD_CAN,
       .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
       .MessageMarker = 0
   };
//    uint32_t thing = 0;
    uint8_t status[1] = {0};
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    uint32_t data1[6];
    uint32_t data2[6];

    while(1){

    	for(int i = 0; i < 6; i ++){
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001da4:	e043      	b.n	8001e2e <txADS1ThreadInput+0x1f2>
    		WriteRegister(&externalADC1, REG_ADDR_INPMUX, adcMuxStates[i]);
 8001da6:	4a49      	ldr	r2, [pc, #292]	@ (8001ecc <txADS1ThreadInput+0x290>)
 8001da8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	2102      	movs	r1, #2
 8001db4:	483e      	ldr	r0, [pc, #248]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001db6:	f000 f9f1 	bl	800219c <WriteRegister>
			WriteRegister(&externalADC2, REG_ADDR_INPMUX, adcMuxStates[i]);
 8001dba:	4a44      	ldr	r2, [pc, #272]	@ (8001ecc <txADS1ThreadInput+0x290>)
 8001dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	483c      	ldr	r0, [pc, #240]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001dca:	f000 f9e7 	bl	800219c <WriteRegister>
//			tx_thread_sleep(1);
			SendCommand(&externalADC1, OPCODE_START);
 8001dce:	2108      	movs	r1, #8
 8001dd0:	4837      	ldr	r0, [pc, #220]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001dd2:	f000 fa2d 	bl	8002230 <SendCommand>
	        SendCommand(&externalADC2, OPCODE_START);
 8001dd6:	2108      	movs	r1, #8
 8001dd8:	4838      	ldr	r0, [pc, #224]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001dda:	f000 fa29 	bl	8002230 <SendCommand>
	        tx_thread_sleep(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f009 f890 	bl	800af04 <_tx_thread_sleep>
	        data1[i] = ReadADCData(&externalADC1, status, COMMAND);
 8001de4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001de8:	2201      	movs	r2, #1
 8001dea:	4619      	mov	r1, r3
 8001dec:	4830      	ldr	r0, [pc, #192]	@ (8001eb0 <txADS1ThreadInput+0x274>)
 8001dee:	f000 fa45 	bl	800227c <ReadADCData>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461a      	mov	r2, r3
 8001df6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	33d0      	adds	r3, #208	@ 0xd0
 8001dfe:	443b      	add	r3, r7
 8001e00:	f843 2c80 	str.w	r2, [r3, #-128]
	        data2[i] = ReadADCData(&externalADC2, status, COMMAND);
 8001e04:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	482b      	ldr	r0, [pc, #172]	@ (8001ebc <txADS1ThreadInput+0x280>)
 8001e0e:	f000 fa35 	bl	800227c <ReadADCData>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	33d0      	adds	r3, #208	@ 0xd0
 8001e1e:	443b      	add	r3, r7
 8001e20:	f843 2c98 	str.w	r2, [r3, #-152]
    	for(int i = 0; i < 6; i ++){
 8001e24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001e2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	ddb7      	ble.n	8001da6 <txADS1ThreadInput+0x16a>
//        if(inputSet == 6){
//            inputSet = 0;
//        }
//        if(inputSet == 6){
		struct ucr_01_rear_strain_gauges1_t set1 = {
			.gauge1 = data1[0],
 8001e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
		struct ucr_01_rear_strain_gauges1_t set1 = {
 8001e38:	623b      	str	r3, [r7, #32]
			.gauge2 = data1[1],
 8001e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
		struct ucr_01_rear_strain_gauges1_t set1 = {
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
			.gauge3 = data1[2],
 8001e3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
		struct ucr_01_rear_strain_gauges1_t set1 = {
 8001e40:	62bb      	str	r3, [r7, #40]	@ 0x28
			.gauge4 = data1[3],
 8001e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
		struct ucr_01_rear_strain_gauges1_t set1 = {
 8001e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			.gauge5 = data1[4],
 8001e46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
		struct ucr_01_rear_strain_gauges1_t set1 = {
 8001e48:	633b      	str	r3, [r7, #48]	@ 0x30
			.gauge6 = data1[5]
 8001e4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
		struct ucr_01_rear_strain_gauges1_t set1 = {
 8001e4c:	637b      	str	r3, [r7, #52]	@ 0x34
		};

		struct ucr_01_rear_strain_gauges2_t set2 = {
			.gauge1 = data2[0],
 8001e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
		struct ucr_01_rear_strain_gauges2_t set2 = {
 8001e50:	60bb      	str	r3, [r7, #8]
			.gauge2 = data2[1],
 8001e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
		struct ucr_01_rear_strain_gauges2_t set2 = {
 8001e54:	60fb      	str	r3, [r7, #12]
			.gauge3 = data2[2],
 8001e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
		struct ucr_01_rear_strain_gauges2_t set2 = {
 8001e58:	613b      	str	r3, [r7, #16]
			.gauge4 = data2[3],
 8001e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
		struct ucr_01_rear_strain_gauges2_t set2 = {
 8001e5c:	617b      	str	r3, [r7, #20]
			.gauge5 = data2[4],
 8001e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
		struct ucr_01_rear_strain_gauges2_t set2 = {
 8001e60:	61bb      	str	r3, [r7, #24]
			.gauge6 = data2[5]
 8001e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
		struct ucr_01_rear_strain_gauges2_t set2 = {
 8001e64:	61fb      	str	r3, [r7, #28]
		};
		ucr_01_front_strain_gauges1_pack(canTxData, &set1, UCR_01_REAR_STRAIN_GAUGES1_LENGTH);
 8001e66:	f107 0120 	add.w	r1, r7, #32
 8001e6a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001e6e:	2214      	movs	r2, #20
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fba5 	bl	80025c0 <ucr_01_front_strain_gauges1_pack>
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &exADC1Header, canTxData);
 8001e76:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8001e7a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4813      	ldr	r0, [pc, #76]	@ (8001ed0 <txADS1ThreadInput+0x294>)
 8001e82:	f003 f8b9 	bl	8004ff8 <HAL_FDCAN_AddMessageToTxFifoQ>
		ucr_01_front_strain_gauges2_pack(canTxData, &set2, UCR_01_REAR_STRAIN_GAUGES1_LENGTH);
 8001e86:	f107 0108 	add.w	r1, r7, #8
 8001e8a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001e8e:	2214      	movs	r2, #20
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fcdb 	bl	800284c <ucr_01_front_strain_gauges2_pack>
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &exADC2Header, canTxData);
 8001e96:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8001e9a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480b      	ldr	r0, [pc, #44]	@ (8001ed0 <txADS1ThreadInput+0x294>)
 8001ea2:	f003 f8a9 	bl	8004ff8 <HAL_FDCAN_AddMessageToTxFifoQ>
////            .gauge6 = combinedData[5]
////        };
////        ucr_01_front_strain_gauges1_pack(canTxData, &stuff, UCR_01_FRONT_STRAIN_GAUGES1_LENGTH);
////        HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &exADC1Header, canTxData);
//        }
        tx_thread_sleep(5);
 8001ea6:	2005      	movs	r0, #5
 8001ea8:	f009 f82c 	bl	800af04 <_tx_thread_sleep>
    while(1){
 8001eac:	e777      	b.n	8001d9e <txADS1ThreadInput+0x162>
 8001eae:	bf00      	nop
 8001eb0:	20010760 	.word	0x20010760
 8001eb4:	48000800 	.word	0x48000800
 8001eb8:	48000400 	.word	0x48000400
 8001ebc:	20010794 	.word	0x20010794
 8001ec0:	48001000 	.word	0x48001000
 8001ec4:	0800c478 	.word	0x0800c478
 8001ec8:	0800c49c 	.word	0x0800c49c
 8001ecc:	0800c4f0 	.word	0x0800c4f0
 8001ed0:	200101bc 	.word	0x200101bc

08001ed4 <HAL_TIM_IC_CaptureCallback>:
  * @param htim: Timer handle
  * @retval void
  */
void HAL_TIM_IC_CaptureCallback(
    TIM_HandleTypeDef* htim
){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
    uint8_t channel = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
    switch (htim->Channel){
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7f1b      	ldrb	r3, [r3, #28]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	2b07      	cmp	r3, #7
 8001ee8:	d827      	bhi.n	8001f3a <HAL_TIM_IC_CaptureCallback+0x66>
 8001eea:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef0 <HAL_TIM_IC_CaptureCallback+0x1c>)
 8001eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef0:	08001f11 	.word	0x08001f11
 8001ef4:	08001f17 	.word	0x08001f17
 8001ef8:	08001f3b 	.word	0x08001f3b
 8001efc:	08001f1d 	.word	0x08001f1d
 8001f00:	08001f3b 	.word	0x08001f3b
 8001f04:	08001f3b 	.word	0x08001f3b
 8001f08:	08001f3b 	.word	0x08001f3b
 8001f0c:	08001f23 	.word	0x08001f23
        case HAL_TIM_ACTIVE_CHANNEL_1:
            channel = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
            break;
 8001f14:	e008      	b.n	8001f28 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_2:
            channel = 1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
            break;
 8001f1a:	e005      	b.n	8001f28 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            channel = 2;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	73fb      	strb	r3, [r7, #15]
            break;
 8001f20:	e002      	b.n	8001f28 <HAL_TIM_IC_CaptureCallback+0x54>
        case HAL_TIM_ACTIVE_CHANNEL_4:
            channel = 3;
 8001f22:	2303      	movs	r3, #3
 8001f24:	73fb      	strb	r3, [r7, #15]
            break;
 8001f26:	bf00      	nop
        default:
            return;
    }
    CalculateFrequency(&ChannelData[channel], htim);
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	019b      	lsls	r3, r3, #6
 8001f2c:	4a05      	ldr	r2, [pc, #20]	@ (8001f44 <HAL_TIM_IC_CaptureCallback+0x70>)
 8001f2e:	4413      	add	r3, r2
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f808 	bl	8001f48 <CalculateFrequency>
 8001f38:	e000      	b.n	8001f3c <HAL_TIM_IC_CaptureCallback+0x68>
            return;
 8001f3a:	bf00      	nop
}
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20010660 	.word	0x20010660

08001f48 <CalculateFrequency>:

static uint8_t CalculateFrequency(
    frequency_t* channel,
    TIM_HandleTypeDef* htim
){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
    uint8_t retVal = UCR_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
    // Check if first rising edge to begin capture
    if(TX_SUCCESS != tx_semaphore_get(&semaphoreFrequency, TX_NO_WAIT)){
 8001f56:	2100      	movs	r1, #0
 8001f58:	4835      	ldr	r0, [pc, #212]	@ (8002030 <CalculateFrequency+0xe8>)
 8001f5a:	f00a f80f 	bl	800bf7c <_txe_semaphore_get>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <CalculateFrequency+0x24>
        retVal = UCR_NOT_OK;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
        return retVal;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	e05c      	b.n	8002026 <CalculateFrequency+0xde>
    }

    if(!channel->isFirstCapture){
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7a1b      	ldrb	r3, [r3, #8]
 8001f70:	f083 0301 	eor.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d012      	beq.n	8001fa0 <CalculateFrequency+0x58>
        if(TX_SUCCESS != tx_timer_activate(&channel->resetTimer)){
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f00a f94e 	bl	800c220 <_txe_timer_activate>
                   // ADD error handler stuff here;
        }
        channel->firstValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6838      	ldr	r0, [r7, #0]
 8001f8e:	f006 ff7f 	bl	8008e90 <HAL_TIM_ReadCapturedValue>
 8001f92:	4602      	mov	r2, r0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	601a      	str	r2, [r3, #0]
        // Set flag to indicate next value will be second rising edge
        channel->isFirstCapture = true;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	721a      	strb	r2, [r3, #8]
 8001f9e:	e036      	b.n	800200e <CalculateFrequency+0xc6>
    }else{
        // Stop the reset timer
        if(TX_SUCCESS != tx_timer_deactivate(&channel->resetTimer)){
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	330c      	adds	r3, #12
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f00a f98f 	bl	800c2c8 <_txe_timer_deactivate>
            // ADD error handler stuff here;
        }
        channel->secondValue = HAL_TIM_ReadCapturedValue(htim, channel->halChannel);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f006 ff6c 	bl	8008e90 <HAL_TIM_ReadCapturedValue>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	605a      	str	r2, [r3, #4]
        // Check if the first capture was before the second
        if(channel->secondValue > channel->firstValue){
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d907      	bls.n	8001fda <CalculateFrequency+0x92>
            // Calculate the difference
            channel->difference = channel->secondValue - channel->firstValue;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	1ad2      	subs	r2, r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fd8:	e010      	b.n	8001ffc <CalculateFrequency+0xb4>
        } else if (channel->secondValue < channel->firstValue){
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d20a      	bcs.n	8001ffc <CalculateFrequency+0xb4>
            channel->difference = ((htim->Init.Period - channel->firstValue) + channel->secondValue) + 1;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	1ad2      	subs	r2, r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        // Reset the first capture state
        channel->firstValue = channel->secondValue;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	601a      	str	r2, [r3, #0]
        if(TX_SUCCESS != tx_timer_activate(&channel->resetTimer)){
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	330c      	adds	r3, #12
 8002008:	4618      	mov	r0, r3
 800200a:	f00a f909 	bl	800c220 <_txe_timer_activate>
                   // ADD error handler stuff here;
        }
    }
    // Release the semaphore
    if(TX_SUCCESS != tx_semaphore_put(&semaphoreFrequency)){
 800200e:	4808      	ldr	r0, [pc, #32]	@ (8002030 <CalculateFrequency+0xe8>)
 8002010:	f009 fff6 	bl	800c000 <_txe_semaphore_put>
        // ADD error handler stuff here;
    }
    // Reset the timer;
    if(TX_SUCCESS != tx_timer_change(&channel->resetTimer, FREQUENCY_RESET_TIME, 0)){
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	330c      	adds	r3, #12
 8002018:	2200      	movs	r2, #0
 800201a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800201e:	4618      	mov	r0, r3
 8002020:	f00a f91c 	bl	800c25c <_txe_timer_change>
        // ADD error handler stuff here;
    }
    return retVal;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200105f0 	.word	0x200105f0

08002034 <HAL_GPIO_EXTI_Callback>:
#include "exti.h"
#include "stdint.h"
#include "main.h"
#include "threadx.h"
//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == DRDY1_Pin){
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d103      	bne.n	800204c <HAL_GPIO_EXTI_Callback+0x18>
        tx_semaphore_put(&semaphoreExADC1);
 8002044:	4807      	ldr	r0, [pc, #28]	@ (8002064 <HAL_GPIO_EXTI_Callback+0x30>)
 8002046:	f009 ffdb 	bl	800c000 <_txe_semaphore_put>
    }else if(GPIO_Pin == DRDY2_Pin){
        tx_semaphore_put(&semaphoreExADC2);
    }
}
 800204a:	e006      	b.n	800205a <HAL_GPIO_EXTI_Callback+0x26>
    }else if(GPIO_Pin == DRDY2_Pin){
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002052:	d102      	bne.n	800205a <HAL_GPIO_EXTI_Callback+0x26>
        tx_semaphore_put(&semaphoreExADC2);
 8002054:	4804      	ldr	r0, [pc, #16]	@ (8002068 <HAL_GPIO_EXTI_Callback+0x34>)
 8002056:	f009 ffd3 	bl	800c000 <_txe_semaphore_put>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2001060c 	.word	0x2001060c
 8002068:	20010628 	.word	0x20010628

0800206c <StartUpRoutine>:
const uint8_t registerStates[] = {
    0x00

};

bool StartUpRoutine(ads124S08Control_t* device){
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    uint8_t initRegisterMap[NUM_REGISTERS] = {0};
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	819a      	strh	r2, [r3, #12]
    uint8_t status, i;

    // Delay for power supply settling
    HAL_Delay(10);
 8002086:	200a      	movs	r0, #10
 8002088:	f000 fe06 	bl	8002c98 <HAL_Delay>

    // Toggle nReset pin to reset registers
    ToggleReset(device);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f822 	bl	80020d6 <ToggleReset>

    // Delay for post reset
    HAL_Delay(10);
 8002092:	200a      	movs	r0, #10
 8002094:	f000 fe00 	bl	8002c98 <HAL_Delay>

    // Check if device is ready
    status = ReadRegister(device, REG_ADDR_STATUS);
 8002098:	2101      	movs	r1, #1
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f836 	bl	800210c <ReadRegister>
 80020a0:	4603      	mov	r3, r0
 80020a2:	77fb      	strb	r3, [r7, #31]
    if(status & ADS_nRDY_MASK){
 80020a4:	7ffb      	ldrb	r3, [r7, #31]
 80020a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <StartUpRoutine+0x46>
        return false;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e00d      	b.n	80020ce <StartUpRoutine+0x62>
    }

    // 
    RestoreRegisterDefaults(device);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fa18 	bl	80024e8 <RestoreRegisterDefaults>

    // Clear Power on Reset flag
    WriteRegister(device, REG_ADDR_STATUS, 0x00);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2101      	movs	r1, #1
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f86d 	bl	800219c <WriteRegister>



    
    return status;
 80020c2:	7ffb      	ldrb	r3, [r7, #31]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <ToggleReset>:

void ToggleReset(ads124S08Control_t* device){
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(device->resetPinPort, device->resetPin, RESET);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	f003 fbcd 	bl	8005888 <HAL_GPIO_WritePin>
    HAL_Delay(ADS_RESET_TIME);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f000 fdd2 	bl	8002c98 <HAL_Delay>
    HAL_GPIO_WritePin(device->resetPinPort, device->resetPin, SET);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80020fc:	2201      	movs	r2, #1
 80020fe:	4619      	mov	r1, r3
 8002100:	f003 fbc2 	bl	8005888 <HAL_GPIO_WritePin>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <ReadRegister>:

uint8_t ReadRegister(
    ads124S08Control_t* device,
    uint16_t address
){
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af02      	add	r7, sp, #8
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
	uint8_t txData[COMMAND_LENGTH + 1] = { OPCODE_RREG | (address & OPCODE_RWREG_MASK), 0, 0 };
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	b25b      	sxtb	r3, r3
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	b25b      	sxtb	r3, r3
 8002122:	f043 0320 	orr.w	r3, r3, #32
 8002126:	b25b      	sxtb	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	733b      	strb	r3, [r7, #12]
 800212c:	2300      	movs	r3, #0
 800212e:	737b      	strb	r3, [r7, #13]
 8002130:	2300      	movs	r3, #0
 8002132:	73bb      	strb	r3, [r7, #14]
	uint8_t rxData[COMMAND_LENGTH + 1] = {0, 0, 0};
 8002134:	4a17      	ldr	r2, [pc, #92]	@ (8002194 <ReadRegister+0x88>)
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	4611      	mov	r1, r2
 800213e:	8019      	strh	r1, [r3, #0]
 8002140:	3302      	adds	r3, #2
 8002142:	0c12      	lsrs	r2, r2, #16
 8002144:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef thing;
	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 0);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69d8      	ldr	r0, [r3, #28]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	8c1b      	ldrh	r3, [r3, #32]
 800214e:	2200      	movs	r2, #0
 8002150:	4619      	mov	r1, r3
 8002152:	f003 fb99 	bl	8005888 <HAL_GPIO_WritePin>
	thing = HAL_SPI_TransmitReceive(&hspi4, txData, rxData, COMMAND_LENGTH + 1, 500);
 8002156:	f107 0208 	add.w	r2, r7, #8
 800215a:	f107 010c 	add.w	r1, r7, #12
 800215e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2303      	movs	r3, #3
 8002166:	480c      	ldr	r0, [pc, #48]	@ (8002198 <ReadRegister+0x8c>)
 8002168:	f005 fd8a 	bl	8007c80 <HAL_SPI_TransmitReceive>
 800216c:	4603      	mov	r3, r0
 800216e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69d8      	ldr	r0, [r3, #28]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8c1b      	ldrh	r3, [r3, #32]
 8002178:	2201      	movs	r2, #1
 800217a:	4619      	mov	r1, r3
 800217c:	f003 fb84 	bl	8005888 <HAL_GPIO_WritePin>
	device->registers[address] = rxData[COMMAND_LENGTH];
 8002180:	887b      	ldrh	r3, [r7, #2]
 8002182:	7ab9      	ldrb	r1, [r7, #10]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	54d1      	strb	r1, [r2, r3]
    return rxData[COMMAND_LENGTH];
 8002188:	7abb      	ldrb	r3, [r7, #10]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	0800c4c0 	.word	0x0800c4c0
 8002198:	200102c8 	.word	0x200102c8

0800219c <WriteRegister>:

uint8_t WriteRegister(
	ads124S08Control_t* device,
	uint16_t address,
	uint8_t data
){
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
	uint8_t retVal = UCR_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
	uint8_t txData[COMMAND_LENGTH + 1] = { OPCODE_WREG | (address & OPCODE_RWREG_MASK), 0, data};
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	b25b      	sxtb	r3, r3
 80021ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	733b      	strb	r3, [r7, #12]
 80021c4:	2300      	movs	r3, #0
 80021c6:	737b      	strb	r3, [r7, #13]
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	73bb      	strb	r3, [r7, #14]
	uint8_t rxData[COMMAND_LENGTH + 1] = {0, 0, 0};
 80021cc:	4a16      	ldr	r2, [pc, #88]	@ (8002228 <WriteRegister+0x8c>)
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	4611      	mov	r1, r2
 80021d6:	8019      	strh	r1, [r3, #0]
 80021d8:	3302      	adds	r3, #2
 80021da:	0c12      	lsrs	r2, r2, #16
 80021dc:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 0);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69d8      	ldr	r0, [r3, #28]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	8c1b      	ldrh	r3, [r3, #32]
 80021e6:	2200      	movs	r2, #0
 80021e8:	4619      	mov	r1, r3
 80021ea:	f003 fb4d 	bl	8005888 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi4, txData, rxData, COMMAND_LENGTH + 1, 500);
 80021ee:	f107 0208 	add.w	r2, r7, #8
 80021f2:	f107 010c 	add.w	r1, r7, #12
 80021f6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	2303      	movs	r3, #3
 80021fe:	480b      	ldr	r0, [pc, #44]	@ (800222c <WriteRegister+0x90>)
 8002200:	f005 fd3e 	bl	8007c80 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 1);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69d8      	ldr	r0, [r3, #28]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8c1b      	ldrh	r3, [r3, #32]
 800220c:	2201      	movs	r2, #1
 800220e:	4619      	mov	r1, r3
 8002210:	f003 fb3a 	bl	8005888 <HAL_GPIO_WritePin>
	device->registers[address] = txData[COMMAND_LENGTH];
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	7bb9      	ldrb	r1, [r7, #14]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	54d1      	strb	r1, [r2, r3]
	return retVal;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	0800c4c0 	.word	0x0800c4c0
 800222c:	200102c8 	.word	0x200102c8

08002230 <SendCommand>:
}

uint8_t SendCommand(
	ads124S08Control_t* device,
	uint8_t command
){
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
	uint8_t retVal = UCR_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(device->csPinPort, device->csPin, 0);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69d8      	ldr	r0, [r3, #28]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	8c1b      	ldrh	r3, [r3, #32]
 8002248:	2200      	movs	r2, #0
 800224a:	4619      	mov	r1, r3
 800224c:	f003 fb1c 	bl	8005888 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi4, &command, 1, 500);
 8002250:	1cf9      	adds	r1, r7, #3
 8002252:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002256:	2201      	movs	r2, #1
 8002258:	4807      	ldr	r0, [pc, #28]	@ (8002278 <SendCommand+0x48>)
 800225a:	f005 fb9c 	bl	8007996 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(device->csPinPort, device->csPin, 1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69d8      	ldr	r0, [r3, #28]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	8c1b      	ldrh	r3, [r3, #32]
 8002266:	2201      	movs	r2, #1
 8002268:	4619      	mov	r1, r3
 800226a:	f003 fb0d 	bl	8005888 <HAL_GPIO_WritePin>
	return retVal;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200102c8 	.word	0x200102c8

0800227c <ReadADCData>:

int32_t ReadADCData(
	ads124S08Control_t* device,
	uint8_t* deviceStatus,
	uint8_t mode
){
 800227c:	b580      	push	{r7, lr}
 800227e:	b092      	sub	sp, #72	@ 0x48
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	4613      	mov	r3, r2
 8002288:	71fb      	strb	r3, [r7, #7]
    uint8_t txData[RDATA_COMMAND_LENGTH + STATUS_LENGTH + DATA_LENGTH + CRC_LENGTH] = {0};
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
 800228e:	2300      	movs	r3, #0
 8002290:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t rxData[RDATA_COMMAND_LENGTH + STATUS_LENGTH + DATA_LENGTH + CRC_LENGTH] = {0};
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	2300      	movs	r3, #0
 8002298:	83bb      	strh	r3, [r7, #28]
    uint8_t byteLength;
    uint8_t dataPosition;
    uint8_t byteOptions;
    uint8_t data[5];
    bool statusByteEnabled = false;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    int32_t signByte, upperByte, middleByte, lowerByte;

    byteOptions = (device->registers[REG_ADDR_SYS] & ADS_SENDSTATUS_MASK << 1) 
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	7a5b      	ldrb	r3, [r3, #9]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                    | (device->registers[REG_ADDR_SYS] & ADS_CRC_MASK);

    switch(byteOptions){
 80022ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d82d      	bhi.n	8002310 <ReadADCData+0x94>
 80022b4:	a201      	add	r2, pc, #4	@ (adr r2, 80022bc <ReadADCData+0x40>)
 80022b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ba:	bf00      	nop
 80022bc:	080022cd 	.word	0x080022cd
 80022c0:	080022db 	.word	0x080022db
 80022c4:	080022e9 	.word	0x080022e9
 80022c8:	080022fd 	.word	0x080022fd
        case 0:
            byteLength = DATA_LENGTH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            dataPosition = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            break;
 80022d8:	e01a      	b.n	8002310 <ReadADCData+0x94>
        case 1: 
            byteLength = DATA_LENGTH + CRC_LENGTH;
 80022da:	2304      	movs	r3, #4
 80022dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            dataPosition = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            break;
 80022e6:	e013      	b.n	8002310 <ReadADCData+0x94>
        case 2:
            byteLength = STATUS_LENGTH + DATA_LENGTH;
 80022e8:	2304      	movs	r3, #4
 80022ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            dataPosition = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            statusByteEnabled = true;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            break;
 80022fa:	e009      	b.n	8002310 <ReadADCData+0x94>
        case 3:
            byteLength = STATUS_LENGTH + DATA_LENGTH + CRC_LENGTH;
 80022fc:	2305      	movs	r3, #5
 80022fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            dataPosition = 1;
 8002302:	2301      	movs	r3, #1
 8002304:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            statusByteEnabled = true;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            break;
 800230e:	bf00      	nop
    }
    if(mode == COMMAND){
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d10c      	bne.n	8002330 <ReadADCData+0xb4>
        txData[0] = OPCODE_RDATA;
 8002316:	2312      	movs	r3, #18
 8002318:	f887 3020 	strb.w	r3, [r7, #32]
        byteLength ++;
 800231c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002320:	3301      	adds	r3, #1
 8002322:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        dataPosition ++;
 8002326:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800232a:	3301      	adds	r3, #1
 800232c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    }
    HAL_GPIO_WritePin(device->csPinPort, device->csPin, RESET);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	69d8      	ldr	r0, [r3, #28]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8c1b      	ldrh	r3, [r3, #32]
 8002338:	2200      	movs	r2, #0
 800233a:	4619      	mov	r1, r3
 800233c:	f003 faa4 	bl	8005888 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi4, txData, rxData, byteLength, 500);
 8002340:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002344:	b29b      	uxth	r3, r3
 8002346:	f107 0218 	add.w	r2, r7, #24
 800234a:	f107 0120 	add.w	r1, r7, #32
 800234e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002352:	9000      	str	r0, [sp, #0]
 8002354:	4863      	ldr	r0, [pc, #396]	@ (80024e4 <ReadADCData+0x268>)
 8002356:	f005 fc93 	bl	8007c80 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(device->csPinPort, device->csPin, SET);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	69d8      	ldr	r0, [r3, #28]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8c1b      	ldrh	r3, [r3, #32]
 8002362:	2201      	movs	r2, #1
 8002364:	4619      	mov	r1, r3
 8002366:	f003 fa8f 	bl	8005888 <HAL_GPIO_WritePin>

    if(statusByteEnabled && deviceStatus){
 800236a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <ReadADCData+0x10e>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <ReadADCData+0x10e>
        deviceStatus[0] = rxData[dataPosition - 1];
 8002378:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800237c:	3b01      	subs	r3, #1
 800237e:	3340      	adds	r3, #64	@ 0x40
 8002380:	443b      	add	r3, r7
 8002382:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	701a      	strb	r2, [r3, #0]
    }

    if (rxData[dataPosition] & 0x80u ) {
 800238a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800238e:	3340      	adds	r3, #64	@ 0x40
 8002390:	443b      	add	r3, r7
 8002392:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002396:	b25b      	sxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	da03      	bge.n	80023a4 <ReadADCData+0x128>
    	signByte = 0xFF000000; 
 800239c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80023a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023a2:	e001      	b.n	80023a8 <ReadADCData+0x12c>
    } else { 
    	signByte = 0x00000000; 
 80023a4:	2300      	movs	r3, #0
 80023a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if(device->registers[REG_ADDR_SYS] & ADS_CRC_MASK){
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	7a5b      	ldrb	r3, [r3, #9]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d073      	beq.n	800249c <ReadADCData+0x220>
        if(device->registers[REG_ADDR_SYS] & ADS_SENDSTATUS_MASK){
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	7a5b      	ldrb	r3, [r3, #9]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d03a      	beq.n	8002436 <ReadADCData+0x1ba>
            data[0] = rxData[dataPosition - 1];
 80023c0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80023c4:	3b01      	subs	r3, #1
 80023c6:	3340      	adds	r3, #64	@ 0x40
 80023c8:	443b      	add	r3, r7
 80023ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023ce:	743b      	strb	r3, [r7, #16]
            data[1] = rxData[dataPosition];
 80023d0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80023d4:	3340      	adds	r3, #64	@ 0x40
 80023d6:	443b      	add	r3, r7
 80023d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023dc:	747b      	strb	r3, [r7, #17]
            data[2] = rxData[dataPosition + 1];
 80023de:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80023e2:	3301      	adds	r3, #1
 80023e4:	3340      	adds	r3, #64	@ 0x40
 80023e6:	443b      	add	r3, r7
 80023e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023ec:	74bb      	strb	r3, [r7, #18]
            data[3] = rxData[dataPosition + 2];
 80023ee:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80023f2:	3302      	adds	r3, #2
 80023f4:	3340      	adds	r3, #64	@ 0x40
 80023f6:	443b      	add	r3, r7
 80023f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023fc:	74fb      	strb	r3, [r7, #19]
            data[4] = rxData[dataPosition + 3];
 80023fe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002402:	3303      	adds	r3, #3
 8002404:	3340      	adds	r3, #64	@ 0x40
 8002406:	443b      	add	r3, r7
 8002408:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800240c:	753b      	strb	r3, [r7, #20]

            bool error = (bool) getCRC(data, 5, CRC_INITIAL_SEED);
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	2200      	movs	r2, #0
 8002414:	2105      	movs	r1, #5
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fb5e 	bl	8002ad8 <getCRC>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            if ( error ) {
 800242a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800242e:	2b00      	cmp	r3, #0
 8002430:	d034      	beq.n	800249c <ReadADCData+0x220>
                // if error, report and handle the error
                while (1);
 8002432:	bf00      	nop
 8002434:	e7fd      	b.n	8002432 <ReadADCData+0x1b6>
            }
        }else{
            data[0] = rxData[dataPosition];
 8002436:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800243a:	3340      	adds	r3, #64	@ 0x40
 800243c:	443b      	add	r3, r7
 800243e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002442:	743b      	strb	r3, [r7, #16]
            data[1] = rxData[dataPosition + 1];
 8002444:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002448:	3301      	adds	r3, #1
 800244a:	3340      	adds	r3, #64	@ 0x40
 800244c:	443b      	add	r3, r7
 800244e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002452:	747b      	strb	r3, [r7, #17]
            data[2] = rxData[dataPosition + 2];
 8002454:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002458:	3302      	adds	r3, #2
 800245a:	3340      	adds	r3, #64	@ 0x40
 800245c:	443b      	add	r3, r7
 800245e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002462:	74bb      	strb	r3, [r7, #18]
            data[3] = rxData[dataPosition + 3];
 8002464:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002468:	3303      	adds	r3, #3
 800246a:	3340      	adds	r3, #64	@ 0x40
 800246c:	443b      	add	r3, r7
 800246e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002472:	74fb      	strb	r3, [r7, #19]
            bool error = (bool) getCRC(data, 4, CRC_INITIAL_SEED);
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	2200      	movs	r2, #0
 800247a:	2104      	movs	r1, #4
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fb2b 	bl	8002ad8 <getCRC>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf14      	ite	ne
 8002488:	2301      	movne	r3, #1
 800248a:	2300      	moveq	r3, #0
 800248c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

            if(error){
 8002490:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <ReadADCData+0x220>
                while(1);
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <ReadADCData+0x21c>
            }
        }
    }
    upperByte = ((uint32_t) rxData[dataPosition] & 0xFF) << 16;
 800249c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80024a0:	3340      	adds	r3, #64	@ 0x40
 80024a2:	443b      	add	r3, r7
 80024a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	633b      	str	r3, [r7, #48]	@ 0x30
    middleByte = ((uint32_t) rxData[dataPosition + 1] & 0xFF) << 8;
 80024ac:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80024b0:	3301      	adds	r3, #1
 80024b2:	3340      	adds	r3, #64	@ 0x40
 80024b4:	443b      	add	r3, r7
 80024b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lowerByte = ((uint32_t) rxData[dataPosition + 2] & 0xFF);
 80024be:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80024c2:	3302      	adds	r3, #2
 80024c4:	3340      	adds	r3, #64	@ 0x40
 80024c6:	443b      	add	r3, r7
 80024c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024cc:	62bb      	str	r3, [r7, #40]	@ 0x28

	return (signByte + upperByte + middleByte + lowerByte);
 80024ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d2:	441a      	add	r2, r3
 80024d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d6:	441a      	add	r2, r3
 80024d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024da:	4413      	add	r3, r2
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3740      	adds	r7, #64	@ 0x40
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200102c8 	.word	0x200102c8

080024e8 <RestoreRegisterDefaults>:

void RestoreRegisterDefaults(
    ads124S08Control_t* device
){
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	/* Default register settings */
    device->registers[REG_ADDR_ID]       = ID_DEFAULT;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
	device->registers[REG_ADDR_STATUS]   = STATUS_DEFAULT;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2280      	movs	r2, #128	@ 0x80
 80024fa:	705a      	strb	r2, [r3, #1]
	device->registers[REG_ADDR_INPMUX]   = INPMUX_DEFAULT;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	709a      	strb	r2, [r3, #2]
	device->registers[REG_ADDR_PGA]      = PGA_DEFAULT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	70da      	strb	r2, [r3, #3]
	device->registers[REG_ADDR_DATARATE] = DATARATE_DEFAULT;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2214      	movs	r2, #20
 800250c:	711a      	strb	r2, [r3, #4]
	device->registers[REG_ADDR_REF]      = REF_DEFAULT;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2210      	movs	r2, #16
 8002512:	715a      	strb	r2, [r3, #5]
	device->registers[REG_ADDR_IDACMAG]  = IDACMAG_DEFAULT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	719a      	strb	r2, [r3, #6]
	device->registers[REG_ADDR_IDACMUX]  = IDACMUX_DEFAULT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	22ff      	movs	r2, #255	@ 0xff
 800251e:	71da      	strb	r2, [r3, #7]
	device->registers[REG_ADDR_VBIAS]    = VBIAS_DEFAULT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	721a      	strb	r2, [r3, #8]
	device->registers[REG_ADDR_SYS]      = SYS_DEFAULT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2210      	movs	r2, #16
 800252a:	725a      	strb	r2, [r3, #9]
	device->registers[REG_ADDR_OFCAL0]   = OFCAL0_DEFAULT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	729a      	strb	r2, [r3, #10]
	device->registers[REG_ADDR_OFCAL1]   = OFCAL1_DEFAULT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	72da      	strb	r2, [r3, #11]
	device->registers[REG_ADDR_OFCAL2]   = OFCAL2_DEFAULT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	731a      	strb	r2, [r3, #12]
	device->registers[REG_ADDR_FSCAL0]   = FSCAL0_DEFAULT;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	735a      	strb	r2, [r3, #13]
	device->registers[REG_ADDR_FSCAL1]   = FSCAL1_DEFAULT;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	739a      	strb	r2, [r3, #14]
	device->registers[REG_ADDR_FSCAL2]   = FSCAL2_DEFAULT;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2240      	movs	r2, #64	@ 0x40
 800254e:	73da      	strb	r2, [r3, #15]
	device->registers[REG_ADDR_GPIODAT]  = GPIODAT_DEFAULT;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	741a      	strb	r2, [r3, #16]
	device->registers[REG_ADDR_GPIOCON]  = GPIOCON_DEFAULT;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	745a      	strb	r2, [r3, #17]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <pack_left_shift_u32>:

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
 8002574:	4613      	mov	r3, r2
 8002576:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	b2da      	uxtb	r2, r3
 8002582:	78bb      	ldrb	r3, [r7, #2]
 8002584:	4013      	ands	r3, r2
 8002586:	b2db      	uxtb	r3, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <pack_right_shift_u32>:

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
 80025a0:	4613      	mov	r3, r2
 80025a2:	70bb      	strb	r3, [r7, #2]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	78bb      	ldrb	r3, [r7, #2]
 80025b0:	4013      	ands	r3, r2
 80025b2:	b2db      	uxtb	r3, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <ucr_01_front_strain_gauges1_pack>:

int ucr_01_front_strain_gauges1_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_strain_gauges1_t *src_p,
    size_t size)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
    if (size < 20u) {
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b13      	cmp	r3, #19
 80025d0:	d802      	bhi.n	80025d8 <ucr_01_front_strain_gauges1_pack+0x18>
        return (-EINVAL);
 80025d2:	f06f 0315 	mvn.w	r3, #21
 80025d6:	e135      	b.n	8002844 <ucr_01_front_strain_gauges1_pack+0x284>
    }

    memset(&dst_p[0], 0, 20);
 80025d8:	2214      	movs	r2, #20
 80025da:	2100      	movs	r1, #0
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f009 fe91 	bl	800c304 <memset>

    dst_p[0] |= pack_left_shift_u32(src_p->gauge1, 0u, 0xffu);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	22ff      	movs	r2, #255	@ 0xff
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ffbc 	bl	8002568 <pack_left_shift_u32>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(src_p->gauge1, 8u, 0xffu);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	22ff      	movs	r2, #255	@ 0xff
 8002606:	2108      	movs	r1, #8
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ffc3 	bl	8002594 <pack_right_shift_u32>
 800260e:	4603      	mov	r3, r0
 8002610:	4619      	mov	r1, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3301      	adds	r3, #1
 8002616:	781a      	ldrb	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	3301      	adds	r3, #1
 800261c:	430a      	orrs	r2, r1
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(src_p->gauge1, 16u, 0xffu);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	22ff      	movs	r2, #255	@ 0xff
 8002628:	2110      	movs	r1, #16
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ffb2 	bl	8002594 <pack_right_shift_u32>
 8002630:	4603      	mov	r3, r0
 8002632:	4619      	mov	r1, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3302      	adds	r3, #2
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3302      	adds	r3, #2
 800263e:	430a      	orrs	r2, r1
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u32(src_p->gauge2, 0u, 0xffu);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	22ff      	movs	r2, #255	@ 0xff
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff8b 	bl	8002568 <pack_left_shift_u32>
 8002652:	4603      	mov	r3, r0
 8002654:	4619      	mov	r1, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3303      	adds	r3, #3
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3303      	adds	r3, #3
 8002660:	430a      	orrs	r2, r1
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u32(src_p->gauge2, 8u, 0xffu);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	22ff      	movs	r2, #255	@ 0xff
 800266c:	2108      	movs	r1, #8
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff90 	bl	8002594 <pack_right_shift_u32>
 8002674:	4603      	mov	r3, r0
 8002676:	4619      	mov	r1, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3304      	adds	r3, #4
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	3304      	adds	r3, #4
 8002682:	430a      	orrs	r2, r1
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(src_p->gauge2, 16u, 0xffu);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	22ff      	movs	r2, #255	@ 0xff
 800268e:	2110      	movs	r1, #16
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff7f 	bl	8002594 <pack_right_shift_u32>
 8002696:	4603      	mov	r3, r0
 8002698:	4619      	mov	r1, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3305      	adds	r3, #5
 800269e:	781a      	ldrb	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3305      	adds	r3, #5
 80026a4:	430a      	orrs	r2, r1
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u32(src_p->gauge3, 0u, 0xffu);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	22ff      	movs	r2, #255	@ 0xff
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff58 	bl	8002568 <pack_left_shift_u32>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4619      	mov	r1, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3306      	adds	r3, #6
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	3306      	adds	r3, #6
 80026c6:	430a      	orrs	r2, r1
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(src_p->gauge3, 8u, 0xffu);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	22ff      	movs	r2, #255	@ 0xff
 80026d2:	2108      	movs	r1, #8
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff5d 	bl	8002594 <pack_right_shift_u32>
 80026da:	4603      	mov	r3, r0
 80026dc:	4619      	mov	r1, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	3307      	adds	r3, #7
 80026e2:	781a      	ldrb	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	3307      	adds	r3, #7
 80026e8:	430a      	orrs	r2, r1
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_right_shift_u32(src_p->gauge3, 16u, 0xffu);
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	22ff      	movs	r2, #255	@ 0xff
 80026f4:	2110      	movs	r1, #16
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff4c 	bl	8002594 <pack_right_shift_u32>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4619      	mov	r1, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3308      	adds	r3, #8
 8002704:	781a      	ldrb	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3308      	adds	r3, #8
 800270a:	430a      	orrs	r2, r1
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_left_shift_u32(src_p->gauge4, 0u, 0xffu);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	22ff      	movs	r2, #255	@ 0xff
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff25 	bl	8002568 <pack_left_shift_u32>
 800271e:	4603      	mov	r3, r0
 8002720:	4619      	mov	r1, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3309      	adds	r3, #9
 8002726:	781a      	ldrb	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3309      	adds	r3, #9
 800272c:	430a      	orrs	r2, r1
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u32(src_p->gauge4, 8u, 0xffu);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	22ff      	movs	r2, #255	@ 0xff
 8002738:	2108      	movs	r1, #8
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ff2a 	bl	8002594 <pack_right_shift_u32>
 8002740:	4603      	mov	r3, r0
 8002742:	4619      	mov	r1, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	330a      	adds	r3, #10
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	330a      	adds	r3, #10
 800274e:	430a      	orrs	r2, r1
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u32(src_p->gauge4, 16u, 0xffu);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	22ff      	movs	r2, #255	@ 0xff
 800275a:	2110      	movs	r1, #16
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff19 	bl	8002594 <pack_right_shift_u32>
 8002762:	4603      	mov	r3, r0
 8002764:	4619      	mov	r1, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	330b      	adds	r3, #11
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	330b      	adds	r3, #11
 8002770:	430a      	orrs	r2, r1
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u32(src_p->gauge5, 0u, 0xffu);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	22ff      	movs	r2, #255	@ 0xff
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fef2 	bl	8002568 <pack_left_shift_u32>
 8002784:	4603      	mov	r3, r0
 8002786:	4619      	mov	r1, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	330c      	adds	r3, #12
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	330c      	adds	r3, #12
 8002792:	430a      	orrs	r2, r1
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u32(src_p->gauge5, 8u, 0xffu);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	22ff      	movs	r2, #255	@ 0xff
 800279e:	2108      	movs	r1, #8
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fef7 	bl	8002594 <pack_right_shift_u32>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4619      	mov	r1, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	330d      	adds	r3, #13
 80027ae:	781a      	ldrb	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	330d      	adds	r3, #13
 80027b4:	430a      	orrs	r2, r1
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u32(src_p->gauge5, 16u, 0xffu);
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	22ff      	movs	r2, #255	@ 0xff
 80027c0:	2110      	movs	r1, #16
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fee6 	bl	8002594 <pack_right_shift_u32>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4619      	mov	r1, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	330e      	adds	r3, #14
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	330e      	adds	r3, #14
 80027d6:	430a      	orrs	r2, r1
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_left_shift_u32(src_p->gauge6, 0u, 0xffu);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	22ff      	movs	r2, #255	@ 0xff
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff febf 	bl	8002568 <pack_left_shift_u32>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4619      	mov	r1, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	330f      	adds	r3, #15
 80027f2:	781a      	ldrb	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	330f      	adds	r3, #15
 80027f8:	430a      	orrs	r2, r1
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]
    dst_p[16] |= pack_right_shift_u32(src_p->gauge6, 8u, 0xffu);
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	22ff      	movs	r2, #255	@ 0xff
 8002804:	2108      	movs	r1, #8
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fec4 	bl	8002594 <pack_right_shift_u32>
 800280c:	4603      	mov	r3, r0
 800280e:	4619      	mov	r1, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3310      	adds	r3, #16
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3310      	adds	r3, #16
 800281a:	430a      	orrs	r2, r1
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]
    dst_p[17] |= pack_right_shift_u32(src_p->gauge6, 16u, 0xffu);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	22ff      	movs	r2, #255	@ 0xff
 8002826:	2110      	movs	r1, #16
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff feb3 	bl	8002594 <pack_right_shift_u32>
 800282e:	4603      	mov	r3, r0
 8002830:	4619      	mov	r1, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3311      	adds	r3, #17
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3311      	adds	r3, #17
 800283c:	430a      	orrs	r2, r1
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

    return (20);
 8002842:	2314      	movs	r3, #20
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <ucr_01_front_strain_gauges2_pack>:

int ucr_01_front_strain_gauges2_pack(
    uint8_t *dst_p,
    const struct ucr_01_front_strain_gauges2_t *src_p,
    size_t size)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
    if (size < 20u) {
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b13      	cmp	r3, #19
 800285c:	d802      	bhi.n	8002864 <ucr_01_front_strain_gauges2_pack+0x18>
        return (-EINVAL);
 800285e:	f06f 0315 	mvn.w	r3, #21
 8002862:	e135      	b.n	8002ad0 <ucr_01_front_strain_gauges2_pack+0x284>
    }

    memset(&dst_p[0], 0, 20);
 8002864:	2214      	movs	r2, #20
 8002866:	2100      	movs	r1, #0
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f009 fd4b 	bl	800c304 <memset>

    dst_p[0] |= pack_left_shift_u32(src_p->gauge1, 0u, 0xffu);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	22ff      	movs	r2, #255	@ 0xff
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fe76 	bl	8002568 <pack_left_shift_u32>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4313      	orrs	r3, r2
 8002886:	b2da      	uxtb	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_right_shift_u32(src_p->gauge1, 8u, 0xffu);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	22ff      	movs	r2, #255	@ 0xff
 8002892:	2108      	movs	r1, #8
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fe7d 	bl	8002594 <pack_right_shift_u32>
 800289a:	4603      	mov	r3, r0
 800289c:	4619      	mov	r1, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3301      	adds	r3, #1
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3301      	adds	r3, #1
 80028a8:	430a      	orrs	r2, r1
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]
    dst_p[2] |= pack_right_shift_u32(src_p->gauge1, 16u, 0xffu);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	22ff      	movs	r2, #255	@ 0xff
 80028b4:	2110      	movs	r1, #16
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fe6c 	bl	8002594 <pack_right_shift_u32>
 80028bc:	4603      	mov	r3, r0
 80028be:	4619      	mov	r1, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3302      	adds	r3, #2
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3302      	adds	r3, #2
 80028ca:	430a      	orrs	r2, r1
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_left_shift_u32(src_p->gauge2, 0u, 0xffu);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	22ff      	movs	r2, #255	@ 0xff
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fe45 	bl	8002568 <pack_left_shift_u32>
 80028de:	4603      	mov	r3, r0
 80028e0:	4619      	mov	r1, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	3303      	adds	r3, #3
 80028e6:	781a      	ldrb	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3303      	adds	r3, #3
 80028ec:	430a      	orrs	r2, r1
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]
    dst_p[4] |= pack_right_shift_u32(src_p->gauge2, 8u, 0xffu);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	22ff      	movs	r2, #255	@ 0xff
 80028f8:	2108      	movs	r1, #8
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fe4a 	bl	8002594 <pack_right_shift_u32>
 8002900:	4603      	mov	r3, r0
 8002902:	4619      	mov	r1, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3304      	adds	r3, #4
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3304      	adds	r3, #4
 800290e:	430a      	orrs	r2, r1
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u32(src_p->gauge2, 16u, 0xffu);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	22ff      	movs	r2, #255	@ 0xff
 800291a:	2110      	movs	r1, #16
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fe39 	bl	8002594 <pack_right_shift_u32>
 8002922:	4603      	mov	r3, r0
 8002924:	4619      	mov	r1, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3305      	adds	r3, #5
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3305      	adds	r3, #5
 8002930:	430a      	orrs	r2, r1
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
    dst_p[6] |= pack_left_shift_u32(src_p->gauge3, 0u, 0xffu);
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	22ff      	movs	r2, #255	@ 0xff
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fe12 	bl	8002568 <pack_left_shift_u32>
 8002944:	4603      	mov	r3, r0
 8002946:	4619      	mov	r1, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3306      	adds	r3, #6
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3306      	adds	r3, #6
 8002952:	430a      	orrs	r2, r1
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u32(src_p->gauge3, 8u, 0xffu);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	22ff      	movs	r2, #255	@ 0xff
 800295e:	2108      	movs	r1, #8
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fe17 	bl	8002594 <pack_right_shift_u32>
 8002966:	4603      	mov	r3, r0
 8002968:	4619      	mov	r1, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3307      	adds	r3, #7
 800296e:	781a      	ldrb	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3307      	adds	r3, #7
 8002974:	430a      	orrs	r2, r1
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]
    dst_p[8] |= pack_right_shift_u32(src_p->gauge3, 16u, 0xffu);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	22ff      	movs	r2, #255	@ 0xff
 8002980:	2110      	movs	r1, #16
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fe06 	bl	8002594 <pack_right_shift_u32>
 8002988:	4603      	mov	r3, r0
 800298a:	4619      	mov	r1, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3308      	adds	r3, #8
 8002990:	781a      	ldrb	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3308      	adds	r3, #8
 8002996:	430a      	orrs	r2, r1
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	701a      	strb	r2, [r3, #0]
    dst_p[9] |= pack_left_shift_u32(src_p->gauge4, 0u, 0xffu);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	22ff      	movs	r2, #255	@ 0xff
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fddf 	bl	8002568 <pack_left_shift_u32>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4619      	mov	r1, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3309      	adds	r3, #9
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3309      	adds	r3, #9
 80029b8:	430a      	orrs	r2, r1
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]
    dst_p[10] |= pack_right_shift_u32(src_p->gauge4, 8u, 0xffu);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	22ff      	movs	r2, #255	@ 0xff
 80029c4:	2108      	movs	r1, #8
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fde4 	bl	8002594 <pack_right_shift_u32>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4619      	mov	r1, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	330a      	adds	r3, #10
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	330a      	adds	r3, #10
 80029da:	430a      	orrs	r2, r1
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]
    dst_p[11] |= pack_right_shift_u32(src_p->gauge4, 16u, 0xffu);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	22ff      	movs	r2, #255	@ 0xff
 80029e6:	2110      	movs	r1, #16
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fdd3 	bl	8002594 <pack_right_shift_u32>
 80029ee:	4603      	mov	r3, r0
 80029f0:	4619      	mov	r1, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	330b      	adds	r3, #11
 80029f6:	781a      	ldrb	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	330b      	adds	r3, #11
 80029fc:	430a      	orrs	r2, r1
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]
    dst_p[12] |= pack_left_shift_u32(src_p->gauge5, 0u, 0xffu);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	22ff      	movs	r2, #255	@ 0xff
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fdac 	bl	8002568 <pack_left_shift_u32>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4619      	mov	r1, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	330c      	adds	r3, #12
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	701a      	strb	r2, [r3, #0]
    dst_p[13] |= pack_right_shift_u32(src_p->gauge5, 8u, 0xffu);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	22ff      	movs	r2, #255	@ 0xff
 8002a2a:	2108      	movs	r1, #8
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fdb1 	bl	8002594 <pack_right_shift_u32>
 8002a32:	4603      	mov	r3, r0
 8002a34:	4619      	mov	r1, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	330d      	adds	r3, #13
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	330d      	adds	r3, #13
 8002a40:	430a      	orrs	r2, r1
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	701a      	strb	r2, [r3, #0]
    dst_p[14] |= pack_right_shift_u32(src_p->gauge5, 16u, 0xffu);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	22ff      	movs	r2, #255	@ 0xff
 8002a4c:	2110      	movs	r1, #16
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fda0 	bl	8002594 <pack_right_shift_u32>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4619      	mov	r1, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	330e      	adds	r3, #14
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	330e      	adds	r3, #14
 8002a62:	430a      	orrs	r2, r1
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]
    dst_p[15] |= pack_left_shift_u32(src_p->gauge6, 0u, 0xffu);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	22ff      	movs	r2, #255	@ 0xff
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fd79 	bl	8002568 <pack_left_shift_u32>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4619      	mov	r1, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	330f      	adds	r3, #15
 8002a7e:	781a      	ldrb	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	330f      	adds	r3, #15
 8002a84:	430a      	orrs	r2, r1
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]
    dst_p[16] |= pack_right_shift_u32(src_p->gauge6, 8u, 0xffu);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	22ff      	movs	r2, #255	@ 0xff
 8002a90:	2108      	movs	r1, #8
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fd7e 	bl	8002594 <pack_right_shift_u32>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3310      	adds	r3, #16
 8002aa0:	781a      	ldrb	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	3310      	adds	r3, #16
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	701a      	strb	r2, [r3, #0]
    dst_p[17] |= pack_right_shift_u32(src_p->gauge6, 16u, 0xffu);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	22ff      	movs	r2, #255	@ 0xff
 8002ab2:	2110      	movs	r1, #16
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fd6d 	bl	8002594 <pack_right_shift_u32>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4619      	mov	r1, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3311      	adds	r3, #17
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	3311      	adds	r3, #17
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    return (20);
 8002ace:	2314      	movs	r3, #20
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <getCRC>:
 *      bool error = (bool) getCRC(data, 4, CRC_INITIAL_SEED);
 *
 * @endcode
 */
CRCWORD getCRC(const uint8_t dataBytes[], uint8_t numberBytes, CRCWORD initialValue)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	70fb      	strb	r3, [r7, #3]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	70bb      	strb	r3, [r7, #2]
#ifdef CRC_CALCULATION
    return calculateCRC(dataBytes, numberBytes, initialValue);
#endif

#ifdef CRC_LOOKUP
    if (!initialized) { initTable(); }
 8002ae8:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <getCRC+0x38>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	f083 0301 	eor.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <getCRC+0x22>
 8002af6:	f000 f80d 	bl	8002b14 <initTable>
    return lookupCRC(dataBytes, numberBytes, initialValue);
 8002afa:	78ba      	ldrb	r2, [r7, #2]
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	4619      	mov	r1, r3
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f82b 	bl	8002b5c <lookupCRC>
 8002b06:	4603      	mov	r3, r0
#endif
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200107c8 	.word	0x200107c8

08002b14 <initTable>:
 *
 * @return      None
 *
 */
static void initTable(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
    uint8_t value;
    unsigned int i;
    for (i = 0; i < 256; ++i)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	e012      	b.n	8002b46 <initTable+0x32>
    {
        value = (uint8_t) i;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	70fb      	strb	r3, [r7, #3]
        crcLookupTable[i] = calculateCRC(&value, 1, 0x00);
 8002b26:	1cfb      	adds	r3, r7, #3
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f83d 	bl	8002bac <calculateCRC>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4619      	mov	r1, r3
 8002b36:	4a08      	ldr	r2, [pc, #32]	@ (8002b58 <initTable+0x44>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	460a      	mov	r2, r1
 8002b3e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 256; ++i)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3301      	adds	r3, #1
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2bff      	cmp	r3, #255	@ 0xff
 8002b4a:	d9e9      	bls.n	8002b20 <initTable+0xc>
    }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200107cc 	.word	0x200107cc

08002b5c <lookupCRC>:
 *
 * @return     CRCWORD       of the calculation
 *
 */
static CRCWORD lookupCRC(const uint8_t dataBytes[], uint8_t numberBytes, CRCWORD initialValue)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	70fb      	strb	r3, [r7, #3]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	70bb      	strb	r3, [r7, #2]
    CRCWORD crc = initialValue;
 8002b6c:	78bb      	ldrb	r3, [r7, #2]
 8002b6e:	73fb      	strb	r3, [r7, #15]
    unsigned int i;
    for (i = 0; i < numberBytes; ++i)
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	e00d      	b.n	8002b92 <lookupCRC+0x36>
    {

        crc = crcLookupTable[crc ^ dataBytes[i]];
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	781a      	ldrb	r2, [r3, #0]
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	4053      	eors	r3, r2
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b08      	ldr	r3, [pc, #32]	@ (8002ba8 <lookupCRC+0x4c>)
 8002b88:	5c9b      	ldrb	r3, [r3, r2]
 8002b8a:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < numberBytes; ++i)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d3ed      	bcc.n	8002b76 <lookupCRC+0x1a>

    }
    return crc;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	200107cc 	.word	0x200107cc

08002bac <calculateCRC>:
 *
 * @return     CRCWORD       of the calculation
 *
 */
static CRCWORD calculateCRC(const uint8_t dataBytes[], uint8_t numberBytes, CRCWORD initialValue)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	70fb      	strb	r3, [r7, #3]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	70bb      	strb	r3, [r7, #2]
    int         bitIndex, byteIndex;
    bool        dataMSb;                        /* Most significant bit of data byte */
    bool        crcMSb;                         /* Most significant bit of crc byte  */

    // Initial value of crc register
    CRCWORD crc = initialValue;
 8002bbc:	78bb      	ldrb	r3, [r7, #2]
 8002bbe:	73fb      	strb	r3, [r7, #15]

    // Loop through all bytes in the dataBytes[] array
    for (byteIndex = 0; byteIndex < numberBytes; byteIndex++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	e027      	b.n	8002c16 <calculateCRC+0x6a>
    {
        // Point to most significant bit
        bitIndex = 0x80u;
 8002bc6:	2380      	movs	r3, #128	@ 0x80
 8002bc8:	617b      	str	r3, [r7, #20]

        // Loop through all bits in the current byte
        while (bitIndex > 0)
 8002bca:	e01e      	b.n	8002c0a <calculateCRC+0x5e>
        {
            // Check MSB's of data and crc
            dataMSb = (bool) (dataBytes[byteIndex] & bitIndex);
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	73bb      	strb	r3, [r7, #14]


            crcMSb  = (bool) (crc & 0x80u);
 8002be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	09db      	lsrs	r3, r3, #7
 8002bec:	737b      	strb	r3, [r7, #13]


            // Update crc register
            crc <<= 1;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
            if (dataMSb ^ crcMSb) { crc ^= CRC_POLYNOMIAL; }
 8002bf4:	7bba      	ldrb	r2, [r7, #14]
 8002bf6:	7b7b      	ldrb	r3, [r7, #13]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d003      	beq.n	8002c04 <calculateCRC+0x58>
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	f083 0307 	eor.w	r3, r3, #7
 8002c02:	73fb      	strb	r3, [r7, #15]

            // Shift MSb pointer to the next data bit
            bitIndex >>= 1;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	105b      	asrs	r3, r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
        while (bitIndex > 0)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	dcdd      	bgt.n	8002bcc <calculateCRC+0x20>
    for (byteIndex = 0; byteIndex < numberBytes; byteIndex++)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	3301      	adds	r3, #1
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	dbd3      	blt.n	8002bc6 <calculateCRC+0x1a>
        }
    }

    return crc;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c36:	2003      	movs	r0, #3
 8002c38:	f001 fd09 	bl	800464e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c3c:	200f      	movs	r0, #15
 8002c3e:	f7fe fc97 	bl	8001570 <HAL_InitTick>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	71fb      	strb	r3, [r7, #7]
 8002c4c:	e001      	b.n	8002c52 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c4e:	f7fe fc67 	bl	8001520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c52:	79fb      	ldrb	r3, [r7, #7]

}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <HAL_IncTick+0x1c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <HAL_IncTick+0x20>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4413      	add	r3, r2
 8002c6a:	4a03      	ldr	r2, [pc, #12]	@ (8002c78 <HAL_IncTick+0x1c>)
 8002c6c:	6013      	str	r3, [r2, #0]
}
 8002c6e:	bf00      	nop
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	200108cc 	.word	0x200108cc
 8002c7c:	20000008 	.word	0x20000008

08002c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return uwTick;
 8002c84:	4b03      	ldr	r3, [pc, #12]	@ (8002c94 <HAL_GetTick+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	200108cc 	.word	0x200108cc

08002c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7ff ffee 	bl	8002c80 <HAL_GetTick>
 8002ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d004      	beq.n	8002cbc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cb2:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <HAL_Delay+0x40>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4413      	add	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cbc:	bf00      	nop
 8002cbe:	f7ff ffdf 	bl	8002c80 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d8f7      	bhi.n	8002cbe <HAL_Delay+0x26>
  {
  }
}
 8002cce:	bf00      	nop
 8002cd0:	bf00      	nop
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000008 	.word	0x20000008

08002cdc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 0202 	bic.w	r2, r3, #2
 8002cec:	4904      	ldr	r1, [pc, #16]	@ (8002d00 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40010030 	.word	0x40010030

08002d04 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002d08:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40010030 	.word	0x40010030

08002d24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3360      	adds	r3, #96	@ 0x60
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b08      	ldr	r3, [pc, #32]	@ (8002dd0 <LL_ADC_SetOffset+0x44>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002dc4:	bf00      	nop
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	03fff000 	.word	0x03fff000

08002dd4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3360      	adds	r3, #96	@ 0x60
 8002de2:	461a      	mov	r2, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3360      	adds	r3, #96	@ 0x60
 8002e10:	461a      	mov	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b087      	sub	sp, #28
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3360      	adds	r3, #96	@ 0x60
 8002e46:	461a      	mov	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002e60:	bf00      	nop
 8002e62:	371c      	adds	r7, #28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3360      	adds	r3, #96	@ 0x60
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002e96:	bf00      	nop
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	615a      	str	r2, [r3, #20]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b087      	sub	sp, #28
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	3330      	adds	r3, #48	@ 0x30
 8002efe:	461a      	mov	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	4413      	add	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	211f      	movs	r1, #31
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	401a      	ands	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	f003 011f 	and.w	r1, r3, #31
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	431a      	orrs	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f52:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3314      	adds	r3, #20
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0e5b      	lsrs	r3, r3, #25
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	4413      	add	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	0d1b      	lsrs	r3, r3, #20
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2107      	movs	r1, #7
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	0d1b      	lsrs	r3, r3, #20
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	401a      	ands	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0318 	and.w	r3, r3, #24
 8002fe6:	4908      	ldr	r1, [pc, #32]	@ (8003008 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002fe8:	40d9      	lsrs	r1, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	400b      	ands	r3, r1
 8002fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	0007ffff 	.word	0x0007ffff

0800300c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 031f 	and.w	r3, r3, #31
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003054:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6093      	str	r3, [r2, #8]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003078:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800307c:	d101      	bne.n	8003082 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80030a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030cc:	d101      	bne.n	80030d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <LL_ADC_IsEnabled+0x18>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <LL_ADC_IsEnabled+0x1a>
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b04      	cmp	r3, #4
 8003118:	d101      	bne.n	800311e <LL_ADC_REG_IsConversionOngoing+0x18>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b08      	cmp	r3, #8
 800313e:	d101      	bne.n	8003144 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b089      	sub	sp, #36	@ 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e1a9      	b.n	80034c2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	2b00      	cmp	r3, #0
 800317a:	d109      	bne.n	8003190 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fd fc61 	bl	8000a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff67 	bl	8003068 <LL_ADC_IsDeepPowerDownEnabled>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d004      	beq.n	80031aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff4d 	bl	8003044 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff ff82 	bl	80030b8 <LL_ADC_IsInternalRegulatorEnabled>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d115      	bne.n	80031e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff ff66 	bl	8003090 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c4:	4b9c      	ldr	r3, [pc, #624]	@ (8003438 <HAL_ADC_Init+0x2e4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	4a9c      	ldr	r2, [pc, #624]	@ (800343c <HAL_ADC_Init+0x2e8>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	3301      	adds	r3, #1
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031d8:	e002      	b.n	80031e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	3b01      	subs	r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f9      	bne.n	80031da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff64 	bl	80030b8 <LL_ADC_IsInternalRegulatorEnabled>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fa:	f043 0210 	orr.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff75 	bl	8003106 <LL_ADC_REG_IsConversionOngoing>
 800321c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 8142 	bne.w	80034b0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f040 813e 	bne.w	80034b0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003238:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800323c:	f043 0202 	orr.w	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff ff49 	bl	80030e0 <LL_ADC_IsEnabled>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d141      	bne.n	80032d8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800325c:	d004      	beq.n	8003268 <HAL_ADC_Init+0x114>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a77      	ldr	r2, [pc, #476]	@ (8003440 <HAL_ADC_Init+0x2ec>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d10f      	bne.n	8003288 <HAL_ADC_Init+0x134>
 8003268:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800326c:	f7ff ff38 	bl	80030e0 <LL_ADC_IsEnabled>
 8003270:	4604      	mov	r4, r0
 8003272:	4873      	ldr	r0, [pc, #460]	@ (8003440 <HAL_ADC_Init+0x2ec>)
 8003274:	f7ff ff34 	bl	80030e0 <LL_ADC_IsEnabled>
 8003278:	4603      	mov	r3, r0
 800327a:	4323      	orrs	r3, r4
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e012      	b.n	80032ae <HAL_ADC_Init+0x15a>
 8003288:	486e      	ldr	r0, [pc, #440]	@ (8003444 <HAL_ADC_Init+0x2f0>)
 800328a:	f7ff ff29 	bl	80030e0 <LL_ADC_IsEnabled>
 800328e:	4604      	mov	r4, r0
 8003290:	486d      	ldr	r0, [pc, #436]	@ (8003448 <HAL_ADC_Init+0x2f4>)
 8003292:	f7ff ff25 	bl	80030e0 <LL_ADC_IsEnabled>
 8003296:	4603      	mov	r3, r0
 8003298:	431c      	orrs	r4, r3
 800329a:	486c      	ldr	r0, [pc, #432]	@ (800344c <HAL_ADC_Init+0x2f8>)
 800329c:	f7ff ff20 	bl	80030e0 <LL_ADC_IsEnabled>
 80032a0:	4603      	mov	r3, r0
 80032a2:	4323      	orrs	r3, r4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032ba:	d004      	beq.n	80032c6 <HAL_ADC_Init+0x172>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a5f      	ldr	r2, [pc, #380]	@ (8003440 <HAL_ADC_Init+0x2ec>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_Init+0x176>
 80032c6:	4a62      	ldr	r2, [pc, #392]	@ (8003450 <HAL_ADC_Init+0x2fc>)
 80032c8:	e000      	b.n	80032cc <HAL_ADC_Init+0x178>
 80032ca:	4a62      	ldr	r2, [pc, #392]	@ (8003454 <HAL_ADC_Init+0x300>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f7ff fd26 	bl	8002d24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7f5b      	ldrb	r3, [r3, #29]
 80032dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80032e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80032ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003302:	2b01      	cmp	r3, #1
 8003304:	d106      	bne.n	8003314 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330a:	3b01      	subs	r3, #1
 800330c:	045b      	lsls	r3, r3, #17
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	4b48      	ldr	r3, [pc, #288]	@ (8003458 <HAL_ADC_Init+0x304>)
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	69b9      	ldr	r1, [r7, #24]
 8003340:	430b      	orrs	r3, r1
 8003342:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fee4 	bl	800312c <LL_ADC_INJ_IsConversionOngoing>
 8003364:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d17f      	bne.n	800346c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d17c      	bne.n	800346c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003376:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800337e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800338e:	f023 0302 	bic.w	r3, r3, #2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	69b9      	ldr	r1, [r7, #24]
 8003398:	430b      	orrs	r3, r1
 800339a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d017      	beq.n	80033d4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80033b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80033bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6911      	ldr	r1, [r2, #16]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80033d2:	e013      	b.n	80033fc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80033e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80033f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003402:	2b01      	cmp	r3, #1
 8003404:	d12a      	bne.n	800345c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800341c:	4311      	orrs	r1, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003422:	4311      	orrs	r1, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003428:	430a      	orrs	r2, r1
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	611a      	str	r2, [r3, #16]
 8003436:	e019      	b.n	800346c <HAL_ADC_Init+0x318>
 8003438:	20000000 	.word	0x20000000
 800343c:	053e2d63 	.word	0x053e2d63
 8003440:	50000100 	.word	0x50000100
 8003444:	50000400 	.word	0x50000400
 8003448:	50000500 	.word	0x50000500
 800344c:	50000600 	.word	0x50000600
 8003450:	50000300 	.word	0x50000300
 8003454:	50000700 	.word	0x50000700
 8003458:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d10c      	bne.n	800348e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	f023 010f 	bic.w	r1, r3, #15
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	1e5a      	subs	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
 800348c:	e007      	b.n	800349e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 020f 	bic.w	r2, r2, #15
 800349c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a2:	f023 0303 	bic.w	r3, r3, #3
 80034a6:	f043 0201 	orr.w	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034ae:	e007      	b.n	80034c0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b4:	f043 0210 	orr.w	r2, r3, #16
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	@ 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd90      	pop	{r4, r7, pc}
 80034ca:	bf00      	nop

080034cc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	@ 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034f0:	d004      	beq.n	80034fc <HAL_ADC_IRQHandler+0x30>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a8e      	ldr	r2, [pc, #568]	@ (8003730 <HAL_ADC_IRQHandler+0x264>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_IRQHandler+0x34>
 80034fc:	4b8d      	ldr	r3, [pc, #564]	@ (8003734 <HAL_ADC_IRQHandler+0x268>)
 80034fe:	e000      	b.n	8003502 <HAL_ADC_IRQHandler+0x36>
 8003500:	4b8d      	ldr	r3, [pc, #564]	@ (8003738 <HAL_ADC_IRQHandler+0x26c>)
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fd82 	bl	800300c <LL_ADC_GetMultimode>
 8003508:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d017      	beq.n	8003544 <HAL_ADC_IRQHandler+0x78>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d012      	beq.n	8003544 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 feca 	bl	80042d0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2202      	movs	r2, #2
 8003542:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <HAL_ADC_IRQHandler+0x8c>
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8094 	beq.w	800368c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 808e 	beq.w	800368c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003580:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fc9b 	bl	8002ec8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d072      	beq.n	800367e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a64      	ldr	r2, [pc, #400]	@ (8003730 <HAL_ADC_IRQHandler+0x264>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d009      	beq.n	80035b6 <HAL_ADC_IRQHandler+0xea>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a65      	ldr	r2, [pc, #404]	@ (800373c <HAL_ADC_IRQHandler+0x270>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d002      	beq.n	80035b2 <HAL_ADC_IRQHandler+0xe6>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	e003      	b.n	80035ba <HAL_ADC_IRQHandler+0xee>
 80035b2:	4b63      	ldr	r3, [pc, #396]	@ (8003740 <HAL_ADC_IRQHandler+0x274>)
 80035b4:	e001      	b.n	80035ba <HAL_ADC_IRQHandler+0xee>
 80035b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	4293      	cmp	r3, r2
 80035c0:	d008      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2b05      	cmp	r3, #5
 80035cc:	d002      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b09      	cmp	r3, #9
 80035d2:	d104      	bne.n	80035de <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	623b      	str	r3, [r7, #32]
 80035dc:	e014      	b.n	8003608 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a53      	ldr	r2, [pc, #332]	@ (8003730 <HAL_ADC_IRQHandler+0x264>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d009      	beq.n	80035fc <HAL_ADC_IRQHandler+0x130>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a53      	ldr	r2, [pc, #332]	@ (800373c <HAL_ADC_IRQHandler+0x270>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d002      	beq.n	80035f8 <HAL_ADC_IRQHandler+0x12c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	e003      	b.n	8003600 <HAL_ADC_IRQHandler+0x134>
 80035f8:	4b51      	ldr	r3, [pc, #324]	@ (8003740 <HAL_ADC_IRQHandler+0x274>)
 80035fa:	e001      	b.n	8003600 <HAL_ADC_IRQHandler+0x134>
 80035fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003600:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d135      	bne.n	800367e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b08      	cmp	r3, #8
 800361e:	d12e      	bne.n	800367e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fd6e 	bl	8003106 <LL_ADC_REG_IsConversionOngoing>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11a      	bne.n	8003666 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 020c 	bic.w	r2, r2, #12
 800363e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003644:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d112      	bne.n	800367e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365c:	f043 0201 	orr.w	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003664:	e00b      	b.n	800367e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366a:	f043 0210 	orr.w	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003676:	f043 0201 	orr.w	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fe fa02 	bl	8001a88 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	220c      	movs	r2, #12
 800368a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <HAL_ADC_IRQHandler+0x1d4>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10b      	bne.n	80036b8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80b3 	beq.w	8003812 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80ad 	beq.w	8003812 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d105      	bne.n	80036d0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fc36 	bl	8002f46 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80036da:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fbf1 	bl	8002ec8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036e6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a10      	ldr	r2, [pc, #64]	@ (8003730 <HAL_ADC_IRQHandler+0x264>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_ADC_IRQHandler+0x23a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a11      	ldr	r2, [pc, #68]	@ (800373c <HAL_ADC_IRQHandler+0x270>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d002      	beq.n	8003702 <HAL_ADC_IRQHandler+0x236>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	e003      	b.n	800370a <HAL_ADC_IRQHandler+0x23e>
 8003702:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <HAL_ADC_IRQHandler+0x274>)
 8003704:	e001      	b.n	800370a <HAL_ADC_IRQHandler+0x23e>
 8003706:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	4293      	cmp	r3, r2
 8003710:	d008      	beq.n	8003724 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b06      	cmp	r3, #6
 800371c:	d002      	beq.n	8003724 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b07      	cmp	r3, #7
 8003722:	d10f      	bne.n	8003744 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	e01f      	b.n	800376e <HAL_ADC_IRQHandler+0x2a2>
 800372e:	bf00      	nop
 8003730:	50000100 	.word	0x50000100
 8003734:	50000300 	.word	0x50000300
 8003738:	50000700 	.word	0x50000700
 800373c:	50000500 	.word	0x50000500
 8003740:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a8b      	ldr	r2, [pc, #556]	@ (8003978 <HAL_ADC_IRQHandler+0x4ac>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d009      	beq.n	8003762 <HAL_ADC_IRQHandler+0x296>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a8a      	ldr	r2, [pc, #552]	@ (800397c <HAL_ADC_IRQHandler+0x4b0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d002      	beq.n	800375e <HAL_ADC_IRQHandler+0x292>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	e003      	b.n	8003766 <HAL_ADC_IRQHandler+0x29a>
 800375e:	4b88      	ldr	r3, [pc, #544]	@ (8003980 <HAL_ADC_IRQHandler+0x4b4>)
 8003760:	e001      	b.n	8003766 <HAL_ADC_IRQHandler+0x29a>
 8003762:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003766:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d047      	beq.n	8003804 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <HAL_ADC_IRQHandler+0x2c2>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d03f      	beq.n	8003804 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800378a:	2b00      	cmp	r3, #0
 800378c:	d13a      	bne.n	8003804 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	2b40      	cmp	r3, #64	@ 0x40
 800379a:	d133      	bne.n	8003804 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d12e      	bne.n	8003804 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff fcbe 	bl	800312c <LL_ADC_INJ_IsConversionOngoing>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11a      	bne.n	80037ec <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80037c4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d112      	bne.n	8003804 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	f043 0201 	orr.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037ea:	e00b      	b.n	8003804 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f0:	f043 0210 	orr.w	r2, r3, #16
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fd3b 	bl	8004280 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2260      	movs	r2, #96	@ 0x60
 8003810:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d011      	beq.n	8003840 <HAL_ADC_IRQHandler+0x374>
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00c      	beq.n	8003840 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8aa 	bl	800398c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2280      	movs	r2, #128	@ 0x80
 800383e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d012      	beq.n	8003870 <HAL_ADC_IRQHandler+0x3a4>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00d      	beq.n	8003870 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003858:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fd21 	bl	80042a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800386e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003876:	2b00      	cmp	r3, #0
 8003878:	d012      	beq.n	80038a0 <HAL_ADC_IRQHandler+0x3d4>
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00d      	beq.n	80038a0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003888:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fd13 	bl	80042bc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800389e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d043      	beq.n	8003932 <HAL_ADC_IRQHandler+0x466>
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d03e      	beq.n	8003932 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80038bc:	2301      	movs	r3, #1
 80038be:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c0:	e021      	b.n	8003906 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038d0:	d004      	beq.n	80038dc <HAL_ADC_IRQHandler+0x410>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a28      	ldr	r2, [pc, #160]	@ (8003978 <HAL_ADC_IRQHandler+0x4ac>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x414>
 80038dc:	4b29      	ldr	r3, [pc, #164]	@ (8003984 <HAL_ADC_IRQHandler+0x4b8>)
 80038de:	e000      	b.n	80038e2 <HAL_ADC_IRQHandler+0x416>
 80038e0:	4b29      	ldr	r3, [pc, #164]	@ (8003988 <HAL_ADC_IRQHandler+0x4bc>)
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fba0 	bl	8003028 <LL_ADC_GetMultiDMATransfer>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80038ee:	2301      	movs	r3, #1
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f2:	e008      	b.n	8003906 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003902:	2301      	movs	r3, #1
 8003904:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	2b01      	cmp	r3, #1
 800390a:	d10e      	bne.n	800392a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003910:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391c:	f043 0202 	orr.w	r2, r3, #2
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f83b 	bl	80039a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2210      	movs	r2, #16
 8003930:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003938:	2b00      	cmp	r3, #0
 800393a:	d018      	beq.n	800396e <HAL_ADC_IRQHandler+0x4a2>
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003942:	2b00      	cmp	r3, #0
 8003944:	d013      	beq.n	800396e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003956:	f043 0208 	orr.w	r2, r3, #8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003966:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fc93 	bl	8004294 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800396e:	bf00      	nop
 8003970:	3728      	adds	r7, #40	@ 0x28
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	50000100 	.word	0x50000100
 800397c:	50000500 	.word	0x50000500
 8003980:	50000400 	.word	0x50000400
 8003984:	50000300 	.word	0x50000300
 8003988:	50000700 	.word	0x50000700

0800398c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b0b6      	sub	sp, #216	@ 0xd8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d102      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x24>
 80039d2:	2302      	movs	r3, #2
 80039d4:	f000 bc13 	b.w	80041fe <HAL_ADC_ConfigChannel+0x84a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fb8e 	bl	8003106 <LL_ADC_REG_IsConversionOngoing>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f040 83f3 	bne.w	80041d8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f7ff fa75 	bl	8002eee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fb7c 	bl	8003106 <LL_ADC_REG_IsConversionOngoing>
 8003a0e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fb88 	bl	800312c <LL_ADC_INJ_IsConversionOngoing>
 8003a1c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f040 81d9 	bne.w	8003ddc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f040 81d4 	bne.w	8003ddc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a3c:	d10f      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7ff fa8f 	bl	8002f6c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fa23 	bl	8002ea2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003a5c:	e00e      	b.n	8003a7c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f7ff fa7e 	bl	8002f6c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fa13 	bl	8002ea2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	08db      	lsrs	r3, r3, #3
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d022      	beq.n	8003ae4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6919      	ldr	r1, [r3, #16]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003aae:	f7ff f96d 	bl	8002d8c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6919      	ldr	r1, [r3, #16]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f7ff f9b9 	bl	8002e36 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d102      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x126>
 8003ad4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ad8:	e000      	b.n	8003adc <HAL_ADC_ConfigChannel+0x128>
 8003ada:	2300      	movs	r3, #0
 8003adc:	461a      	mov	r2, r3
 8003ade:	f7ff f9c5 	bl	8002e6c <LL_ADC_SetOffsetSaturation>
 8003ae2:	e17b      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff f972 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x15c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff f967 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003b06:	4603      	mov	r3, r0
 8003b08:	0e9b      	lsrs	r3, r3, #26
 8003b0a:	f003 021f 	and.w	r2, r3, #31
 8003b0e:	e01e      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x19a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff f95c 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003b3e:	2320      	movs	r3, #32
 8003b40:	e004      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003b42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d105      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x1b2>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	0e9b      	lsrs	r3, r3, #26
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	e018      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x1e4>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003b82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003b8a:	2320      	movs	r3, #32
 8003b8c:	e004      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003b8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003b92:	fab3 f383 	clz	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d106      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff f92b 	bl	8002e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff f90f 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x222>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff f904 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	0e9b      	lsrs	r3, r3, #26
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	e01e      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x260>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2101      	movs	r1, #1
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff f8f9 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003bf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003bfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003c04:	2320      	movs	r3, #32
 8003c06:	e004      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003c08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d105      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x278>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	0e9b      	lsrs	r3, r3, #26
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	e018      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x2aa>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003c40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003c50:	2320      	movs	r3, #32
 8003c52:	e004      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c58:	fab3 f383 	clz	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d106      	bne.n	8003c70 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff f8c8 	bl	8002e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2102      	movs	r1, #2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff f8ac 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x2e8>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff f8a1 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003c92:	4603      	mov	r3, r0
 8003c94:	0e9b      	lsrs	r3, r3, #26
 8003c96:	f003 021f 	and.w	r2, r3, #31
 8003c9a:	e01e      	b.n	8003cda <HAL_ADC_ConfigChannel+0x326>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2102      	movs	r1, #2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff f896 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cb2:	fa93 f3a3 	rbit	r3, r3
 8003cb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003cca:	2320      	movs	r3, #32
 8003ccc:	e004      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003cce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003cd2:	fab3 f383 	clz	r3, r3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d105      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x33e>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	0e9b      	lsrs	r3, r3, #26
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	e016      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x36c>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cfe:	fa93 f3a3 	rbit	r3, r3
 8003d02:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003d04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003d06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003d12:	2320      	movs	r3, #32
 8003d14:	e004      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d106      	bne.n	8003d32 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff f867 	bl	8002e00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2103      	movs	r1, #3
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff f84b 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x3aa>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2103      	movs	r1, #3
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff f840 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003d54:	4603      	mov	r3, r0
 8003d56:	0e9b      	lsrs	r3, r3, #26
 8003d58:	f003 021f 	and.w	r2, r3, #31
 8003d5c:	e017      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x3da>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2103      	movs	r1, #3
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff f835 	bl	8002dd4 <LL_ADC_GetOffsetChannel>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003d76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d78:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003d7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003d80:	2320      	movs	r3, #32
 8003d82:	e003      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003d84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d105      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x3f2>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	0e9b      	lsrs	r3, r3, #26
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	e011      	b.n	8003dca <HAL_ADC_ConfigChannel+0x416>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dae:	fa93 f3a3 	rbit	r3, r3
 8003db2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003db4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003db8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003dbe:	2320      	movs	r3, #32
 8003dc0:	e003      	b.n	8003dca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dc4:	fab3 f383 	clz	r3, r3
 8003dc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d106      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2103      	movs	r1, #3
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff f812 	bl	8002e00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff f97d 	bl	80030e0 <LL_ADC_IsEnabled>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f040 813d 	bne.w	8004068 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f7ff f8e2 	bl	8002fc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4aa2      	ldr	r2, [pc, #648]	@ (8004090 <HAL_ADC_ConfigChannel+0x6dc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	f040 812e 	bne.w	8004068 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x480>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	0e9b      	lsrs	r3, r3, #26
 8003e22:	3301      	adds	r3, #1
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2b09      	cmp	r3, #9
 8003e2a:	bf94      	ite	ls
 8003e2c:	2301      	movls	r3, #1
 8003e2e:	2300      	movhi	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e019      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x4b4>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e3c:	fa93 f3a3 	rbit	r3, r3
 8003e40:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003e42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e44:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003e46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003e4c:	2320      	movs	r3, #32
 8003e4e:	e003      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003e50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2b09      	cmp	r3, #9
 8003e60:	bf94      	ite	ls
 8003e62:	2301      	movls	r3, #1
 8003e64:	2300      	movhi	r3, #0
 8003e66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d079      	beq.n	8003f60 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d107      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x4d4>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	0e9b      	lsrs	r3, r3, #26
 8003e7e:	3301      	adds	r3, #1
 8003e80:	069b      	lsls	r3, r3, #26
 8003e82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e86:	e015      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x500>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e98:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	e003      	b.n	8003eac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	069b      	lsls	r3, r3, #26
 8003eb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d109      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x520>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	0e9b      	lsrs	r3, r3, #26
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	e017      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x550>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003ee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003eec:	2320      	movs	r3, #32
 8003eee:	e003      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ef2:	fab3 f383 	clz	r3, r3
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	2101      	movs	r1, #1
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	ea42 0103 	orr.w	r1, r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10a      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x576>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	0e9b      	lsrs	r3, r3, #26
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	f003 021f 	and.w	r2, r3, #31
 8003f20:	4613      	mov	r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	051b      	lsls	r3, r3, #20
 8003f28:	e018      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x5a8>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003f42:	2320      	movs	r3, #32
 8003f44:	e003      	b.n	8003f4e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f48:	fab3 f383 	clz	r3, r3
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	f003 021f 	and.w	r2, r3, #31
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	e07e      	b.n	800405e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d107      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x5c8>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	0e9b      	lsrs	r3, r3, #26
 8003f72:	3301      	adds	r3, #1
 8003f74:	069b      	lsls	r3, r3, #26
 8003f76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f7a:	e015      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x5f4>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f84:	fa93 f3a3 	rbit	r3, r3
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003f94:	2320      	movs	r3, #32
 8003f96:	e003      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9a:	fab3 f383 	clz	r3, r3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	069b      	lsls	r3, r3, #26
 8003fa4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x614>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	0e9b      	lsrs	r3, r3, #26
 8003fba:	3301      	adds	r3, #1
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	e017      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x644>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	fa93 f3a3 	rbit	r3, r3
 8003fd4:	61fb      	str	r3, [r7, #28]
  return result;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003fe0:	2320      	movs	r3, #32
 8003fe2:	e003      	b.n	8003fec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	3301      	adds	r3, #1
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	ea42 0103 	orr.w	r1, r2, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10d      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x670>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	0e9b      	lsrs	r3, r3, #26
 800400e:	3301      	adds	r3, #1
 8004010:	f003 021f 	and.w	r2, r3, #31
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	3b1e      	subs	r3, #30
 800401c:	051b      	lsls	r3, r3, #20
 800401e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004022:	e01b      	b.n	800405c <HAL_ADC_ConfigChannel+0x6a8>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	fa93 f3a3 	rbit	r3, r3
 8004030:	613b      	str	r3, [r7, #16]
  return result;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800403c:	2320      	movs	r3, #32
 800403e:	e003      	b.n	8004048 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	3301      	adds	r3, #1
 800404a:	f003 021f 	and.w	r2, r3, #31
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	3b1e      	subs	r3, #30
 8004056:	051b      	lsls	r3, r3, #20
 8004058:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800405c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004062:	4619      	mov	r1, r3
 8004064:	f7fe ff82 	bl	8002f6c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <HAL_ADC_ConfigChannel+0x6e0>)
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80be 	beq.w	80041f2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800407e:	d004      	beq.n	800408a <HAL_ADC_ConfigChannel+0x6d6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a04      	ldr	r2, [pc, #16]	@ (8004098 <HAL_ADC_ConfigChannel+0x6e4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10a      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x6ec>
 800408a:	4b04      	ldr	r3, [pc, #16]	@ (800409c <HAL_ADC_ConfigChannel+0x6e8>)
 800408c:	e009      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x6ee>
 800408e:	bf00      	nop
 8004090:	407f0000 	.word	0x407f0000
 8004094:	80080000 	.word	0x80080000
 8004098:	50000100 	.word	0x50000100
 800409c:	50000300 	.word	0x50000300
 80040a0:	4b59      	ldr	r3, [pc, #356]	@ (8004208 <HAL_ADC_ConfigChannel+0x854>)
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe fe64 	bl	8002d70 <LL_ADC_GetCommonPathInternalCh>
 80040a8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a56      	ldr	r2, [pc, #344]	@ (800420c <HAL_ADC_ConfigChannel+0x858>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d004      	beq.n	80040c0 <HAL_ADC_ConfigChannel+0x70c>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a55      	ldr	r2, [pc, #340]	@ (8004210 <HAL_ADC_ConfigChannel+0x85c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d13a      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d134      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040d4:	d005      	beq.n	80040e2 <HAL_ADC_ConfigChannel+0x72e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a4e      	ldr	r2, [pc, #312]	@ (8004214 <HAL_ADC_ConfigChannel+0x860>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	f040 8085 	bne.w	80041ec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040ea:	d004      	beq.n	80040f6 <HAL_ADC_ConfigChannel+0x742>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a49      	ldr	r2, [pc, #292]	@ (8004218 <HAL_ADC_ConfigChannel+0x864>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d101      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x746>
 80040f6:	4a49      	ldr	r2, [pc, #292]	@ (800421c <HAL_ADC_ConfigChannel+0x868>)
 80040f8:	e000      	b.n	80040fc <HAL_ADC_ConfigChannel+0x748>
 80040fa:	4a43      	ldr	r2, [pc, #268]	@ (8004208 <HAL_ADC_ConfigChannel+0x854>)
 80040fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004100:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f7fe fe1f 	bl	8002d4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800410c:	4b44      	ldr	r3, [pc, #272]	@ (8004220 <HAL_ADC_ConfigChannel+0x86c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	099b      	lsrs	r3, r3, #6
 8004112:	4a44      	ldr	r2, [pc, #272]	@ (8004224 <HAL_ADC_ConfigChannel+0x870>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	099b      	lsrs	r3, r3, #6
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004126:	e002      	b.n	800412e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3b01      	subs	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f9      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004134:	e05a      	b.n	80041ec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a3b      	ldr	r2, [pc, #236]	@ (8004228 <HAL_ADC_ConfigChannel+0x874>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d125      	bne.n	800418c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d11f      	bne.n	800418c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a31      	ldr	r2, [pc, #196]	@ (8004218 <HAL_ADC_ConfigChannel+0x864>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d104      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x7ac>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a34      	ldr	r2, [pc, #208]	@ (800422c <HAL_ADC_ConfigChannel+0x878>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d047      	beq.n	80041f0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004168:	d004      	beq.n	8004174 <HAL_ADC_ConfigChannel+0x7c0>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a2a      	ldr	r2, [pc, #168]	@ (8004218 <HAL_ADC_ConfigChannel+0x864>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d101      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x7c4>
 8004174:	4a29      	ldr	r2, [pc, #164]	@ (800421c <HAL_ADC_ConfigChannel+0x868>)
 8004176:	e000      	b.n	800417a <HAL_ADC_ConfigChannel+0x7c6>
 8004178:	4a23      	ldr	r2, [pc, #140]	@ (8004208 <HAL_ADC_ConfigChannel+0x854>)
 800417a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800417e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f7fe fde0 	bl	8002d4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800418a:	e031      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a27      	ldr	r2, [pc, #156]	@ (8004230 <HAL_ADC_ConfigChannel+0x87c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d12d      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800419a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d127      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004218 <HAL_ADC_ConfigChannel+0x864>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041b4:	d004      	beq.n	80041c0 <HAL_ADC_ConfigChannel+0x80c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a17      	ldr	r2, [pc, #92]	@ (8004218 <HAL_ADC_ConfigChannel+0x864>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x810>
 80041c0:	4a16      	ldr	r2, [pc, #88]	@ (800421c <HAL_ADC_ConfigChannel+0x868>)
 80041c2:	e000      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x812>
 80041c4:	4a10      	ldr	r2, [pc, #64]	@ (8004208 <HAL_ADC_ConfigChannel+0x854>)
 80041c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f7fe fdba 	bl	8002d4a <LL_ADC_SetCommonPathInternalCh>
 80041d6:	e00c      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041dc:	f043 0220 	orr.w	r2, r3, #32
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80041ea:	e002      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041ec:	bf00      	nop
 80041ee:	e000      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80041fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80041fe:	4618      	mov	r0, r3
 8004200:	37d8      	adds	r7, #216	@ 0xd8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	50000700 	.word	0x50000700
 800420c:	c3210000 	.word	0xc3210000
 8004210:	90c00010 	.word	0x90c00010
 8004214:	50000600 	.word	0x50000600
 8004218:	50000100 	.word	0x50000100
 800421c:	50000300 	.word	0x50000300
 8004220:	20000000 	.word	0x20000000
 8004224:	053e2d63 	.word	0x053e2d63
 8004228:	c7520000 	.word	0xc7520000
 800422c:	50000500 	.word	0x50000500
 8004230:	cb840000 	.word	0xcb840000

08004234 <LL_ADC_IsEnabled>:
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <LL_ADC_IsEnabled+0x18>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <LL_ADC_IsEnabled+0x1a>
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <LL_ADC_REG_IsConversionOngoing>:
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b04      	cmp	r3, #4
 800426c:	d101      	bne.n	8004272 <LL_ADC_REG_IsConversionOngoing+0x18>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b0a1      	sub	sp, #132	@ 0x84
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80042fe:	2302      	movs	r3, #2
 8004300:	e0e7      	b.n	80044d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800430a:	2300      	movs	r3, #0
 800430c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800430e:	2300      	movs	r3, #0
 8004310:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800431a:	d102      	bne.n	8004322 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800431c:	4b6f      	ldr	r3, [pc, #444]	@ (80044dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	e009      	b.n	8004336 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6e      	ldr	r2, [pc, #440]	@ (80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d102      	bne.n	8004332 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800432c:	4b6d      	ldr	r3, [pc, #436]	@ (80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	e001      	b.n	8004336 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004340:	f043 0220 	orr.w	r2, r3, #32
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0be      	b.n	80044d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff ff7f 	bl	800425a <LL_ADC_REG_IsConversionOngoing>
 800435c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff ff79 	bl	800425a <LL_ADC_REG_IsConversionOngoing>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 80a0 	bne.w	80044b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004370:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 809c 	bne.w	80044b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004380:	d004      	beq.n	800438c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a55      	ldr	r2, [pc, #340]	@ (80044dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d101      	bne.n	8004390 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800438c:	4b56      	ldr	r3, [pc, #344]	@ (80044e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800438e:	e000      	b.n	8004392 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004390:	4b56      	ldr	r3, [pc, #344]	@ (80044ec <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004392:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d04b      	beq.n	8004434 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800439c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80043ae:	035b      	lsls	r3, r3, #13
 80043b0:	430b      	orrs	r3, r1
 80043b2:	431a      	orrs	r2, r3
 80043b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043c0:	d004      	beq.n	80043cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a45      	ldr	r2, [pc, #276]	@ (80044dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d10f      	bne.n	80043ec <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80043cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80043d0:	f7ff ff30 	bl	8004234 <LL_ADC_IsEnabled>
 80043d4:	4604      	mov	r4, r0
 80043d6:	4841      	ldr	r0, [pc, #260]	@ (80044dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043d8:	f7ff ff2c 	bl	8004234 <LL_ADC_IsEnabled>
 80043dc:	4603      	mov	r3, r0
 80043de:	4323      	orrs	r3, r4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e012      	b.n	8004412 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80043ec:	483c      	ldr	r0, [pc, #240]	@ (80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043ee:	f7ff ff21 	bl	8004234 <LL_ADC_IsEnabled>
 80043f2:	4604      	mov	r4, r0
 80043f4:	483b      	ldr	r0, [pc, #236]	@ (80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043f6:	f7ff ff1d 	bl	8004234 <LL_ADC_IsEnabled>
 80043fa:	4603      	mov	r3, r0
 80043fc:	431c      	orrs	r4, r3
 80043fe:	483c      	ldr	r0, [pc, #240]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004400:	f7ff ff18 	bl	8004234 <LL_ADC_IsEnabled>
 8004404:	4603      	mov	r3, r0
 8004406:	4323      	orrs	r3, r4
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf0c      	ite	eq
 800440c:	2301      	moveq	r3, #1
 800440e:	2300      	movne	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d056      	beq.n	80044c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800441e:	f023 030f 	bic.w	r3, r3, #15
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	6811      	ldr	r1, [r2, #0]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	6892      	ldr	r2, [r2, #8]
 800442a:	430a      	orrs	r2, r1
 800442c:	431a      	orrs	r2, r3
 800442e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004430:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004432:	e047      	b.n	80044c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004434:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800443c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800443e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004448:	d004      	beq.n	8004454 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a23      	ldr	r2, [pc, #140]	@ (80044dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d10f      	bne.n	8004474 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004454:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004458:	f7ff feec 	bl	8004234 <LL_ADC_IsEnabled>
 800445c:	4604      	mov	r4, r0
 800445e:	481f      	ldr	r0, [pc, #124]	@ (80044dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004460:	f7ff fee8 	bl	8004234 <LL_ADC_IsEnabled>
 8004464:	4603      	mov	r3, r0
 8004466:	4323      	orrs	r3, r4
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e012      	b.n	800449a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004474:	481a      	ldr	r0, [pc, #104]	@ (80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004476:	f7ff fedd 	bl	8004234 <LL_ADC_IsEnabled>
 800447a:	4604      	mov	r4, r0
 800447c:	4819      	ldr	r0, [pc, #100]	@ (80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800447e:	f7ff fed9 	bl	8004234 <LL_ADC_IsEnabled>
 8004482:	4603      	mov	r3, r0
 8004484:	431c      	orrs	r4, r3
 8004486:	481a      	ldr	r0, [pc, #104]	@ (80044f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004488:	f7ff fed4 	bl	8004234 <LL_ADC_IsEnabled>
 800448c:	4603      	mov	r3, r0
 800448e:	4323      	orrs	r3, r4
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d012      	beq.n	80044c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800449e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80044a6:	f023 030f 	bic.w	r3, r3, #15
 80044aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80044ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044ae:	e009      	b.n	80044c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b4:	f043 0220 	orr.w	r2, r3, #32
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80044c2:	e000      	b.n	80044c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80044ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3784      	adds	r7, #132	@ 0x84
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd90      	pop	{r4, r7, pc}
 80044da:	bf00      	nop
 80044dc:	50000100 	.word	0x50000100
 80044e0:	50000400 	.word	0x50000400
 80044e4:	50000500 	.word	0x50000500
 80044e8:	50000300 	.word	0x50000300
 80044ec:	50000700 	.word	0x50000700
 80044f0:	50000600 	.word	0x50000600

080044f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004504:	4b0c      	ldr	r3, [pc, #48]	@ (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800451c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004526:	4a04      	ldr	r2, [pc, #16]	@ (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	60d3      	str	r3, [r2, #12]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004540:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <__NVIC_GetPriorityGrouping+0x18>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	f003 0307 	and.w	r3, r3, #7
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db0b      	blt.n	8004582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	f003 021f 	and.w	r2, r3, #31
 8004570:	4907      	ldr	r1, [pc, #28]	@ (8004590 <__NVIC_EnableIRQ+0x38>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2001      	movs	r0, #1
 800457a:	fa00 f202 	lsl.w	r2, r0, r2
 800457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000e100 	.word	0xe000e100

08004594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	db0a      	blt.n	80045be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	490c      	ldr	r1, [pc, #48]	@ (80045e0 <__NVIC_SetPriority+0x4c>)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	0112      	lsls	r2, r2, #4
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	440b      	add	r3, r1
 80045b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045bc:	e00a      	b.n	80045d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	4908      	ldr	r1, [pc, #32]	@ (80045e4 <__NVIC_SetPriority+0x50>)
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	3b04      	subs	r3, #4
 80045cc:	0112      	lsls	r2, r2, #4
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	440b      	add	r3, r1
 80045d2:	761a      	strb	r2, [r3, #24]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000e100 	.word	0xe000e100
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	@ 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f1c3 0307 	rsb	r3, r3, #7
 8004602:	2b04      	cmp	r3, #4
 8004604:	bf28      	it	cs
 8004606:	2304      	movcs	r3, #4
 8004608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3304      	adds	r3, #4
 800460e:	2b06      	cmp	r3, #6
 8004610:	d902      	bls.n	8004618 <NVIC_EncodePriority+0x30>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3b03      	subs	r3, #3
 8004616:	e000      	b.n	800461a <NVIC_EncodePriority+0x32>
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800461c:	f04f 32ff 	mov.w	r2, #4294967295
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43da      	mvns	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	401a      	ands	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004630:	f04f 31ff 	mov.w	r1, #4294967295
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	43d9      	mvns	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	4313      	orrs	r3, r2
         );
}
 8004642:	4618      	mov	r0, r3
 8004644:	3724      	adds	r7, #36	@ 0x24
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff ff4c 	bl	80044f4 <__NVIC_SetPriorityGrouping>
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004672:	f7ff ff63 	bl	800453c <__NVIC_GetPriorityGrouping>
 8004676:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	6978      	ldr	r0, [r7, #20]
 800467e:	f7ff ffb3 	bl	80045e8 <NVIC_EncodePriority>
 8004682:	4602      	mov	r2, r0
 8004684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004688:	4611      	mov	r1, r2
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff ff82 	bl	8004594 <__NVIC_SetPriority>
}
 8004690:	bf00      	nop
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff56 	bl	8004558 <__NVIC_EnableIRQ>
}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e054      	b.n	8004770 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	7f5b      	ldrb	r3, [r3, #29]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d105      	bne.n	80046dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fc fad2 	bl	8000c80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	791b      	ldrb	r3, [r3, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10c      	bne.n	8004704 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a22      	ldr	r2, [pc, #136]	@ (8004778 <HAL_CRC_Init+0xc4>)
 80046f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0218 	bic.w	r2, r2, #24
 8004700:	609a      	str	r2, [r3, #8]
 8004702:	e00c      	b.n	800471e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6899      	ldr	r1, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	461a      	mov	r2, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f834 	bl	800477c <HAL_CRCEx_Polynomial_Set>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e028      	b.n	8004770 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	795b      	ldrb	r3, [r3, #5]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d105      	bne.n	8004732 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f04f 32ff 	mov.w	r2, #4294967295
 800472e:	611a      	str	r2, [r3, #16]
 8004730:	e004      	b.n	800473c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6912      	ldr	r2, [r2, #16]
 800473a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699a      	ldr	r2, [r3, #24]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	04c11db7 	.word	0x04c11db7

0800477c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800478c:	231f      	movs	r3, #31
 800478e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	75fb      	strb	r3, [r7, #23]
 800479e:	e063      	b.n	8004868 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80047a0:	bf00      	nop
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1e5a      	subs	r2, r3, #1
 80047a6:	613a      	str	r2, [r7, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <HAL_CRCEx_Polynomial_Set+0x44>
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b18      	cmp	r3, #24
 80047c4:	d846      	bhi.n	8004854 <HAL_CRCEx_Polynomial_Set+0xd8>
 80047c6:	a201      	add	r2, pc, #4	@ (adr r2, 80047cc <HAL_CRCEx_Polynomial_Set+0x50>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	0800485b 	.word	0x0800485b
 80047d0:	08004855 	.word	0x08004855
 80047d4:	08004855 	.word	0x08004855
 80047d8:	08004855 	.word	0x08004855
 80047dc:	08004855 	.word	0x08004855
 80047e0:	08004855 	.word	0x08004855
 80047e4:	08004855 	.word	0x08004855
 80047e8:	08004855 	.word	0x08004855
 80047ec:	08004849 	.word	0x08004849
 80047f0:	08004855 	.word	0x08004855
 80047f4:	08004855 	.word	0x08004855
 80047f8:	08004855 	.word	0x08004855
 80047fc:	08004855 	.word	0x08004855
 8004800:	08004855 	.word	0x08004855
 8004804:	08004855 	.word	0x08004855
 8004808:	08004855 	.word	0x08004855
 800480c:	0800483d 	.word	0x0800483d
 8004810:	08004855 	.word	0x08004855
 8004814:	08004855 	.word	0x08004855
 8004818:	08004855 	.word	0x08004855
 800481c:	08004855 	.word	0x08004855
 8004820:	08004855 	.word	0x08004855
 8004824:	08004855 	.word	0x08004855
 8004828:	08004855 	.word	0x08004855
 800482c:	08004831 	.word	0x08004831
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b06      	cmp	r3, #6
 8004834:	d913      	bls.n	800485e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800483a:	e010      	b.n	800485e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b07      	cmp	r3, #7
 8004840:	d90f      	bls.n	8004862 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004846:	e00c      	b.n	8004862 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b0f      	cmp	r3, #15
 800484c:	d90b      	bls.n	8004866 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004852:	e008      	b.n	8004866 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	75fb      	strb	r3, [r7, #23]
        break;
 8004858:	e006      	b.n	8004868 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800485a:	bf00      	nop
 800485c:	e004      	b.n	8004868 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800485e:	bf00      	nop
 8004860:	e002      	b.n	8004868 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004862:	bf00      	nop
 8004864:	e000      	b.n	8004868 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004866:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004868:	7dfb      	ldrb	r3, [r7, #23]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10d      	bne.n	800488a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f023 0118 	bic.w	r1, r3, #24
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	430a      	orrs	r2, r1
 8004888:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800488a:	7dfb      	ldrb	r3, [r7, #23]
}
 800488c:	4618      	mov	r0, r3
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e08d      	b.n	80049c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	4b47      	ldr	r3, [pc, #284]	@ (80049d0 <HAL_DMA_Init+0x138>)
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d80f      	bhi.n	80048d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b45      	ldr	r3, [pc, #276]	@ (80049d4 <HAL_DMA_Init+0x13c>)
 80048be:	4413      	add	r3, r2
 80048c0:	4a45      	ldr	r2, [pc, #276]	@ (80049d8 <HAL_DMA_Init+0x140>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	091b      	lsrs	r3, r3, #4
 80048c8:	009a      	lsls	r2, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a42      	ldr	r2, [pc, #264]	@ (80049dc <HAL_DMA_Init+0x144>)
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80048d4:	e00e      	b.n	80048f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	4b40      	ldr	r3, [pc, #256]	@ (80049e0 <HAL_DMA_Init+0x148>)
 80048de:	4413      	add	r3, r2
 80048e0:	4a3d      	ldr	r2, [pc, #244]	@ (80049d8 <HAL_DMA_Init+0x140>)
 80048e2:	fba2 2303 	umull	r2, r3, r2, r3
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	009a      	lsls	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a3c      	ldr	r2, [pc, #240]	@ (80049e4 <HAL_DMA_Init+0x14c>)
 80048f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800490a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f972 	bl	8004c30 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004954:	d102      	bne.n	800495c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004970:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d010      	beq.n	800499c <HAL_DMA_Init+0x104>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b04      	cmp	r3, #4
 8004980:	d80c      	bhi.n	800499c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f992 	bl	8004cac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	e008      	b.n	80049ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40020407 	.word	0x40020407
 80049d4:	bffdfff8 	.word	0xbffdfff8
 80049d8:	cccccccd 	.word	0xcccccccd
 80049dc:	40020000 	.word	0x40020000
 80049e0:	bffdfbf8 	.word	0xbffdfbf8
 80049e4:	40020400 	.word	0x40020400

080049e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d00d      	beq.n	8004a1c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2204      	movs	r2, #4
 8004a04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	73fb      	strb	r3, [r7, #15]
 8004a1a:	e047      	b.n	8004aac <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 020e 	bic.w	r2, r2, #14
 8004a2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a50:	f003 021f 	and.w	r2, r3, #31
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	2101      	movs	r1, #1
 8004a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a68:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00c      	beq.n	8004a8c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a80:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a8a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	4798      	blx	r3
    }
  }
  return status;
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d026      	beq.n	8004b30 <HAL_DMA_IRQHandler+0x7a>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d021      	beq.n	8004b30 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d107      	bne.n	8004b0a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0204 	bic.w	r2, r2, #4
 8004b08:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	f003 021f 	and.w	r2, r3, #31
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	2104      	movs	r1, #4
 8004b18:	fa01 f202 	lsl.w	r2, r1, r2
 8004b1c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d071      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004b2e:	e06c      	b.n	8004c0a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	2202      	movs	r2, #2
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d02e      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d029      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 020a 	bic.w	r2, r2, #10
 8004b6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b78:	f003 021f 	and.w	r2, r3, #31
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b80:	2102      	movs	r1, #2
 8004b82:	fa01 f202 	lsl.w	r2, r1, r2
 8004b86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d038      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004ba0:	e033      	b.n	8004c0a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	2208      	movs	r2, #8
 8004bac:	409a      	lsls	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d02a      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d025      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 020e 	bic.w	r2, r2, #14
 8004bce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd4:	f003 021f 	and.w	r2, r3, #31
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f202 	lsl.w	r2, r1, r2
 8004be2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d004      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c0a:	bf00      	nop
 8004c0c:	bf00      	nop
}
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c22:	b2db      	uxtb	r3, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4b16      	ldr	r3, [pc, #88]	@ (8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d802      	bhi.n	8004c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c44:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	e001      	b.n	8004c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004c4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c4c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	3b08      	subs	r3, #8
 8004c5a:	4a12      	ldr	r2, [pc, #72]	@ (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c68:	089b      	lsrs	r3, r3, #2
 8004c6a:	009a      	lsls	r2, r3, #2
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4413      	add	r3, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a0b      	ldr	r2, [pc, #44]	@ (8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	2201      	movs	r2, #1
 8004c84:	409a      	lsls	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40020407 	.word	0x40020407
 8004c9c:	40020800 	.word	0x40020800
 8004ca0:	40020820 	.word	0x40020820
 8004ca4:	cccccccd 	.word	0xcccccccd
 8004ca8:	40020880 	.word	0x40020880

08004cac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a08      	ldr	r2, [pc, #32]	@ (8004cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004cce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2201      	movs	r2, #1
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004ce0:	bf00      	nop
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	1000823f 	.word	0x1000823f
 8004cf0:	40020940 	.word	0x40020940

08004cf4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e147      	b.n	8004f96 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fc f842 	bl	8000da4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0210 	bic.w	r2, r2, #16
 8004d2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d30:	f7fd ffa6 	bl	8002c80 <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d36:	e012      	b.n	8004d5e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d38:	f7fd ffa2 	bl	8002c80 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b0a      	cmp	r3, #10
 8004d44:	d90b      	bls.n	8004d5e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d4a:	f043 0201 	orr.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2203      	movs	r2, #3
 8004d56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e11b      	b.n	8004f96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d0e5      	beq.n	8004d38 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d7c:	f7fd ff80 	bl	8002c80 <HAL_GetTick>
 8004d80:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d82:	e012      	b.n	8004daa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d84:	f7fd ff7c 	bl	8002c80 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b0a      	cmp	r3, #10
 8004d90:	d90b      	bls.n	8004daa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d96:	f043 0201 	orr.w	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2203      	movs	r2, #3
 8004da2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e0f5      	b.n	8004f96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0e5      	beq.n	8004d84 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0202 	orr.w	r2, r2, #2
 8004dc6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a74      	ldr	r2, [pc, #464]	@ (8004fa0 <HAL_FDCAN_Init+0x2ac>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d103      	bne.n	8004dda <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004dd2:	4a74      	ldr	r2, [pc, #464]	@ (8004fa4 <HAL_FDCAN_Init+0x2b0>)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	7c1b      	ldrb	r3, [r3, #16]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d108      	bne.n	8004df4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699a      	ldr	r2, [r3, #24]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004df0:	619a      	str	r2, [r3, #24]
 8004df2:	e007      	b.n	8004e04 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e02:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	7c5b      	ldrb	r3, [r3, #17]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d108      	bne.n	8004e1e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e1a:	619a      	str	r2, [r3, #24]
 8004e1c:	e007      	b.n	8004e2e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e2c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	7c9b      	ldrb	r3, [r3, #18]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d108      	bne.n	8004e48 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e44:	619a      	str	r2, [r3, #24]
 8004e46:	e007      	b.n	8004e58 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e56:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004e7c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0210 	bic.w	r2, r2, #16
 8004e8c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d108      	bne.n	8004ea8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0204 	orr.w	r2, r2, #4
 8004ea4:	619a      	str	r2, [r3, #24]
 8004ea6:	e02c      	b.n	8004f02 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d028      	beq.n	8004f02 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d01c      	beq.n	8004ef2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ec6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0210 	orr.w	r2, r2, #16
 8004ed6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d110      	bne.n	8004f02 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0220 	orr.w	r2, r2, #32
 8004eee:	619a      	str	r2, [r3, #24]
 8004ef0:	e007      	b.n	8004f02 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699a      	ldr	r2, [r3, #24]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0220 	orr.w	r2, r2, #32
 8004f00:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f12:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f1a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f2a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f2c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f36:	d115      	bne.n	8004f64 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f42:	3b01      	subs	r3, #1
 8004f44:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f46:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004f50:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004f60:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f62:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa1a 	bl	80053b4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40006400 	.word	0x40006400
 8004fa4:	40006500 	.word	0x40006500

08004fa8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d110      	bne.n	8004fde <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0201 	bic.w	r2, r2, #1
 8004fd2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e006      	b.n	8004fec <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe2:	f043 0204 	orr.w	r2, r3, #4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
  }
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d12c      	bne.n	800506a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005024:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e023      	b.n	8005078 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fa20 	bl	800548c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2101      	movs	r1, #1
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	fa01 f202 	lsl.w	r2, r1, r2
 8005058:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800505c:	2201      	movs	r2, #1
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	409a      	lsls	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	e006      	b.n	8005078 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800506e:	f043 0208 	orr.w	r2, r3, #8
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
  }
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08c      	sub	sp, #48	@ 0x30
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800509c:	4013      	ands	r3, r2
 800509e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050b4:	4013      	ands	r3, r2
 80050b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050cc:	4013      	ands	r3, r2
 80050ce:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80050da:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e2:	6a3a      	ldr	r2, [r7, #32]
 80050e4:	4013      	ands	r3, r2
 80050e6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80050f2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	4013      	ands	r3, r2
 80050fe:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005106:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800510e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00b      	beq.n	8005132 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d006      	beq.n	8005132 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2240      	movs	r2, #64	@ 0x40
 800512a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f921 	bl	8005374 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005138:	2b00      	cmp	r3, #0
 800513a:	d019      	beq.n	8005170 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d014      	beq.n	8005170 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800514e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4013      	ands	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005166:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005168:	6939      	ldr	r1, [r7, #16]
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f8e3 	bl	8005336 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800517c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800517e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f8a2 	bl	80052ca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005192:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f8a2 	bl	80052e0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80051aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f8a2 	bl	80052f6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00c      	beq.n	80051d6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051ce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f89b 	bl	800530c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d018      	beq.n	8005212 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d013      	beq.n	8005212 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80051f2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4013      	ands	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2280      	movs	r2, #128	@ 0x80
 8005208:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800520a:	68f9      	ldr	r1, [r7, #12]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f887 	bl	8005320 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00c      	beq.n	8005236 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800522e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f88b 	bl	800534c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00c      	beq.n	800525a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005252:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f883 	bl	8005360 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00f      	beq.n	8005284 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005276:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800527c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005292:	69f9      	ldr	r1, [r7, #28]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f881 	bl	800539c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d009      	beq.n	80052b4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6a3a      	ldr	r2, [r7, #32]
 80052a6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f863 	bl	8005388 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80052c2:	bf00      	nop
 80052c4:	3730      	adds	r7, #48	@ 0x30
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80053bc:	4b30      	ldr	r3, [pc, #192]	@ (8005480 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80053be:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005484 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d103      	bne.n	80053d2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80053d0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005488 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d103      	bne.n	80053e4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80053e2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053f2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053fa:	041a      	lsls	r2, r3, #16
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005418:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005420:	061a      	lsls	r2, r3, #24
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	e005      	b.n	8005466 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3304      	adds	r3, #4
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	429a      	cmp	r2, r3
 8005470:	d3f3      	bcc.n	800545a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	4000a400 	.word	0x4000a400
 8005484:	40006800 	.word	0x40006800
 8005488:	40006c00 	.word	0x40006c00

0800548c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800548c:	b480      	push	{r7}
 800548e:	b089      	sub	sp, #36	@ 0x24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80054aa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80054b2:	4313      	orrs	r3, r2
 80054b4:	61fb      	str	r3, [r7, #28]
 80054b6:	e00a      	b.n	80054ce <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80054c0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80054c6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80054c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054cc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80054d8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80054de:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80054e4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	4613      	mov	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4413      	add	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	440b      	add	r3, r1
 8005500:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	3304      	adds	r3, #4
 800550c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	3304      	adds	r3, #4
 8005518:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	e020      	b.n	8005562 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	3303      	adds	r3, #3
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	4413      	add	r3, r2
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	3302      	adds	r3, #2
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	440b      	add	r3, r1
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005538:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	3301      	adds	r3, #1
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	440b      	add	r3, r1
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005546:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	440a      	add	r2, r1
 800554e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005550:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	3304      	adds	r3, #4
 800555a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	3304      	adds	r3, #4
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	4a06      	ldr	r2, [pc, #24]	@ (8005580 <FDCAN_CopyMessageToRAM+0xf4>)
 8005568:	5cd3      	ldrb	r3, [r2, r3]
 800556a:	461a      	mov	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	4293      	cmp	r3, r2
 8005570:	d3d6      	bcc.n	8005520 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	3724      	adds	r7, #36	@ 0x24
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	0800c4f8 	.word	0x0800c4f8

08005584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005592:	e15a      	b.n	800584a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	2101      	movs	r1, #1
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	fa01 f303 	lsl.w	r3, r1, r3
 80055a0:	4013      	ands	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 814c 	beq.w	8005844 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d005      	beq.n	80055c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d130      	bne.n	8005626 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	2203      	movs	r2, #3
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	43db      	mvns	r3, r3
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4013      	ands	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055fa:	2201      	movs	r2, #1
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	43db      	mvns	r3, r3
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4013      	ands	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	091b      	lsrs	r3, r3, #4
 8005610:	f003 0201 	and.w	r2, r3, #1
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b03      	cmp	r3, #3
 8005630:	d017      	beq.n	8005662 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	2203      	movs	r2, #3
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4013      	ands	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d123      	bne.n	80056b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	08da      	lsrs	r2, r3, #3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3208      	adds	r2, #8
 8005676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	220f      	movs	r2, #15
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	43db      	mvns	r3, r3
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4013      	ands	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	691a      	ldr	r2, [r3, #16]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	08da      	lsrs	r2, r3, #3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3208      	adds	r2, #8
 80056b0:	6939      	ldr	r1, [r7, #16]
 80056b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	2203      	movs	r2, #3
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43db      	mvns	r3, r3
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4013      	ands	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f003 0203 	and.w	r2, r3, #3
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 80a6 	beq.w	8005844 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056f8:	4b5b      	ldr	r3, [pc, #364]	@ (8005868 <HAL_GPIO_Init+0x2e4>)
 80056fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005868 <HAL_GPIO_Init+0x2e4>)
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	6613      	str	r3, [r2, #96]	@ 0x60
 8005704:	4b58      	ldr	r3, [pc, #352]	@ (8005868 <HAL_GPIO_Init+0x2e4>)
 8005706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	60bb      	str	r3, [r7, #8]
 800570e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005710:	4a56      	ldr	r2, [pc, #344]	@ (800586c <HAL_GPIO_Init+0x2e8>)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	089b      	lsrs	r3, r3, #2
 8005716:	3302      	adds	r3, #2
 8005718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800571c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	220f      	movs	r2, #15
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	43db      	mvns	r3, r3
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4013      	ands	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800573a:	d01f      	beq.n	800577c <HAL_GPIO_Init+0x1f8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a4c      	ldr	r2, [pc, #304]	@ (8005870 <HAL_GPIO_Init+0x2ec>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d019      	beq.n	8005778 <HAL_GPIO_Init+0x1f4>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a4b      	ldr	r2, [pc, #300]	@ (8005874 <HAL_GPIO_Init+0x2f0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d013      	beq.n	8005774 <HAL_GPIO_Init+0x1f0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a4a      	ldr	r2, [pc, #296]	@ (8005878 <HAL_GPIO_Init+0x2f4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00d      	beq.n	8005770 <HAL_GPIO_Init+0x1ec>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a49      	ldr	r2, [pc, #292]	@ (800587c <HAL_GPIO_Init+0x2f8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d007      	beq.n	800576c <HAL_GPIO_Init+0x1e8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a48      	ldr	r2, [pc, #288]	@ (8005880 <HAL_GPIO_Init+0x2fc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d101      	bne.n	8005768 <HAL_GPIO_Init+0x1e4>
 8005764:	2305      	movs	r3, #5
 8005766:	e00a      	b.n	800577e <HAL_GPIO_Init+0x1fa>
 8005768:	2306      	movs	r3, #6
 800576a:	e008      	b.n	800577e <HAL_GPIO_Init+0x1fa>
 800576c:	2304      	movs	r3, #4
 800576e:	e006      	b.n	800577e <HAL_GPIO_Init+0x1fa>
 8005770:	2303      	movs	r3, #3
 8005772:	e004      	b.n	800577e <HAL_GPIO_Init+0x1fa>
 8005774:	2302      	movs	r3, #2
 8005776:	e002      	b.n	800577e <HAL_GPIO_Init+0x1fa>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <HAL_GPIO_Init+0x1fa>
 800577c:	2300      	movs	r3, #0
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	f002 0203 	and.w	r2, r2, #3
 8005784:	0092      	lsls	r2, r2, #2
 8005786:	4093      	lsls	r3, r2
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800578e:	4937      	ldr	r1, [pc, #220]	@ (800586c <HAL_GPIO_Init+0x2e8>)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	089b      	lsrs	r3, r3, #2
 8005794:	3302      	adds	r3, #2
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800579c:	4b39      	ldr	r3, [pc, #228]	@ (8005884 <HAL_GPIO_Init+0x300>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4013      	ands	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80057c0:	4a30      	ldr	r2, [pc, #192]	@ (8005884 <HAL_GPIO_Init+0x300>)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80057c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005884 <HAL_GPIO_Init+0x300>)
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	43db      	mvns	r3, r3
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4013      	ands	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057ea:	4a26      	ldr	r2, [pc, #152]	@ (8005884 <HAL_GPIO_Init+0x300>)
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80057f0:	4b24      	ldr	r3, [pc, #144]	@ (8005884 <HAL_GPIO_Init+0x300>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	43db      	mvns	r3, r3
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4013      	ands	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005814:	4a1b      	ldr	r2, [pc, #108]	@ (8005884 <HAL_GPIO_Init+0x300>)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800581a:	4b1a      	ldr	r3, [pc, #104]	@ (8005884 <HAL_GPIO_Init+0x300>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	43db      	mvns	r3, r3
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4013      	ands	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800583e:	4a11      	ldr	r2, [pc, #68]	@ (8005884 <HAL_GPIO_Init+0x300>)
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	3301      	adds	r3, #1
 8005848:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	fa22 f303 	lsr.w	r3, r2, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	f47f ae9d 	bne.w	8005594 <HAL_GPIO_Init+0x10>
  }
}
 800585a:	bf00      	nop
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	40021000 	.word	0x40021000
 800586c:	40010000 	.word	0x40010000
 8005870:	48000400 	.word	0x48000400
 8005874:	48000800 	.word	0x48000800
 8005878:	48000c00 	.word	0x48000c00
 800587c:	48001000 	.word	0x48001000
 8005880:	48001400 	.word	0x48001400
 8005884:	40010400 	.word	0x40010400

08005888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	807b      	strh	r3, [r7, #2]
 8005894:	4613      	mov	r3, r2
 8005896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005898:	787b      	ldrb	r3, [r7, #1]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800589e:	887a      	ldrh	r2, [r7, #2]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058a4:	e002      	b.n	80058ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058a6:	887a      	ldrh	r2, [r7, #2]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058ca:	887a      	ldrh	r2, [r7, #2]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4013      	ands	r3, r2
 80058d0:	041a      	lsls	r2, r3, #16
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	43d9      	mvns	r1, r3
 80058d6:	887b      	ldrh	r3, [r7, #2]
 80058d8:	400b      	ands	r3, r1
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	619a      	str	r2, [r3, #24]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80058f6:	4b08      	ldr	r3, [pc, #32]	@ (8005918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d006      	beq.n	8005910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005902:	4a05      	ldr	r2, [pc, #20]	@ (8005918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005908:	88fb      	ldrh	r3, [r7, #6]
 800590a:	4618      	mov	r0, r3
 800590c:	f7fc fb92 	bl	8002034 <HAL_GPIO_EXTI_Callback>
  }
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40010400 	.word	0x40010400

0800591c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e08d      	b.n	8005a4a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d106      	bne.n	8005948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fb fc10 	bl	8001168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2224      	movs	r2, #36	@ 0x24
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800596c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800597c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d107      	bne.n	8005996 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005992:	609a      	str	r2, [r3, #8]
 8005994:	e006      	b.n	80059a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d108      	bne.n	80059be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ba:	605a      	str	r2, [r3, #4]
 80059bc:	e007      	b.n	80059ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691a      	ldr	r2, [r3, #16]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69d9      	ldr	r1, [r3, #28]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1a      	ldr	r2, [r3, #32]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	68f9      	ldr	r1, [r7, #12]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
  }
}
 8005a7e:	bf00      	nop
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b086      	sub	sp, #24
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00f      	beq.n	8005ac8 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	f043 0201 	orr.w	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ac6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00f      	beq.n	8005af2 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae0:	f043 0208 	orr.w	r2, r3, #8
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005af0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00f      	beq.n	8005b1c <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0a:	f043 0202 	orr.w	r2, r3, #2
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b1a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 030b 	and.w	r3, r3, #11
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005b2c:	68f9      	ldr	r1, [r7, #12]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fbd6 	bl	80062e0 <I2C_ITError>
  }
}
 8005b34:	bf00      	nop
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
 8005b70:	4613      	mov	r3, r2
 8005b72:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <I2C_Slave_ISR_IT+0x24>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e0e2      	b.n	8005da6 <I2C_Slave_ISR_IT+0x1ea>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d009      	beq.n	8005c06 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005bfc:	6939      	ldr	r1, [r7, #16]
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f9b6 	bl	8005f70 <I2C_ITSlaveCplt>
 8005c04:	e0ca      	b.n	8005d9c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d04b      	beq.n	8005ca8 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d046      	beq.n	8005ca8 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d128      	bne.n	8005c76 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b28      	cmp	r3, #40	@ 0x28
 8005c2e:	d108      	bne.n	8005c42 <I2C_Slave_ISR_IT+0x86>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c36:	d104      	bne.n	8005c42 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005c38:	6939      	ldr	r1, [r7, #16]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fafc 	bl	8006238 <I2C_ITListenCplt>
 8005c40:	e031      	b.n	8005ca6 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b29      	cmp	r3, #41	@ 0x29
 8005c4c:	d10e      	bne.n	8005c6c <I2C_Slave_ISR_IT+0xb0>
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c54:	d00a      	beq.n	8005c6c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2210      	movs	r2, #16
 8005c5c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 fc55 	bl	800650e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f926 	bl	8005eb6 <I2C_ITSlaveSeqCplt>
 8005c6a:	e01c      	b.n	8005ca6 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2210      	movs	r2, #16
 8005c72:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005c74:	e08f      	b.n	8005d96 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2210      	movs	r2, #16
 8005c7c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c82:	f043 0204 	orr.w	r2, r3, #4
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <I2C_Slave_ISR_IT+0xdc>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c96:	d17e      	bne.n	8005d96 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fb1e 	bl	80062e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005ca4:	e077      	b.n	8005d96 <I2C_Slave_ISR_IT+0x1da>
 8005ca6:	e076      	b.n	8005d96 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d02f      	beq.n	8005d12 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d02a      	beq.n	8005d12 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d018      	beq.n	8005cf8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d14b      	bne.n	8005d9a <I2C_Slave_ISR_IT+0x1de>
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d08:	d047      	beq.n	8005d9a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f8d3 	bl	8005eb6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005d10:	e043      	b.n	8005d9a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d009      	beq.n	8005d30 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005d26:	6939      	ldr	r1, [r7, #16]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f840 	bl	8005dae <I2C_ITAddrCplt>
 8005d2e:	e035      	b.n	8005d9c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d030      	beq.n	8005d9c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d02b      	beq.n	8005d9c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d018      	beq.n	8005d80 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d52:	781a      	ldrb	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005d7e:	e00d      	b.n	8005d9c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d86:	d002      	beq.n	8005d8e <I2C_Slave_ISR_IT+0x1d2>
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f891 	bl	8005eb6 <I2C_ITSlaveSeqCplt>
 8005d94:	e002      	b.n	8005d9c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005d96:	bf00      	nop
 8005d98:	e000      	b.n	8005d9c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005d9a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005dc4:	2b28      	cmp	r3, #40	@ 0x28
 8005dc6:	d16a      	bne.n	8005e9e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	0c1b      	lsrs	r3, r3, #16
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	0c1b      	lsrs	r3, r3, #16
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005de6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005e02:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d138      	bne.n	8005e7e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005e0c:	897b      	ldrh	r3, [r7, #10]
 8005e0e:	09db      	lsrs	r3, r3, #7
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	89bb      	ldrh	r3, [r7, #12]
 8005e14:	4053      	eors	r3, r2
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f003 0306 	and.w	r3, r3, #6
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d11c      	bne.n	8005e5a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005e20:	897b      	ldrh	r3, [r7, #10]
 8005e22:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d13b      	bne.n	8005eae <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2208      	movs	r2, #8
 8005e42:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e4c:	89ba      	ldrh	r2, [r7, #12]
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff fe86 	bl	8005b64 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e58:	e029      	b.n	8005eae <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005e5a:	893b      	ldrh	r3, [r7, #8]
 8005e5c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005e5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fb95 	bl	8006592 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e70:	89ba      	ldrh	r2, [r7, #12]
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fe74 	bl	8005b64 <HAL_I2C_AddrCallback>
}
 8005e7c:	e017      	b.n	8005eae <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005e7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fb85 	bl	8006592 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e90:	89ba      	ldrh	r2, [r7, #12]
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff fe64 	bl	8005b64 <HAL_I2C_AddrCallback>
}
 8005e9c:	e007      	b.n	8005eae <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005eae:	bf00      	nop
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b084      	sub	sp, #16
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d008      	beq.n	8005eea <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	e00c      	b.n	8005f04 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d007      	beq.n	8005f04 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f02:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b29      	cmp	r3, #41	@ 0x29
 8005f0e:	d112      	bne.n	8005f36 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2228      	movs	r2, #40	@ 0x28
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2221      	movs	r2, #33	@ 0x21
 8005f1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005f1e:	2101      	movs	r1, #1
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fb36 	bl	8006592 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff fe04 	bl	8005b3c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f34:	e017      	b.n	8005f66 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f40:	d111      	bne.n	8005f66 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2228      	movs	r2, #40	@ 0x28
 8005f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2222      	movs	r2, #34	@ 0x22
 8005f4e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005f50:	2102      	movs	r1, #2
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fb1d 	bl	8006592 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7ff fdf5 	bl	8005b50 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f92:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f9c:	7afb      	ldrb	r3, [r7, #11]
 8005f9e:	2b21      	cmp	r3, #33	@ 0x21
 8005fa0:	d002      	beq.n	8005fa8 <I2C_ITSlaveCplt+0x38>
 8005fa2:	7afb      	ldrb	r3, [r7, #11]
 8005fa4:	2b29      	cmp	r3, #41	@ 0x29
 8005fa6:	d108      	bne.n	8005fba <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005fa8:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 faf0 	bl	8006592 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2221      	movs	r2, #33	@ 0x21
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fb8:	e019      	b.n	8005fee <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005fba:	7afb      	ldrb	r3, [r7, #11]
 8005fbc:	2b22      	cmp	r3, #34	@ 0x22
 8005fbe:	d002      	beq.n	8005fc6 <I2C_ITSlaveCplt+0x56>
 8005fc0:	7afb      	ldrb	r3, [r7, #11]
 8005fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fc4:	d108      	bne.n	8005fd8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005fc6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fae1 	bl	8006592 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2222      	movs	r2, #34	@ 0x22
 8005fd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fd6:	e00a      	b.n	8005fee <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005fd8:	7afb      	ldrb	r3, [r7, #11]
 8005fda:	2b28      	cmp	r3, #40	@ 0x28
 8005fdc:	d107      	bne.n	8005fee <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005fde:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fad5 	bl	8006592 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ffc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6859      	ldr	r1, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	4b89      	ldr	r3, [pc, #548]	@ (8006230 <I2C_ITSlaveCplt+0x2c0>)
 800600a:	400b      	ands	r3, r1
 800600c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fa7d 	bl	800650e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d013      	beq.n	8006046 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800602c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01f      	beq.n	8006076 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	b29a      	uxth	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006044:	e017      	b.n	8006076 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d012      	beq.n	8006076 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800605e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d006      	beq.n	8006076 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	b29a      	uxth	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d020      	beq.n	80060c2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f023 0304 	bic.w	r3, r3, #4
 8006086:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00c      	beq.n	80060c2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d0:	f043 0204 	orr.w	r2, r3, #4
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d049      	beq.n	8006176 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d044      	beq.n	8006176 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d128      	bne.n	8006148 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b28      	cmp	r3, #40	@ 0x28
 8006100:	d108      	bne.n	8006114 <I2C_ITSlaveCplt+0x1a4>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006108:	d104      	bne.n	8006114 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800610a:	6979      	ldr	r1, [r7, #20]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f893 	bl	8006238 <I2C_ITListenCplt>
 8006112:	e030      	b.n	8006176 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b29      	cmp	r3, #41	@ 0x29
 800611e:	d10e      	bne.n	800613e <I2C_ITSlaveCplt+0x1ce>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006126:	d00a      	beq.n	800613e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2210      	movs	r2, #16
 800612e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f9ec 	bl	800650e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff febd 	bl	8005eb6 <I2C_ITSlaveSeqCplt>
 800613c:	e01b      	b.n	8006176 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2210      	movs	r2, #16
 8006144:	61da      	str	r2, [r3, #28]
 8006146:	e016      	b.n	8006176 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2210      	movs	r2, #16
 800614e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006154:	f043 0204 	orr.w	r2, r3, #4
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <I2C_ITSlaveCplt+0x1fa>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006168:	d105      	bne.n	8006176 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	4619      	mov	r1, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8b5 	bl	80062e0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006188:	2b00      	cmp	r3, #0
 800618a:	d010      	beq.n	80061ae <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f8a4 	bl	80062e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b28      	cmp	r3, #40	@ 0x28
 80061a2:	d141      	bne.n	8006228 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80061a4:	6979      	ldr	r1, [r7, #20]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f846 	bl	8006238 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061ac:	e03c      	b.n	8006228 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061b6:	d014      	beq.n	80061e2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fe7c 	bl	8005eb6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006234 <I2C_ITSlaveCplt+0x2c4>)
 80061c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff fcd0 	bl	8005b80 <HAL_I2C_ListenCpltCallback>
}
 80061e0:	e022      	b.n	8006228 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b22      	cmp	r3, #34	@ 0x22
 80061ec:	d10e      	bne.n	800620c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff fca3 	bl	8005b50 <HAL_I2C_SlaveRxCpltCallback>
}
 800620a:	e00d      	b.n	8006228 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff fc8a 	bl	8005b3c <HAL_I2C_SlaveTxCpltCallback>
}
 8006228:	bf00      	nop
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	fe00e800 	.word	0xfe00e800
 8006234:	ffff0000 	.word	0xffff0000

08006238 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a25      	ldr	r2, [pc, #148]	@ (80062dc <I2C_ITListenCplt+0xa4>)
 8006246:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d022      	beq.n	80062b4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628a:	2b00      	cmp	r3, #0
 800628c:	d012      	beq.n	80062b4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800629e:	b29b      	uxth	r3, r3
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ac:	f043 0204 	orr.w	r2, r3, #4
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f96a 	bl	8006592 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2210      	movs	r2, #16
 80062c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff fc56 	bl	8005b80 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80062d4:	bf00      	nop
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	ffff0000 	.word	0xffff0000

080062e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a6d      	ldr	r2, [pc, #436]	@ (80064b4 <I2C_ITError+0x1d4>)
 80062fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	2b28      	cmp	r3, #40	@ 0x28
 8006316:	d005      	beq.n	8006324 <I2C_ITError+0x44>
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	2b29      	cmp	r3, #41	@ 0x29
 800631c:	d002      	beq.n	8006324 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	2b2a      	cmp	r3, #42	@ 0x2a
 8006322:	d10b      	bne.n	800633c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006324:	2103      	movs	r1, #3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f933 	bl	8006592 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2228      	movs	r2, #40	@ 0x28
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a60      	ldr	r2, [pc, #384]	@ (80064b8 <I2C_ITError+0x1d8>)
 8006338:	635a      	str	r2, [r3, #52]	@ 0x34
 800633a:	e030      	b.n	800639e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800633c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f926 	bl	8006592 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f8e1 	bl	800650e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b60      	cmp	r3, #96	@ 0x60
 8006356:	d01f      	beq.n	8006398 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b20      	cmp	r3, #32
 800636c:	d114      	bne.n	8006398 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b10      	cmp	r3, #16
 800637a:	d109      	bne.n	8006390 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2210      	movs	r2, #16
 8006382:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006388:	f043 0204 	orr.w	r2, r3, #4
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2220      	movs	r2, #32
 8006396:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d039      	beq.n	8006420 <I2C_ITError+0x140>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b11      	cmp	r3, #17
 80063b0:	d002      	beq.n	80063b8 <I2C_ITError+0xd8>
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b21      	cmp	r3, #33	@ 0x21
 80063b6:	d133      	bne.n	8006420 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063c6:	d107      	bne.n	80063d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fe fc19 	bl	8004c14 <HAL_DMA_GetState>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d017      	beq.n	8006418 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	4a33      	ldr	r2, [pc, #204]	@ (80064bc <I2C_ITError+0x1dc>)
 80063ee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fe faf3 	bl	80049e8 <HAL_DMA_Abort_IT>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d04d      	beq.n	80064a4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006412:	4610      	mov	r0, r2
 8006414:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006416:	e045      	b.n	80064a4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f851 	bl	80064c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800641e:	e041      	b.n	80064a4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d039      	beq.n	800649c <I2C_ITError+0x1bc>
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2b12      	cmp	r3, #18
 800642c:	d002      	beq.n	8006434 <I2C_ITError+0x154>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2b22      	cmp	r3, #34	@ 0x22
 8006432:	d133      	bne.n	800649c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800643e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006442:	d107      	bne.n	8006454 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006452:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe fbdb 	bl	8004c14 <HAL_DMA_GetState>
 800645e:	4603      	mov	r3, r0
 8006460:	2b01      	cmp	r3, #1
 8006462:	d017      	beq.n	8006494 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006468:	4a14      	ldr	r2, [pc, #80]	@ (80064bc <I2C_ITError+0x1dc>)
 800646a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006478:	4618      	mov	r0, r3
 800647a:	f7fe fab5 	bl	80049e8 <HAL_DMA_Abort_IT>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d011      	beq.n	80064a8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800648e:	4610      	mov	r0, r2
 8006490:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006492:	e009      	b.n	80064a8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f813 	bl	80064c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800649a:	e005      	b.n	80064a8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f80f 	bl	80064c0 <I2C_TreatErrorCallback>
  }
}
 80064a2:	e002      	b.n	80064aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064a4:	bf00      	nop
 80064a6:	e000      	b.n	80064aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064a8:	bf00      	nop
}
 80064aa:	bf00      	nop
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	ffff0000 	.word	0xffff0000
 80064b8:	08005bbd 	.word	0x08005bbd
 80064bc:	08006557 	.word	0x08006557

080064c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b60      	cmp	r3, #96	@ 0x60
 80064d2:	d10e      	bne.n	80064f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff fb5c 	bl	8005ba8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064f0:	e009      	b.n	8006506 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff fb47 	bl	8005b94 <HAL_I2C_ErrorCallback>
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b02      	cmp	r3, #2
 8006522:	d103      	bne.n	800652c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2200      	movs	r2, #0
 800652a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b01      	cmp	r3, #1
 8006538:	d007      	beq.n	800654a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699a      	ldr	r2, [r3, #24]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0201 	orr.w	r2, r2, #1
 8006548:	619a      	str	r2, [r3, #24]
  }
}
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006562:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006570:	2200      	movs	r2, #0
 8006572:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006580:	2200      	movs	r2, #0
 8006582:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff ff9b 	bl	80064c0 <I2C_TreatErrorCallback>
}
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80065a2:	887b      	ldrh	r3, [r7, #2]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00f      	beq.n	80065cc <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80065b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065c0:	2b28      	cmp	r3, #40	@ 0x28
 80065c2:	d003      	beq.n	80065cc <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80065ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80065cc:	887b      	ldrh	r3, [r7, #2]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00f      	beq.n	80065f6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80065dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80065ea:	2b28      	cmp	r3, #40	@ 0x28
 80065ec:	d003      	beq.n	80065f6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80065f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	da03      	bge.n	8006606 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006604:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006606:	887b      	ldrh	r3, [r7, #2]
 8006608:	2b10      	cmp	r3, #16
 800660a:	d103      	bne.n	8006614 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006612:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006614:	887b      	ldrh	r3, [r7, #2]
 8006616:	2b20      	cmp	r3, #32
 8006618:	d103      	bne.n	8006622 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f043 0320 	orr.w	r3, r3, #32
 8006620:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006622:	887b      	ldrh	r3, [r7, #2]
 8006624:	2b40      	cmp	r3, #64	@ 0x40
 8006626:	d103      	bne.n	8006630 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800662e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6819      	ldr	r1, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	43da      	mvns	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	400a      	ands	r2, r1
 8006640:	601a      	str	r2, [r3, #0]
}
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b20      	cmp	r3, #32
 8006662:	d138      	bne.n	80066d6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800666e:	2302      	movs	r3, #2
 8006670:	e032      	b.n	80066d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2224      	movs	r2, #36	@ 0x24
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0201 	bic.w	r2, r2, #1
 8006690:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6819      	ldr	r1, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0201 	orr.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e000      	b.n	80066d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066d6:	2302      	movs	r3, #2
  }
}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b20      	cmp	r3, #32
 80066f8:	d139      	bne.n	800676e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006704:	2302      	movs	r3, #2
 8006706:	e033      	b.n	8006770 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2224      	movs	r2, #36	@ 0x24
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0201 	bic.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006736:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	021b      	lsls	r3, r3, #8
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f042 0201 	orr.w	r2, r2, #1
 8006758:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	e000      	b.n	8006770 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800676e:	2302      	movs	r3, #2
  }
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d141      	bne.n	800680e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800678a:	4b4b      	ldr	r3, [pc, #300]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006796:	d131      	bne.n	80067fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006798:	4b47      	ldr	r3, [pc, #284]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800679a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800679e:	4a46      	ldr	r2, [pc, #280]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067a8:	4b43      	ldr	r3, [pc, #268]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067b0:	4a41      	ldr	r2, [pc, #260]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067b8:	4b40      	ldr	r3, [pc, #256]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2232      	movs	r2, #50	@ 0x32
 80067be:	fb02 f303 	mul.w	r3, r2, r3
 80067c2:	4a3f      	ldr	r2, [pc, #252]	@ (80068c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067c4:	fba2 2303 	umull	r2, r3, r2, r3
 80067c8:	0c9b      	lsrs	r3, r3, #18
 80067ca:	3301      	adds	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ce:	e002      	b.n	80067d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067d6:	4b38      	ldr	r3, [pc, #224]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067e2:	d102      	bne.n	80067ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f2      	bne.n	80067d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067ea:	4b33      	ldr	r3, [pc, #204]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f6:	d158      	bne.n	80068aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e057      	b.n	80068ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067fc:	4b2e      	ldr	r3, [pc, #184]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006802:	4a2d      	ldr	r2, [pc, #180]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006808:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800680c:	e04d      	b.n	80068aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006814:	d141      	bne.n	800689a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006816:	4b28      	ldr	r3, [pc, #160]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800681e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006822:	d131      	bne.n	8006888 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006824:	4b24      	ldr	r3, [pc, #144]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800682a:	4a23      	ldr	r2, [pc, #140]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800682c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006830:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006834:	4b20      	ldr	r3, [pc, #128]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800683c:	4a1e      	ldr	r2, [pc, #120]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800683e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006842:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006844:	4b1d      	ldr	r3, [pc, #116]	@ (80068bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2232      	movs	r2, #50	@ 0x32
 800684a:	fb02 f303 	mul.w	r3, r2, r3
 800684e:	4a1c      	ldr	r2, [pc, #112]	@ (80068c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006850:	fba2 2303 	umull	r2, r3, r2, r3
 8006854:	0c9b      	lsrs	r3, r3, #18
 8006856:	3301      	adds	r3, #1
 8006858:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800685a:	e002      	b.n	8006862 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3b01      	subs	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006862:	4b15      	ldr	r3, [pc, #84]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800686e:	d102      	bne.n	8006876 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1f2      	bne.n	800685c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006876:	4b10      	ldr	r3, [pc, #64]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800687e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006882:	d112      	bne.n	80068aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e011      	b.n	80068ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006888:	4b0b      	ldr	r3, [pc, #44]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800688e:	4a0a      	ldr	r2, [pc, #40]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006894:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006898:	e007      	b.n	80068aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800689a:	4b07      	ldr	r3, [pc, #28]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80068a2:	4a05      	ldr	r2, [pc, #20]	@ (80068b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	40007000 	.word	0x40007000
 80068bc:	20000000 	.word	0x20000000
 80068c0:	431bde83 	.word	0x431bde83

080068c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80068c8:	4b05      	ldr	r3, [pc, #20]	@ (80068e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	4a04      	ldr	r2, [pc, #16]	@ (80068e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068d2:	6093      	str	r3, [r2, #8]
}
 80068d4:	bf00      	nop
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40007000 	.word	0x40007000

080068e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e2fe      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d075      	beq.n	80069ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006902:	4b97      	ldr	r3, [pc, #604]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
 800690a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800690c:	4b94      	ldr	r3, [pc, #592]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	2b0c      	cmp	r3, #12
 800691a:	d102      	bne.n	8006922 <HAL_RCC_OscConfig+0x3e>
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b03      	cmp	r3, #3
 8006920:	d002      	beq.n	8006928 <HAL_RCC_OscConfig+0x44>
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	2b08      	cmp	r3, #8
 8006926:	d10b      	bne.n	8006940 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006928:	4b8d      	ldr	r3, [pc, #564]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d05b      	beq.n	80069ec <HAL_RCC_OscConfig+0x108>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d157      	bne.n	80069ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e2d9      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006948:	d106      	bne.n	8006958 <HAL_RCC_OscConfig+0x74>
 800694a:	4b85      	ldr	r3, [pc, #532]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a84      	ldr	r2, [pc, #528]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e01d      	b.n	8006994 <HAL_RCC_OscConfig+0xb0>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006960:	d10c      	bne.n	800697c <HAL_RCC_OscConfig+0x98>
 8006962:	4b7f      	ldr	r3, [pc, #508]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a7e      	ldr	r2, [pc, #504]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	4b7c      	ldr	r3, [pc, #496]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a7b      	ldr	r2, [pc, #492]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	e00b      	b.n	8006994 <HAL_RCC_OscConfig+0xb0>
 800697c:	4b78      	ldr	r3, [pc, #480]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a77      	ldr	r2, [pc, #476]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	4b75      	ldr	r3, [pc, #468]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a74      	ldr	r2, [pc, #464]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 800698e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d013      	beq.n	80069c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fc f970 	bl	8002c80 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a4:	f7fc f96c 	bl	8002c80 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b64      	cmp	r3, #100	@ 0x64
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e29e      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069b6:	4b6a      	ldr	r3, [pc, #424]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0f0      	beq.n	80069a4 <HAL_RCC_OscConfig+0xc0>
 80069c2:	e014      	b.n	80069ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c4:	f7fc f95c 	bl	8002c80 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069cc:	f7fc f958 	bl	8002c80 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b64      	cmp	r3, #100	@ 0x64
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e28a      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069de:	4b60      	ldr	r3, [pc, #384]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f0      	bne.n	80069cc <HAL_RCC_OscConfig+0xe8>
 80069ea:	e000      	b.n	80069ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d075      	beq.n	8006ae6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069fa:	4b59      	ldr	r3, [pc, #356]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
 8006a02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a04:	4b56      	ldr	r3, [pc, #344]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b0c      	cmp	r3, #12
 8006a12:	d102      	bne.n	8006a1a <HAL_RCC_OscConfig+0x136>
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d002      	beq.n	8006a20 <HAL_RCC_OscConfig+0x13c>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d11f      	bne.n	8006a60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a20:	4b4f      	ldr	r3, [pc, #316]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <HAL_RCC_OscConfig+0x154>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e25d      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a38:	4b49      	ldr	r3, [pc, #292]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	061b      	lsls	r3, r3, #24
 8006a46:	4946      	ldr	r1, [pc, #280]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a4c:	4b45      	ldr	r3, [pc, #276]	@ (8006b64 <HAL_RCC_OscConfig+0x280>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fa fd8d 	bl	8001570 <HAL_InitTick>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d043      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e249      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d023      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a68:	4b3d      	ldr	r3, [pc, #244]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a74:	f7fc f904 	bl	8002c80 <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a7c:	f7fc f900 	bl	8002c80 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e232      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a8e:	4b34      	ldr	r3, [pc, #208]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0f0      	beq.n	8006a7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9a:	4b31      	ldr	r3, [pc, #196]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	061b      	lsls	r3, r3, #24
 8006aa8:	492d      	ldr	r1, [pc, #180]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	604b      	str	r3, [r1, #4]
 8006aae:	e01a      	b.n	8006ae6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a2a      	ldr	r2, [pc, #168]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006ab6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006abc:	f7fc f8e0 	bl	8002c80 <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac4:	f7fc f8dc 	bl	8002c80 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e20e      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ad6:	4b22      	ldr	r3, [pc, #136]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f0      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x1e0>
 8006ae2:	e000      	b.n	8006ae6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ae4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d041      	beq.n	8006b76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01c      	beq.n	8006b34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006afa:	4b19      	ldr	r3, [pc, #100]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b00:	4a17      	ldr	r2, [pc, #92]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006b02:	f043 0301 	orr.w	r3, r3, #1
 8006b06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0a:	f7fc f8b9 	bl	8002c80 <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b10:	e008      	b.n	8006b24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b12:	f7fc f8b5 	bl	8002c80 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e1e7      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b24:	4b0e      	ldr	r3, [pc, #56]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0ef      	beq.n	8006b12 <HAL_RCC_OscConfig+0x22e>
 8006b32:	e020      	b.n	8006b76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b34:	4b0a      	ldr	r3, [pc, #40]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b3a:	4a09      	ldr	r2, [pc, #36]	@ (8006b60 <HAL_RCC_OscConfig+0x27c>)
 8006b3c:	f023 0301 	bic.w	r3, r3, #1
 8006b40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b44:	f7fc f89c 	bl	8002c80 <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b4a:	e00d      	b.n	8006b68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b4c:	f7fc f898 	bl	8002c80 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d906      	bls.n	8006b68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e1ca      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
 8006b5e:	bf00      	nop
 8006b60:	40021000 	.word	0x40021000
 8006b64:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b68:	4b8c      	ldr	r3, [pc, #560]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1ea      	bne.n	8006b4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 80a6 	beq.w	8006cd0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b84:	2300      	movs	r3, #0
 8006b86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b88:	4b84      	ldr	r3, [pc, #528]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_RCC_OscConfig+0x2b4>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <HAL_RCC_OscConfig+0x2b6>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00d      	beq.n	8006bba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba2:	4a7e      	ldr	r2, [pc, #504]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006baa:	4b7c      	ldr	r3, [pc, #496]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bb2:	60fb      	str	r3, [r7, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bba:	4b79      	ldr	r3, [pc, #484]	@ (8006da0 <HAL_RCC_OscConfig+0x4bc>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d118      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bc6:	4b76      	ldr	r3, [pc, #472]	@ (8006da0 <HAL_RCC_OscConfig+0x4bc>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a75      	ldr	r2, [pc, #468]	@ (8006da0 <HAL_RCC_OscConfig+0x4bc>)
 8006bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bd2:	f7fc f855 	bl	8002c80 <HAL_GetTick>
 8006bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bd8:	e008      	b.n	8006bec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bda:	f7fc f851 	bl	8002c80 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e183      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bec:	4b6c      	ldr	r3, [pc, #432]	@ (8006da0 <HAL_RCC_OscConfig+0x4bc>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0f0      	beq.n	8006bda <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d108      	bne.n	8006c12 <HAL_RCC_OscConfig+0x32e>
 8006c00:	4b66      	ldr	r3, [pc, #408]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c06:	4a65      	ldr	r2, [pc, #404]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c10:	e024      	b.n	8006c5c <HAL_RCC_OscConfig+0x378>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	d110      	bne.n	8006c3c <HAL_RCC_OscConfig+0x358>
 8006c1a:	4b60      	ldr	r3, [pc, #384]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c20:	4a5e      	ldr	r2, [pc, #376]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c22:	f043 0304 	orr.w	r3, r3, #4
 8006c26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c2a:	4b5c      	ldr	r3, [pc, #368]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c30:	4a5a      	ldr	r2, [pc, #360]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c32:	f043 0301 	orr.w	r3, r3, #1
 8006c36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c3a:	e00f      	b.n	8006c5c <HAL_RCC_OscConfig+0x378>
 8006c3c:	4b57      	ldr	r3, [pc, #348]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c42:	4a56      	ldr	r2, [pc, #344]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c44:	f023 0301 	bic.w	r3, r3, #1
 8006c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c4c:	4b53      	ldr	r3, [pc, #332]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c52:	4a52      	ldr	r2, [pc, #328]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c54:	f023 0304 	bic.w	r3, r3, #4
 8006c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d016      	beq.n	8006c92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c64:	f7fc f80c 	bl	8002c80 <HAL_GetTick>
 8006c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c6a:	e00a      	b.n	8006c82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c6c:	f7fc f808 	bl	8002c80 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e138      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c82:	4b46      	ldr	r3, [pc, #280]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0ed      	beq.n	8006c6c <HAL_RCC_OscConfig+0x388>
 8006c90:	e015      	b.n	8006cbe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c92:	f7fb fff5 	bl	8002c80 <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c98:	e00a      	b.n	8006cb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c9a:	f7fb fff1 	bl	8002c80 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e121      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1ed      	bne.n	8006c9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cbe:	7ffb      	ldrb	r3, [r7, #31]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d105      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cc4:	4b35      	ldr	r3, [pc, #212]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc8:	4a34      	ldr	r2, [pc, #208]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d03c      	beq.n	8006d56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01c      	beq.n	8006d1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cea:	4a2c      	ldr	r2, [pc, #176]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006cec:	f043 0301 	orr.w	r3, r3, #1
 8006cf0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf4:	f7fb ffc4 	bl	8002c80 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cfc:	f7fb ffc0 	bl	8002c80 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e0f2      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d0e:	4b23      	ldr	r3, [pc, #140]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0ef      	beq.n	8006cfc <HAL_RCC_OscConfig+0x418>
 8006d1c:	e01b      	b.n	8006d56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d24:	4a1d      	ldr	r2, [pc, #116]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d26:	f023 0301 	bic.w	r3, r3, #1
 8006d2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d2e:	f7fb ffa7 	bl	8002c80 <HAL_GetTick>
 8006d32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d34:	e008      	b.n	8006d48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d36:	f7fb ffa3 	bl	8002c80 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e0d5      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d48:	4b14      	ldr	r3, [pc, #80]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1ef      	bne.n	8006d36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 80c9 	beq.w	8006ef2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d60:	4b0e      	ldr	r3, [pc, #56]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 030c 	and.w	r3, r3, #12
 8006d68:	2b0c      	cmp	r3, #12
 8006d6a:	f000 8083 	beq.w	8006e74 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d15e      	bne.n	8006e34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d76:	4b09      	ldr	r3, [pc, #36]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a08      	ldr	r2, [pc, #32]	@ (8006d9c <HAL_RCC_OscConfig+0x4b8>)
 8006d7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d82:	f7fb ff7d 	bl	8002c80 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d88:	e00c      	b.n	8006da4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d8a:	f7fb ff79 	bl	8002c80 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d905      	bls.n	8006da4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e0ab      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
 8006d9c:	40021000 	.word	0x40021000
 8006da0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006da4:	4b55      	ldr	r3, [pc, #340]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1ec      	bne.n	8006d8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006db0:	4b52      	ldr	r3, [pc, #328]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	4b52      	ldr	r3, [pc, #328]	@ (8006f00 <HAL_RCC_OscConfig+0x61c>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6a11      	ldr	r1, [r2, #32]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006dc0:	3a01      	subs	r2, #1
 8006dc2:	0112      	lsls	r2, r2, #4
 8006dc4:	4311      	orrs	r1, r2
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006dca:	0212      	lsls	r2, r2, #8
 8006dcc:	4311      	orrs	r1, r2
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006dd2:	0852      	lsrs	r2, r2, #1
 8006dd4:	3a01      	subs	r2, #1
 8006dd6:	0552      	lsls	r2, r2, #21
 8006dd8:	4311      	orrs	r1, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006dde:	0852      	lsrs	r2, r2, #1
 8006de0:	3a01      	subs	r2, #1
 8006de2:	0652      	lsls	r2, r2, #25
 8006de4:	4311      	orrs	r1, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006dea:	06d2      	lsls	r2, r2, #27
 8006dec:	430a      	orrs	r2, r1
 8006dee:	4943      	ldr	r1, [pc, #268]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006df4:	4b41      	ldr	r3, [pc, #260]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a40      	ldr	r2, [pc, #256]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dfe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e00:	4b3e      	ldr	r3, [pc, #248]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	4a3d      	ldr	r2, [pc, #244]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fb ff38 	bl	8002c80 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fb ff34 	bl	8002c80 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e066      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e26:	4b35      	ldr	r3, [pc, #212]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f0      	beq.n	8006e14 <HAL_RCC_OscConfig+0x530>
 8006e32:	e05e      	b.n	8006ef2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e34:	4b31      	ldr	r3, [pc, #196]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a30      	ldr	r2, [pc, #192]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006e3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e40:	f7fb ff1e 	bl	8002c80 <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e48:	f7fb ff1a 	bl	8002c80 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e04c      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e5a:	4b28      	ldr	r3, [pc, #160]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f0      	bne.n	8006e48 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e66:	4b25      	ldr	r3, [pc, #148]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006e68:	68da      	ldr	r2, [r3, #12]
 8006e6a:	4924      	ldr	r1, [pc, #144]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006e6c:	4b25      	ldr	r3, [pc, #148]	@ (8006f04 <HAL_RCC_OscConfig+0x620>)
 8006e6e:	4013      	ands	r3, r2
 8006e70:	60cb      	str	r3, [r1, #12]
 8006e72:	e03e      	b.n	8006ef2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e039      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e80:	4b1e      	ldr	r3, [pc, #120]	@ (8006efc <HAL_RCC_OscConfig+0x618>)
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f003 0203 	and.w	r2, r3, #3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d12c      	bne.n	8006eee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d123      	bne.n	8006eee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d11b      	bne.n	8006eee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d113      	bne.n	8006eee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d109      	bne.n	8006eee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d001      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3720      	adds	r7, #32
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40021000 	.word	0x40021000
 8006f00:	019f800c 	.word	0x019f800c
 8006f04:	feeefffc 	.word	0xfeeefffc

08006f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e11e      	b.n	800715e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f20:	4b91      	ldr	r3, [pc, #580]	@ (8007168 <HAL_RCC_ClockConfig+0x260>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d910      	bls.n	8006f50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f2e:	4b8e      	ldr	r3, [pc, #568]	@ (8007168 <HAL_RCC_ClockConfig+0x260>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f023 020f 	bic.w	r2, r3, #15
 8006f36:	498c      	ldr	r1, [pc, #560]	@ (8007168 <HAL_RCC_ClockConfig+0x260>)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f3e:	4b8a      	ldr	r3, [pc, #552]	@ (8007168 <HAL_RCC_ClockConfig+0x260>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d001      	beq.n	8006f50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e106      	b.n	800715e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d073      	beq.n	8007044 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d129      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f64:	4b81      	ldr	r3, [pc, #516]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0f4      	b.n	800715e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f74:	f000 f9d0 	bl	8007318 <RCC_GetSysClockFreqFromPLLSource>
 8006f78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	4a7c      	ldr	r2, [pc, #496]	@ (8007170 <HAL_RCC_ClockConfig+0x268>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d93f      	bls.n	8007002 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f82:	4b7a      	ldr	r3, [pc, #488]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d009      	beq.n	8006fa2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d033      	beq.n	8007002 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d12f      	bne.n	8007002 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fa2:	4b72      	ldr	r3, [pc, #456]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006faa:	4a70      	ldr	r2, [pc, #448]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8006fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006fb2:	2380      	movs	r3, #128	@ 0x80
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	e024      	b.n	8007002 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d107      	bne.n	8006fd0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fc0:	4b6a      	ldr	r3, [pc, #424]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d109      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e0c6      	b.n	800715e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fd0:	4b66      	ldr	r3, [pc, #408]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e0be      	b.n	800715e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006fe0:	f000 f8ce 	bl	8007180 <HAL_RCC_GetSysClockFreq>
 8006fe4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	4a61      	ldr	r2, [pc, #388]	@ (8007170 <HAL_RCC_ClockConfig+0x268>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d909      	bls.n	8007002 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fee:	4b5f      	ldr	r3, [pc, #380]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ff6:	4a5d      	ldr	r2, [pc, #372]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8006ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ffc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006ffe:	2380      	movs	r3, #128	@ 0x80
 8007000:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007002:	4b5a      	ldr	r3, [pc, #360]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f023 0203 	bic.w	r2, r3, #3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	4957      	ldr	r1, [pc, #348]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8007010:	4313      	orrs	r3, r2
 8007012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007014:	f7fb fe34 	bl	8002c80 <HAL_GetTick>
 8007018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800701a:	e00a      	b.n	8007032 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800701c:	f7fb fe30 	bl	8002c80 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800702a:	4293      	cmp	r3, r2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e095      	b.n	800715e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007032:	4b4e      	ldr	r3, [pc, #312]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f003 020c 	and.w	r2, r3, #12
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	429a      	cmp	r2, r3
 8007042:	d1eb      	bne.n	800701c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d023      	beq.n	8007098 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800705c:	4b43      	ldr	r3, [pc, #268]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4a42      	ldr	r2, [pc, #264]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8007062:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007066:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d007      	beq.n	8007084 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007074:	4b3d      	ldr	r3, [pc, #244]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800707c:	4a3b      	ldr	r2, [pc, #236]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 800707e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007082:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007084:	4b39      	ldr	r3, [pc, #228]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	4936      	ldr	r1, [pc, #216]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8007092:	4313      	orrs	r3, r2
 8007094:	608b      	str	r3, [r1, #8]
 8007096:	e008      	b.n	80070aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2b80      	cmp	r3, #128	@ 0x80
 800709c:	d105      	bne.n	80070aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800709e:	4b33      	ldr	r3, [pc, #204]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	4a32      	ldr	r2, [pc, #200]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 80070a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007168 <HAL_RCC_ClockConfig+0x260>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d21d      	bcs.n	80070f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007168 <HAL_RCC_ClockConfig+0x260>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f023 020f 	bic.w	r2, r3, #15
 80070c0:	4929      	ldr	r1, [pc, #164]	@ (8007168 <HAL_RCC_ClockConfig+0x260>)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80070c8:	f7fb fdda 	bl	8002c80 <HAL_GetTick>
 80070cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ce:	e00a      	b.n	80070e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d0:	f7fb fdd6 	bl	8002c80 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070de:	4293      	cmp	r3, r2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e03b      	b.n	800715e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e6:	4b20      	ldr	r3, [pc, #128]	@ (8007168 <HAL_RCC_ClockConfig+0x260>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d1ed      	bne.n	80070d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007100:	4b1a      	ldr	r3, [pc, #104]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	4917      	ldr	r1, [pc, #92]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 800710e:	4313      	orrs	r3, r2
 8007110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800711e:	4b13      	ldr	r3, [pc, #76]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	490f      	ldr	r1, [pc, #60]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 800712e:	4313      	orrs	r3, r2
 8007130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007132:	f000 f825 	bl	8007180 <HAL_RCC_GetSysClockFreq>
 8007136:	4602      	mov	r2, r0
 8007138:	4b0c      	ldr	r3, [pc, #48]	@ (800716c <HAL_RCC_ClockConfig+0x264>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	490c      	ldr	r1, [pc, #48]	@ (8007174 <HAL_RCC_ClockConfig+0x26c>)
 8007144:	5ccb      	ldrb	r3, [r1, r3]
 8007146:	f003 031f 	and.w	r3, r3, #31
 800714a:	fa22 f303 	lsr.w	r3, r2, r3
 800714e:	4a0a      	ldr	r2, [pc, #40]	@ (8007178 <HAL_RCC_ClockConfig+0x270>)
 8007150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007152:	4b0a      	ldr	r3, [pc, #40]	@ (800717c <HAL_RCC_ClockConfig+0x274>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f7fa fa0a 	bl	8001570 <HAL_InitTick>
 800715c:	4603      	mov	r3, r0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40022000 	.word	0x40022000
 800716c:	40021000 	.word	0x40021000
 8007170:	04c4b400 	.word	0x04c4b400
 8007174:	0800c4d8 	.word	0x0800c4d8
 8007178:	20000000 	.word	0x20000000
 800717c:	20000004 	.word	0x20000004

08007180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007186:	4b2c      	ldr	r3, [pc, #176]	@ (8007238 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 030c 	and.w	r3, r3, #12
 800718e:	2b04      	cmp	r3, #4
 8007190:	d102      	bne.n	8007198 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007192:	4b2a      	ldr	r3, [pc, #168]	@ (800723c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	e047      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007198:	4b27      	ldr	r3, [pc, #156]	@ (8007238 <HAL_RCC_GetSysClockFreq+0xb8>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 030c 	and.w	r3, r3, #12
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d102      	bne.n	80071aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071a4:	4b26      	ldr	r3, [pc, #152]	@ (8007240 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	e03e      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80071aa:	4b23      	ldr	r3, [pc, #140]	@ (8007238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 030c 	and.w	r3, r3, #12
 80071b2:	2b0c      	cmp	r3, #12
 80071b4:	d136      	bne.n	8007224 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071b6:	4b20      	ldr	r3, [pc, #128]	@ (8007238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	091b      	lsrs	r3, r3, #4
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	3301      	adds	r3, #1
 80071cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b03      	cmp	r3, #3
 80071d2:	d10c      	bne.n	80071ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007240 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071dc:	4a16      	ldr	r2, [pc, #88]	@ (8007238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071de:	68d2      	ldr	r2, [r2, #12]
 80071e0:	0a12      	lsrs	r2, r2, #8
 80071e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071e6:	fb02 f303 	mul.w	r3, r2, r3
 80071ea:	617b      	str	r3, [r7, #20]
      break;
 80071ec:	e00c      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071ee:	4a13      	ldr	r2, [pc, #76]	@ (800723c <HAL_RCC_GetSysClockFreq+0xbc>)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f6:	4a10      	ldr	r2, [pc, #64]	@ (8007238 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071f8:	68d2      	ldr	r2, [r2, #12]
 80071fa:	0a12      	lsrs	r2, r2, #8
 80071fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007200:	fb02 f303 	mul.w	r3, r2, r3
 8007204:	617b      	str	r3, [r7, #20]
      break;
 8007206:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007208:	4b0b      	ldr	r3, [pc, #44]	@ (8007238 <HAL_RCC_GetSysClockFreq+0xb8>)
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	0e5b      	lsrs	r3, r3, #25
 800720e:	f003 0303 	and.w	r3, r3, #3
 8007212:	3301      	adds	r3, #1
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007220:	613b      	str	r3, [r7, #16]
 8007222:	e001      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007228:	693b      	ldr	r3, [r7, #16]
}
 800722a:	4618      	mov	r0, r3
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40021000 	.word	0x40021000
 800723c:	00f42400 	.word	0x00f42400
 8007240:	016e3600 	.word	0x016e3600

08007244 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007244:	b480      	push	{r7}
 8007246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007248:	4b03      	ldr	r3, [pc, #12]	@ (8007258 <HAL_RCC_GetHCLKFreq+0x14>)
 800724a:	681b      	ldr	r3, [r3, #0]
}
 800724c:	4618      	mov	r0, r3
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	20000000 	.word	0x20000000

0800725c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007260:	f7ff fff0 	bl	8007244 <HAL_RCC_GetHCLKFreq>
 8007264:	4602      	mov	r2, r0
 8007266:	4b06      	ldr	r3, [pc, #24]	@ (8007280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	f003 0307 	and.w	r3, r3, #7
 8007270:	4904      	ldr	r1, [pc, #16]	@ (8007284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007272:	5ccb      	ldrb	r3, [r1, r3]
 8007274:	f003 031f 	and.w	r3, r3, #31
 8007278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800727c:	4618      	mov	r0, r3
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40021000 	.word	0x40021000
 8007284:	0800c4e8 	.word	0x0800c4e8

08007288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800728c:	f7ff ffda 	bl	8007244 <HAL_RCC_GetHCLKFreq>
 8007290:	4602      	mov	r2, r0
 8007292:	4b06      	ldr	r3, [pc, #24]	@ (80072ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	0adb      	lsrs	r3, r3, #11
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	4904      	ldr	r1, [pc, #16]	@ (80072b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800729e:	5ccb      	ldrb	r3, [r1, r3]
 80072a0:	f003 031f 	and.w	r3, r3, #31
 80072a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	40021000 	.word	0x40021000
 80072b0:	0800c4e8 	.word	0x0800c4e8

080072b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	220f      	movs	r2, #15
 80072c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80072c4:	4b12      	ldr	r3, [pc, #72]	@ (8007310 <HAL_RCC_GetClockConfig+0x5c>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f003 0203 	and.w	r2, r3, #3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80072d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007310 <HAL_RCC_GetClockConfig+0x5c>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80072dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007310 <HAL_RCC_GetClockConfig+0x5c>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80072e8:	4b09      	ldr	r3, [pc, #36]	@ (8007310 <HAL_RCC_GetClockConfig+0x5c>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	08db      	lsrs	r3, r3, #3
 80072ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80072f6:	4b07      	ldr	r3, [pc, #28]	@ (8007314 <HAL_RCC_GetClockConfig+0x60>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 020f 	and.w	r2, r3, #15
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	601a      	str	r2, [r3, #0]
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	40021000 	.word	0x40021000
 8007314:	40022000 	.word	0x40022000

08007318 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800731e:	4b1e      	ldr	r3, [pc, #120]	@ (8007398 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007328:	4b1b      	ldr	r3, [pc, #108]	@ (8007398 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	091b      	lsrs	r3, r3, #4
 800732e:	f003 030f 	and.w	r3, r3, #15
 8007332:	3301      	adds	r3, #1
 8007334:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	2b03      	cmp	r3, #3
 800733a:	d10c      	bne.n	8007356 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800733c:	4a17      	ldr	r2, [pc, #92]	@ (800739c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	fbb2 f3f3 	udiv	r3, r2, r3
 8007344:	4a14      	ldr	r2, [pc, #80]	@ (8007398 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007346:	68d2      	ldr	r2, [r2, #12]
 8007348:	0a12      	lsrs	r2, r2, #8
 800734a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800734e:	fb02 f303 	mul.w	r3, r2, r3
 8007352:	617b      	str	r3, [r7, #20]
    break;
 8007354:	e00c      	b.n	8007370 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007356:	4a12      	ldr	r2, [pc, #72]	@ (80073a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	fbb2 f3f3 	udiv	r3, r2, r3
 800735e:	4a0e      	ldr	r2, [pc, #56]	@ (8007398 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007360:	68d2      	ldr	r2, [r2, #12]
 8007362:	0a12      	lsrs	r2, r2, #8
 8007364:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007368:	fb02 f303 	mul.w	r3, r2, r3
 800736c:	617b      	str	r3, [r7, #20]
    break;
 800736e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007370:	4b09      	ldr	r3, [pc, #36]	@ (8007398 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	0e5b      	lsrs	r3, r3, #25
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	3301      	adds	r3, #1
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	fbb2 f3f3 	udiv	r3, r2, r3
 8007388:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800738a:	687b      	ldr	r3, [r7, #4]
}
 800738c:	4618      	mov	r0, r3
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	40021000 	.word	0x40021000
 800739c:	016e3600 	.word	0x016e3600
 80073a0:	00f42400 	.word	0x00f42400

080073a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073ac:	2300      	movs	r3, #0
 80073ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073b0:	2300      	movs	r3, #0
 80073b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8098 	beq.w	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073c2:	2300      	movs	r3, #0
 80073c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073c6:	4b43      	ldr	r3, [pc, #268]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10d      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073d2:	4b40      	ldr	r3, [pc, #256]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073d6:	4a3f      	ldr	r2, [pc, #252]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80073de:	4b3d      	ldr	r3, [pc, #244]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073e6:	60bb      	str	r3, [r7, #8]
 80073e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ea:	2301      	movs	r3, #1
 80073ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073ee:	4b3a      	ldr	r3, [pc, #232]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a39      	ldr	r2, [pc, #228]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073fa:	f7fb fc41 	bl	8002c80 <HAL_GetTick>
 80073fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007400:	e009      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007402:	f7fb fc3d 	bl	8002c80 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d902      	bls.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	74fb      	strb	r3, [r7, #19]
        break;
 8007414:	e005      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007416:	4b30      	ldr	r3, [pc, #192]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0ef      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007422:	7cfb      	ldrb	r3, [r7, #19]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d159      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007428:	4b2a      	ldr	r3, [pc, #168]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007432:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01e      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	429a      	cmp	r2, r3
 8007442:	d019      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007444:	4b23      	ldr	r3, [pc, #140]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800744a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800744e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007450:	4b20      	ldr	r3, [pc, #128]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007456:	4a1f      	ldr	r2, [pc, #124]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800745c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007460:	4b1c      	ldr	r3, [pc, #112]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007466:	4a1b      	ldr	r2, [pc, #108]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800746c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007470:	4a18      	ldr	r2, [pc, #96]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d016      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007482:	f7fb fbfd 	bl	8002c80 <HAL_GetTick>
 8007486:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007488:	e00b      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800748a:	f7fb fbf9 	bl	8002c80 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007498:	4293      	cmp	r3, r2
 800749a:	d902      	bls.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	74fb      	strb	r3, [r7, #19]
            break;
 80074a0:	e006      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074a2:	4b0c      	ldr	r3, [pc, #48]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d0ec      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80074b0:	7cfb      	ldrb	r3, [r7, #19]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10b      	bne.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074b6:	4b07      	ldr	r3, [pc, #28]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074c4:	4903      	ldr	r1, [pc, #12]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80074cc:	e008      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074ce:	7cfb      	ldrb	r3, [r7, #19]
 80074d0:	74bb      	strb	r3, [r7, #18]
 80074d2:	e005      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80074d4:	40021000 	.word	0x40021000
 80074d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074dc:	7cfb      	ldrb	r3, [r7, #19]
 80074de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074e0:	7c7b      	ldrb	r3, [r7, #17]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d105      	bne.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074e6:	4ba7      	ldr	r3, [pc, #668]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ea:	4aa6      	ldr	r2, [pc, #664]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074fe:	4ba1      	ldr	r3, [pc, #644]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007504:	f023 0203 	bic.w	r2, r3, #3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	499d      	ldr	r1, [pc, #628]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800750e:	4313      	orrs	r3, r2
 8007510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007520:	4b98      	ldr	r3, [pc, #608]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007526:	f023 020c 	bic.w	r2, r3, #12
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	4995      	ldr	r1, [pc, #596]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007530:	4313      	orrs	r3, r2
 8007532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007542:	4b90      	ldr	r3, [pc, #576]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007548:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	498c      	ldr	r1, [pc, #560]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007552:	4313      	orrs	r3, r2
 8007554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00a      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007564:	4b87      	ldr	r3, [pc, #540]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800756a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	4984      	ldr	r1, [pc, #528]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007574:	4313      	orrs	r3, r2
 8007576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0310 	and.w	r3, r3, #16
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007586:	4b7f      	ldr	r3, [pc, #508]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	497b      	ldr	r1, [pc, #492]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007596:	4313      	orrs	r3, r2
 8007598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075a8:	4b76      	ldr	r3, [pc, #472]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	4973      	ldr	r1, [pc, #460]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075ca:	4b6e      	ldr	r3, [pc, #440]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	496a      	ldr	r1, [pc, #424]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00a      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075ec:	4b65      	ldr	r3, [pc, #404]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	4962      	ldr	r1, [pc, #392]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800760e:	4b5d      	ldr	r3, [pc, #372]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007614:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761c:	4959      	ldr	r1, [pc, #356]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800761e:	4313      	orrs	r3, r2
 8007620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007630:	4b54      	ldr	r3, [pc, #336]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007632:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007636:	f023 0203 	bic.w	r2, r3, #3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763e:	4951      	ldr	r1, [pc, #324]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007640:	4313      	orrs	r3, r2
 8007642:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00a      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007652:	4b4c      	ldr	r3, [pc, #304]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007658:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007660:	4948      	ldr	r1, [pc, #288]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007662:	4313      	orrs	r3, r2
 8007664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007670:	2b00      	cmp	r3, #0
 8007672:	d015      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007674:	4b43      	ldr	r3, [pc, #268]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800767a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007682:	4940      	ldr	r1, [pc, #256]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007684:	4313      	orrs	r3, r2
 8007686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007692:	d105      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007694:	4b3b      	ldr	r3, [pc, #236]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	4a3a      	ldr	r2, [pc, #232]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800769a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800769e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d015      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076ac:	4b35      	ldr	r3, [pc, #212]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ba:	4932      	ldr	r1, [pc, #200]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076ca:	d105      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d015      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076e4:	4b27      	ldr	r3, [pc, #156]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f2:	4924      	ldr	r1, [pc, #144]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007702:	d105      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007704:	4b1f      	ldr	r3, [pc, #124]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	4a1e      	ldr	r2, [pc, #120]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800770a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800770e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d015      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800771c:	4b19      	ldr	r3, [pc, #100]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800771e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007722:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800772a:	4916      	ldr	r1, [pc, #88]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800772c:	4313      	orrs	r3, r2
 800772e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800773a:	d105      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800773c:	4b11      	ldr	r3, [pc, #68]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	4a10      	ldr	r2, [pc, #64]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007746:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d019      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007754:	4b0b      	ldr	r3, [pc, #44]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007762:	4908      	ldr	r1, [pc, #32]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007764:	4313      	orrs	r3, r2
 8007766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007772:	d109      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007774:	4b03      	ldr	r3, [pc, #12]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	4a02      	ldr	r2, [pc, #8]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800777a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800777e:	60d3      	str	r3, [r2, #12]
 8007780:	e002      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007782:	bf00      	nop
 8007784:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d015      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007794:	4b29      	ldr	r3, [pc, #164]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800779a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a2:	4926      	ldr	r1, [pc, #152]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077b2:	d105      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077b4:	4b21      	ldr	r3, [pc, #132]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4a20      	ldr	r2, [pc, #128]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80077cc:	4b1b      	ldr	r3, [pc, #108]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077da:	4918      	ldr	r1, [pc, #96]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ea:	d105      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077ec:	4b13      	ldr	r3, [pc, #76]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	4a12      	ldr	r2, [pc, #72]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d015      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007804:	4b0d      	ldr	r3, [pc, #52]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007806:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800780a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007812:	490a      	ldr	r1, [pc, #40]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007814:	4313      	orrs	r3, r2
 8007816:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800781e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007822:	d105      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007824:	4b05      	ldr	r3, [pc, #20]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	4a04      	ldr	r2, [pc, #16]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800782a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800782e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007830:	7cbb      	ldrb	r3, [r7, #18]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	40021000 	.word	0x40021000

08007840 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e09d      	b.n	800798e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007856:	2b00      	cmp	r3, #0
 8007858:	d108      	bne.n	800786c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007862:	d009      	beq.n	8007878 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	61da      	str	r2, [r3, #28]
 800786a:	e005      	b.n	8007878 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7f9 fdf8 	bl	8001488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078b8:	d902      	bls.n	80078c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	e002      	b.n	80078c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80078c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80078ce:	d007      	beq.n	80078e0 <HAL_SPI_Init+0xa0>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078d8:	d002      	beq.n	80078e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80078f0:	431a      	orrs	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007922:	ea42 0103 	orr.w	r1, r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	0c1b      	lsrs	r3, r3, #16
 800793c:	f003 0204 	and.w	r2, r3, #4
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800794e:	f003 0308 	and.w	r3, r3, #8
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800795c:	ea42 0103 	orr.w	r1, r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69da      	ldr	r2, [r3, #28]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800797c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b088      	sub	sp, #32
 800799a:	af00      	add	r7, sp, #0
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	603b      	str	r3, [r7, #0]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_SPI_Transmit+0x22>
 80079b4:	2302      	movs	r3, #2
 80079b6:	e15f      	b.n	8007c78 <HAL_SPI_Transmit+0x2e2>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079c0:	f7fb f95e 	bl	8002c80 <HAL_GetTick>
 80079c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80079c6:	88fb      	ldrh	r3, [r7, #6]
 80079c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d002      	beq.n	80079dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80079d6:	2302      	movs	r3, #2
 80079d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079da:	e148      	b.n	8007c6e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <HAL_SPI_Transmit+0x52>
 80079e2:	88fb      	ldrh	r3, [r7, #6]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d102      	bne.n	80079ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80079ec:	e13f      	b.n	8007c6e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2203      	movs	r2, #3
 80079f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	88fa      	ldrh	r2, [r7, #6]
 8007a0c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a38:	d10f      	bne.n	8007a5a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a64:	2b40      	cmp	r3, #64	@ 0x40
 8007a66:	d007      	beq.n	8007a78 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a80:	d94f      	bls.n	8007b22 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_SPI_Transmit+0xfa>
 8007a8a:	8afb      	ldrh	r3, [r7, #22]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d142      	bne.n	8007b16 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a94:	881a      	ldrh	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa0:	1c9a      	adds	r2, r3, #2
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007ab4:	e02f      	b.n	8007b16 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f003 0302 	and.w	r3, r3, #2
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d112      	bne.n	8007aea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac8:	881a      	ldrh	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad4:	1c9a      	adds	r2, r3, #2
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ae8:	e015      	b.n	8007b16 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aea:	f7fb f8c9 	bl	8002c80 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d803      	bhi.n	8007b02 <HAL_SPI_Transmit+0x16c>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b00:	d102      	bne.n	8007b08 <HAL_SPI_Transmit+0x172>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d106      	bne.n	8007b16 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007b14:	e0ab      	b.n	8007c6e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1ca      	bne.n	8007ab6 <HAL_SPI_Transmit+0x120>
 8007b20:	e080      	b.n	8007c24 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <HAL_SPI_Transmit+0x19a>
 8007b2a:	8afb      	ldrh	r3, [r7, #22]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d174      	bne.n	8007c1a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d912      	bls.n	8007b60 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3e:	881a      	ldrh	r2, [r3, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4a:	1c9a      	adds	r2, r3, #2
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b02      	subs	r3, #2
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b5e:	e05c      	b.n	8007c1a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	330c      	adds	r3, #12
 8007b6a:	7812      	ldrb	r2, [r2, #0]
 8007b6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b86:	e048      	b.n	8007c1a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d12b      	bne.n	8007bee <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d912      	bls.n	8007bc6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba4:	881a      	ldrh	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb0:	1c9a      	adds	r2, r3, #2
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b02      	subs	r3, #2
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007bc4:	e029      	b.n	8007c1a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	330c      	adds	r3, #12
 8007bd0:	7812      	ldrb	r2, [r2, #0]
 8007bd2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	3b01      	subs	r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007bec:	e015      	b.n	8007c1a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bee:	f7fb f847 	bl	8002c80 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d803      	bhi.n	8007c06 <HAL_SPI_Transmit+0x270>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c04:	d102      	bne.n	8007c0c <HAL_SPI_Transmit+0x276>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d106      	bne.n	8007c1a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007c18:	e029      	b.n	8007c6e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1b1      	bne.n	8007b88 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fc7d 	bl	8008528 <SPI_EndRxTxTransaction>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2220      	movs	r2, #32
 8007c38:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10a      	bne.n	8007c58 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c42:	2300      	movs	r3, #0
 8007c44:	613b      	str	r3, [r7, #16]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	613b      	str	r3, [r7, #16]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	77fb      	strb	r3, [r7, #31]
 8007c64:	e003      	b.n	8007c6e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007c76:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3720      	adds	r7, #32
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08a      	sub	sp, #40	@ 0x28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d101      	bne.n	8007ca6 <HAL_SPI_TransmitReceive+0x26>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	e20a      	b.n	80080bc <HAL_SPI_TransmitReceive+0x43c>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cae:	f7fa ffe7 	bl	8002c80 <HAL_GetTick>
 8007cb2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007cba:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007cc2:	887b      	ldrh	r3, [r7, #2]
 8007cc4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007cc6:	887b      	ldrh	r3, [r7, #2]
 8007cc8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007cca:	7efb      	ldrb	r3, [r7, #27]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d00e      	beq.n	8007cee <HAL_SPI_TransmitReceive+0x6e>
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cd6:	d106      	bne.n	8007ce6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d102      	bne.n	8007ce6 <HAL_SPI_TransmitReceive+0x66>
 8007ce0:	7efb      	ldrb	r3, [r7, #27]
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d003      	beq.n	8007cee <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007cec:	e1e0      	b.n	80080b0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d005      	beq.n	8007d00 <HAL_SPI_TransmitReceive+0x80>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <HAL_SPI_TransmitReceive+0x80>
 8007cfa:	887b      	ldrh	r3, [r7, #2]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d103      	bne.n	8007d08 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007d06:	e1d3      	b.n	80080b0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b04      	cmp	r3, #4
 8007d12:	d003      	beq.n	8007d1c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2205      	movs	r2, #5
 8007d18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	887a      	ldrh	r2, [r7, #2]
 8007d2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	887a      	ldrh	r2, [r7, #2]
 8007d34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	887a      	ldrh	r2, [r7, #2]
 8007d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	887a      	ldrh	r2, [r7, #2]
 8007d48:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d5e:	d802      	bhi.n	8007d66 <HAL_SPI_TransmitReceive+0xe6>
 8007d60:	8a3b      	ldrh	r3, [r7, #16]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d908      	bls.n	8007d78 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d74:	605a      	str	r2, [r3, #4]
 8007d76:	e007      	b.n	8007d88 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d86:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d92:	2b40      	cmp	r3, #64	@ 0x40
 8007d94:	d007      	beq.n	8007da6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007da4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007dae:	f240 8081 	bls.w	8007eb4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <HAL_SPI_TransmitReceive+0x140>
 8007dba:	8a7b      	ldrh	r3, [r7, #18]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d16d      	bne.n	8007e9c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc4:	881a      	ldrh	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd0:	1c9a      	adds	r2, r3, #2
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007de4:	e05a      	b.n	8007e9c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d11b      	bne.n	8007e2c <HAL_SPI_TransmitReceive+0x1ac>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d016      	beq.n	8007e2c <HAL_SPI_TransmitReceive+0x1ac>
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d113      	bne.n	8007e2c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e08:	881a      	ldrh	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e14:	1c9a      	adds	r2, r3, #2
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d11c      	bne.n	8007e74 <HAL_SPI_TransmitReceive+0x1f4>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d016      	beq.n	8007e74 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e50:	b292      	uxth	r2, r2
 8007e52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e58:	1c9a      	adds	r2, r3, #2
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	3b01      	subs	r3, #1
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e70:	2301      	movs	r3, #1
 8007e72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e74:	f7fa ff04 	bl	8002c80 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d80b      	bhi.n	8007e9c <HAL_SPI_TransmitReceive+0x21c>
 8007e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8a:	d007      	beq.n	8007e9c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007e9a:	e109      	b.n	80080b0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d19f      	bne.n	8007de6 <HAL_SPI_TransmitReceive+0x166>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d199      	bne.n	8007de6 <HAL_SPI_TransmitReceive+0x166>
 8007eb2:	e0e3      	b.n	800807c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <HAL_SPI_TransmitReceive+0x244>
 8007ebc:	8a7b      	ldrh	r3, [r7, #18]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	f040 80cf 	bne.w	8008062 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d912      	bls.n	8007ef4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed2:	881a      	ldrh	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ede:	1c9a      	adds	r2, r3, #2
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b02      	subs	r3, #2
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ef2:	e0b6      	b.n	8008062 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	330c      	adds	r3, #12
 8007efe:	7812      	ldrb	r2, [r2, #0]
 8007f00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f1a:	e0a2      	b.n	8008062 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d134      	bne.n	8007f94 <HAL_SPI_TransmitReceive+0x314>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d02f      	beq.n	8007f94 <HAL_SPI_TransmitReceive+0x314>
 8007f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d12c      	bne.n	8007f94 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d912      	bls.n	8007f6a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f48:	881a      	ldrh	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f54:	1c9a      	adds	r2, r3, #2
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b02      	subs	r3, #2
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f68:	e012      	b.n	8007f90 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	330c      	adds	r3, #12
 8007f74:	7812      	ldrb	r2, [r2, #0]
 8007f76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7c:	1c5a      	adds	r2, r3, #1
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d148      	bne.n	8008034 <HAL_SPI_TransmitReceive+0x3b4>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d042      	beq.n	8008034 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d923      	bls.n	8008002 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc4:	b292      	uxth	r2, r2
 8007fc6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fcc:	1c9a      	adds	r2, r3, #2
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	3b02      	subs	r3, #2
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d81f      	bhi.n	8008030 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ffe:	605a      	str	r2, [r3, #4]
 8008000:	e016      	b.n	8008030 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f103 020c 	add.w	r2, r3, #12
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800e:	7812      	ldrb	r2, [r2, #0]
 8008010:	b2d2      	uxtb	r2, r2
 8008012:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008024:	b29b      	uxth	r3, r3
 8008026:	3b01      	subs	r3, #1
 8008028:	b29a      	uxth	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008030:	2301      	movs	r3, #1
 8008032:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008034:	f7fa fe24 	bl	8002c80 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008040:	429a      	cmp	r2, r3
 8008042:	d803      	bhi.n	800804c <HAL_SPI_TransmitReceive+0x3cc>
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804a:	d102      	bne.n	8008052 <HAL_SPI_TransmitReceive+0x3d2>
 800804c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804e:	2b00      	cmp	r3, #0
 8008050:	d107      	bne.n	8008062 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008060:	e026      	b.n	80080b0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008066:	b29b      	uxth	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	f47f af57 	bne.w	8007f1c <HAL_SPI_TransmitReceive+0x29c>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008074:	b29b      	uxth	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	f47f af50 	bne.w	8007f1c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800807c:	69fa      	ldr	r2, [r7, #28]
 800807e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 fa51 	bl	8008528 <SPI_EndRxTxTransaction>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d005      	beq.n	8008098 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2220      	movs	r2, #32
 8008096:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080a6:	e003      	b.n	80080b0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80080b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3728      	adds	r7, #40	@ 0x28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10e      	bne.n	8008104 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d009      	beq.n	8008104 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d004      	beq.n	8008104 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	4798      	blx	r3
    return;
 8008102:	e0ce      	b.n	80082a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d009      	beq.n	8008122 <HAL_SPI_IRQHandler+0x5e>
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008114:	2b00      	cmp	r3, #0
 8008116:	d004      	beq.n	8008122 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
    return;
 8008120:	e0bf      	b.n	80082a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <HAL_SPI_IRQHandler+0x7e>
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	d105      	bne.n	8008142 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 80b0 	beq.w	80082a2 <HAL_SPI_IRQHandler+0x1de>
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	f003 0320 	and.w	r3, r3, #32
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 80aa 	beq.w	80082a2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008154:	2b00      	cmp	r3, #0
 8008156:	d023      	beq.n	80081a0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b03      	cmp	r3, #3
 8008162:	d011      	beq.n	8008188 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008168:	f043 0204 	orr.w	r2, r3, #4
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008170:	2300      	movs	r3, #0
 8008172:	617b      	str	r3, [r7, #20]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	617b      	str	r3, [r7, #20]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	e00b      	b.n	80081a0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008188:	2300      	movs	r3, #0
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	613b      	str	r3, [r7, #16]
 800819c:	693b      	ldr	r3, [r7, #16]
        return;
 800819e:	e080      	b.n	80082a2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	f003 0320 	and.w	r3, r3, #32
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d014      	beq.n	80081d4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ae:	f043 0201 	orr.w	r2, r3, #1
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	60fb      	str	r3, [r7, #12]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00c      	beq.n	80081f8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081e2:	f043 0208 	orr.w	r2, r3, #8
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081ea:	2300      	movs	r3, #0
 80081ec:	60bb      	str	r3, [r7, #8]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	60bb      	str	r3, [r7, #8]
 80081f6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d04f      	beq.n	80082a0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800820e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d104      	bne.n	800822c <HAL_SPI_IRQHandler+0x168>
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d034      	beq.n	8008296 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0203 	bic.w	r2, r2, #3
 800823a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008240:	2b00      	cmp	r3, #0
 8008242:	d011      	beq.n	8008268 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008248:	4a17      	ldr	r2, [pc, #92]	@ (80082a8 <HAL_SPI_IRQHandler+0x1e4>)
 800824a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008250:	4618      	mov	r0, r3
 8008252:	f7fc fbc9 	bl	80049e8 <HAL_DMA_Abort_IT>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008260:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826c:	2b00      	cmp	r3, #0
 800826e:	d016      	beq.n	800829e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008274:	4a0c      	ldr	r2, [pc, #48]	@ (80082a8 <HAL_SPI_IRQHandler+0x1e4>)
 8008276:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800827c:	4618      	mov	r0, r3
 800827e:	f7fc fbb3 	bl	80049e8 <HAL_DMA_Abort_IT>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00a      	beq.n	800829e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800828c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008294:	e003      	b.n	800829e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f808 	bl	80082ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800829c:	e000      	b.n	80082a0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800829e:	bf00      	nop
    return;
 80082a0:	bf00      	nop
  }
}
 80082a2:	3720      	adds	r7, #32
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	080082c1 	.word	0x080082c1

080082ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f7ff ffe5 	bl	80082ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082e2:	bf00      	nop
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
	...

080082ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	4613      	mov	r3, r2
 80082fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082fc:	f7fa fcc0 	bl	8002c80 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008304:	1a9b      	subs	r3, r3, r2
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4413      	add	r3, r2
 800830a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800830c:	f7fa fcb8 	bl	8002c80 <HAL_GetTick>
 8008310:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008312:	4b39      	ldr	r3, [pc, #228]	@ (80083f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	015b      	lsls	r3, r3, #5
 8008318:	0d1b      	lsrs	r3, r3, #20
 800831a:	69fa      	ldr	r2, [r7, #28]
 800831c:	fb02 f303 	mul.w	r3, r2, r3
 8008320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008322:	e054      	b.n	80083ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832a:	d050      	beq.n	80083ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800832c:	f7fa fca8 	bl	8002c80 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	69fa      	ldr	r2, [r7, #28]
 8008338:	429a      	cmp	r2, r3
 800833a:	d902      	bls.n	8008342 <SPI_WaitFlagStateUntilTimeout+0x56>
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d13d      	bne.n	80083be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800835a:	d111      	bne.n	8008380 <SPI_WaitFlagStateUntilTimeout+0x94>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008364:	d004      	beq.n	8008370 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800836e:	d107      	bne.n	8008380 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800837e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008388:	d10f      	bne.n	80083aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e017      	b.n	80083ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083c4:	2300      	movs	r3, #0
 80083c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	3b01      	subs	r3, #1
 80083cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4013      	ands	r3, r2
 80083d8:	68ba      	ldr	r2, [r7, #8]
 80083da:	429a      	cmp	r2, r3
 80083dc:	bf0c      	ite	eq
 80083de:	2301      	moveq	r3, #1
 80083e0:	2300      	movne	r3, #0
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d19b      	bne.n	8008324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3720      	adds	r7, #32
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000000 	.word	0x20000000

080083fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08a      	sub	sp, #40	@ 0x28
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800840e:	f7fa fc37 	bl	8002c80 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008416:	1a9b      	subs	r3, r3, r2
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	4413      	add	r3, r2
 800841c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800841e:	f7fa fc2f 	bl	8002c80 <HAL_GetTick>
 8008422:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	330c      	adds	r3, #12
 800842a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800842c:	4b3d      	ldr	r3, [pc, #244]	@ (8008524 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	00da      	lsls	r2, r3, #3
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	0d1b      	lsrs	r3, r3, #20
 800843c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800843e:	fb02 f303 	mul.w	r3, r2, r3
 8008442:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008444:	e060      	b.n	8008508 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800844c:	d107      	bne.n	800845e <SPI_WaitFifoStateUntilTimeout+0x62>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d104      	bne.n	800845e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800845c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008464:	d050      	beq.n	8008508 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008466:	f7fa fc0b 	bl	8002c80 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008472:	429a      	cmp	r2, r3
 8008474:	d902      	bls.n	800847c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008478:	2b00      	cmp	r3, #0
 800847a:	d13d      	bne.n	80084f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800848a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008494:	d111      	bne.n	80084ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800849e:	d004      	beq.n	80084aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084a8:	d107      	bne.n	80084ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084c2:	d10f      	bne.n	80084e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e010      	b.n	800851a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	3b01      	subs	r3, #1
 8008506:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689a      	ldr	r2, [r3, #8]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	4013      	ands	r3, r2
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	429a      	cmp	r2, r3
 8008516:	d196      	bne.n	8008446 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3728      	adds	r7, #40	@ 0x28
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20000000 	.word	0x20000000

08008528 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af02      	add	r7, sp, #8
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2200      	movs	r2, #0
 800853c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f7ff ff5b 	bl	80083fc <SPI_WaitFifoStateUntilTimeout>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008550:	f043 0220 	orr.w	r2, r3, #32
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e027      	b.n	80085ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2200      	movs	r2, #0
 8008564:	2180      	movs	r1, #128	@ 0x80
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f7ff fec0 	bl	80082ec <SPI_WaitFlagStateUntilTimeout>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d007      	beq.n	8008582 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008576:	f043 0220 	orr.w	r2, r3, #32
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e014      	b.n	80085ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2200      	movs	r2, #0
 800858a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7ff ff34 	bl	80083fc <SPI_WaitFifoStateUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d007      	beq.n	80085aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800859e:	f043 0220 	orr.w	r2, r3, #32
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e000      	b.n	80085ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e049      	b.n	800865a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f841 	bl	8008662 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f000 fcae 	bl	8008f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
	...

08008678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b01      	cmp	r3, #1
 800868a:	d001      	beq.n	8008690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e054      	b.n	800873a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f042 0201 	orr.w	r2, r2, #1
 80086a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a26      	ldr	r2, [pc, #152]	@ (8008748 <HAL_TIM_Base_Start_IT+0xd0>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d022      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ba:	d01d      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a22      	ldr	r2, [pc, #136]	@ (800874c <HAL_TIM_Base_Start_IT+0xd4>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d018      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a21      	ldr	r2, [pc, #132]	@ (8008750 <HAL_TIM_Base_Start_IT+0xd8>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d013      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008754 <HAL_TIM_Base_Start_IT+0xdc>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00e      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a1e      	ldr	r2, [pc, #120]	@ (8008758 <HAL_TIM_Base_Start_IT+0xe0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d009      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a1c      	ldr	r2, [pc, #112]	@ (800875c <HAL_TIM_Base_Start_IT+0xe4>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d004      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x80>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008760 <HAL_TIM_Base_Start_IT+0xe8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d115      	bne.n	8008724 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	4b19      	ldr	r3, [pc, #100]	@ (8008764 <HAL_TIM_Base_Start_IT+0xec>)
 8008700:	4013      	ands	r3, r2
 8008702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b06      	cmp	r3, #6
 8008708:	d015      	beq.n	8008736 <HAL_TIM_Base_Start_IT+0xbe>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008710:	d011      	beq.n	8008736 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f042 0201 	orr.w	r2, r2, #1
 8008720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008722:	e008      	b.n	8008736 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0201 	orr.w	r2, r2, #1
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	e000      	b.n	8008738 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008736:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40012c00 	.word	0x40012c00
 800874c:	40000400 	.word	0x40000400
 8008750:	40000800 	.word	0x40000800
 8008754:	40000c00 	.word	0x40000c00
 8008758:	40013400 	.word	0x40013400
 800875c:	40014000 	.word	0x40014000
 8008760:	40015000 	.word	0x40015000
 8008764:	00010007 	.word	0x00010007

08008768 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e049      	b.n	800880e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d106      	bne.n	8008794 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7f9 f864 	bl	800185c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	3304      	adds	r3, #4
 80087a4:	4619      	mov	r1, r3
 80087a6:	4610      	mov	r0, r2
 80087a8:	f000 fbd4 	bl	8008f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
	...

08008818 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <HAL_TIM_IC_Start_IT+0x1e>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008832:	b2db      	uxtb	r3, r3
 8008834:	e023      	b.n	800887e <HAL_TIM_IC_Start_IT+0x66>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b04      	cmp	r3, #4
 800883a:	d104      	bne.n	8008846 <HAL_TIM_IC_Start_IT+0x2e>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008842:	b2db      	uxtb	r3, r3
 8008844:	e01b      	b.n	800887e <HAL_TIM_IC_Start_IT+0x66>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b08      	cmp	r3, #8
 800884a:	d104      	bne.n	8008856 <HAL_TIM_IC_Start_IT+0x3e>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008852:	b2db      	uxtb	r3, r3
 8008854:	e013      	b.n	800887e <HAL_TIM_IC_Start_IT+0x66>
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b0c      	cmp	r3, #12
 800885a:	d104      	bne.n	8008866 <HAL_TIM_IC_Start_IT+0x4e>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008862:	b2db      	uxtb	r3, r3
 8008864:	e00b      	b.n	800887e <HAL_TIM_IC_Start_IT+0x66>
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2b10      	cmp	r3, #16
 800886a:	d104      	bne.n	8008876 <HAL_TIM_IC_Start_IT+0x5e>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008872:	b2db      	uxtb	r3, r3
 8008874:	e003      	b.n	800887e <HAL_TIM_IC_Start_IT+0x66>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800887c:	b2db      	uxtb	r3, r3
 800887e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d104      	bne.n	8008890 <HAL_TIM_IC_Start_IT+0x78>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800888c:	b2db      	uxtb	r3, r3
 800888e:	e013      	b.n	80088b8 <HAL_TIM_IC_Start_IT+0xa0>
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b04      	cmp	r3, #4
 8008894:	d104      	bne.n	80088a0 <HAL_TIM_IC_Start_IT+0x88>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800889c:	b2db      	uxtb	r3, r3
 800889e:	e00b      	b.n	80088b8 <HAL_TIM_IC_Start_IT+0xa0>
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	2b08      	cmp	r3, #8
 80088a4:	d104      	bne.n	80088b0 <HAL_TIM_IC_Start_IT+0x98>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	e003      	b.n	80088b8 <HAL_TIM_IC_Start_IT+0xa0>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d102      	bne.n	80088c6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80088c0:	7b7b      	ldrb	r3, [r7, #13]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d001      	beq.n	80088ca <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e0e2      	b.n	8008a90 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d104      	bne.n	80088da <HAL_TIM_IC_Start_IT+0xc2>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088d8:	e023      	b.n	8008922 <HAL_TIM_IC_Start_IT+0x10a>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b04      	cmp	r3, #4
 80088de:	d104      	bne.n	80088ea <HAL_TIM_IC_Start_IT+0xd2>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088e8:	e01b      	b.n	8008922 <HAL_TIM_IC_Start_IT+0x10a>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b08      	cmp	r3, #8
 80088ee:	d104      	bne.n	80088fa <HAL_TIM_IC_Start_IT+0xe2>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088f8:	e013      	b.n	8008922 <HAL_TIM_IC_Start_IT+0x10a>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b0c      	cmp	r3, #12
 80088fe:	d104      	bne.n	800890a <HAL_TIM_IC_Start_IT+0xf2>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008908:	e00b      	b.n	8008922 <HAL_TIM_IC_Start_IT+0x10a>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b10      	cmp	r3, #16
 800890e:	d104      	bne.n	800891a <HAL_TIM_IC_Start_IT+0x102>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008918:	e003      	b.n	8008922 <HAL_TIM_IC_Start_IT+0x10a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2202      	movs	r2, #2
 800891e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d104      	bne.n	8008932 <HAL_TIM_IC_Start_IT+0x11a>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2202      	movs	r2, #2
 800892c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008930:	e013      	b.n	800895a <HAL_TIM_IC_Start_IT+0x142>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b04      	cmp	r3, #4
 8008936:	d104      	bne.n	8008942 <HAL_TIM_IC_Start_IT+0x12a>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008940:	e00b      	b.n	800895a <HAL_TIM_IC_Start_IT+0x142>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b08      	cmp	r3, #8
 8008946:	d104      	bne.n	8008952 <HAL_TIM_IC_Start_IT+0x13a>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008950:	e003      	b.n	800895a <HAL_TIM_IC_Start_IT+0x142>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2202      	movs	r2, #2
 8008956:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b0c      	cmp	r3, #12
 800895e:	d841      	bhi.n	80089e4 <HAL_TIM_IC_Start_IT+0x1cc>
 8008960:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <HAL_TIM_IC_Start_IT+0x150>)
 8008962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008966:	bf00      	nop
 8008968:	0800899d 	.word	0x0800899d
 800896c:	080089e5 	.word	0x080089e5
 8008970:	080089e5 	.word	0x080089e5
 8008974:	080089e5 	.word	0x080089e5
 8008978:	080089af 	.word	0x080089af
 800897c:	080089e5 	.word	0x080089e5
 8008980:	080089e5 	.word	0x080089e5
 8008984:	080089e5 	.word	0x080089e5
 8008988:	080089c1 	.word	0x080089c1
 800898c:	080089e5 	.word	0x080089e5
 8008990:	080089e5 	.word	0x080089e5
 8008994:	080089e5 	.word	0x080089e5
 8008998:	080089d3 	.word	0x080089d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f042 0202 	orr.w	r2, r2, #2
 80089aa:	60da      	str	r2, [r3, #12]
      break;
 80089ac:	e01d      	b.n	80089ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68da      	ldr	r2, [r3, #12]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f042 0204 	orr.w	r2, r2, #4
 80089bc:	60da      	str	r2, [r3, #12]
      break;
 80089be:	e014      	b.n	80089ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68da      	ldr	r2, [r3, #12]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0208 	orr.w	r2, r2, #8
 80089ce:	60da      	str	r2, [r3, #12]
      break;
 80089d0:	e00b      	b.n	80089ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68da      	ldr	r2, [r3, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f042 0210 	orr.w	r2, r2, #16
 80089e0:	60da      	str	r2, [r3, #12]
      break;
 80089e2:	e002      	b.n	80089ea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	73fb      	strb	r3, [r7, #15]
      break;
 80089e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d14e      	bne.n	8008a8e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2201      	movs	r2, #1
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fc89 	bl	8009310 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a25      	ldr	r2, [pc, #148]	@ (8008a98 <HAL_TIM_IC_Start_IT+0x280>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d022      	beq.n	8008a4e <HAL_TIM_IC_Start_IT+0x236>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a10:	d01d      	beq.n	8008a4e <HAL_TIM_IC_Start_IT+0x236>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a21      	ldr	r2, [pc, #132]	@ (8008a9c <HAL_TIM_IC_Start_IT+0x284>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d018      	beq.n	8008a4e <HAL_TIM_IC_Start_IT+0x236>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a1f      	ldr	r2, [pc, #124]	@ (8008aa0 <HAL_TIM_IC_Start_IT+0x288>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d013      	beq.n	8008a4e <HAL_TIM_IC_Start_IT+0x236>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8008aa4 <HAL_TIM_IC_Start_IT+0x28c>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00e      	beq.n	8008a4e <HAL_TIM_IC_Start_IT+0x236>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a1c      	ldr	r2, [pc, #112]	@ (8008aa8 <HAL_TIM_IC_Start_IT+0x290>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d009      	beq.n	8008a4e <HAL_TIM_IC_Start_IT+0x236>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8008aac <HAL_TIM_IC_Start_IT+0x294>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d004      	beq.n	8008a4e <HAL_TIM_IC_Start_IT+0x236>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a19      	ldr	r2, [pc, #100]	@ (8008ab0 <HAL_TIM_IC_Start_IT+0x298>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d115      	bne.n	8008a7a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	4b17      	ldr	r3, [pc, #92]	@ (8008ab4 <HAL_TIM_IC_Start_IT+0x29c>)
 8008a56:	4013      	ands	r3, r2
 8008a58:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b06      	cmp	r3, #6
 8008a5e:	d015      	beq.n	8008a8c <HAL_TIM_IC_Start_IT+0x274>
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a66:	d011      	beq.n	8008a8c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f042 0201 	orr.w	r2, r2, #1
 8008a76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a78:	e008      	b.n	8008a8c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f042 0201 	orr.w	r2, r2, #1
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	e000      	b.n	8008a8e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a8c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	40012c00 	.word	0x40012c00
 8008a9c:	40000400 	.word	0x40000400
 8008aa0:	40000800 	.word	0x40000800
 8008aa4:	40000c00 	.word	0x40000c00
 8008aa8:	40013400 	.word	0x40013400
 8008aac:	40014000 	.word	0x40014000
 8008ab0:	40015000 	.word	0x40015000
 8008ab4:	00010007 	.word	0x00010007

08008ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d020      	beq.n	8008b1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f003 0302 	and.w	r3, r3, #2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d01b      	beq.n	8008b1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f06f 0202 	mvn.w	r2, #2
 8008aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7f9 f9e6 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8008b08:	e005      	b.n	8008b16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa04 	bl	8008f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fa0b 	bl	8008f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f003 0304 	and.w	r3, r3, #4
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d020      	beq.n	8008b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01b      	beq.n	8008b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f06f 0204 	mvn.w	r2, #4
 8008b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7f9 f9c0 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8008b54:	e005      	b.n	8008b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f9de 	bl	8008f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f9e5 	bl	8008f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f003 0308 	and.w	r3, r3, #8
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d020      	beq.n	8008bb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f003 0308 	and.w	r3, r3, #8
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01b      	beq.n	8008bb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f06f 0208 	mvn.w	r2, #8
 8008b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2204      	movs	r2, #4
 8008b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7f9 f99a 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8008ba0:	e005      	b.n	8008bae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f9b8 	bl	8008f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f9bf 	bl	8008f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f003 0310 	and.w	r3, r3, #16
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d020      	beq.n	8008c00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f003 0310 	and.w	r3, r3, #16
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01b      	beq.n	8008c00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f06f 0210 	mvn.w	r2, #16
 8008bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2208      	movs	r2, #8
 8008bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7f9 f974 	bl	8001ed4 <HAL_TIM_IC_CaptureCallback>
 8008bec:	e005      	b.n	8008bfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f992 	bl	8008f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f999 	bl	8008f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00c      	beq.n	8008c24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d007      	beq.n	8008c24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f06f 0201 	mvn.w	r2, #1
 8008c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7f8 fbdc 	bl	80013dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d104      	bne.n	8008c38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00c      	beq.n	8008c52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d007      	beq.n	8008c52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fc25 	bl	800949c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00c      	beq.n	8008c76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d007      	beq.n	8008c76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fc1d 	bl	80094b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00c      	beq.n	8008c9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d007      	beq.n	8008c9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f953 	bl	8008f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	f003 0320 	and.w	r3, r3, #32
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00c      	beq.n	8008cbe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f003 0320 	and.w	r3, r3, #32
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d007      	beq.n	8008cbe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f06f 0220 	mvn.w	r2, #32
 8008cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fbe5 	bl	8009488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00c      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d007      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fbf1 	bl	80094c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00c      	beq.n	8008d06 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d007      	beq.n	8008d06 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fbe9 	bl	80094d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00c      	beq.n	8008d2a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d007      	beq.n	8008d2a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fbe1 	bl	80094ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00c      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d007      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fbd9 	bl	8009500 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	60b9      	str	r1, [r7, #8]
 8008d60:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d101      	bne.n	8008d74 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008d70:	2302      	movs	r3, #2
 8008d72:	e088      	b.n	8008e86 <HAL_TIM_IC_ConfigChannel+0x130>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d11b      	bne.n	8008dba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008d92:	f000 f993 	bl	80090bc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	699a      	ldr	r2, [r3, #24]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f022 020c 	bic.w	r2, r2, #12
 8008da4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6999      	ldr	r1, [r3, #24]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	430a      	orrs	r2, r1
 8008db6:	619a      	str	r2, [r3, #24]
 8008db8:	e060      	b.n	8008e7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d11c      	bne.n	8008dfa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008dd0:	f000 f9e8 	bl	80091a4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008de2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6999      	ldr	r1, [r3, #24]
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	021a      	lsls	r2, r3, #8
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	619a      	str	r2, [r3, #24]
 8008df8:	e040      	b.n	8008e7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b08      	cmp	r3, #8
 8008dfe:	d11b      	bne.n	8008e38 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008e10:	f000 fa05 	bl	800921e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69da      	ldr	r2, [r3, #28]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f022 020c 	bic.w	r2, r2, #12
 8008e22:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	69d9      	ldr	r1, [r3, #28]
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	689a      	ldr	r2, [r3, #8]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	61da      	str	r2, [r3, #28]
 8008e36:	e021      	b.n	8008e7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b0c      	cmp	r3, #12
 8008e3c:	d11c      	bne.n	8008e78 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008e4e:	f000 fa22 	bl	8009296 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69da      	ldr	r2, [r3, #28]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008e60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	69d9      	ldr	r1, [r3, #28]
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	021a      	lsls	r2, r3, #8
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	61da      	str	r2, [r3, #28]
 8008e76:	e001      	b.n	8008e7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3718      	adds	r7, #24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b0c      	cmp	r3, #12
 8008ea2:	d831      	bhi.n	8008f08 <HAL_TIM_ReadCapturedValue+0x78>
 8008ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8008eac <HAL_TIM_ReadCapturedValue+0x1c>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008ee1 	.word	0x08008ee1
 8008eb0:	08008f09 	.word	0x08008f09
 8008eb4:	08008f09 	.word	0x08008f09
 8008eb8:	08008f09 	.word	0x08008f09
 8008ebc:	08008eeb 	.word	0x08008eeb
 8008ec0:	08008f09 	.word	0x08008f09
 8008ec4:	08008f09 	.word	0x08008f09
 8008ec8:	08008f09 	.word	0x08008f09
 8008ecc:	08008ef5 	.word	0x08008ef5
 8008ed0:	08008f09 	.word	0x08008f09
 8008ed4:	08008f09 	.word	0x08008f09
 8008ed8:	08008f09 	.word	0x08008f09
 8008edc:	08008eff 	.word	0x08008eff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ee6:	60fb      	str	r3, [r7, #12]

      break;
 8008ee8:	e00f      	b.n	8008f0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef0:	60fb      	str	r3, [r7, #12]

      break;
 8008ef2:	e00a      	b.n	8008f0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008efa:	60fb      	str	r3, [r7, #12]

      break;
 8008efc:	e005      	b.n	8008f0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f04:	60fb      	str	r3, [r7, #12]

      break;
 8008f06:	e000      	b.n	8008f0a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008f08:	bf00      	nop
  }

  return tmpreg;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a4c      	ldr	r2, [pc, #304]	@ (8009098 <TIM_Base_SetConfig+0x144>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d017      	beq.n	8008f9c <TIM_Base_SetConfig+0x48>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f72:	d013      	beq.n	8008f9c <TIM_Base_SetConfig+0x48>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a49      	ldr	r2, [pc, #292]	@ (800909c <TIM_Base_SetConfig+0x148>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d00f      	beq.n	8008f9c <TIM_Base_SetConfig+0x48>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a48      	ldr	r2, [pc, #288]	@ (80090a0 <TIM_Base_SetConfig+0x14c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d00b      	beq.n	8008f9c <TIM_Base_SetConfig+0x48>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a47      	ldr	r2, [pc, #284]	@ (80090a4 <TIM_Base_SetConfig+0x150>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d007      	beq.n	8008f9c <TIM_Base_SetConfig+0x48>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a46      	ldr	r2, [pc, #280]	@ (80090a8 <TIM_Base_SetConfig+0x154>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d003      	beq.n	8008f9c <TIM_Base_SetConfig+0x48>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a45      	ldr	r2, [pc, #276]	@ (80090ac <TIM_Base_SetConfig+0x158>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d108      	bne.n	8008fae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a39      	ldr	r2, [pc, #228]	@ (8009098 <TIM_Base_SetConfig+0x144>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d023      	beq.n	8008ffe <TIM_Base_SetConfig+0xaa>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fbc:	d01f      	beq.n	8008ffe <TIM_Base_SetConfig+0xaa>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a36      	ldr	r2, [pc, #216]	@ (800909c <TIM_Base_SetConfig+0x148>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d01b      	beq.n	8008ffe <TIM_Base_SetConfig+0xaa>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a35      	ldr	r2, [pc, #212]	@ (80090a0 <TIM_Base_SetConfig+0x14c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d017      	beq.n	8008ffe <TIM_Base_SetConfig+0xaa>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a34      	ldr	r2, [pc, #208]	@ (80090a4 <TIM_Base_SetConfig+0x150>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d013      	beq.n	8008ffe <TIM_Base_SetConfig+0xaa>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a33      	ldr	r2, [pc, #204]	@ (80090a8 <TIM_Base_SetConfig+0x154>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d00f      	beq.n	8008ffe <TIM_Base_SetConfig+0xaa>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a33      	ldr	r2, [pc, #204]	@ (80090b0 <TIM_Base_SetConfig+0x15c>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d00b      	beq.n	8008ffe <TIM_Base_SetConfig+0xaa>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a32      	ldr	r2, [pc, #200]	@ (80090b4 <TIM_Base_SetConfig+0x160>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d007      	beq.n	8008ffe <TIM_Base_SetConfig+0xaa>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a31      	ldr	r2, [pc, #196]	@ (80090b8 <TIM_Base_SetConfig+0x164>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d003      	beq.n	8008ffe <TIM_Base_SetConfig+0xaa>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80090ac <TIM_Base_SetConfig+0x158>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d108      	bne.n	8009010 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	4313      	orrs	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	4313      	orrs	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a18      	ldr	r2, [pc, #96]	@ (8009098 <TIM_Base_SetConfig+0x144>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d013      	beq.n	8009064 <TIM_Base_SetConfig+0x110>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a1a      	ldr	r2, [pc, #104]	@ (80090a8 <TIM_Base_SetConfig+0x154>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d00f      	beq.n	8009064 <TIM_Base_SetConfig+0x110>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a1a      	ldr	r2, [pc, #104]	@ (80090b0 <TIM_Base_SetConfig+0x15c>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d00b      	beq.n	8009064 <TIM_Base_SetConfig+0x110>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a19      	ldr	r2, [pc, #100]	@ (80090b4 <TIM_Base_SetConfig+0x160>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d007      	beq.n	8009064 <TIM_Base_SetConfig+0x110>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a18      	ldr	r2, [pc, #96]	@ (80090b8 <TIM_Base_SetConfig+0x164>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d003      	beq.n	8009064 <TIM_Base_SetConfig+0x110>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a13      	ldr	r2, [pc, #76]	@ (80090ac <TIM_Base_SetConfig+0x158>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d103      	bne.n	800906c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	691a      	ldr	r2, [r3, #16]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b01      	cmp	r3, #1
 800907c:	d105      	bne.n	800908a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	f023 0201 	bic.w	r2, r3, #1
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	611a      	str	r2, [r3, #16]
  }
}
 800908a:	bf00      	nop
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	40012c00 	.word	0x40012c00
 800909c:	40000400 	.word	0x40000400
 80090a0:	40000800 	.word	0x40000800
 80090a4:	40000c00 	.word	0x40000c00
 80090a8:	40013400 	.word	0x40013400
 80090ac:	40015000 	.word	0x40015000
 80090b0:	40014000 	.word	0x40014000
 80090b4:	40014400 	.word	0x40014400
 80090b8:	40014800 	.word	0x40014800

080090bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	f023 0201 	bic.w	r2, r3, #1
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	4a28      	ldr	r2, [pc, #160]	@ (8009188 <TIM_TI1_SetConfig+0xcc>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d01b      	beq.n	8009122 <TIM_TI1_SetConfig+0x66>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090f0:	d017      	beq.n	8009122 <TIM_TI1_SetConfig+0x66>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	4a25      	ldr	r2, [pc, #148]	@ (800918c <TIM_TI1_SetConfig+0xd0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d013      	beq.n	8009122 <TIM_TI1_SetConfig+0x66>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	4a24      	ldr	r2, [pc, #144]	@ (8009190 <TIM_TI1_SetConfig+0xd4>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d00f      	beq.n	8009122 <TIM_TI1_SetConfig+0x66>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	4a23      	ldr	r2, [pc, #140]	@ (8009194 <TIM_TI1_SetConfig+0xd8>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d00b      	beq.n	8009122 <TIM_TI1_SetConfig+0x66>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4a22      	ldr	r2, [pc, #136]	@ (8009198 <TIM_TI1_SetConfig+0xdc>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d007      	beq.n	8009122 <TIM_TI1_SetConfig+0x66>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4a21      	ldr	r2, [pc, #132]	@ (800919c <TIM_TI1_SetConfig+0xe0>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d003      	beq.n	8009122 <TIM_TI1_SetConfig+0x66>
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	4a20      	ldr	r2, [pc, #128]	@ (80091a0 <TIM_TI1_SetConfig+0xe4>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d101      	bne.n	8009126 <TIM_TI1_SetConfig+0x6a>
 8009122:	2301      	movs	r3, #1
 8009124:	e000      	b.n	8009128 <TIM_TI1_SetConfig+0x6c>
 8009126:	2300      	movs	r3, #0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d008      	beq.n	800913e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f023 0303 	bic.w	r3, r3, #3
 8009132:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4313      	orrs	r3, r2
 800913a:	617b      	str	r3, [r7, #20]
 800913c:	e003      	b.n	8009146 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f043 0301 	orr.w	r3, r3, #1
 8009144:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800914c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	011b      	lsls	r3, r3, #4
 8009152:	b2db      	uxtb	r3, r3
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	4313      	orrs	r3, r2
 8009158:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f023 030a 	bic.w	r3, r3, #10
 8009160:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f003 030a 	and.w	r3, r3, #10
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	4313      	orrs	r3, r2
 800916c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	621a      	str	r2, [r3, #32]
}
 800917a:	bf00      	nop
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	40012c00 	.word	0x40012c00
 800918c:	40000400 	.word	0x40000400
 8009190:	40000800 	.word	0x40000800
 8009194:	40000c00 	.word	0x40000c00
 8009198:	40013400 	.word	0x40013400
 800919c:	40014000 	.word	0x40014000
 80091a0:	40015000 	.word	0x40015000

080091a4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	f023 0210 	bic.w	r2, r3, #16
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	021b      	lsls	r3, r3, #8
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	4313      	orrs	r3, r2
 80091da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80091e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	031b      	lsls	r3, r3, #12
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80091f6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	011b      	lsls	r3, r3, #4
 80091fc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	4313      	orrs	r3, r2
 8009204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	621a      	str	r2, [r3, #32]
}
 8009212:	bf00      	nop
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800921e:	b480      	push	{r7}
 8009220:	b087      	sub	sp, #28
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	607a      	str	r2, [r7, #4]
 800922a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f023 0303 	bic.w	r3, r3, #3
 800924a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4313      	orrs	r3, r2
 8009252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800925a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	011b      	lsls	r3, r3, #4
 8009260:	b2db      	uxtb	r3, r3
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	4313      	orrs	r3, r2
 8009266:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800926e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	021b      	lsls	r3, r3, #8
 8009274:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	4313      	orrs	r3, r2
 800927c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	621a      	str	r2, [r3, #32]
}
 800928a:	bf00      	nop
 800928c:	371c      	adds	r7, #28
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009296:	b480      	push	{r7}
 8009298:	b087      	sub	sp, #28
 800929a:	af00      	add	r7, sp, #0
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	607a      	str	r2, [r7, #4]
 80092a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092c2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	021b      	lsls	r3, r3, #8
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	031b      	lsls	r3, r3, #12
 80092da:	b29b      	uxth	r3, r3
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	4313      	orrs	r3, r2
 80092e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80092e8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	031b      	lsls	r3, r3, #12
 80092ee:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	693a      	ldr	r2, [r7, #16]
 80092fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	621a      	str	r2, [r3, #32]
}
 8009304:	bf00      	nop
 8009306:	371c      	adds	r7, #28
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f003 031f 	and.w	r3, r3, #31
 8009322:	2201      	movs	r2, #1
 8009324:	fa02 f303 	lsl.w	r3, r2, r3
 8009328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6a1a      	ldr	r2, [r3, #32]
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	43db      	mvns	r3, r3
 8009332:	401a      	ands	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6a1a      	ldr	r2, [r3, #32]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f003 031f 	and.w	r3, r3, #31
 8009342:	6879      	ldr	r1, [r7, #4]
 8009344:	fa01 f303 	lsl.w	r3, r1, r3
 8009348:	431a      	orrs	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	621a      	str	r2, [r3, #32]
}
 800934e:	bf00      	nop
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
	...

0800935c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800936c:	2b01      	cmp	r3, #1
 800936e:	d101      	bne.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009370:	2302      	movs	r3, #2
 8009372:	e074      	b.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a34      	ldr	r2, [pc, #208]	@ (800946c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d009      	beq.n	80093b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a33      	ldr	r2, [pc, #204]	@ (8009470 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d004      	beq.n	80093b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a31      	ldr	r2, [pc, #196]	@ (8009474 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d108      	bne.n	80093c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80093b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80093ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a21      	ldr	r2, [pc, #132]	@ (800946c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d022      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093f4:	d01d      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009478 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d018      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a1d      	ldr	r2, [pc, #116]	@ (800947c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d013      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a1c      	ldr	r2, [pc, #112]	@ (8009480 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d00e      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a15      	ldr	r2, [pc, #84]	@ (8009470 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d009      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a18      	ldr	r2, [pc, #96]	@ (8009484 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d004      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a11      	ldr	r2, [pc, #68]	@ (8009474 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d10c      	bne.n	800944c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	4313      	orrs	r3, r2
 8009442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	40012c00 	.word	0x40012c00
 8009470:	40013400 	.word	0x40013400
 8009474:	40015000 	.word	0x40015000
 8009478:	40000400 	.word	0x40000400
 800947c:	40000800 	.word	0x40000800
 8009480:	40000c00 	.word	0x40000c00
 8009484:	40014000 	.word	0x40014000

08009488 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e042      	b.n	80095ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7f8 fa23 	bl	8001984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2224      	movs	r2, #36	@ 0x24
 8009542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 0201 	bic.w	r2, r2, #1
 8009554:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955a:	2b00      	cmp	r3, #0
 800955c:	d002      	beq.n	8009564 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fb24 	bl	8009bac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f825 	bl	80095b4 <UART_SetConfig>
 800956a:	4603      	mov	r3, r0
 800956c:	2b01      	cmp	r3, #1
 800956e:	d101      	bne.n	8009574 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e01b      	b.n	80095ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689a      	ldr	r2, [r3, #8]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f042 0201 	orr.w	r2, r2, #1
 80095a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fba3 	bl	8009cf0 <UART_CheckIdleState>
 80095aa:	4603      	mov	r3, r0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095b8:	b08c      	sub	sp, #48	@ 0x30
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	689a      	ldr	r2, [r3, #8]
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	431a      	orrs	r2, r3
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	431a      	orrs	r2, r3
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	4313      	orrs	r3, r2
 80095da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	4baa      	ldr	r3, [pc, #680]	@ (800988c <UART_SetConfig+0x2d8>)
 80095e4:	4013      	ands	r3, r2
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	6812      	ldr	r2, [r2, #0]
 80095ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095ec:	430b      	orrs	r3, r1
 80095ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	430a      	orrs	r2, r1
 8009604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a9f      	ldr	r2, [pc, #636]	@ (8009890 <UART_SetConfig+0x2dc>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d004      	beq.n	8009620 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800961c:	4313      	orrs	r3, r2
 800961e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800962a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	6812      	ldr	r2, [r2, #0]
 8009632:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009634:	430b      	orrs	r3, r1
 8009636:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963e:	f023 010f 	bic.w	r1, r3, #15
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a90      	ldr	r2, [pc, #576]	@ (8009894 <UART_SetConfig+0x2e0>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d125      	bne.n	80096a4 <UART_SetConfig+0xf0>
 8009658:	4b8f      	ldr	r3, [pc, #572]	@ (8009898 <UART_SetConfig+0x2e4>)
 800965a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800965e:	f003 0303 	and.w	r3, r3, #3
 8009662:	2b03      	cmp	r3, #3
 8009664:	d81a      	bhi.n	800969c <UART_SetConfig+0xe8>
 8009666:	a201      	add	r2, pc, #4	@ (adr r2, 800966c <UART_SetConfig+0xb8>)
 8009668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966c:	0800967d 	.word	0x0800967d
 8009670:	0800968d 	.word	0x0800968d
 8009674:	08009685 	.word	0x08009685
 8009678:	08009695 	.word	0x08009695
 800967c:	2301      	movs	r3, #1
 800967e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009682:	e116      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009684:	2302      	movs	r3, #2
 8009686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800968a:	e112      	b.n	80098b2 <UART_SetConfig+0x2fe>
 800968c:	2304      	movs	r3, #4
 800968e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009692:	e10e      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009694:	2308      	movs	r3, #8
 8009696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800969a:	e10a      	b.n	80098b2 <UART_SetConfig+0x2fe>
 800969c:	2310      	movs	r3, #16
 800969e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096a2:	e106      	b.n	80098b2 <UART_SetConfig+0x2fe>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a7c      	ldr	r2, [pc, #496]	@ (800989c <UART_SetConfig+0x2e8>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d138      	bne.n	8009720 <UART_SetConfig+0x16c>
 80096ae:	4b7a      	ldr	r3, [pc, #488]	@ (8009898 <UART_SetConfig+0x2e4>)
 80096b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096b4:	f003 030c 	and.w	r3, r3, #12
 80096b8:	2b0c      	cmp	r3, #12
 80096ba:	d82d      	bhi.n	8009718 <UART_SetConfig+0x164>
 80096bc:	a201      	add	r2, pc, #4	@ (adr r2, 80096c4 <UART_SetConfig+0x110>)
 80096be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c2:	bf00      	nop
 80096c4:	080096f9 	.word	0x080096f9
 80096c8:	08009719 	.word	0x08009719
 80096cc:	08009719 	.word	0x08009719
 80096d0:	08009719 	.word	0x08009719
 80096d4:	08009709 	.word	0x08009709
 80096d8:	08009719 	.word	0x08009719
 80096dc:	08009719 	.word	0x08009719
 80096e0:	08009719 	.word	0x08009719
 80096e4:	08009701 	.word	0x08009701
 80096e8:	08009719 	.word	0x08009719
 80096ec:	08009719 	.word	0x08009719
 80096f0:	08009719 	.word	0x08009719
 80096f4:	08009711 	.word	0x08009711
 80096f8:	2300      	movs	r3, #0
 80096fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096fe:	e0d8      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009700:	2302      	movs	r3, #2
 8009702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009706:	e0d4      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009708:	2304      	movs	r3, #4
 800970a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800970e:	e0d0      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009710:	2308      	movs	r3, #8
 8009712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009716:	e0cc      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009718:	2310      	movs	r3, #16
 800971a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800971e:	e0c8      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a5e      	ldr	r2, [pc, #376]	@ (80098a0 <UART_SetConfig+0x2ec>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d125      	bne.n	8009776 <UART_SetConfig+0x1c2>
 800972a:	4b5b      	ldr	r3, [pc, #364]	@ (8009898 <UART_SetConfig+0x2e4>)
 800972c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009730:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009734:	2b30      	cmp	r3, #48	@ 0x30
 8009736:	d016      	beq.n	8009766 <UART_SetConfig+0x1b2>
 8009738:	2b30      	cmp	r3, #48	@ 0x30
 800973a:	d818      	bhi.n	800976e <UART_SetConfig+0x1ba>
 800973c:	2b20      	cmp	r3, #32
 800973e:	d00a      	beq.n	8009756 <UART_SetConfig+0x1a2>
 8009740:	2b20      	cmp	r3, #32
 8009742:	d814      	bhi.n	800976e <UART_SetConfig+0x1ba>
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <UART_SetConfig+0x19a>
 8009748:	2b10      	cmp	r3, #16
 800974a:	d008      	beq.n	800975e <UART_SetConfig+0x1aa>
 800974c:	e00f      	b.n	800976e <UART_SetConfig+0x1ba>
 800974e:	2300      	movs	r3, #0
 8009750:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009754:	e0ad      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009756:	2302      	movs	r3, #2
 8009758:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800975c:	e0a9      	b.n	80098b2 <UART_SetConfig+0x2fe>
 800975e:	2304      	movs	r3, #4
 8009760:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009764:	e0a5      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009766:	2308      	movs	r3, #8
 8009768:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800976c:	e0a1      	b.n	80098b2 <UART_SetConfig+0x2fe>
 800976e:	2310      	movs	r3, #16
 8009770:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009774:	e09d      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a4a      	ldr	r2, [pc, #296]	@ (80098a4 <UART_SetConfig+0x2f0>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d125      	bne.n	80097cc <UART_SetConfig+0x218>
 8009780:	4b45      	ldr	r3, [pc, #276]	@ (8009898 <UART_SetConfig+0x2e4>)
 8009782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009786:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800978a:	2bc0      	cmp	r3, #192	@ 0xc0
 800978c:	d016      	beq.n	80097bc <UART_SetConfig+0x208>
 800978e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009790:	d818      	bhi.n	80097c4 <UART_SetConfig+0x210>
 8009792:	2b80      	cmp	r3, #128	@ 0x80
 8009794:	d00a      	beq.n	80097ac <UART_SetConfig+0x1f8>
 8009796:	2b80      	cmp	r3, #128	@ 0x80
 8009798:	d814      	bhi.n	80097c4 <UART_SetConfig+0x210>
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <UART_SetConfig+0x1f0>
 800979e:	2b40      	cmp	r3, #64	@ 0x40
 80097a0:	d008      	beq.n	80097b4 <UART_SetConfig+0x200>
 80097a2:	e00f      	b.n	80097c4 <UART_SetConfig+0x210>
 80097a4:	2300      	movs	r3, #0
 80097a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097aa:	e082      	b.n	80098b2 <UART_SetConfig+0x2fe>
 80097ac:	2302      	movs	r3, #2
 80097ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097b2:	e07e      	b.n	80098b2 <UART_SetConfig+0x2fe>
 80097b4:	2304      	movs	r3, #4
 80097b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ba:	e07a      	b.n	80098b2 <UART_SetConfig+0x2fe>
 80097bc:	2308      	movs	r3, #8
 80097be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097c2:	e076      	b.n	80098b2 <UART_SetConfig+0x2fe>
 80097c4:	2310      	movs	r3, #16
 80097c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ca:	e072      	b.n	80098b2 <UART_SetConfig+0x2fe>
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a35      	ldr	r2, [pc, #212]	@ (80098a8 <UART_SetConfig+0x2f4>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d12a      	bne.n	800982c <UART_SetConfig+0x278>
 80097d6:	4b30      	ldr	r3, [pc, #192]	@ (8009898 <UART_SetConfig+0x2e4>)
 80097d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097e4:	d01a      	beq.n	800981c <UART_SetConfig+0x268>
 80097e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097ea:	d81b      	bhi.n	8009824 <UART_SetConfig+0x270>
 80097ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097f0:	d00c      	beq.n	800980c <UART_SetConfig+0x258>
 80097f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097f6:	d815      	bhi.n	8009824 <UART_SetConfig+0x270>
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d003      	beq.n	8009804 <UART_SetConfig+0x250>
 80097fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009800:	d008      	beq.n	8009814 <UART_SetConfig+0x260>
 8009802:	e00f      	b.n	8009824 <UART_SetConfig+0x270>
 8009804:	2300      	movs	r3, #0
 8009806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800980a:	e052      	b.n	80098b2 <UART_SetConfig+0x2fe>
 800980c:	2302      	movs	r3, #2
 800980e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009812:	e04e      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009814:	2304      	movs	r3, #4
 8009816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800981a:	e04a      	b.n	80098b2 <UART_SetConfig+0x2fe>
 800981c:	2308      	movs	r3, #8
 800981e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009822:	e046      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009824:	2310      	movs	r3, #16
 8009826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800982a:	e042      	b.n	80098b2 <UART_SetConfig+0x2fe>
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a17      	ldr	r2, [pc, #92]	@ (8009890 <UART_SetConfig+0x2dc>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d13a      	bne.n	80098ac <UART_SetConfig+0x2f8>
 8009836:	4b18      	ldr	r3, [pc, #96]	@ (8009898 <UART_SetConfig+0x2e4>)
 8009838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800983c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009840:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009844:	d01a      	beq.n	800987c <UART_SetConfig+0x2c8>
 8009846:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800984a:	d81b      	bhi.n	8009884 <UART_SetConfig+0x2d0>
 800984c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009850:	d00c      	beq.n	800986c <UART_SetConfig+0x2b8>
 8009852:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009856:	d815      	bhi.n	8009884 <UART_SetConfig+0x2d0>
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <UART_SetConfig+0x2b0>
 800985c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009860:	d008      	beq.n	8009874 <UART_SetConfig+0x2c0>
 8009862:	e00f      	b.n	8009884 <UART_SetConfig+0x2d0>
 8009864:	2300      	movs	r3, #0
 8009866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800986a:	e022      	b.n	80098b2 <UART_SetConfig+0x2fe>
 800986c:	2302      	movs	r3, #2
 800986e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009872:	e01e      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009874:	2304      	movs	r3, #4
 8009876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800987a:	e01a      	b.n	80098b2 <UART_SetConfig+0x2fe>
 800987c:	2308      	movs	r3, #8
 800987e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009882:	e016      	b.n	80098b2 <UART_SetConfig+0x2fe>
 8009884:	2310      	movs	r3, #16
 8009886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800988a:	e012      	b.n	80098b2 <UART_SetConfig+0x2fe>
 800988c:	cfff69f3 	.word	0xcfff69f3
 8009890:	40008000 	.word	0x40008000
 8009894:	40013800 	.word	0x40013800
 8009898:	40021000 	.word	0x40021000
 800989c:	40004400 	.word	0x40004400
 80098a0:	40004800 	.word	0x40004800
 80098a4:	40004c00 	.word	0x40004c00
 80098a8:	40005000 	.word	0x40005000
 80098ac:	2310      	movs	r3, #16
 80098ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4aae      	ldr	r2, [pc, #696]	@ (8009b70 <UART_SetConfig+0x5bc>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	f040 8097 	bne.w	80099ec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80098c2:	2b08      	cmp	r3, #8
 80098c4:	d823      	bhi.n	800990e <UART_SetConfig+0x35a>
 80098c6:	a201      	add	r2, pc, #4	@ (adr r2, 80098cc <UART_SetConfig+0x318>)
 80098c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098cc:	080098f1 	.word	0x080098f1
 80098d0:	0800990f 	.word	0x0800990f
 80098d4:	080098f9 	.word	0x080098f9
 80098d8:	0800990f 	.word	0x0800990f
 80098dc:	080098ff 	.word	0x080098ff
 80098e0:	0800990f 	.word	0x0800990f
 80098e4:	0800990f 	.word	0x0800990f
 80098e8:	0800990f 	.word	0x0800990f
 80098ec:	08009907 	.word	0x08009907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098f0:	f7fd fcb4 	bl	800725c <HAL_RCC_GetPCLK1Freq>
 80098f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098f6:	e010      	b.n	800991a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098f8:	4b9e      	ldr	r3, [pc, #632]	@ (8009b74 <UART_SetConfig+0x5c0>)
 80098fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098fc:	e00d      	b.n	800991a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098fe:	f7fd fc3f 	bl	8007180 <HAL_RCC_GetSysClockFreq>
 8009902:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009904:	e009      	b.n	800991a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800990a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800990c:	e005      	b.n	800991a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009918:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800991a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 8130 	beq.w	8009b82 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009926:	4a94      	ldr	r2, [pc, #592]	@ (8009b78 <UART_SetConfig+0x5c4>)
 8009928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800992c:	461a      	mov	r2, r3
 800992e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009930:	fbb3 f3f2 	udiv	r3, r3, r2
 8009934:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	4613      	mov	r3, r2
 800993c:	005b      	lsls	r3, r3, #1
 800993e:	4413      	add	r3, r2
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	429a      	cmp	r2, r3
 8009944:	d305      	bcc.n	8009952 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	429a      	cmp	r2, r3
 8009950:	d903      	bls.n	800995a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009958:	e113      	b.n	8009b82 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800995a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995c:	2200      	movs	r2, #0
 800995e:	60bb      	str	r3, [r7, #8]
 8009960:	60fa      	str	r2, [r7, #12]
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009966:	4a84      	ldr	r2, [pc, #528]	@ (8009b78 <UART_SetConfig+0x5c4>)
 8009968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800996c:	b29b      	uxth	r3, r3
 800996e:	2200      	movs	r2, #0
 8009970:	603b      	str	r3, [r7, #0]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009978:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800997c:	f7f6 fd6c 	bl	8000458 <__aeabi_uldivmod>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4610      	mov	r0, r2
 8009986:	4619      	mov	r1, r3
 8009988:	f04f 0200 	mov.w	r2, #0
 800998c:	f04f 0300 	mov.w	r3, #0
 8009990:	020b      	lsls	r3, r1, #8
 8009992:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009996:	0202      	lsls	r2, r0, #8
 8009998:	6979      	ldr	r1, [r7, #20]
 800999a:	6849      	ldr	r1, [r1, #4]
 800999c:	0849      	lsrs	r1, r1, #1
 800999e:	2000      	movs	r0, #0
 80099a0:	460c      	mov	r4, r1
 80099a2:	4605      	mov	r5, r0
 80099a4:	eb12 0804 	adds.w	r8, r2, r4
 80099a8:	eb43 0905 	adc.w	r9, r3, r5
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	469a      	mov	sl, r3
 80099b4:	4693      	mov	fp, r2
 80099b6:	4652      	mov	r2, sl
 80099b8:	465b      	mov	r3, fp
 80099ba:	4640      	mov	r0, r8
 80099bc:	4649      	mov	r1, r9
 80099be:	f7f6 fd4b 	bl	8000458 <__aeabi_uldivmod>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	4613      	mov	r3, r2
 80099c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099d0:	d308      	bcc.n	80099e4 <UART_SetConfig+0x430>
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099d8:	d204      	bcs.n	80099e4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6a3a      	ldr	r2, [r7, #32]
 80099e0:	60da      	str	r2, [r3, #12]
 80099e2:	e0ce      	b.n	8009b82 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80099ea:	e0ca      	b.n	8009b82 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	69db      	ldr	r3, [r3, #28]
 80099f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099f4:	d166      	bne.n	8009ac4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80099f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80099fa:	2b08      	cmp	r3, #8
 80099fc:	d827      	bhi.n	8009a4e <UART_SetConfig+0x49a>
 80099fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009a04 <UART_SetConfig+0x450>)
 8009a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a04:	08009a29 	.word	0x08009a29
 8009a08:	08009a31 	.word	0x08009a31
 8009a0c:	08009a39 	.word	0x08009a39
 8009a10:	08009a4f 	.word	0x08009a4f
 8009a14:	08009a3f 	.word	0x08009a3f
 8009a18:	08009a4f 	.word	0x08009a4f
 8009a1c:	08009a4f 	.word	0x08009a4f
 8009a20:	08009a4f 	.word	0x08009a4f
 8009a24:	08009a47 	.word	0x08009a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a28:	f7fd fc18 	bl	800725c <HAL_RCC_GetPCLK1Freq>
 8009a2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a2e:	e014      	b.n	8009a5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a30:	f7fd fc2a 	bl	8007288 <HAL_RCC_GetPCLK2Freq>
 8009a34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a36:	e010      	b.n	8009a5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a38:	4b4e      	ldr	r3, [pc, #312]	@ (8009b74 <UART_SetConfig+0x5c0>)
 8009a3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a3c:	e00d      	b.n	8009a5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a3e:	f7fd fb9f 	bl	8007180 <HAL_RCC_GetSysClockFreq>
 8009a42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a44:	e009      	b.n	8009a5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a4c:	e005      	b.n	8009a5a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f000 8090 	beq.w	8009b82 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a66:	4a44      	ldr	r2, [pc, #272]	@ (8009b78 <UART_SetConfig+0x5c4>)
 8009a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a74:	005a      	lsls	r2, r3, #1
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	085b      	lsrs	r3, r3, #1
 8009a7c:	441a      	add	r2, r3
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a88:	6a3b      	ldr	r3, [r7, #32]
 8009a8a:	2b0f      	cmp	r3, #15
 8009a8c:	d916      	bls.n	8009abc <UART_SetConfig+0x508>
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a94:	d212      	bcs.n	8009abc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a96:	6a3b      	ldr	r3, [r7, #32]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	f023 030f 	bic.w	r3, r3, #15
 8009a9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009aa0:	6a3b      	ldr	r3, [r7, #32]
 8009aa2:	085b      	lsrs	r3, r3, #1
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	8bfb      	ldrh	r3, [r7, #30]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	8bfa      	ldrh	r2, [r7, #30]
 8009ab8:	60da      	str	r2, [r3, #12]
 8009aba:	e062      	b.n	8009b82 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ac2:	e05e      	b.n	8009b82 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ac4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d828      	bhi.n	8009b1e <UART_SetConfig+0x56a>
 8009acc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad4 <UART_SetConfig+0x520>)
 8009ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad2:	bf00      	nop
 8009ad4:	08009af9 	.word	0x08009af9
 8009ad8:	08009b01 	.word	0x08009b01
 8009adc:	08009b09 	.word	0x08009b09
 8009ae0:	08009b1f 	.word	0x08009b1f
 8009ae4:	08009b0f 	.word	0x08009b0f
 8009ae8:	08009b1f 	.word	0x08009b1f
 8009aec:	08009b1f 	.word	0x08009b1f
 8009af0:	08009b1f 	.word	0x08009b1f
 8009af4:	08009b17 	.word	0x08009b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009af8:	f7fd fbb0 	bl	800725c <HAL_RCC_GetPCLK1Freq>
 8009afc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009afe:	e014      	b.n	8009b2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b00:	f7fd fbc2 	bl	8007288 <HAL_RCC_GetPCLK2Freq>
 8009b04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b06:	e010      	b.n	8009b2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b08:	4b1a      	ldr	r3, [pc, #104]	@ (8009b74 <UART_SetConfig+0x5c0>)
 8009b0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b0c:	e00d      	b.n	8009b2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b0e:	f7fd fb37 	bl	8007180 <HAL_RCC_GetSysClockFreq>
 8009b12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b14:	e009      	b.n	8009b2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b1c:	e005      	b.n	8009b2a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b28:	bf00      	nop
    }

    if (pclk != 0U)
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d028      	beq.n	8009b82 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b34:	4a10      	ldr	r2, [pc, #64]	@ (8009b78 <UART_SetConfig+0x5c4>)
 8009b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	085b      	lsrs	r3, r3, #1
 8009b48:	441a      	add	r2, r3
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	2b0f      	cmp	r3, #15
 8009b58:	d910      	bls.n	8009b7c <UART_SetConfig+0x5c8>
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b60:	d20c      	bcs.n	8009b7c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	60da      	str	r2, [r3, #12]
 8009b6c:	e009      	b.n	8009b82 <UART_SetConfig+0x5ce>
 8009b6e:	bf00      	nop
 8009b70:	40008000 	.word	0x40008000
 8009b74:	00f42400 	.word	0x00f42400
 8009b78:	0800c508 	.word	0x0800c508
      }
      else
      {
        ret = HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2200      	movs	r2, #0
 8009b96:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009b9e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3730      	adds	r7, #48	@ 0x30
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009bac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb8:	f003 0308 	and.w	r3, r3, #8
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00a      	beq.n	8009bd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	430a      	orrs	r2, r1
 8009bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00a      	beq.n	8009bf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bfc:	f003 0302 	and.w	r3, r3, #2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00a      	beq.n	8009c1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c1e:	f003 0304 	and.w	r3, r3, #4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00a      	beq.n	8009c3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c40:	f003 0310 	and.w	r3, r3, #16
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00a      	beq.n	8009c5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c62:	f003 0320 	and.w	r3, r3, #32
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d01a      	beq.n	8009cc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009caa:	d10a      	bne.n	8009cc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00a      	beq.n	8009ce4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	605a      	str	r2, [r3, #4]
  }
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b098      	sub	sp, #96	@ 0x60
 8009cf4:	af02      	add	r7, sp, #8
 8009cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d00:	f7f8 ffbe 	bl	8002c80 <HAL_GetTick>
 8009d04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0308 	and.w	r3, r3, #8
 8009d10:	2b08      	cmp	r3, #8
 8009d12:	d12f      	bne.n	8009d74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f88e 	bl	8009e44 <UART_WaitOnFlagUntilTimeout>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d022      	beq.n	8009d74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d54:	e841 2300 	strex	r3, r2, [r1]
 8009d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e6      	bne.n	8009d2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2220      	movs	r2, #32
 8009d64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e063      	b.n	8009e3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 0304 	and.w	r3, r3, #4
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d149      	bne.n	8009e16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f857 	bl	8009e44 <UART_WaitOnFlagUntilTimeout>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d03c      	beq.n	8009e16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da4:	e853 3f00 	ldrex	r3, [r3]
 8009da8:	623b      	str	r3, [r7, #32]
   return(result);
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dba:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dc2:	e841 2300 	strex	r3, r2, [r1]
 8009dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e6      	bne.n	8009d9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	e853 3f00 	ldrex	r3, [r3]
 8009ddc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f023 0301 	bic.w	r3, r3, #1
 8009de4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	3308      	adds	r3, #8
 8009dec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dee:	61fa      	str	r2, [r7, #28]
 8009df0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df2:	69b9      	ldr	r1, [r7, #24]
 8009df4:	69fa      	ldr	r2, [r7, #28]
 8009df6:	e841 2300 	strex	r3, r2, [r1]
 8009dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1e5      	bne.n	8009dce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2220      	movs	r2, #32
 8009e06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e012      	b.n	8009e3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2220      	movs	r2, #32
 8009e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2220      	movs	r2, #32
 8009e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3758      	adds	r7, #88	@ 0x58
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	4613      	mov	r3, r2
 8009e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e54:	e04f      	b.n	8009ef6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5c:	d04b      	beq.n	8009ef6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e5e:	f7f8 ff0f 	bl	8002c80 <HAL_GetTick>
 8009e62:	4602      	mov	r2, r0
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	69ba      	ldr	r2, [r7, #24]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d302      	bcc.n	8009e74 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e04e      	b.n	8009f16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0304 	and.w	r3, r3, #4
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d037      	beq.n	8009ef6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2b80      	cmp	r3, #128	@ 0x80
 8009e8a:	d034      	beq.n	8009ef6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	2b40      	cmp	r3, #64	@ 0x40
 8009e90:	d031      	beq.n	8009ef6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	f003 0308 	and.w	r3, r3, #8
 8009e9c:	2b08      	cmp	r3, #8
 8009e9e:	d110      	bne.n	8009ec2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2208      	movs	r2, #8
 8009ea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f000 f838 	bl	8009f1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2208      	movs	r2, #8
 8009eb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e029      	b.n	8009f16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	69db      	ldr	r3, [r3, #28]
 8009ec8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ed0:	d111      	bne.n	8009ef6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 f81e 	bl	8009f1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e00f      	b.n	8009f16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	69da      	ldr	r2, [r3, #28]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	4013      	ands	r3, r2
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	bf0c      	ite	eq
 8009f06:	2301      	moveq	r3, #1
 8009f08:	2300      	movne	r3, #0
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	79fb      	ldrb	r3, [r7, #7]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d0a0      	beq.n	8009e56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b095      	sub	sp, #84	@ 0x54
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2e:	e853 3f00 	ldrex	r3, [r3]
 8009f32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	461a      	mov	r2, r3
 8009f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f44:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f4c:	e841 2300 	strex	r3, r2, [r1]
 8009f50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1e6      	bne.n	8009f26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3308      	adds	r3, #8
 8009f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f60:	6a3b      	ldr	r3, [r7, #32]
 8009f62:	e853 3f00 	ldrex	r3, [r3]
 8009f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f6e:	f023 0301 	bic.w	r3, r3, #1
 8009f72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3308      	adds	r3, #8
 8009f7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f84:	e841 2300 	strex	r3, r2, [r1]
 8009f88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1e3      	bne.n	8009f58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d118      	bne.n	8009fca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	e853 3f00 	ldrex	r3, [r3]
 8009fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f023 0310 	bic.w	r3, r3, #16
 8009fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fb6:	61bb      	str	r3, [r7, #24]
 8009fb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fba:	6979      	ldr	r1, [r7, #20]
 8009fbc:	69ba      	ldr	r2, [r7, #24]
 8009fbe:	e841 2300 	strex	r3, r2, [r1]
 8009fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1e6      	bne.n	8009f98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009fde:	bf00      	nop
 8009fe0:	3754      	adds	r7, #84	@ 0x54
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b085      	sub	sp, #20
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d101      	bne.n	800a000 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e027      	b.n	800a050 <HAL_UARTEx_DisableFifoMode+0x66>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2224      	movs	r2, #36	@ 0x24
 800a00c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0201 	bic.w	r2, r2, #1
 800a026:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a02e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2220      	movs	r2, #32
 800a042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d101      	bne.n	800a074 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a070:	2302      	movs	r3, #2
 800a072:	e02d      	b.n	800a0d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2224      	movs	r2, #36	@ 0x24
 800a080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f022 0201 	bic.w	r2, r2, #1
 800a09a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	430a      	orrs	r2, r1
 800a0ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f84f 	bl	800a154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d101      	bne.n	800a0f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	e02d      	b.n	800a14c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2224      	movs	r2, #36	@ 0x24
 800a0fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f022 0201 	bic.w	r2, r2, #1
 800a116:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	430a      	orrs	r2, r1
 800a12a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f811 	bl	800a154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2220      	movs	r2, #32
 800a13e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a160:	2b00      	cmp	r3, #0
 800a162:	d108      	bne.n	800a176 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a174:	e031      	b.n	800a1da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a176:	2308      	movs	r3, #8
 800a178:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a17a:	2308      	movs	r3, #8
 800a17c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	0e5b      	lsrs	r3, r3, #25
 800a186:	b2db      	uxtb	r3, r3
 800a188:	f003 0307 	and.w	r3, r3, #7
 800a18c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	0f5b      	lsrs	r3, r3, #29
 800a196:	b2db      	uxtb	r3, r3
 800a198:	f003 0307 	and.w	r3, r3, #7
 800a19c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	7b3a      	ldrb	r2, [r7, #12]
 800a1a2:	4911      	ldr	r1, [pc, #68]	@ (800a1e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a1a4:	5c8a      	ldrb	r2, [r1, r2]
 800a1a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1aa:	7b3a      	ldrb	r2, [r7, #12]
 800a1ac:	490f      	ldr	r1, [pc, #60]	@ (800a1ec <UARTEx_SetNbDataToProcess+0x98>)
 800a1ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
 800a1be:	7b7a      	ldrb	r2, [r7, #13]
 800a1c0:	4909      	ldr	r1, [pc, #36]	@ (800a1e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a1c2:	5c8a      	ldrb	r2, [r1, r2]
 800a1c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1c8:	7b7a      	ldrb	r2, [r7, #13]
 800a1ca:	4908      	ldr	r1, [pc, #32]	@ (800a1ec <UARTEx_SetNbDataToProcess+0x98>)
 800a1cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a1da:	bf00      	nop
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	0800c520 	.word	0x0800c520
 800a1ec:	0800c528 	.word	0x0800c528

0800a1f0 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b096      	sub	sp, #88	@ 0x58
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	3303      	adds	r3, #3
 800a202:	f023 0303 	bic.w	r3, r3, #3
 800a206:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a208:	f3ef 8310 	mrs	r3, PRIMASK
 800a20c:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 800a20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800a210:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800a212:	b672      	cpsid	i
#endif
    return(int_posture);
 800a214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800a216:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a218:	4b55      	ldr	r3, [pc, #340]	@ (800a370 <_tx_byte_allocate+0x180>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800a21e:	2300      	movs	r3, #0
 800a220:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a226:	621a      	str	r2, [r3, #32]
 800a228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a22a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22e:	f383 8810 	msr	PRIMASK, r3
}
 800a232:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800a234:	6879      	ldr	r1, [r7, #4]
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f000 f9b2 	bl	800a5a0 <_tx_byte_pool_search>
 800a23c:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a23e:	f3ef 8310 	mrs	r3, PRIMASK
 800a242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a246:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a248:	b672      	cpsid	i
    return(int_posture);
 800a24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800a24c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800a24e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800a254:	2301      	movs	r3, #1
 800a256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a258:	e006      	b.n	800a268 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a260:	429a      	cmp	r2, r3
 800a262:	d101      	bne.n	800a268 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800a264:	2301      	movs	r3, #1
 800a266:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800a268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0d9      	beq.n	800a222 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a272:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800a274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a276:	2b00      	cmp	r3, #0
 800a278:	d008      	beq.n	800a28c <_tx_byte_allocate+0x9c>
 800a27a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a27c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	f383 8810 	msr	PRIMASK, r3
}
 800a284:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800a286:	2300      	movs	r3, #0
 800a288:	653b      	str	r3, [r7, #80]	@ 0x50
 800a28a:	e06c      	b.n	800a366 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d061      	beq.n	800a356 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800a292:	4b38      	ldr	r3, [pc, #224]	@ (800a374 <_tx_byte_allocate+0x184>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d007      	beq.n	800a2aa <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800a29a:	2310      	movs	r3, #16
 800a29c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2a0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	f383 8810 	msr	PRIMASK, r3
}
 800a2a8:	e05d      	b.n	800a366 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800a2aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2ac:	4a32      	ldr	r2, [pc, #200]	@ (800a378 <_tx_byte_allocate+0x188>)
 800a2ae:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800a2b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800a2b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800a2bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800a2c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2cc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d4:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2da:	1c5a      	adds	r2, r3, #1
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800a2e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d109      	bne.n	800a2fa <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2ea:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800a2ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2f0:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800a2f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2f6:	675a      	str	r2, [r3, #116]	@ 0x74
 800a2f8:	e011      	b.n	800a31e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800a300:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a302:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a304:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800a306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a30a:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800a30c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a30e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a310:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800a312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a314:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a316:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800a318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a31a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a31c:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800a31e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a320:	2209      	movs	r2, #9
 800a322:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a326:	2201      	movs	r2, #1
 800a328:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a32a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800a330:	4b10      	ldr	r3, [pc, #64]	@ (800a374 <_tx_byte_allocate+0x184>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3301      	adds	r3, #1
 800a336:	4a0f      	ldr	r2, [pc, #60]	@ (800a374 <_tx_byte_allocate+0x184>)
 800a338:	6013      	str	r3, [r2, #0]
 800a33a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a33c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	f383 8810 	msr	PRIMASK, r3
}
 800a344:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a346:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800a348:	f000 ff96 	bl	800b278 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800a34c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a34e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a352:	653b      	str	r3, [r7, #80]	@ 0x50
 800a354:	e007      	b.n	800a366 <_tx_byte_allocate+0x176>
 800a356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a358:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f383 8810 	msr	PRIMASK, r3
}
 800a360:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800a362:	2310      	movs	r3, #16
 800a364:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800a366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3758      	adds	r7, #88	@ 0x58
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	20010908 	.word	0x20010908
 800a374:	200109a0 	.word	0x200109a0
 800a378:	0800a37d 	.word	0x0800a37d

0800a37c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08e      	sub	sp, #56	@ 0x38
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a386:	f3ef 8310 	mrs	r3, PRIMASK
 800a38a:	623b      	str	r3, [r7, #32]
    return(posture);
 800a38c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a38e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a390:	b672      	cpsid	i
    return(int_posture);
 800a392:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800a394:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a39a:	4a33      	ldr	r2, [pc, #204]	@ (800a468 <_tx_byte_pool_cleanup+0xec>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d158      	bne.n	800a452 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d152      	bne.n	800a452 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3b0:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d04c      	beq.n	800a452 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a2b      	ldr	r2, [pc, #172]	@ (800a46c <_tx_byte_pool_cleanup+0xf0>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d147      	bne.n	800a452 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d043      	beq.n	800a452 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d4:	1e5a      	subs	r2, r3, #1
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d8:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3de:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800a3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d103      	bne.n	800a3ee <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	625a      	str	r2, [r3, #36]	@ 0x24
 800a3ec:	e013      	b.n	800a416 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3f8:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3fe:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a404:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800a406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d102      	bne.n	800a416 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800a410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a412:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a414:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a41a:	2b09      	cmp	r3, #9
 800a41c:	d119      	bne.n	800a452 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2210      	movs	r2, #16
 800a422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a426:	4b12      	ldr	r3, [pc, #72]	@ (800a470 <_tx_byte_pool_cleanup+0xf4>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3301      	adds	r3, #1
 800a42c:	4a10      	ldr	r2, [pc, #64]	@ (800a470 <_tx_byte_pool_cleanup+0xf4>)
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a432:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	f383 8810 	msr	PRIMASK, r3
}
 800a43a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 fe1b 	bl	800b078 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a442:	f3ef 8310 	mrs	r3, PRIMASK
 800a446:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a448:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a44a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a44c:	b672      	cpsid	i
    return(int_posture);
 800a44e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800a450:	637b      	str	r3, [r7, #52]	@ 0x34
 800a452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a454:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f383 8810 	msr	PRIMASK, r3
}
 800a45c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a45e:	bf00      	nop
 800a460:	3738      	adds	r7, #56	@ 0x38
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	0800a37d 	.word	0x0800a37d
 800a46c:	42595445 	.word	0x42595445
 800a470:	200109a0 	.word	0x200109a0

0800a474 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b08e      	sub	sp, #56	@ 0x38
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
 800a480:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800a482:	2234      	movs	r2, #52	@ 0x34
 800a484:	2100      	movs	r1, #0
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f001 ff3c 	bl	800c304 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	f023 0303 	bic.w	r3, r3, #3
 800a492:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	f1a3 0208 	sub.w	r2, r3, #8
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2202      	movs	r2, #2
 800a4c0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800a4c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800a4ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4d0:	3b04      	subs	r3, #4
 800a4d2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800a4d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800a4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4e0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800a4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4e4:	3b04      	subs	r3, #4
 800a4e6:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800a4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800a4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4fe:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800a504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a506:	3304      	adds	r3, #4
 800a508:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800a50a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800a50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a510:	4a1f      	ldr	r2, [pc, #124]	@ (800a590 <_tx_byte_pool_create+0x11c>)
 800a512:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a51a:	f3ef 8310 	mrs	r3, PRIMASK
 800a51e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a520:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a522:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a524:	b672      	cpsid	i
    return(int_posture);
 800a526:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800a528:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4a19      	ldr	r2, [pc, #100]	@ (800a594 <_tx_byte_pool_create+0x120>)
 800a52e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800a530:	4b19      	ldr	r3, [pc, #100]	@ (800a598 <_tx_byte_pool_create+0x124>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d109      	bne.n	800a54c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800a538:	4a18      	ldr	r2, [pc, #96]	@ (800a59c <_tx_byte_pool_create+0x128>)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	631a      	str	r2, [r3, #48]	@ 0x30
 800a54a:	e011      	b.n	800a570 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800a54c:	4b13      	ldr	r3, [pc, #76]	@ (800a59c <_tx_byte_pool_create+0x128>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800a552:	6a3b      	ldr	r3, [r7, #32]
 800a554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a556:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800a558:	6a3b      	ldr	r3, [r7, #32]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	69fa      	ldr	r2, [r7, #28]
 800a568:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6a3a      	ldr	r2, [r7, #32]
 800a56e:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800a570:	4b09      	ldr	r3, [pc, #36]	@ (800a598 <_tx_byte_pool_create+0x124>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	3301      	adds	r3, #1
 800a576:	4a08      	ldr	r2, [pc, #32]	@ (800a598 <_tx_byte_pool_create+0x124>)
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	f383 8810 	msr	PRIMASK, r3
}
 800a584:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3738      	adds	r7, #56	@ 0x38
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	ffffeeee 	.word	0xffffeeee
 800a594:	42595445 	.word	0x42595445
 800a598:	200108fc 	.word	0x200108fc
 800a59c:	200108f8 	.word	0x200108f8

0800a5a0 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b097      	sub	sp, #92	@ 0x5c
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a5ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a5b2:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800a5b6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a5b8:	b672      	cpsid	i
    return(int_posture);
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800a5bc:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	689a      	ldr	r2, [r3, #8]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	3b02      	subs	r3, #2
 800a5c8:	00db      	lsls	r3, r3, #3
 800a5ca:	4413      	add	r3, r2
 800a5cc:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d308      	bcc.n	800a5e8 <_tx_byte_pool_search+0x48>
 800a5d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5d8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	f383 8810 	msr	PRIMASK, r3
}
 800a5e0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5e6:	e0dd      	b.n	800a7a4 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a5e8:	4b72      	ldr	r3, [pc, #456]	@ (800a7b4 <_tx_byte_pool_search+0x214>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a5f2:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	3301      	adds	r3, #1
 800a600:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800a602:	2300      	movs	r3, #0
 800a604:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800a606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a608:	3304      	adds	r3, #4
 800a60a:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800a60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60e:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800a610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a68      	ldr	r2, [pc, #416]	@ (800a7b8 <_tx_byte_pool_search+0x218>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d143      	bne.n	800a6a2 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800a61a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d104      	bne.n	800a62a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a624:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800a626:	2301      	movs	r3, #1
 800a628:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800a62a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a62c:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800a62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800a634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800a63c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a63e:	3b08      	subs	r3, #8
 800a640:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800a642:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	429a      	cmp	r2, r3
 800a648:	d257      	bcs.n	800a6fa <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800a64a:	2300      	movs	r3, #0
 800a64c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800a64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a650:	3304      	adds	r3, #4
 800a652:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800a654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a656:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800a658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a56      	ldr	r2, [pc, #344]	@ (800a7b8 <_tx_byte_pool_search+0x218>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d113      	bne.n	800a68a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800a662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a664:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800a666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	1e5a      	subs	r2, r3, #1
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	695b      	ldr	r3, [r3, #20]
 800a67c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a67e:	429a      	cmp	r2, r3
 800a680:	d114      	bne.n	800a6ac <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a686:	615a      	str	r2, [r3, #20]
 800a688:	e010      	b.n	800a6ac <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800a68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a68c:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 800a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800a694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a696:	2b00      	cmp	r3, #0
 800a698:	d008      	beq.n	800a6ac <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800a69a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a69c:	3b01      	subs	r3, #1
 800a69e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6a0:	e004      	b.n	800a6ac <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800a6a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6a4:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800a6ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800a6b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	f383 8810 	msr	PRIMASK, r3
}
 800a6c2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a6c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a6c8:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a6ca:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a6cc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a6ce:	b672      	cpsid	i
    return(int_posture);
 800a6d0:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800a6d2:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a1b      	ldr	r3, [r3, #32]
 800a6d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d009      	beq.n	800a6f2 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a6f0:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800a6f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d186      	bne.n	800a606 <_tx_byte_pool_search+0x66>
 800a6f8:	e000      	b.n	800a6fc <_tx_byte_pool_search+0x15c>
                    break;
 800a6fa:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800a6fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d048      	beq.n	800a794 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800a702:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	2b13      	cmp	r3, #19
 800a70a:	d91e      	bls.n	800a74a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	3308      	adds	r3, #8
 800a710:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a712:	4413      	add	r3, r2
 800a714:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800a716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a718:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800a71a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a71c:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800a71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a724:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800a726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a728:	3304      	adds	r3, #4
 800a72a:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800a72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a72e:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800a730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a732:	4a21      	ldr	r2, [pc, #132]	@ (800a7b8 <_tx_byte_pool_search+0x218>)
 800a734:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	1c5a      	adds	r2, r3, #1
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800a740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a744:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800a74a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a74c:	3304      	adds	r3, #4
 800a74e:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800a750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a752:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800a754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	689a      	ldr	r2, [r3, #8]
 800a75e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	f1a3 0208 	sub.w	r2, r3, #8
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a770:	429a      	cmp	r2, r3
 800a772:	d105      	bne.n	800a780 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800a774:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a776:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800a778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	615a      	str	r2, [r3, #20]
 800a780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a782:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f383 8810 	msr	PRIMASK, r3
}
 800a78a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800a78c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a78e:	3308      	adds	r3, #8
 800a790:	653b      	str	r3, [r7, #80]	@ 0x50
 800a792:	e007      	b.n	800a7a4 <_tx_byte_pool_search+0x204>
 800a794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a796:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	f383 8810 	msr	PRIMASK, r3
}
 800a79e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800a7a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	375c      	adds	r7, #92	@ 0x5c
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	20010908 	.word	0x20010908
 800a7b8:	ffffeeee 	.word	0xffffeeee

0800a7bc <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800a7c0:	f000 fb18 	bl	800adf4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800a7c4:	f001 f81c 	bl	800b800 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800a7c8:	4b12      	ldr	r3, [pc, #72]	@ (800a814 <_tx_initialize_high_level+0x58>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	4b12      	ldr	r3, [pc, #72]	@ (800a818 <_tx_initialize_high_level+0x5c>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800a7d4:	4b11      	ldr	r3, [pc, #68]	@ (800a81c <_tx_initialize_high_level+0x60>)
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	601a      	str	r2, [r3, #0]
 800a7da:	4b11      	ldr	r3, [pc, #68]	@ (800a820 <_tx_initialize_high_level+0x64>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800a7e0:	4b10      	ldr	r3, [pc, #64]	@ (800a824 <_tx_initialize_high_level+0x68>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	4b10      	ldr	r3, [pc, #64]	@ (800a828 <_tx_initialize_high_level+0x6c>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800a7ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a82c <_tx_initialize_high_level+0x70>)
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	601a      	str	r2, [r3, #0]
 800a7f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a830 <_tx_initialize_high_level+0x74>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800a7f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a834 <_tx_initialize_high_level+0x78>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a838 <_tx_initialize_high_level+0x7c>)
 800a800:	2200      	movs	r2, #0
 800a802:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800a804:	4b0d      	ldr	r3, [pc, #52]	@ (800a83c <_tx_initialize_high_level+0x80>)
 800a806:	2200      	movs	r2, #0
 800a808:	601a      	str	r2, [r3, #0]
 800a80a:	4b0d      	ldr	r3, [pc, #52]	@ (800a840 <_tx_initialize_high_level+0x84>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	601a      	str	r2, [r3, #0]
#endif
}
 800a810:	bf00      	nop
 800a812:	bd80      	pop	{r7, pc}
 800a814:	200108d0 	.word	0x200108d0
 800a818:	200108d4 	.word	0x200108d4
 800a81c:	200108d8 	.word	0x200108d8
 800a820:	200108dc 	.word	0x200108dc
 800a824:	200108e0 	.word	0x200108e0
 800a828:	200108e4 	.word	0x200108e4
 800a82c:	200108f0 	.word	0x200108f0
 800a830:	200108f4 	.word	0x200108f4
 800a834:	200108f8 	.word	0x200108f8
 800a838:	200108fc 	.word	0x200108fc
 800a83c:	200108e8 	.word	0x200108e8
 800a840:	200108ec 	.word	0x200108ec

0800a844 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800a848:	4b10      	ldr	r3, [pc, #64]	@ (800a88c <_tx_initialize_kernel_enter+0x48>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800a850:	d00c      	beq.n	800a86c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800a852:	4b0e      	ldr	r3, [pc, #56]	@ (800a88c <_tx_initialize_kernel_enter+0x48>)
 800a854:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800a858:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800a85a:	f7f5 fce1 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800a85e:	f7ff ffad 	bl	800a7bc <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800a862:	4b0b      	ldr	r3, [pc, #44]	@ (800a890 <_tx_initialize_kernel_enter+0x4c>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	3301      	adds	r3, #1
 800a868:	4a09      	ldr	r2, [pc, #36]	@ (800a890 <_tx_initialize_kernel_enter+0x4c>)
 800a86a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800a86c:	4b07      	ldr	r3, [pc, #28]	@ (800a88c <_tx_initialize_kernel_enter+0x48>)
 800a86e:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800a872:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800a874:	4b07      	ldr	r3, [pc, #28]	@ (800a894 <_tx_initialize_kernel_enter+0x50>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4618      	mov	r0, r3
 800a87a:	f7f5 ff65 	bl	8000748 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800a87e:	4b03      	ldr	r3, [pc, #12]	@ (800a88c <_tx_initialize_kernel_enter+0x48>)
 800a880:	2200      	movs	r2, #0
 800a882:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800a884:	f7f5 fd0c 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800a888:	bf00      	nop
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	2000000c 	.word	0x2000000c
 800a890:	200109a0 	.word	0x200109a0
 800a894:	20010900 	.word	0x20010900

0800a898 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b08e      	sub	sp, #56	@ 0x38
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800a8a6:	623b      	str	r3, [r7, #32]
    return(posture);
 800a8a8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a8aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a8ac:	b672      	cpsid	i
    return(int_posture);
 800a8ae:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800a8b0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8b6:	4a33      	ldr	r2, [pc, #204]	@ (800a984 <_tx_semaphore_cleanup+0xec>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d158      	bne.n	800a96e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d152      	bne.n	800a96e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8cc:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d04c      	beq.n	800a96e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a2b      	ldr	r2, [pc, #172]	@ (800a988 <_tx_semaphore_cleanup+0xf0>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d147      	bne.n	800a96e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800a8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d043      	beq.n	800a96e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	1e5a      	subs	r2, r3, #1
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f4:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800a8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d103      	bne.n	800a90a <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800a902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a904:	2200      	movs	r2, #0
 800a906:	60da      	str	r2, [r3, #12]
 800a908:	e013      	b.n	800a932 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a90e:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a914:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a91a:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a920:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800a922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d102      	bne.n	800a932 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800a92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a930:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a936:	2b06      	cmp	r3, #6
 800a938:	d119      	bne.n	800a96e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	220d      	movs	r2, #13
 800a93e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a942:	4b12      	ldr	r3, [pc, #72]	@ (800a98c <_tx_semaphore_cleanup+0xf4>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3301      	adds	r3, #1
 800a948:	4a10      	ldr	r2, [pc, #64]	@ (800a98c <_tx_semaphore_cleanup+0xf4>)
 800a94a:	6013      	str	r3, [r2, #0]
 800a94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a94e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f383 8810 	msr	PRIMASK, r3
}
 800a956:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fb8d 	bl	800b078 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a95e:	f3ef 8310 	mrs	r3, PRIMASK
 800a962:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a964:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a966:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a968:	b672      	cpsid	i
    return(int_posture);
 800a96a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800a96c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a970:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f383 8810 	msr	PRIMASK, r3
}
 800a978:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a97a:	bf00      	nop
 800a97c:	3738      	adds	r7, #56	@ 0x38
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	0800a899 	.word	0x0800a899
 800a988:	53454d41 	.word	0x53454d41
 800a98c:	200109a0 	.word	0x200109a0

0800a990 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08a      	sub	sp, #40	@ 0x28
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800a99c:	221c      	movs	r2, #28
 800a99e:	2100      	movs	r1, #0
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f001 fcaf 	bl	800c304 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a9b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a9b6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a9b8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a9ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a9bc:	b672      	cpsid	i
    return(int_posture);
 800a9be:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800a9c0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4a18      	ldr	r2, [pc, #96]	@ (800aa28 <_tx_semaphore_create+0x98>)
 800a9c6:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800a9c8:	4b18      	ldr	r3, [pc, #96]	@ (800aa2c <_tx_semaphore_create+0x9c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d109      	bne.n	800a9e4 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800a9d0:	4a17      	ldr	r2, [pc, #92]	@ (800aa30 <_tx_semaphore_create+0xa0>)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	619a      	str	r2, [r3, #24]
 800a9e2:	e011      	b.n	800aa08 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800a9e4:	4b12      	ldr	r3, [pc, #72]	@ (800aa30 <_tx_semaphore_create+0xa0>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	69fa      	ldr	r2, [r7, #28]
 800aa00:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6a3a      	ldr	r2, [r7, #32]
 800aa06:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800aa08:	4b08      	ldr	r3, [pc, #32]	@ (800aa2c <_tx_semaphore_create+0x9c>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	4a07      	ldr	r2, [pc, #28]	@ (800aa2c <_tx_semaphore_create+0x9c>)
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa14:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	f383 8810 	msr	PRIMASK, r3
}
 800aa1c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3728      	adds	r7, #40	@ 0x28
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	53454d41 	.word	0x53454d41
 800aa2c:	200108d4 	.word	0x200108d4
 800aa30:	200108d0 	.word	0x200108d0

0800aa34 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08e      	sub	sp, #56	@ 0x38
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aa42:	f3ef 8310 	mrs	r3, PRIMASK
 800aa46:	623b      	str	r3, [r7, #32]
    return(posture);
 800aa48:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800aa4a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aa4c:	b672      	cpsid	i
    return(int_posture);
 800aa4e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800aa50:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00a      	beq.n	800aa70 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	1e5a      	subs	r2, r3, #1
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	609a      	str	r2, [r3, #8]
 800aa64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa66:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	f383 8810 	msr	PRIMASK, r3
}
 800aa6e:	e068      	b.n	800ab42 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d05d      	beq.n	800ab32 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800aa76:	4b35      	ldr	r3, [pc, #212]	@ (800ab4c <_tx_semaphore_get+0x118>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d008      	beq.n	800aa90 <_tx_semaphore_get+0x5c>
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa80:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f383 8810 	msr	PRIMASK, r3
}
 800aa88:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800aa8a:	230d      	movs	r3, #13
 800aa8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa8e:	e058      	b.n	800ab42 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800aa90:	4b2f      	ldr	r3, [pc, #188]	@ (800ab50 <_tx_semaphore_get+0x11c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800aa96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa98:	4a2e      	ldr	r2, [pc, #184]	@ (800ab54 <_tx_semaphore_get+0x120>)
 800aa9a:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800aa9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 800aaa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800aaa8:	1c5a      	adds	r2, r3, #1
 800aaaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaac:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d109      	bne.n	800aacc <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aabc:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800aabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aac2:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 800aac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aac8:	675a      	str	r2, [r3, #116]	@ 0x74
 800aaca:	e011      	b.n	800aaf0 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800aad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aad6:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800aad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aadc:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800aade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aae2:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800aae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aae8:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800aaea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aaee:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	1c5a      	adds	r2, r3, #1
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 800aafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafc:	2206      	movs	r2, #6
 800aafe:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ab00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab02:	2201      	movs	r2, #1
 800ab04:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800ab06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800ab0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ab4c <_tx_semaphore_get+0x118>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3301      	adds	r3, #1
 800ab12:	4a0e      	ldr	r2, [pc, #56]	@ (800ab4c <_tx_semaphore_get+0x118>)
 800ab14:	6013      	str	r3, [r2, #0]
 800ab16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab18:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	f383 8810 	msr	PRIMASK, r3
}
 800ab20:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ab22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab24:	f000 fba8 	bl	800b278 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800ab28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab30:	e007      	b.n	800ab42 <_tx_semaphore_get+0x10e>
 800ab32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab34:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f383 8810 	msr	PRIMASK, r3
}
 800ab3c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800ab3e:	230d      	movs	r3, #13
 800ab40:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 800ab42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3738      	adds	r7, #56	@ 0x38
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	200109a0 	.word	0x200109a0
 800ab50:	20010908 	.word	0x20010908
 800ab54:	0800a899 	.word	0x0800a899

0800ab58 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08c      	sub	sp, #48	@ 0x30
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ab60:	f3ef 8310 	mrs	r3, PRIMASK
 800ab64:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ab66:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ab68:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ab6a:	b672      	cpsid	i
    return(int_posture);
 800ab6c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800ab6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800ab76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10a      	bne.n	800ab92 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	1c5a      	adds	r2, r3, #1
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	609a      	str	r2, [r3, #8]
 800ab86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab88:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	f383 8810 	msr	PRIMASK, r3
}
 800ab90:	e033      	b.n	800abfa <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800ab98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800ab9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d103      	bne.n	800abac <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	60da      	str	r2, [r3, #12]
 800abaa:	e00e      	b.n	800abca <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800abac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abb0:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a3a      	ldr	r2, [r7, #32]
 800abb6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800abb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abbc:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	69fa      	ldr	r2, [r7, #28]
 800abc2:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	6a3a      	ldr	r2, [r7, #32]
 800abc8:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abce:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800abd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd2:	2200      	movs	r2, #0
 800abd4:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd8:	2200      	movs	r2, #0
 800abda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800abde:	4b09      	ldr	r3, [pc, #36]	@ (800ac04 <_tx_semaphore_put+0xac>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3301      	adds	r3, #1
 800abe4:	4a07      	ldr	r2, [pc, #28]	@ (800ac04 <_tx_semaphore_put+0xac>)
 800abe6:	6013      	str	r3, [r2, #0]
 800abe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f383 8810 	msr	PRIMASK, r3
}
 800abf2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800abf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800abf6:	f000 fa3f 	bl	800b078 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3730      	adds	r7, #48	@ 0x30
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	200109a0 	.word	0x200109a0

0800ac08 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b092      	sub	sp, #72	@ 0x48
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
 800ac14:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800ac16:	2300      	movs	r3, #0
 800ac18:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800ac1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac1c:	21ef      	movs	r1, #239	@ 0xef
 800ac1e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ac20:	f001 fb70 	bl	800c304 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800ac24:	22b0      	movs	r2, #176	@ 0xb0
 800ac26:	2100      	movs	r1, #0
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f001 fb6b 	bl	800c304 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	683a      	ldr	r2, [r7, #0]
 800ac3e:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ac44:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac4a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac50:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac56:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ac5e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ac64:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2220      	movs	r2, #32
 800ac6a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800ac6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800ac72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac74:	3b01      	subs	r3, #1
 800ac76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ac78:	4413      	add	r3, r2
 800ac7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ac80:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800ac82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d007      	beq.n	800ac9a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800ac98:	e006      	b.n	800aca8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ac9e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aca4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2203      	movs	r2, #3
 800acac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	4a48      	ldr	r2, [pc, #288]	@ (800add4 <_tx_thread_create+0x1cc>)
 800acb2:	655a      	str	r2, [r3, #84]	@ 0x54
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800acba:	4947      	ldr	r1, [pc, #284]	@ (800add8 <_tx_thread_create+0x1d0>)
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7f5 fb4f 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800acc2:	f3ef 8310 	mrs	r3, PRIMASK
 800acc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800acc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800acca:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800accc:	b672      	cpsid	i
    return(int_posture);
 800acce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800acd0:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	4a41      	ldr	r2, [pc, #260]	@ (800addc <_tx_thread_create+0x1d4>)
 800acd6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800acd8:	4b41      	ldr	r3, [pc, #260]	@ (800ade0 <_tx_thread_create+0x1d8>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10b      	bne.n	800acf8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800ace0:	4a40      	ldr	r2, [pc, #256]	@ (800ade4 <_tx_thread_create+0x1dc>)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800acf6:	e016      	b.n	800ad26 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800acf8:	4b3a      	ldr	r3, [pc, #232]	@ (800ade4 <_tx_thread_create+0x1dc>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800acfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad04:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800ad06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800ad26:	4b2e      	ldr	r3, [pc, #184]	@ (800ade0 <_tx_thread_create+0x1d8>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	4a2c      	ldr	r2, [pc, #176]	@ (800ade0 <_tx_thread_create+0x1d8>)
 800ad2e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ad30:	4b2d      	ldr	r3, [pc, #180]	@ (800ade8 <_tx_thread_create+0x1e0>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	3301      	adds	r3, #1
 800ad36:	4a2c      	ldr	r2, [pc, #176]	@ (800ade8 <_tx_thread_create+0x1e0>)
 800ad38:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800ad3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d129      	bne.n	800ad94 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ad40:	f3ef 8305 	mrs	r3, IPSR
 800ad44:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800ad46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800ad48:	4b28      	ldr	r3, [pc, #160]	@ (800adec <_tx_thread_create+0x1e4>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800ad52:	d30d      	bcc.n	800ad70 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800ad54:	4b26      	ldr	r3, [pc, #152]	@ (800adf0 <_tx_thread_create+0x1e8>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800ad5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d009      	beq.n	800ad74 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800ad60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad64:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800ad66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ad6e:	e001      	b.n	800ad74 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800ad70:	2300      	movs	r3, #0
 800ad72:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad76:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	f383 8810 	msr	PRIMASK, r3
}
 800ad7e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 f979 	bl	800b078 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800ad86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d01e      	beq.n	800adca <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800ad8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad90:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ad92:	e01a      	b.n	800adca <_tx_thread_create+0x1c2>
 800ad94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad96:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	f383 8810 	msr	PRIMASK, r3
}
 800ad9e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ada0:	f3ef 8310 	mrs	r3, PRIMASK
 800ada4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ada6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ada8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800adaa:	b672      	cpsid	i
    return(int_posture);
 800adac:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800adae:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800adb0:	4b0d      	ldr	r3, [pc, #52]	@ (800ade8 <_tx_thread_create+0x1e0>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	4a0c      	ldr	r2, [pc, #48]	@ (800ade8 <_tx_thread_create+0x1e0>)
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adbc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	f383 8810 	msr	PRIMASK, r3
}
 800adc4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800adc6:	f000 f91d 	bl	800b004 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3748      	adds	r7, #72	@ 0x48
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	0800b54d 	.word	0x0800b54d
 800add8:	0800ae6d 	.word	0x0800ae6d
 800addc:	54485244 	.word	0x54485244
 800ade0:	20010914 	.word	0x20010914
 800ade4:	20010910 	.word	0x20010910
 800ade8:	200109a0 	.word	0x200109a0
 800adec:	2000000c 	.word	0x2000000c
 800adf0:	2001090c 	.word	0x2001090c

0800adf4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800adf8:	4b12      	ldr	r3, [pc, #72]	@ (800ae44 <_tx_thread_initialize+0x50>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800adfe:	4b12      	ldr	r3, [pc, #72]	@ (800ae48 <_tx_thread_initialize+0x54>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800ae04:	4b11      	ldr	r3, [pc, #68]	@ (800ae4c <_tx_thread_initialize+0x58>)
 800ae06:	2200      	movs	r2, #0
 800ae08:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800ae0a:	4b11      	ldr	r3, [pc, #68]	@ (800ae50 <_tx_thread_initialize+0x5c>)
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800ae10:	2280      	movs	r2, #128	@ 0x80
 800ae12:	2100      	movs	r1, #0
 800ae14:	480f      	ldr	r0, [pc, #60]	@ (800ae54 <_tx_thread_initialize+0x60>)
 800ae16:	f001 fa75 	bl	800c304 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800ae1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ae58 <_tx_thread_initialize+0x64>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800ae20:	4b0e      	ldr	r3, [pc, #56]	@ (800ae5c <_tx_thread_initialize+0x68>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800ae26:	4b0e      	ldr	r3, [pc, #56]	@ (800ae60 <_tx_thread_initialize+0x6c>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800ae2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ae64 <_tx_thread_initialize+0x70>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800ae32:	4b0d      	ldr	r3, [pc, #52]	@ (800ae68 <_tx_thread_initialize+0x74>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800ae3a:	4a0b      	ldr	r2, [pc, #44]	@ (800ae68 <_tx_thread_initialize+0x74>)
 800ae3c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800ae3e:	bf00      	nop
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	20010908 	.word	0x20010908
 800ae48:	2001090c 	.word	0x2001090c
 800ae4c:	20010918 	.word	0x20010918
 800ae50:	2001091c 	.word	0x2001091c
 800ae54:	20010920 	.word	0x20010920
 800ae58:	20010910 	.word	0x20010910
 800ae5c:	20010914 	.word	0x20010914
 800ae60:	200109a0 	.word	0x200109a0
 800ae64:	200109a4 	.word	0x200109a4
 800ae68:	200109a8 	.word	0x200109a8

0800ae6c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b088      	sub	sp, #32
 800ae70:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ae72:	4b21      	ldr	r3, [pc, #132]	@ (800aef8 <_tx_thread_shell_entry+0x8c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae7c:	69fa      	ldr	r2, [r7, #28]
 800ae7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ae80:	4610      	mov	r0, r2
 800ae82:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800ae84:	4b1d      	ldr	r3, [pc, #116]	@ (800aefc <_tx_thread_shell_entry+0x90>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d003      	beq.n	800ae94 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800ae8c:	4b1b      	ldr	r3, [pc, #108]	@ (800aefc <_tx_thread_shell_entry+0x90>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	69f8      	ldr	r0, [r7, #28]
 800ae92:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae94:	f3ef 8310 	mrs	r3, PRIMASK
 800ae98:	607b      	str	r3, [r7, #4]
    return(posture);
 800ae9a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ae9c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae9e:	b672      	cpsid	i
    return(int_posture);
 800aea0:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800aea2:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	2201      	movs	r2, #1
 800aea8:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	2201      	movs	r2, #1
 800aeae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800aeb6:	4b12      	ldr	r3, [pc, #72]	@ (800af00 <_tx_thread_shell_entry+0x94>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3301      	adds	r3, #1
 800aebc:	4a10      	ldr	r2, [pc, #64]	@ (800af00 <_tx_thread_shell_entry+0x94>)
 800aebe:	6013      	str	r3, [r2, #0]
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	f383 8810 	msr	PRIMASK, r3
}
 800aeca:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800aecc:	f3ef 8314 	mrs	r3, CONTROL
 800aed0:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800aed2:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800aed4:	617b      	str	r3, [r7, #20]
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f023 0304 	bic.w	r3, r3, #4
 800aedc:	617b      	str	r3, [r7, #20]
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	f383 8814 	msr	CONTROL, r3
}
 800aee8:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800aeea:	69f8      	ldr	r0, [r7, #28]
 800aeec:	f000 f9c4 	bl	800b278 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800aef0:	bf00      	nop
 800aef2:	3720      	adds	r7, #32
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	20010908 	.word	0x20010908
 800aefc:	200109a4 	.word	0x200109a4
 800af00:	200109a0 	.word	0x200109a0

0800af04 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08e      	sub	sp, #56	@ 0x38
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800af0c:	f3ef 8310 	mrs	r3, PRIMASK
 800af10:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800af12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800af14:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800af16:	b672      	cpsid	i
    return(int_posture);
 800af18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800af1a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800af1c:	4b35      	ldr	r3, [pc, #212]	@ (800aff4 <_tx_thread_sleep+0xf0>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800af22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af24:	2b00      	cmp	r3, #0
 800af26:	d108      	bne.n	800af3a <_tx_thread_sleep+0x36>
 800af28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	f383 8810 	msr	PRIMASK, r3
}
 800af32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800af34:	2313      	movs	r3, #19
 800af36:	637b      	str	r3, [r7, #52]	@ 0x34
 800af38:	e056      	b.n	800afe8 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800af3a:	f3ef 8305 	mrs	r3, IPSR
 800af3e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800af40:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800af42:	4b2d      	ldr	r3, [pc, #180]	@ (800aff8 <_tx_thread_sleep+0xf4>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4313      	orrs	r3, r2
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d008      	beq.n	800af5e <_tx_thread_sleep+0x5a>
 800af4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	f383 8810 	msr	PRIMASK, r3
}
 800af56:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800af58:	2313      	movs	r3, #19
 800af5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af5c:	e044      	b.n	800afe8 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800af5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af60:	4a26      	ldr	r2, [pc, #152]	@ (800affc <_tx_thread_sleep+0xf8>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d108      	bne.n	800af78 <_tx_thread_sleep+0x74>
 800af66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af68:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f383 8810 	msr	PRIMASK, r3
}
 800af70:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800af72:	2313      	movs	r3, #19
 800af74:	637b      	str	r3, [r7, #52]	@ 0x34
 800af76:	e037      	b.n	800afe8 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d108      	bne.n	800af90 <_tx_thread_sleep+0x8c>
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	f383 8810 	msr	PRIMASK, r3
}
 800af88:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800af8a:	2300      	movs	r3, #0
 800af8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af8e:	e02b      	b.n	800afe8 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800af90:	4b1b      	ldr	r3, [pc, #108]	@ (800b000 <_tx_thread_sleep+0xfc>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d008      	beq.n	800afaa <_tx_thread_sleep+0xa6>
 800af98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f383 8810 	msr	PRIMASK, r3
}
 800afa2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800afa4:	2313      	movs	r3, #19
 800afa6:	637b      	str	r3, [r7, #52]	@ 0x34
 800afa8:	e01e      	b.n	800afe8 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800afaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afac:	2204      	movs	r2, #4
 800afae:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800afb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb2:	2201      	movs	r2, #1
 800afb4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800afb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb8:	2200      	movs	r2, #0
 800afba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800afbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800afc4:	4b0e      	ldr	r3, [pc, #56]	@ (800b000 <_tx_thread_sleep+0xfc>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3301      	adds	r3, #1
 800afca:	4a0d      	ldr	r2, [pc, #52]	@ (800b000 <_tx_thread_sleep+0xfc>)
 800afcc:	6013      	str	r3, [r2, #0]
 800afce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	f383 8810 	msr	PRIMASK, r3
}
 800afd8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800afda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800afdc:	f000 f94c 	bl	800b278 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800afe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afe6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800afe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800afea:	4618      	mov	r0, r3
 800afec:	3738      	adds	r7, #56	@ 0x38
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20010908 	.word	0x20010908
 800aff8:	2000000c 	.word	0x2000000c
 800affc:	20010a50 	.word	0x20010a50
 800b000:	200109a0 	.word	0x200109a0

0800b004 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800b004:	b480      	push	{r7}
 800b006:	b089      	sub	sp, #36	@ 0x24
 800b008:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b00a:	4b17      	ldr	r3, [pc, #92]	@ (800b068 <_tx_thread_system_preempt_check+0x64>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d121      	bne.n	800b05a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800b016:	4b15      	ldr	r3, [pc, #84]	@ (800b06c <_tx_thread_system_preempt_check+0x68>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800b01c:	4b14      	ldr	r3, [pc, #80]	@ (800b070 <_tx_thread_system_preempt_check+0x6c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	429a      	cmp	r2, r3
 800b028:	d017      	beq.n	800b05a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b02a:	4b12      	ldr	r3, [pc, #72]	@ (800b074 <_tx_thread_system_preempt_check+0x70>)
 800b02c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b030:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b032:	f3ef 8305 	mrs	r3, IPSR
 800b036:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b038:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10c      	bne.n	800b058 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b03e:	f3ef 8310 	mrs	r3, PRIMASK
 800b042:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b044:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800b046:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b048:	b662      	cpsie	i
}
 800b04a:	bf00      	nop
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f383 8810 	msr	PRIMASK, r3
}
 800b056:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800b058:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800b05a:	bf00      	nop
 800b05c:	3724      	adds	r7, #36	@ 0x24
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	200109a0 	.word	0x200109a0
 800b06c:	20010908 	.word	0x20010908
 800b070:	2001090c 	.word	0x2001090c
 800b074:	e000ed04 	.word	0xe000ed04

0800b078 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b096      	sub	sp, #88	@ 0x58
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b080:	f3ef 8310 	mrs	r3, PRIMASK
 800b084:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800b086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800b088:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b08a:	b672      	cpsid	i
    return(int_posture);
 800b08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b08e:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b094:	2b00      	cmp	r3, #0
 800b096:	d005      	beq.n	800b0a4 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	334c      	adds	r3, #76	@ 0x4c
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fc8d 	bl	800b9bc <_tx_timer_system_deactivate>
 800b0a2:	e002      	b.n	800b0aa <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b0aa:	4b6c      	ldr	r3, [pc, #432]	@ (800b25c <_tx_thread_system_resume+0x1e4>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	4a6a      	ldr	r2, [pc, #424]	@ (800b25c <_tx_thread_system_resume+0x1e4>)
 800b0b2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f040 8083 	bne.w	800b1c4 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 8097 	beq.w	800b1f6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d172      	bne.n	800b1b6 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0da:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800b0dc:	4a60      	ldr	r2, [pc, #384]	@ (800b260 <_tx_thread_system_resume+0x1e8>)
 800b0de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800b0e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d154      	bne.n	800b196 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800b0ec:	495c      	ldr	r1, [pc, #368]	@ (800b260 <_tx_thread_system_resume+0x1e8>)
 800b0ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800b102:	2201      	movs	r2, #1
 800b104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b106:	fa02 f303 	lsl.w	r3, r2, r3
 800b10a:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800b10c:	4b55      	ldr	r3, [pc, #340]	@ (800b264 <_tx_thread_system_resume+0x1ec>)
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b112:	4313      	orrs	r3, r2
 800b114:	4a53      	ldr	r2, [pc, #332]	@ (800b264 <_tx_thread_system_resume+0x1ec>)
 800b116:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800b118:	4b53      	ldr	r3, [pc, #332]	@ (800b268 <_tx_thread_system_resume+0x1f0>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b11e:	429a      	cmp	r2, r3
 800b120:	d269      	bcs.n	800b1f6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800b122:	4a51      	ldr	r2, [pc, #324]	@ (800b268 <_tx_thread_system_resume+0x1f0>)
 800b124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b126:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800b128:	4b50      	ldr	r3, [pc, #320]	@ (800b26c <_tx_thread_system_resume+0x1f4>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800b12e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b130:	2b00      	cmp	r3, #0
 800b132:	d103      	bne.n	800b13c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800b134:	4a4d      	ldr	r2, [pc, #308]	@ (800b26c <_tx_thread_system_resume+0x1f4>)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6013      	str	r3, [r2, #0]
 800b13a:	e05c      	b.n	800b1f6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800b13c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b13e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b140:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b142:	429a      	cmp	r2, r3
 800b144:	d257      	bcs.n	800b1f6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800b146:	4a49      	ldr	r2, [pc, #292]	@ (800b26c <_tx_thread_system_resume+0x1f4>)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6013      	str	r3, [r2, #0]
 800b14c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b14e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b152:	f383 8810 	msr	PRIMASK, r3
}
 800b156:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b158:	4b40      	ldr	r3, [pc, #256]	@ (800b25c <_tx_thread_system_resume+0x1e4>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800b15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b160:	2b00      	cmp	r3, #0
 800b162:	d174      	bne.n	800b24e <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b164:	4b42      	ldr	r3, [pc, #264]	@ (800b270 <_tx_thread_system_resume+0x1f8>)
 800b166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b16a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b16c:	f3ef 8305 	mrs	r3, IPSR
 800b170:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800b172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10c      	bne.n	800b192 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b178:	f3ef 8310 	mrs	r3, PRIMASK
 800b17c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800b17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800b180:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b182:	b662      	cpsie	i
}
 800b184:	bf00      	nop
 800b186:	6a3b      	ldr	r3, [r7, #32]
 800b188:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	f383 8810 	msr	PRIMASK, r3
}
 800b190:	bf00      	nop
}
 800b192:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800b194:	e05b      	b.n	800b24e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800b196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b19a:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800b19c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800b1a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1ac:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b1b2:	621a      	str	r2, [r3, #32]
 800b1b4:	e01f      	b.n	800b1f6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2203      	movs	r2, #3
 800b1c0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b1c2:	e018      	b.n	800b1f6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d014      	beq.n	800b1f6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d010      	beq.n	800b1f6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d106      	bne.n	800b1ea <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	631a      	str	r2, [r3, #48]	@ 0x30
 800b1e8:	e005      	b.n	800b1f6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2203      	movs	r2, #3
 800b1f4:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b1f6:	4b1f      	ldr	r3, [pc, #124]	@ (800b274 <_tx_thread_system_resume+0x1fc>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1fe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	f383 8810 	msr	PRIMASK, r3
}
 800b206:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b208:	4b18      	ldr	r3, [pc, #96]	@ (800b26c <_tx_thread_system_resume+0x1f4>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b20e:	429a      	cmp	r2, r3
 800b210:	d020      	beq.n	800b254 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b212:	4b12      	ldr	r3, [pc, #72]	@ (800b25c <_tx_thread_system_resume+0x1e4>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800b218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d11a      	bne.n	800b254 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b21e:	4b14      	ldr	r3, [pc, #80]	@ (800b270 <_tx_thread_system_resume+0x1f8>)
 800b220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b224:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b226:	f3ef 8305 	mrs	r3, IPSR
 800b22a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b22c:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10f      	bne.n	800b252 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b232:	f3ef 8310 	mrs	r3, PRIMASK
 800b236:	613b      	str	r3, [r7, #16]
    return(posture);
 800b238:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800b23a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b23c:	b662      	cpsie	i
}
 800b23e:	bf00      	nop
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	f383 8810 	msr	PRIMASK, r3
}
 800b24a:	bf00      	nop
}
 800b24c:	e001      	b.n	800b252 <_tx_thread_system_resume+0x1da>
                                return;
 800b24e:	bf00      	nop
 800b250:	e000      	b.n	800b254 <_tx_thread_system_resume+0x1dc>
 800b252:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800b254:	3758      	adds	r7, #88	@ 0x58
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	200109a0 	.word	0x200109a0
 800b260:	20010920 	.word	0x20010920
 800b264:	20010918 	.word	0x20010918
 800b268:	2001091c 	.word	0x2001091c
 800b26c:	2001090c 	.word	0x2001090c
 800b270:	e000ed04 	.word	0xe000ed04
 800b274:	20010908 	.word	0x20010908

0800b278 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b09e      	sub	sp, #120	@ 0x78
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b280:	4b81      	ldr	r3, [pc, #516]	@ (800b488 <_tx_thread_system_suspend+0x210>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b286:	f3ef 8310 	mrs	r3, PRIMASK
 800b28a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800b28c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800b28e:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b290:	b672      	cpsid	i
    return(int_posture);
 800b292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800b294:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d112      	bne.n	800b2c4 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800b2a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d008      	beq.n	800b2bc <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800b2aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b0:	d004      	beq.n	800b2bc <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	334c      	adds	r3, #76	@ 0x4c
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fb1e 	bl	800b8f8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	4a72      	ldr	r2, [pc, #456]	@ (800b48c <_tx_thread_system_suspend+0x214>)
 800b2c2:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b2c4:	4b72      	ldr	r3, [pc, #456]	@ (800b490 <_tx_thread_system_suspend+0x218>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	4a71      	ldr	r2, [pc, #452]	@ (800b490 <_tx_thread_system_suspend+0x218>)
 800b2cc:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	f040 80a6 	bne.w	800b424 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e2:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a1b      	ldr	r3, [r3, #32]
 800b2e8:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800b2ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d015      	beq.n	800b31e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f6:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800b2f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b2fc:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800b2fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b300:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b302:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800b304:	4a63      	ldr	r2, [pc, #396]	@ (800b494 <_tx_thread_system_suspend+0x21c>)
 800b306:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d157      	bne.n	800b3c2 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800b312:	4960      	ldr	r1, [pc, #384]	@ (800b494 <_tx_thread_system_suspend+0x21c>)
 800b314:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b316:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b31c:	e051      	b.n	800b3c2 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800b31e:	4a5d      	ldr	r2, [pc, #372]	@ (800b494 <_tx_thread_system_suspend+0x21c>)
 800b320:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b322:	2100      	movs	r1, #0
 800b324:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800b328:	2201      	movs	r2, #1
 800b32a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b32c:	fa02 f303 	lsl.w	r3, r2, r3
 800b330:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800b332:	4b59      	ldr	r3, [pc, #356]	@ (800b498 <_tx_thread_system_suspend+0x220>)
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b338:	43db      	mvns	r3, r3
 800b33a:	4013      	ands	r3, r2
 800b33c:	4a56      	ldr	r2, [pc, #344]	@ (800b498 <_tx_thread_system_suspend+0x220>)
 800b33e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800b340:	2300      	movs	r3, #0
 800b342:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800b344:	4b54      	ldr	r3, [pc, #336]	@ (800b498 <_tx_thread_system_suspend+0x220>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800b34a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d12b      	bne.n	800b3a8 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b350:	4b52      	ldr	r3, [pc, #328]	@ (800b49c <_tx_thread_system_suspend+0x224>)
 800b352:	2220      	movs	r2, #32
 800b354:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800b356:	4b52      	ldr	r3, [pc, #328]	@ (800b4a0 <_tx_thread_system_suspend+0x228>)
 800b358:	2200      	movs	r2, #0
 800b35a:	601a      	str	r2, [r3, #0]
 800b35c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b35e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b362:	f383 8810 	msr	PRIMASK, r3
}
 800b366:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b368:	4b49      	ldr	r3, [pc, #292]	@ (800b490 <_tx_thread_system_suspend+0x218>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800b36e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b370:	2b00      	cmp	r3, #0
 800b372:	f040 8081 	bne.w	800b478 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b376:	4b4b      	ldr	r3, [pc, #300]	@ (800b4a4 <_tx_thread_system_suspend+0x22c>)
 800b378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b37c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b37e:	f3ef 8305 	mrs	r3, IPSR
 800b382:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800b384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10c      	bne.n	800b3a4 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b38a:	f3ef 8310 	mrs	r3, PRIMASK
 800b38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800b390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800b392:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b394:	b662      	cpsie	i
}
 800b396:	bf00      	nop
 800b398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39a:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b39e:	f383 8810 	msr	PRIMASK, r3
}
 800b3a2:	bf00      	nop
}
 800b3a4:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800b3a6:	e067      	b.n	800b478 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800b3a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3aa:	fa93 f3a3 	rbit	r3, r3
 800b3ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b3b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3b2:	fab3 f383 	clz	r3, r3
 800b3b6:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800b3b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b3ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3bc:	4413      	add	r3, r2
 800b3be:	4a37      	ldr	r2, [pc, #220]	@ (800b49c <_tx_thread_system_suspend+0x224>)
 800b3c0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800b3c2:	4b37      	ldr	r3, [pc, #220]	@ (800b4a0 <_tx_thread_system_suspend+0x228>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d12b      	bne.n	800b424 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b3cc:	4b33      	ldr	r3, [pc, #204]	@ (800b49c <_tx_thread_system_suspend+0x224>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a30      	ldr	r2, [pc, #192]	@ (800b494 <_tx_thread_system_suspend+0x21c>)
 800b3d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3d6:	4a32      	ldr	r2, [pc, #200]	@ (800b4a0 <_tx_thread_system_suspend+0x228>)
 800b3d8:	6013      	str	r3, [r2, #0]
 800b3da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3dc:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e0:	f383 8810 	msr	PRIMASK, r3
}
 800b3e4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b3e6:	4b2a      	ldr	r3, [pc, #168]	@ (800b490 <_tx_thread_system_suspend+0x218>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800b3ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d144      	bne.n	800b47c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b3f2:	4b2c      	ldr	r3, [pc, #176]	@ (800b4a4 <_tx_thread_system_suspend+0x22c>)
 800b3f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3f8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b3fa:	f3ef 8305 	mrs	r3, IPSR
 800b3fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800b400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 800b402:	2b00      	cmp	r3, #0
 800b404:	d10c      	bne.n	800b420 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b406:	f3ef 8310 	mrs	r3, PRIMASK
 800b40a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800b40e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b410:	b662      	cpsie	i
}
 800b412:	bf00      	nop
 800b414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b416:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b418:	6a3b      	ldr	r3, [r7, #32]
 800b41a:	f383 8810 	msr	PRIMASK, r3
}
 800b41e:	bf00      	nop
}
 800b420:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800b422:	e02b      	b.n	800b47c <_tx_thread_system_suspend+0x204>
 800b424:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b426:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	f383 8810 	msr	PRIMASK, r3
}
 800b42e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b430:	4b1b      	ldr	r3, [pc, #108]	@ (800b4a0 <_tx_thread_system_suspend+0x228>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b436:	429a      	cmp	r2, r3
 800b438:	d022      	beq.n	800b480 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b43a:	4b15      	ldr	r3, [pc, #84]	@ (800b490 <_tx_thread_system_suspend+0x218>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800b440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b442:	2b00      	cmp	r3, #0
 800b444:	d11c      	bne.n	800b480 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b446:	4b17      	ldr	r3, [pc, #92]	@ (800b4a4 <_tx_thread_system_suspend+0x22c>)
 800b448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b44c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b44e:	f3ef 8305 	mrs	r3, IPSR
 800b452:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b454:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10c      	bne.n	800b474 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b45a:	f3ef 8310 	mrs	r3, PRIMASK
 800b45e:	617b      	str	r3, [r7, #20]
    return(posture);
 800b460:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800b462:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b464:	b662      	cpsie	i
}
 800b466:	bf00      	nop
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f383 8810 	msr	PRIMASK, r3
}
 800b472:	bf00      	nop
}
 800b474:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800b476:	e003      	b.n	800b480 <_tx_thread_system_suspend+0x208>
                return;
 800b478:	bf00      	nop
 800b47a:	e002      	b.n	800b482 <_tx_thread_system_suspend+0x20a>
            return;
 800b47c:	bf00      	nop
 800b47e:	e000      	b.n	800b482 <_tx_thread_system_suspend+0x20a>
    return;
 800b480:	bf00      	nop
}
 800b482:	3778      	adds	r7, #120	@ 0x78
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	20010908 	.word	0x20010908
 800b48c:	20010f0c 	.word	0x20010f0c
 800b490:	200109a0 	.word	0x200109a0
 800b494:	20010920 	.word	0x20010920
 800b498:	20010918 	.word	0x20010918
 800b49c:	2001091c 	.word	0x2001091c
 800b4a0:	2001090c 	.word	0x2001090c
 800b4a4:	e000ed04 	.word	0xe000ed04

0800b4a8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b087      	sub	sp, #28
 800b4ac:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b4ae:	4b21      	ldr	r3, [pc, #132]	@ (800b534 <_tx_thread_time_slice+0x8c>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4b4:	f3ef 8310 	mrs	r3, PRIMASK
 800b4b8:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b4bc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b4be:	b672      	cpsid	i
    return(int_posture);
 800b4c0:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800b4c2:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b4c4:	4b1c      	ldr	r3, [pc, #112]	@ (800b538 <_tx_thread_time_slice+0x90>)
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d024      	beq.n	800b51a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d120      	bne.n	800b51a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	69da      	ldr	r2, [r3, #28]
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	699b      	ldr	r3, [r3, #24]
 800b4e4:	4a15      	ldr	r2, [pc, #84]	@ (800b53c <_tx_thread_time_slice+0x94>)
 800b4e6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	6a1b      	ldr	r3, [r3, #32]
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d013      	beq.n	800b51a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d10d      	bne.n	800b51a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	6a12      	ldr	r2, [r2, #32]
 800b506:	490e      	ldr	r1, [pc, #56]	@ (800b540 <_tx_thread_time_slice+0x98>)
 800b508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b50c:	4b0d      	ldr	r3, [pc, #52]	@ (800b544 <_tx_thread_time_slice+0x9c>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a0b      	ldr	r2, [pc, #44]	@ (800b540 <_tx_thread_time_slice+0x98>)
 800b512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b516:	4a0c      	ldr	r2, [pc, #48]	@ (800b548 <_tx_thread_time_slice+0xa0>)
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f383 8810 	msr	PRIMASK, r3
}
 800b524:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800b526:	bf00      	nop
 800b528:	371c      	adds	r7, #28
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20010908 	.word	0x20010908
 800b538:	200109b0 	.word	0x200109b0
 800b53c:	20010f0c 	.word	0x20010f0c
 800b540:	20010920 	.word	0x20010920
 800b544:	2001091c 	.word	0x2001091c
 800b548:	2001090c 	.word	0x2001090c

0800b54c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08a      	sub	sp, #40	@ 0x28
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b558:	f3ef 8310 	mrs	r3, PRIMASK
 800b55c:	617b      	str	r3, [r7, #20]
    return(posture);
 800b55e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b560:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b562:	b672      	cpsid	i
    return(int_posture);
 800b564:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800b566:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800b568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b56c:	2b04      	cmp	r3, #4
 800b56e:	d10e      	bne.n	800b58e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800b570:	4b13      	ldr	r3, [pc, #76]	@ (800b5c0 <_tx_thread_timeout+0x74>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3301      	adds	r3, #1
 800b576:	4a12      	ldr	r2, [pc, #72]	@ (800b5c0 <_tx_thread_timeout+0x74>)
 800b578:	6013      	str	r3, [r2, #0]
 800b57a:	6a3b      	ldr	r3, [r7, #32]
 800b57c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f383 8810 	msr	PRIMASK, r3
}
 800b584:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b586:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b588:	f7ff fd76 	bl	800b078 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800b58c:	e013      	b.n	800b5b6 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800b58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b592:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800b594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b596:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b59a:	61bb      	str	r3, [r7, #24]
 800b59c:	6a3b      	ldr	r3, [r7, #32]
 800b59e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	f383 8810 	msr	PRIMASK, r3
}
 800b5a6:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	69b9      	ldr	r1, [r7, #24]
 800b5b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b5b4:	4798      	blx	r3
}
 800b5b6:	bf00      	nop
 800b5b8:	3728      	adds	r7, #40	@ 0x28
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	200109a0 	.word	0x200109a0

0800b5c4 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b088      	sub	sp, #32
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5cc:	f3ef 8310 	mrs	r3, PRIMASK
 800b5d0:	617b      	str	r3, [r7, #20]
    return(posture);
 800b5d2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b5d4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5d6:	b672      	cpsid	i
    return(int_posture);
 800b5d8:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800b5da:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a1b      	ldr	r3, [r3, #32]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800b5e4:	2317      	movs	r3, #23
 800b5e6:	61fb      	str	r3, [r7, #28]
 800b5e8:	e00d      	b.n	800b606 <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d102      	bne.n	800b5f8 <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 800b5f2:	2317      	movs	r3, #23
 800b5f4:	61fb      	str	r3, [r7, #28]
 800b5f6:	e006      	b.n	800b606 <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	3308      	adds	r3, #8
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 f97b 	bl	800b8f8 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 800b602:	2300      	movs	r3, #0
 800b604:	61fb      	str	r3, [r7, #28]
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f383 8810 	msr	PRIMASK, r3
}
 800b610:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800b612:	69fb      	ldr	r3, [r7, #28]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3720      	adds	r7, #32
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <_tx_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b089      	sub	sp, #36	@ 0x24
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b628:	f3ef 8310 	mrs	r3, PRIMASK
 800b62c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b62e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b630:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b632:	b672      	cpsid	i
    return(int_posture);
 800b634:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800b636:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_TIMER_CHANGE_INSERT

    /* Determine if the timer is active.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head == TX_NULL)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d105      	bne.n	800b64c <_tx_timer_change+0x30>
    {

        /* Setup the new expiration fields.  */
        timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	609a      	str	r2, [r3, #8]
        timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	60da      	str	r2, [r3, #12]
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	f383 8810 	msr	PRIMASK, r3
}
 800b656:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3724      	adds	r7, #36	@ 0x24
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr
	...

0800b668 <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 800b668:	b480      	push	{r7}
 800b66a:	b08d      	sub	sp, #52	@ 0x34
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;


    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	3308      	adds	r3, #8
 800b674:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b676:	f3ef 8310 	mrs	r3, PRIMASK
 800b67a:	613b      	str	r3, [r7, #16]
    return(posture);
 800b67c:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800b67e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b680:	b672      	cpsid	i
    return(int_posture);
 800b682:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 800b684:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 800b686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d07f      	beq.n	800b792 <_tx_timer_deactivate+0x12a>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 800b692:	2300      	movs	r3, #0
 800b694:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 800b696:	4b45      	ldr	r3, [pc, #276]	@ (800b7ac <_tx_timer_deactivate+0x144>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	69fa      	ldr	r2, [r7, #28]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d306      	bcc.n	800b6ae <_tx_timer_deactivate+0x46>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800b6a0:	4b43      	ldr	r3, [pc, #268]	@ (800b7b0 <_tx_timer_deactivate+0x148>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	69fa      	ldr	r2, [r7, #28]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d201      	bcs.n	800b6ae <_tx_timer_deactivate+0x46>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
        }

        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 800b6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d12e      	bne.n	800b712 <_tx_timer_deactivate+0xaa>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 800b6b4:	4b3f      	ldr	r3, [pc, #252]	@ (800b7b4 <_tx_timer_deactivate+0x14c>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	69fa      	ldr	r2, [r7, #28]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d307      	bcc.n	800b6ce <_tx_timer_deactivate+0x66>
            {

                /* Calculate ticks left to expiration - just the difference between this
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 800b6be:	4b3d      	ldr	r3, [pc, #244]	@ (800b7b4 <_tx_timer_deactivate+0x14c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	69fa      	ldr	r2, [r7, #28]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	109b      	asrs	r3, r3, #2
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6cc:	e010      	b.n	800b6f0 <_tx_timer_deactivate+0x88>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 800b6ce:	4b37      	ldr	r3, [pc, #220]	@ (800b7ac <_tx_timer_deactivate+0x144>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	69fa      	ldr	r2, [r7, #28]
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	109b      	asrs	r3, r3, #2
 800b6d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 800b6da:	4b35      	ldr	r3, [pc, #212]	@ (800b7b0 <_tx_timer_deactivate+0x148>)
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	4b35      	ldr	r3, [pc, #212]	@ (800b7b4 <_tx_timer_deactivate+0x14c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	109b      	asrs	r3, r3, #2
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ea:	4413      	add	r3, r2
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b20      	cmp	r3, #32
 800b6f6:	d908      	bls.n	800b70a <_tx_timer_deactivate+0xa2>
            {

                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6fe:	4413      	add	r3, r2
 800b700:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =
 800b704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b706:	601a      	str	r2, [r3, #0]
 800b708:	e01c      	b.n	800b744 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 800b70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b70c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	e018      	b.n	800b744 <_tx_timer_deactivate+0xdc>
        }
        else
        {

            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 800b712:	4b29      	ldr	r3, [pc, #164]	@ (800b7b8 <_tx_timer_deactivate+0x150>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b718:	429a      	cmp	r2, r3
 800b71a:	d00f      	beq.n	800b73c <_tx_timer_deactivate+0xd4>
            {

                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800b71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b20      	cmp	r3, #32
 800b722:	d906      	bls.n	800b732 <_tx_timer_deactivate+0xca>
                {

                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800b724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =
 800b72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72e:	601a      	str	r2, [r3, #0]
 800b730:	e008      	b.n	800b744 <_tx_timer_deactivate+0xdc>
                }
                else
                {

                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800b732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b734:	685a      	ldr	r2, [r3, #4]
 800b736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b738:	601a      	str	r2, [r3, #0]
 800b73a:	e003      	b.n	800b744 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73e:	685a      	ldr	r2, [r3, #4]
 800b740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b742:	601a      	str	r2, [r3, #0]
            }
        }

        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 800b744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 800b74a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d108      	bne.n	800b764 <_tx_timer_deactivate+0xfc>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b758:	429a      	cmp	r2, r3
 800b75a:	d117      	bne.n	800b78c <_tx_timer_deactivate+0x124>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	2200      	movs	r2, #0
 800b760:	601a      	str	r2, [r3, #0]
 800b762:	e013      	b.n	800b78c <_tx_timer_deactivate+0x124>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 800b764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	69ba      	ldr	r2, [r7, #24]
 800b774:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d105      	bne.n	800b78c <_tx_timer_deactivate+0x124>
            {

                /* Update the next timer in the list with the list head
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	69fa      	ldr	r2, [r7, #28]
 800b784:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	69ba      	ldr	r2, [r7, #24]
 800b78a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800b78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78e:	2200      	movs	r2, #0
 800b790:	619a      	str	r2, [r3, #24]
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	f383 8810 	msr	PRIMASK, r3
}
 800b79c:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3734      	adds	r7, #52	@ 0x34
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	20010a34 	.word	0x20010a34
 800b7b0:	20010a38 	.word	0x20010a38
 800b7b4:	20010a3c 	.word	0x20010a3c
 800b7b8:	20010a4c 	.word	0x20010a4c

0800b7bc <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b7c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b7c6:	607b      	str	r3, [r7, #4]
    return(posture);
 800b7c8:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b7ca:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b7cc:	b672      	cpsid	i
    return(int_posture);
 800b7ce:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800b7d0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800b7d2:	4b09      	ldr	r3, [pc, #36]	@ (800b7f8 <_tx_timer_expiration_process+0x3c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	4a07      	ldr	r2, [pc, #28]	@ (800b7f8 <_tx_timer_expiration_process+0x3c>)
 800b7da:	6013      	str	r3, [r2, #0]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	f383 8810 	msr	PRIMASK, r3
}
 800b7e6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800b7e8:	4804      	ldr	r0, [pc, #16]	@ (800b7fc <_tx_timer_expiration_process+0x40>)
 800b7ea:	f7ff fc45 	bl	800b078 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	200109a0 	.word	0x200109a0
 800b7fc:	20010a50 	.word	0x20010a50

0800b800 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800b800:	b590      	push	{r4, r7, lr}
 800b802:	b089      	sub	sp, #36	@ 0x24
 800b804:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800b806:	4b28      	ldr	r3, [pc, #160]	@ (800b8a8 <_tx_timer_initialize+0xa8>)
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800b80c:	4b27      	ldr	r3, [pc, #156]	@ (800b8ac <_tx_timer_initialize+0xac>)
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b812:	4b27      	ldr	r3, [pc, #156]	@ (800b8b0 <_tx_timer_initialize+0xb0>)
 800b814:	2200      	movs	r2, #0
 800b816:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800b818:	4b26      	ldr	r3, [pc, #152]	@ (800b8b4 <_tx_timer_initialize+0xb4>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800b81e:	4b26      	ldr	r3, [pc, #152]	@ (800b8b8 <_tx_timer_initialize+0xb8>)
 800b820:	2200      	movs	r2, #0
 800b822:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800b824:	2280      	movs	r2, #128	@ 0x80
 800b826:	2100      	movs	r1, #0
 800b828:	4824      	ldr	r0, [pc, #144]	@ (800b8bc <_tx_timer_initialize+0xbc>)
 800b82a:	f000 fd6b 	bl	800c304 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800b82e:	4b24      	ldr	r3, [pc, #144]	@ (800b8c0 <_tx_timer_initialize+0xc0>)
 800b830:	4a22      	ldr	r2, [pc, #136]	@ (800b8bc <_tx_timer_initialize+0xbc>)
 800b832:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800b834:	4b23      	ldr	r3, [pc, #140]	@ (800b8c4 <_tx_timer_initialize+0xc4>)
 800b836:	4a21      	ldr	r2, [pc, #132]	@ (800b8bc <_tx_timer_initialize+0xbc>)
 800b838:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800b83a:	4b23      	ldr	r3, [pc, #140]	@ (800b8c8 <_tx_timer_initialize+0xc8>)
 800b83c:	4a23      	ldr	r2, [pc, #140]	@ (800b8cc <_tx_timer_initialize+0xcc>)
 800b83e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800b840:	4b21      	ldr	r3, [pc, #132]	@ (800b8c8 <_tx_timer_initialize+0xc8>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3304      	adds	r3, #4
 800b846:	4a20      	ldr	r2, [pc, #128]	@ (800b8c8 <_tx_timer_initialize+0xc8>)
 800b848:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800b84a:	4b21      	ldr	r3, [pc, #132]	@ (800b8d0 <_tx_timer_initialize+0xd0>)
 800b84c:	4a21      	ldr	r2, [pc, #132]	@ (800b8d4 <_tx_timer_initialize+0xd4>)
 800b84e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800b850:	4b21      	ldr	r3, [pc, #132]	@ (800b8d8 <_tx_timer_initialize+0xd8>)
 800b852:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b856:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800b858:	4b20      	ldr	r3, [pc, #128]	@ (800b8dc <_tx_timer_initialize+0xdc>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800b85e:	4b1c      	ldr	r3, [pc, #112]	@ (800b8d0 <_tx_timer_initialize+0xd0>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a1d      	ldr	r2, [pc, #116]	@ (800b8d8 <_tx_timer_initialize+0xd8>)
 800b864:	6812      	ldr	r2, [r2, #0]
 800b866:	491d      	ldr	r1, [pc, #116]	@ (800b8dc <_tx_timer_initialize+0xdc>)
 800b868:	6809      	ldr	r1, [r1, #0]
 800b86a:	481c      	ldr	r0, [pc, #112]	@ (800b8dc <_tx_timer_initialize+0xdc>)
 800b86c:	6800      	ldr	r0, [r0, #0]
 800b86e:	2400      	movs	r4, #0
 800b870:	9405      	str	r4, [sp, #20]
 800b872:	2400      	movs	r4, #0
 800b874:	9404      	str	r4, [sp, #16]
 800b876:	9003      	str	r0, [sp, #12]
 800b878:	9102      	str	r1, [sp, #8]
 800b87a:	9201      	str	r2, [sp, #4]
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	4b18      	ldr	r3, [pc, #96]	@ (800b8e0 <_tx_timer_initialize+0xe0>)
 800b880:	4a18      	ldr	r2, [pc, #96]	@ (800b8e4 <_tx_timer_initialize+0xe4>)
 800b882:	4919      	ldr	r1, [pc, #100]	@ (800b8e8 <_tx_timer_initialize+0xe8>)
 800b884:	4819      	ldr	r0, [pc, #100]	@ (800b8ec <_tx_timer_initialize+0xec>)
 800b886:	f7ff f9bf 	bl	800ac08 <_tx_thread_create>
 800b88a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1e5      	bne.n	800b85e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800b892:	4b17      	ldr	r3, [pc, #92]	@ (800b8f0 <_tx_timer_initialize+0xf0>)
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800b898:	4b16      	ldr	r3, [pc, #88]	@ (800b8f4 <_tx_timer_initialize+0xf4>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800b89e:	bf00      	nop
 800b8a0:	370c      	adds	r7, #12
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd90      	pop	{r4, r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	200109ac 	.word	0x200109ac
 800b8ac:	20010f0c 	.word	0x20010f0c
 800b8b0:	200109b0 	.word	0x200109b0
 800b8b4:	20010a40 	.word	0x20010a40
 800b8b8:	20010a4c 	.word	0x20010a4c
 800b8bc:	200109b4 	.word	0x200109b4
 800b8c0:	20010a34 	.word	0x20010a34
 800b8c4:	20010a3c 	.word	0x20010a3c
 800b8c8:	20010a38 	.word	0x20010a38
 800b8cc:	20010a30 	.word	0x20010a30
 800b8d0:	20010b00 	.word	0x20010b00
 800b8d4:	20010b0c 	.word	0x20010b0c
 800b8d8:	20010b04 	.word	0x20010b04
 800b8dc:	20010b08 	.word	0x20010b08
 800b8e0:	4154494d 	.word	0x4154494d
 800b8e4:	0800ba2d 	.word	0x0800ba2d
 800b8e8:	0800c4c4 	.word	0x0800c4c4
 800b8ec:	20010a50 	.word	0x20010a50
 800b8f0:	20010a44 	.word	0x20010a44
 800b8f4:	20010a48 	.word	0x20010a48

0800b8f8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b089      	sub	sp, #36	@ 0x24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d04a      	beq.n	800b9a2 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b912:	d046      	beq.n	800b9a2 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	699b      	ldr	r3, [r3, #24]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d142      	bne.n	800b9a2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	2b20      	cmp	r3, #32
 800b920:	d902      	bls.n	800b928 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800b922:	231f      	movs	r3, #31
 800b924:	61bb      	str	r3, [r7, #24]
 800b926:	e002      	b.n	800b92e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	3b01      	subs	r3, #1
 800b92c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800b92e:	4b20      	ldr	r3, [pc, #128]	@ (800b9b0 <_tx_timer_system_activate+0xb8>)
 800b930:	681a      	ldr	r2, [r3, #0]
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800b93a:	4b1e      	ldr	r3, [pc, #120]	@ (800b9b4 <_tx_timer_system_activate+0xbc>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	429a      	cmp	r2, r3
 800b942:	d30b      	bcc.n	800b95c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800b944:	4b1b      	ldr	r3, [pc, #108]	@ (800b9b4 <_tx_timer_system_activate+0xbc>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	69fa      	ldr	r2, [r7, #28]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	109b      	asrs	r3, r3, #2
 800b94e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800b950:	4b19      	ldr	r3, [pc, #100]	@ (800b9b8 <_tx_timer_system_activate+0xc0>)
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d109      	bne.n	800b978 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	601a      	str	r2, [r3, #0]
 800b976:	e011      	b.n	800b99c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	695b      	ldr	r3, [r3, #20]
 800b982:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	69fa      	ldr	r2, [r7, #28]
 800b9a0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800b9a2:	bf00      	nop
 800b9a4:	3724      	adds	r7, #36	@ 0x24
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	20010a3c 	.word	0x20010a3c
 800b9b4:	20010a38 	.word	0x20010a38
 800b9b8:	20010a34 	.word	0x20010a34

0800b9bc <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d026      	beq.n	800ba1e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d108      	bne.n	800b9f0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d117      	bne.n	800ba18 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	e013      	b.n	800ba18 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	695b      	ldr	r3, [r3, #20]
 800b9f4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d105      	bne.n	800ba18 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	619a      	str	r2, [r3, #24]
    }
}
 800ba1e:	bf00      	nop
 800ba20:	371c      	adds	r7, #28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
	...

0800ba2c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b098      	sub	sp, #96	@ 0x60
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800ba34:	2300      	movs	r3, #0
 800ba36:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a73      	ldr	r2, [pc, #460]	@ (800bc08 <_tx_timer_thread_entry+0x1dc>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	f040 80de 	bne.w	800bbfe <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba42:	f3ef 8310 	mrs	r3, PRIMASK
 800ba46:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800ba48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800ba4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba4c:	b672      	cpsid	i
    return(int_posture);
 800ba4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800ba50:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800ba52:	4b6e      	ldr	r3, [pc, #440]	@ (800bc0c <_tx_timer_thread_entry+0x1e0>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d003      	beq.n	800ba68 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f107 020c 	add.w	r2, r7, #12
 800ba66:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800ba68:	4b68      	ldr	r3, [pc, #416]	@ (800bc0c <_tx_timer_thread_entry+0x1e0>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800ba70:	4b66      	ldr	r3, [pc, #408]	@ (800bc0c <_tx_timer_thread_entry+0x1e0>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3304      	adds	r3, #4
 800ba76:	4a65      	ldr	r2, [pc, #404]	@ (800bc0c <_tx_timer_thread_entry+0x1e0>)
 800ba78:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800ba7a:	4b64      	ldr	r3, [pc, #400]	@ (800bc0c <_tx_timer_thread_entry+0x1e0>)
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	4b64      	ldr	r3, [pc, #400]	@ (800bc10 <_tx_timer_thread_entry+0x1e4>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d103      	bne.n	800ba8e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800ba86:	4b63      	ldr	r3, [pc, #396]	@ (800bc14 <_tx_timer_thread_entry+0x1e8>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a60      	ldr	r2, [pc, #384]	@ (800bc0c <_tx_timer_thread_entry+0x1e0>)
 800ba8c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800ba8e:	4b62      	ldr	r3, [pc, #392]	@ (800bc18 <_tx_timer_thread_entry+0x1ec>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	601a      	str	r2, [r3, #0]
 800ba94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba96:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba9a:	f383 8810 	msr	PRIMASK, r3
}
 800ba9e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800baa0:	f3ef 8310 	mrs	r3, PRIMASK
 800baa4:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800baa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800baa8:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800baaa:	b672      	cpsid	i
    return(int_posture);
 800baac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800baae:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800bab0:	e07f      	b.n	800bbb2 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800babc:	2300      	movs	r3, #0
 800babe:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800bac0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d102      	bne.n	800bace <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800bac8:	2300      	movs	r3, #0
 800baca:	60fb      	str	r3, [r7, #12]
 800bacc:	e00e      	b.n	800baec <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800bace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bad0:	695b      	ldr	r3, [r3, #20]
 800bad2:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800bad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bad8:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800bada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800badc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bade:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800bae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bae2:	f107 020c 	add.w	r2, r7, #12
 800bae6:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800bae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baea:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800baec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b20      	cmp	r3, #32
 800baf2:	d911      	bls.n	800bb18 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800baf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800bafc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bafe:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800bb00:	2300      	movs	r3, #0
 800bb02:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800bb04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb06:	f107 0208 	add.w	r2, r7, #8
 800bb0a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800bb0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb10:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800bb12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb14:	60bb      	str	r3, [r7, #8]
 800bb16:	e01a      	b.n	800bb4e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800bb18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800bb1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800bb24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb26:	685a      	ldr	r2, [r3, #4]
 800bb28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb2a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800bb2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d009      	beq.n	800bb48 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800bb34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb36:	f107 0208 	add.w	r2, r7, #8
 800bb3a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800bb3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb40:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800bb42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb44:	60bb      	str	r3, [r7, #8]
 800bb46:	e002      	b.n	800bb4e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800bb48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800bb4e:	4a33      	ldr	r2, [pc, #204]	@ (800bc1c <_tx_timer_thread_entry+0x1f0>)
 800bb50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb52:	6013      	str	r3, [r2, #0]
 800bb54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5a:	f383 8810 	msr	PRIMASK, r3
}
 800bb5e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800bb60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800bb66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb68:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bb6a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb6c:	f3ef 8310 	mrs	r3, PRIMASK
 800bb70:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800bb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800bb74:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb76:	b672      	cpsid	i
    return(int_posture);
 800bb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800bb7a:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800bb7c:	4b27      	ldr	r3, [pc, #156]	@ (800bc1c <_tx_timer_thread_entry+0x1f0>)
 800bb7e:	2200      	movs	r2, #0
 800bb80:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d105      	bne.n	800bb96 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800bb8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800bb90:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800bb92:	f7ff feb1 	bl	800b8f8 <_tx_timer_system_activate>
 800bb96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb98:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	f383 8810 	msr	PRIMASK, r3
}
 800bba0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bba2:	f3ef 8310 	mrs	r3, PRIMASK
 800bba6:	623b      	str	r3, [r7, #32]
    return(posture);
 800bba8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bbaa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbac:	b672      	cpsid	i
    return(int_posture);
 800bbae:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800bbb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f47f af7c 	bne.w	800bab2 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800bbba:	4b17      	ldr	r3, [pc, #92]	@ (800bc18 <_tx_timer_thread_entry+0x1ec>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d116      	bne.n	800bbf0 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800bbc2:	4b17      	ldr	r3, [pc, #92]	@ (800bc20 <_tx_timer_thread_entry+0x1f4>)
 800bbc4:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800bbc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbc8:	2203      	movs	r2, #3
 800bbca:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bbcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbce:	2201      	movs	r2, #1
 800bbd0:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800bbd2:	4b14      	ldr	r3, [pc, #80]	@ (800bc24 <_tx_timer_thread_entry+0x1f8>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	4a12      	ldr	r2, [pc, #72]	@ (800bc24 <_tx_timer_thread_entry+0x1f8>)
 800bbda:	6013      	str	r3, [r2, #0]
 800bbdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbde:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	f383 8810 	msr	PRIMASK, r3
}
 800bbe6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800bbe8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bbea:	f7ff fb45 	bl	800b278 <_tx_thread_system_suspend>
 800bbee:	e728      	b.n	800ba42 <_tx_timer_thread_entry+0x16>
 800bbf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbf2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	f383 8810 	msr	PRIMASK, r3
}
 800bbfa:	bf00      	nop
            TX_DISABLE
 800bbfc:	e721      	b.n	800ba42 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800bbfe:	bf00      	nop
 800bc00:	3760      	adds	r7, #96	@ 0x60
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	4154494d 	.word	0x4154494d
 800bc0c:	20010a3c 	.word	0x20010a3c
 800bc10:	20010a38 	.word	0x20010a38
 800bc14:	20010a34 	.word	0x20010a34
 800bc18:	20010a40 	.word	0x20010a40
 800bc1c:	20010a4c 	.word	0x20010a4c
 800bc20:	20010a50 	.word	0x20010a50
 800bc24:	200109a0 	.word	0x200109a0

0800bc28 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08a      	sub	sp, #40	@ 0x28
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
 800bc34:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bc36:	2300      	movs	r3, #0
 800bc38:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d102      	bne.n	800bc46 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bc40:	2302      	movs	r3, #2
 800bc42:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc44:	e029      	b.n	800bc9a <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4a2d      	ldr	r2, [pc, #180]	@ (800bd00 <_txe_byte_allocate+0xd8>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d002      	beq.n	800bc56 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bc50:	2302      	movs	r3, #2
 800bc52:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc54:	e021      	b.n	800bc9a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc60:	e01b      	b.n	800bc9a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d102      	bne.n	800bc6e <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800bc68:	2305      	movs	r3, #5
 800bc6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc6c:	e015      	b.n	800bc9a <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	69db      	ldr	r3, [r3, #28]
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d902      	bls.n	800bc7e <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800bc78:	2305      	movs	r3, #5
 800bc7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc7c:	e00d      	b.n	800bc9a <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00a      	beq.n	800bc9a <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc84:	f3ef 8305 	mrs	r3, IPSR
 800bc88:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800bc8a:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bc8c:	4b1d      	ldr	r3, [pc, #116]	@ (800bd04 <_txe_byte_allocate+0xdc>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4313      	orrs	r3, r2
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800bc96:	2304      	movs	r3, #4
 800bc98:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d108      	bne.n	800bcb2 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800bca0:	4b19      	ldr	r3, [pc, #100]	@ (800bd08 <_txe_byte_allocate+0xe0>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800bca6:	6a3b      	ldr	r3, [r7, #32]
 800bca8:	4a18      	ldr	r2, [pc, #96]	@ (800bd0c <_txe_byte_allocate+0xe4>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d101      	bne.n	800bcb2 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800bcae:	2313      	movs	r3, #19
 800bcb0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d114      	bne.n	800bce2 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bcb8:	f3ef 8305 	mrs	r3, IPSR
 800bcbc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bcbe:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bcc0:	4b10      	ldr	r3, [pc, #64]	@ (800bd04 <_txe_byte_allocate+0xdc>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00b      	beq.n	800bce2 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bcca:	f3ef 8305 	mrs	r3, IPSR
 800bcce:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bcd0:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bcd2:	4b0c      	ldr	r3, [pc, #48]	@ (800bd04 <_txe_byte_allocate+0xdc>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bcdc:	d201      	bcs.n	800bce2 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bcde:	2313      	movs	r3, #19
 800bce0:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d106      	bne.n	800bcf6 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	68b9      	ldr	r1, [r7, #8]
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f7fe fa7e 	bl	800a1f0 <_tx_byte_allocate>
 800bcf4:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3728      	adds	r7, #40	@ 0x28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	42595445 	.word	0x42595445
 800bd04:	2000000c 	.word	0x2000000c
 800bd08:	20010908 	.word	0x20010908
 800bd0c:	20010a50 	.word	0x20010a50

0800bd10 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b092      	sub	sp, #72	@ 0x48
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
 800bd1c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d102      	bne.n	800bd2e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bd28:	2302      	movs	r3, #2
 800bd2a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd2c:	e075      	b.n	800be1a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800bd2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd30:	2b34      	cmp	r3, #52	@ 0x34
 800bd32:	d002      	beq.n	800bd3a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bd34:	2302      	movs	r3, #2
 800bd36:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd38:	e06f      	b.n	800be1a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd3a:	f3ef 8310 	mrs	r3, PRIMASK
 800bd3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800bd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800bd42:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd44:	b672      	cpsid	i
    return(int_posture);
 800bd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bd48:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bd4a:	4b3b      	ldr	r3, [pc, #236]	@ (800be38 <_txe_byte_pool_create+0x128>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	4a39      	ldr	r2, [pc, #228]	@ (800be38 <_txe_byte_pool_create+0x128>)
 800bd52:	6013      	str	r3, [r2, #0]
 800bd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd56:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd5a:	f383 8810 	msr	PRIMASK, r3
}
 800bd5e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800bd60:	4b36      	ldr	r3, [pc, #216]	@ (800be3c <_txe_byte_pool_create+0x12c>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bd66:	2300      	movs	r3, #0
 800bd68:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd6a:	e009      	b.n	800bd80 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d00b      	beq.n	800bd8c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800bd74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bd7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd80:	4b2f      	ldr	r3, [pc, #188]	@ (800be40 <_txe_byte_pool_create+0x130>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d3f0      	bcc.n	800bd6c <_txe_byte_pool_create+0x5c>
 800bd8a:	e000      	b.n	800bd8e <_txe_byte_pool_create+0x7e>
                break;
 800bd8c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd8e:	f3ef 8310 	mrs	r3, PRIMASK
 800bd92:	623b      	str	r3, [r7, #32]
    return(posture);
 800bd94:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bd96:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd98:	b672      	cpsid	i
    return(int_posture);
 800bd9a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bd9c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bd9e:	4b26      	ldr	r3, [pc, #152]	@ (800be38 <_txe_byte_pool_create+0x128>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3b01      	subs	r3, #1
 800bda4:	4a24      	ldr	r2, [pc, #144]	@ (800be38 <_txe_byte_pool_create+0x128>)
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdaa:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdae:	f383 8810 	msr	PRIMASK, r3
}
 800bdb2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bdb4:	f7ff f926 	bl	800b004 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d102      	bne.n	800bdc6 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800bdc0:	2302      	movs	r3, #2
 800bdc2:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdc4:	e029      	b.n	800be1a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d102      	bne.n	800bdd2 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800bdcc:	2303      	movs	r3, #3
 800bdce:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdd0:	e023      	b.n	800be1a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	2b63      	cmp	r3, #99	@ 0x63
 800bdd6:	d802      	bhi.n	800bdde <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800bdd8:	2305      	movs	r3, #5
 800bdda:	647b      	str	r3, [r7, #68]	@ 0x44
 800bddc:	e01d      	b.n	800be1a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bdde:	4b19      	ldr	r3, [pc, #100]	@ (800be44 <_txe_byte_pool_create+0x134>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800bde4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bde6:	4a18      	ldr	r2, [pc, #96]	@ (800be48 <_txe_byte_pool_create+0x138>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d101      	bne.n	800bdf0 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bdec:	2313      	movs	r3, #19
 800bdee:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bdf0:	f3ef 8305 	mrs	r3, IPSR
 800bdf4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bdf6:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bdf8:	4b14      	ldr	r3, [pc, #80]	@ (800be4c <_txe_byte_pool_create+0x13c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00b      	beq.n	800be1a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be02:	f3ef 8305 	mrs	r3, IPSR
 800be06:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800be08:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800be0a:	4b10      	ldr	r3, [pc, #64]	@ (800be4c <_txe_byte_pool_create+0x13c>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4313      	orrs	r3, r2
 800be10:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800be14:	d201      	bcs.n	800be1a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800be16:	2313      	movs	r3, #19
 800be18:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800be1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d106      	bne.n	800be2e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	68b9      	ldr	r1, [r7, #8]
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7fe fb24 	bl	800a474 <_tx_byte_pool_create>
 800be2c:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800be2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800be30:	4618      	mov	r0, r3
 800be32:	3748      	adds	r7, #72	@ 0x48
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	200109a0 	.word	0x200109a0
 800be3c:	200108f8 	.word	0x200108f8
 800be40:	200108fc 	.word	0x200108fc
 800be44:	20010908 	.word	0x20010908
 800be48:	20010a50 	.word	0x20010a50
 800be4c:	2000000c 	.word	0x2000000c

0800be50 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b092      	sub	sp, #72	@ 0x48
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800be5e:	2300      	movs	r3, #0
 800be60:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d102      	bne.n	800be6e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800be68:	230c      	movs	r3, #12
 800be6a:	647b      	str	r3, [r7, #68]	@ 0x44
 800be6c:	e054      	b.n	800bf18 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	2b1c      	cmp	r3, #28
 800be72:	d002      	beq.n	800be7a <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800be74:	230c      	movs	r3, #12
 800be76:	647b      	str	r3, [r7, #68]	@ 0x44
 800be78:	e04e      	b.n	800bf18 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be7a:	f3ef 8310 	mrs	r3, PRIMASK
 800be7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800be80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800be82:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800be84:	b672      	cpsid	i
    return(int_posture);
 800be86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800be88:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800be8a:	4b36      	ldr	r3, [pc, #216]	@ (800bf64 <_txe_semaphore_create+0x114>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	3301      	adds	r3, #1
 800be90:	4a34      	ldr	r2, [pc, #208]	@ (800bf64 <_txe_semaphore_create+0x114>)
 800be92:	6013      	str	r3, [r2, #0]
 800be94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be96:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9a:	f383 8810 	msr	PRIMASK, r3
}
 800be9e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800bea0:	4b31      	ldr	r3, [pc, #196]	@ (800bf68 <_txe_semaphore_create+0x118>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800bea6:	2300      	movs	r3, #0
 800bea8:	643b      	str	r3, [r7, #64]	@ 0x40
 800beaa:	e009      	b.n	800bec0 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d00b      	beq.n	800becc <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800beb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beb6:	695b      	ldr	r3, [r3, #20]
 800beb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800beba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bebc:	3301      	adds	r3, #1
 800bebe:	643b      	str	r3, [r7, #64]	@ 0x40
 800bec0:	4b2a      	ldr	r3, [pc, #168]	@ (800bf6c <_txe_semaphore_create+0x11c>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d3f0      	bcc.n	800beac <_txe_semaphore_create+0x5c>
 800beca:	e000      	b.n	800bece <_txe_semaphore_create+0x7e>
                break;
 800becc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bece:	f3ef 8310 	mrs	r3, PRIMASK
 800bed2:	623b      	str	r3, [r7, #32]
    return(posture);
 800bed4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bed6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bed8:	b672      	cpsid	i
    return(int_posture);
 800beda:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bedc:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bede:	4b21      	ldr	r3, [pc, #132]	@ (800bf64 <_txe_semaphore_create+0x114>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	3b01      	subs	r3, #1
 800bee4:	4a1f      	ldr	r2, [pc, #124]	@ (800bf64 <_txe_semaphore_create+0x114>)
 800bee6:	6013      	str	r3, [r2, #0]
 800bee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beea:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800beec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beee:	f383 8810 	msr	PRIMASK, r3
}
 800bef2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bef4:	f7ff f886 	bl	800b004 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800befc:	429a      	cmp	r2, r3
 800befe:	d102      	bne.n	800bf06 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800bf00:	230c      	movs	r3, #12
 800bf02:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf04:	e008      	b.n	800bf18 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bf06:	4b1a      	ldr	r3, [pc, #104]	@ (800bf70 <_txe_semaphore_create+0x120>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf0e:	4a19      	ldr	r2, [pc, #100]	@ (800bf74 <_txe_semaphore_create+0x124>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d101      	bne.n	800bf18 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bf14:	2313      	movs	r3, #19
 800bf16:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bf18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d114      	bne.n	800bf48 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bf1e:	f3ef 8305 	mrs	r3, IPSR
 800bf22:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bf24:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bf26:	4b14      	ldr	r3, [pc, #80]	@ (800bf78 <_txe_semaphore_create+0x128>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00b      	beq.n	800bf48 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bf30:	f3ef 8305 	mrs	r3, IPSR
 800bf34:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bf36:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bf38:	4b0f      	ldr	r3, [pc, #60]	@ (800bf78 <_txe_semaphore_create+0x128>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bf42:	d201      	bcs.n	800bf48 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bf44:	2313      	movs	r3, #19
 800bf46:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bf48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d105      	bne.n	800bf5a <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	68b9      	ldr	r1, [r7, #8]
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f7fe fd1c 	bl	800a990 <_tx_semaphore_create>
 800bf58:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800bf5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3748      	adds	r7, #72	@ 0x48
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	200109a0 	.word	0x200109a0
 800bf68:	200108d0 	.word	0x200108d0
 800bf6c:	200108d4 	.word	0x200108d4
 800bf70:	20010908 	.word	0x20010908
 800bf74:	20010a50 	.word	0x20010a50
 800bf78:	2000000c 	.word	0x2000000c

0800bf7c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bf86:	2300      	movs	r3, #0
 800bf88:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d102      	bne.n	800bf96 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800bf90:	230c      	movs	r3, #12
 800bf92:	617b      	str	r3, [r7, #20]
 800bf94:	e01f      	b.n	800bfd6 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a15      	ldr	r2, [pc, #84]	@ (800bff0 <_txe_semaphore_get+0x74>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d002      	beq.n	800bfa6 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800bfa0:	230c      	movs	r3, #12
 800bfa2:	617b      	str	r3, [r7, #20]
 800bfa4:	e017      	b.n	800bfd6 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d014      	beq.n	800bfd6 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bfac:	f3ef 8305 	mrs	r3, IPSR
 800bfb0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800bfb2:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bfb4:	4b0f      	ldr	r3, [pc, #60]	@ (800bff4 <_txe_semaphore_get+0x78>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d002      	beq.n	800bfc4 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800bfbe:	2304      	movs	r3, #4
 800bfc0:	617b      	str	r3, [r7, #20]
 800bfc2:	e008      	b.n	800bfd6 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800bfc4:	4b0c      	ldr	r3, [pc, #48]	@ (800bff8 <_txe_semaphore_get+0x7c>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	4a0b      	ldr	r2, [pc, #44]	@ (800bffc <_txe_semaphore_get+0x80>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d101      	bne.n	800bfd6 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800bfd2:	2304      	movs	r3, #4
 800bfd4:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d104      	bne.n	800bfe6 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800bfdc:	6839      	ldr	r1, [r7, #0]
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f7fe fd28 	bl	800aa34 <_tx_semaphore_get>
 800bfe4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800bfe6:	697b      	ldr	r3, [r7, #20]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3718      	adds	r7, #24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	53454d41 	.word	0x53454d41
 800bff4:	2000000c 	.word	0x2000000c
 800bff8:	20010908 	.word	0x20010908
 800bffc:	20010a50 	.word	0x20010a50

0800c000 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d102      	bne.n	800c014 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c00e:	230c      	movs	r3, #12
 800c010:	60fb      	str	r3, [r7, #12]
 800c012:	e00b      	b.n	800c02c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a07      	ldr	r2, [pc, #28]	@ (800c038 <_txe_semaphore_put+0x38>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d002      	beq.n	800c024 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800c01e:	230c      	movs	r3, #12
 800c020:	60fb      	str	r3, [r7, #12]
 800c022:	e003      	b.n	800c02c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f7fe fd97 	bl	800ab58 <_tx_semaphore_put>
 800c02a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c02c:	68fb      	ldr	r3, [r7, #12]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	53454d41 	.word	0x53454d41

0800c03c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b09a      	sub	sp, #104	@ 0x68
 800c040:	af06      	add	r7, sp, #24
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c04a:	2300      	movs	r3, #0
 800c04c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d102      	bne.n	800c05a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c054:	230e      	movs	r3, #14
 800c056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c058:	e0bb      	b.n	800c1d2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800c05a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c05c:	2bb0      	cmp	r3, #176	@ 0xb0
 800c05e:	d002      	beq.n	800c066 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800c060:	230e      	movs	r3, #14
 800c062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c064:	e0b5      	b.n	800c1d2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c066:	f3ef 8310 	mrs	r3, PRIMASK
 800c06a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800c06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800c06e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c070:	b672      	cpsid	i
    return(int_posture);
 800c072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c074:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c076:	4b64      	ldr	r3, [pc, #400]	@ (800c208 <_txe_thread_create+0x1cc>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3301      	adds	r3, #1
 800c07c:	4a62      	ldr	r2, [pc, #392]	@ (800c208 <_txe_thread_create+0x1cc>)
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c082:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c086:	f383 8810 	msr	PRIMASK, r3
}
 800c08a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800c08c:	2300      	movs	r3, #0
 800c08e:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800c090:	4b5e      	ldr	r3, [pc, #376]	@ (800c20c <_txe_thread_create+0x1d0>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c098:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800c09a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c09c:	3b01      	subs	r3, #1
 800c09e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0a0:	4413      	add	r3, r2
 800c0a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0ac:	e02b      	b.n	800c106 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d101      	bne.n	800c0ba <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800c0ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d028      	beq.n	800c112 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800c0c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d308      	bcc.n	800c0dc <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800c0ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d203      	bcs.n	800c0dc <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800c0dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d308      	bcc.n	800c0f8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800c0e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0e8:	691b      	ldr	r3, [r3, #16]
 800c0ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d203      	bcs.n	800c0f8 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800c0f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0fe:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c102:	3301      	adds	r3, #1
 800c104:	647b      	str	r3, [r7, #68]	@ 0x44
 800c106:	4b42      	ldr	r3, [pc, #264]	@ (800c210 <_txe_thread_create+0x1d4>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d3ce      	bcc.n	800c0ae <_txe_thread_create+0x72>
 800c110:	e000      	b.n	800c114 <_txe_thread_create+0xd8>
                break;
 800c112:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c114:	f3ef 8310 	mrs	r3, PRIMASK
 800c118:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c11a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c11c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c11e:	b672      	cpsid	i
    return(int_posture);
 800c120:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c122:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c124:	4b38      	ldr	r3, [pc, #224]	@ (800c208 <_txe_thread_create+0x1cc>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	3b01      	subs	r3, #1
 800c12a:	4a37      	ldr	r2, [pc, #220]	@ (800c208 <_txe_thread_create+0x1cc>)
 800c12c:	6013      	str	r3, [r2, #0]
 800c12e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c130:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c132:	6a3b      	ldr	r3, [r7, #32]
 800c134:	f383 8810 	msr	PRIMASK, r3
}
 800c138:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c13a:	f7fe ff63 	bl	800b004 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c142:	429a      	cmp	r2, r3
 800c144:	d102      	bne.n	800c14c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800c146:	230e      	movs	r3, #14
 800c148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c14a:	e042      	b.n	800c1d2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800c14c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d102      	bne.n	800c158 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c152:	2303      	movs	r3, #3
 800c154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c156:	e03c      	b.n	800c1d2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d102      	bne.n	800c164 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c15e:	2303      	movs	r3, #3
 800c160:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c162:	e036      	b.n	800c1d2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800c164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c166:	2bc7      	cmp	r3, #199	@ 0xc7
 800c168:	d802      	bhi.n	800c170 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800c16a:	2305      	movs	r3, #5
 800c16c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c16e:	e030      	b.n	800c1d2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800c170:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c172:	2b1f      	cmp	r3, #31
 800c174:	d902      	bls.n	800c17c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800c176:	230f      	movs	r3, #15
 800c178:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c17a:	e02a      	b.n	800c1d2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800c17c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c17e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c180:	429a      	cmp	r2, r3
 800c182:	d902      	bls.n	800c18a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800c184:	2318      	movs	r3, #24
 800c186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c188:	e023      	b.n	800c1d2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800c18a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d902      	bls.n	800c196 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800c190:	2310      	movs	r3, #16
 800c192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c194:	e01d      	b.n	800c1d2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800c196:	4b1f      	ldr	r3, [pc, #124]	@ (800c214 <_txe_thread_create+0x1d8>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800c19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19e:	4a1e      	ldr	r2, [pc, #120]	@ (800c218 <_txe_thread_create+0x1dc>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d101      	bne.n	800c1a8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c1a4:	2313      	movs	r3, #19
 800c1a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1a8:	f3ef 8305 	mrs	r3, IPSR
 800c1ac:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c1ae:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c1b0:	4b1a      	ldr	r3, [pc, #104]	@ (800c21c <_txe_thread_create+0x1e0>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00b      	beq.n	800c1d2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1ba:	f3ef 8305 	mrs	r3, IPSR
 800c1be:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c1c0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c1c2:	4b16      	ldr	r3, [pc, #88]	@ (800c21c <_txe_thread_create+0x1e0>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c1cc:	d201      	bcs.n	800c1d2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c1ce:	2313      	movs	r3, #19
 800c1d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c1d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d112      	bne.n	800c1fe <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800c1d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1da:	9305      	str	r3, [sp, #20]
 800c1dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1de:	9304      	str	r3, [sp, #16]
 800c1e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1e2:	9303      	str	r3, [sp, #12]
 800c1e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c1e6:	9302      	str	r3, [sp, #8]
 800c1e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1ea:	9301      	str	r3, [sp, #4]
 800c1ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f7fe fd06 	bl	800ac08 <_tx_thread_create>
 800c1fc:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800c1fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c200:	4618      	mov	r0, r3
 800c202:	3750      	adds	r7, #80	@ 0x50
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	200109a0 	.word	0x200109a0
 800c20c:	20010910 	.word	0x20010910
 800c210:	20010914 	.word	0x20010914
 800c214:	20010908 	.word	0x20010908
 800c218:	20010a50 	.word	0x20010a50
 800c21c:	2000000c 	.word	0x2000000c

0800c220 <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d102      	bne.n	800c234 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c22e:	2315      	movs	r3, #21
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	e00b      	b.n	800c24c <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a07      	ldr	r2, [pc, #28]	@ (800c258 <_txe_timer_activate+0x38>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d002      	beq.n	800c244 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c23e:	2315      	movs	r3, #21
 800c240:	60fb      	str	r3, [r7, #12]
 800c242:	e003      	b.n	800c24c <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f7ff f9bd 	bl	800b5c4 <_tx_timer_activate>
 800c24a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c24c:	68fb      	ldr	r3, [r7, #12]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	4154494d 	.word	0x4154494d

0800c25c <_txe_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b086      	sub	sp, #24
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d102      	bne.n	800c274 <_txe_timer_change+0x18>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c26e:	2315      	movs	r3, #21
 800c270:	617b      	str	r3, [r7, #20]
 800c272:	e020      	b.n	800c2b6 <_txe_timer_change+0x5a>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a11      	ldr	r2, [pc, #68]	@ (800c2c0 <_txe_timer_change+0x64>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d002      	beq.n	800c284 <_txe_timer_change+0x28>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c27e:	2315      	movs	r3, #21
 800c280:	617b      	str	r3, [r7, #20]
 800c282:	e018      	b.n	800c2b6 <_txe_timer_change+0x5a>
    }

    /* Check for an illegal initial tick value.  */
    else if (initial_ticks == ((ULONG) 0))
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d102      	bne.n	800c290 <_txe_timer_change+0x34>
    {

        /* Invalid initial tick value, return appropriate error code.  */
        status =  TX_TICK_ERROR;
 800c28a:	2316      	movs	r3, #22
 800c28c:	617b      	str	r3, [r7, #20]
 800c28e:	e012      	b.n	800c2b6 <_txe_timer_change+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c290:	f3ef 8305 	mrs	r3, IPSR
 800c294:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c296:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800c298:	4b0a      	ldr	r3, [pc, #40]	@ (800c2c4 <_txe_timer_change+0x68>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c2a2:	d302      	bcc.n	800c2aa <_txe_timer_change+0x4e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800c2a4:	2313      	movs	r3, #19
 800c2a6:	617b      	str	r3, [r7, #20]
 800c2a8:	e005      	b.n	800c2b6 <_txe_timer_change+0x5a>
    }
    else
    {

        /* Call actual application timer function.  */
        status =  _tx_timer_change(timer_ptr, initial_ticks, reschedule_ticks);
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	68b9      	ldr	r1, [r7, #8]
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	f7ff f9b4 	bl	800b61c <_tx_timer_change>
 800c2b4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c2b6:	697b      	ldr	r3, [r7, #20]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3718      	adds	r7, #24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	4154494d 	.word	0x4154494d
 800c2c4:	2000000c 	.word	0x2000000c

0800c2c8 <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d102      	bne.n	800c2dc <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c2d6:	2315      	movs	r3, #21
 800c2d8:	60fb      	str	r3, [r7, #12]
 800c2da:	e00b      	b.n	800c2f4 <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a07      	ldr	r2, [pc, #28]	@ (800c300 <_txe_timer_deactivate+0x38>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d002      	beq.n	800c2ec <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800c2e6:	2315      	movs	r3, #21
 800c2e8:	60fb      	str	r3, [r7, #12]
 800c2ea:	e003      	b.n	800c2f4 <_txe_timer_deactivate+0x2c>
    }
    else
    {

        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f7ff f9bb 	bl	800b668 <_tx_timer_deactivate>
 800c2f2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	4154494d 	.word	0x4154494d

0800c304 <memset>:
 800c304:	4402      	add	r2, r0
 800c306:	4603      	mov	r3, r0
 800c308:	4293      	cmp	r3, r2
 800c30a:	d100      	bne.n	800c30e <memset+0xa>
 800c30c:	4770      	bx	lr
 800c30e:	f803 1b01 	strb.w	r1, [r3], #1
 800c312:	e7f9      	b.n	800c308 <memset+0x4>

0800c314 <__libc_init_array>:
 800c314:	b570      	push	{r4, r5, r6, lr}
 800c316:	4d0d      	ldr	r5, [pc, #52]	@ (800c34c <__libc_init_array+0x38>)
 800c318:	4c0d      	ldr	r4, [pc, #52]	@ (800c350 <__libc_init_array+0x3c>)
 800c31a:	1b64      	subs	r4, r4, r5
 800c31c:	10a4      	asrs	r4, r4, #2
 800c31e:	2600      	movs	r6, #0
 800c320:	42a6      	cmp	r6, r4
 800c322:	d109      	bne.n	800c338 <__libc_init_array+0x24>
 800c324:	4d0b      	ldr	r5, [pc, #44]	@ (800c354 <__libc_init_array+0x40>)
 800c326:	4c0c      	ldr	r4, [pc, #48]	@ (800c358 <__libc_init_array+0x44>)
 800c328:	f000 f818 	bl	800c35c <_init>
 800c32c:	1b64      	subs	r4, r4, r5
 800c32e:	10a4      	asrs	r4, r4, #2
 800c330:	2600      	movs	r6, #0
 800c332:	42a6      	cmp	r6, r4
 800c334:	d105      	bne.n	800c342 <__libc_init_array+0x2e>
 800c336:	bd70      	pop	{r4, r5, r6, pc}
 800c338:	f855 3b04 	ldr.w	r3, [r5], #4
 800c33c:	4798      	blx	r3
 800c33e:	3601      	adds	r6, #1
 800c340:	e7ee      	b.n	800c320 <__libc_init_array+0xc>
 800c342:	f855 3b04 	ldr.w	r3, [r5], #4
 800c346:	4798      	blx	r3
 800c348:	3601      	adds	r6, #1
 800c34a:	e7f2      	b.n	800c332 <__libc_init_array+0x1e>
 800c34c:	0800c538 	.word	0x0800c538
 800c350:	0800c538 	.word	0x0800c538
 800c354:	0800c538 	.word	0x0800c538
 800c358:	0800c53c 	.word	0x0800c53c

0800c35c <_init>:
 800c35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35e:	bf00      	nop
 800c360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c362:	bc08      	pop	{r3}
 800c364:	469e      	mov	lr, r3
 800c366:	4770      	bx	lr

0800c368 <_fini>:
 800c368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36a:	bf00      	nop
 800c36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c36e:	bc08      	pop	{r3}
 800c370:	469e      	mov	lr, r3
 800c372:	4770      	bx	lr
