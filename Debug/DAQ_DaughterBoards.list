
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a468  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800a648  0800a648  0000b648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a70c  0800a70c  0000c058  2**0
                  CONTENTS
  4 .ARM          00000008  0800a70c  0800a70c  0000b70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a714  0800a714  0000c058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a714  0800a714  0000b714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a718  0800a718  0000b718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  0800a71c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c4  20000058  0800a774  0000c058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000111c  0800a774  0000c11c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c058  2**0
                  CONTENTS, READONLY
 12 .debug_info   000313d5  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007ea9  00000000  00000000  0003d45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d0  00000000  00000000  00045308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019f2  00000000  00000000  000475d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003253f  00000000  00000000  00048fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a8dc  00000000  00000000  0007b509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012617f  00000000  00000000  000b5de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dbf64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086b8  00000000  00000000  001dbfa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fd  00000000  00000000  001e4660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000058 	.word	0x20000058
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a630 	.word	0x0800a630

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000005c 	.word	0x2000005c
 800021c:	0800a630 	.word	0x0800a630

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	@ (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	@ (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	@ (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	@ (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	@ (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	20000b10 	.word	0x20000b10
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	0019f09f 	.word	0x0019f09f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	@ (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	@ (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20000bac 	.word	0x20000bac
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20000b14 	.word	0x20000b14
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20000b18 	.word	0x20000b18
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	20001118 	.word	0x20001118

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f009 fbbb 	bl	8009b74 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f009 fb28 	bl	8009a58 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	@ (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	@ (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20000bb8 	.word	0x20000bb8
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	20001118 	.word	0x20001118
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20000bbc 	.word	0x20000bbc
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20000c48 	.word	0x20000c48
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20000c4c 	.word	0x20000c4c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20000c44 	.word	0x20000c44
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20000c40 	.word	0x20000c40
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20000bac 	.word	0x20000bac
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20000b14 	.word	0x20000b14
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20000b18 	.word	0x20000b18
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <__aeabi_uldivmod>:
 8000458:	b953      	cbnz	r3, 8000470 <__aeabi_uldivmod+0x18>
 800045a:	b94a      	cbnz	r2, 8000470 <__aeabi_uldivmod+0x18>
 800045c:	2900      	cmp	r1, #0
 800045e:	bf08      	it	eq
 8000460:	2800      	cmpeq	r0, #0
 8000462:	bf1c      	itt	ne
 8000464:	f04f 31ff 	movne.w	r1, #4294967295
 8000468:	f04f 30ff 	movne.w	r0, #4294967295
 800046c:	f000 b96a 	b.w	8000744 <__aeabi_idiv0>
 8000470:	f1ad 0c08 	sub.w	ip, sp, #8
 8000474:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000478:	f000 f806 	bl	8000488 <__udivmoddi4>
 800047c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000484:	b004      	add	sp, #16
 8000486:	4770      	bx	lr

08000488 <__udivmoddi4>:
 8000488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800048c:	9d08      	ldr	r5, [sp, #32]
 800048e:	460c      	mov	r4, r1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d14e      	bne.n	8000532 <__udivmoddi4+0xaa>
 8000494:	4694      	mov	ip, r2
 8000496:	458c      	cmp	ip, r1
 8000498:	4686      	mov	lr, r0
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	d962      	bls.n	8000566 <__udivmoddi4+0xde>
 80004a0:	b14a      	cbz	r2, 80004b6 <__udivmoddi4+0x2e>
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	4091      	lsls	r1, r2
 80004a8:	fa20 f303 	lsr.w	r3, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	4319      	orrs	r1, r3
 80004b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ba:	fa1f f68c 	uxth.w	r6, ip
 80004be:	fbb1 f4f7 	udiv	r4, r1, r7
 80004c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004c6:	fb07 1114 	mls	r1, r7, r4, r1
 80004ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ce:	fb04 f106 	mul.w	r1, r4, r6
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d90a      	bls.n	80004ec <__udivmoddi4+0x64>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f104 30ff 	add.w	r0, r4, #4294967295
 80004de:	f080 8112 	bcs.w	8000706 <__udivmoddi4+0x27e>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 810f 	bls.w	8000706 <__udivmoddi4+0x27e>
 80004e8:	3c02      	subs	r4, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a59      	subs	r1, r3, r1
 80004ee:	fa1f f38e 	uxth.w	r3, lr
 80004f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f6:	fb07 1110 	mls	r1, r7, r0, r1
 80004fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fe:	fb00 f606 	mul.w	r6, r0, r6
 8000502:	429e      	cmp	r6, r3
 8000504:	d90a      	bls.n	800051c <__udivmoddi4+0x94>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 31ff 	add.w	r1, r0, #4294967295
 800050e:	f080 80fc 	bcs.w	800070a <__udivmoddi4+0x282>
 8000512:	429e      	cmp	r6, r3
 8000514:	f240 80f9 	bls.w	800070a <__udivmoddi4+0x282>
 8000518:	4463      	add	r3, ip
 800051a:	3802      	subs	r0, #2
 800051c:	1b9b      	subs	r3, r3, r6
 800051e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000522:	2100      	movs	r1, #0
 8000524:	b11d      	cbz	r5, 800052e <__udivmoddi4+0xa6>
 8000526:	40d3      	lsrs	r3, r2
 8000528:	2200      	movs	r2, #0
 800052a:	e9c5 3200 	strd	r3, r2, [r5]
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	428b      	cmp	r3, r1
 8000534:	d905      	bls.n	8000542 <__udivmoddi4+0xba>
 8000536:	b10d      	cbz	r5, 800053c <__udivmoddi4+0xb4>
 8000538:	e9c5 0100 	strd	r0, r1, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	4608      	mov	r0, r1
 8000540:	e7f5      	b.n	800052e <__udivmoddi4+0xa6>
 8000542:	fab3 f183 	clz	r1, r3
 8000546:	2900      	cmp	r1, #0
 8000548:	d146      	bne.n	80005d8 <__udivmoddi4+0x150>
 800054a:	42a3      	cmp	r3, r4
 800054c:	d302      	bcc.n	8000554 <__udivmoddi4+0xcc>
 800054e:	4290      	cmp	r0, r2
 8000550:	f0c0 80f0 	bcc.w	8000734 <__udivmoddi4+0x2ac>
 8000554:	1a86      	subs	r6, r0, r2
 8000556:	eb64 0303 	sbc.w	r3, r4, r3
 800055a:	2001      	movs	r0, #1
 800055c:	2d00      	cmp	r5, #0
 800055e:	d0e6      	beq.n	800052e <__udivmoddi4+0xa6>
 8000560:	e9c5 6300 	strd	r6, r3, [r5]
 8000564:	e7e3      	b.n	800052e <__udivmoddi4+0xa6>
 8000566:	2a00      	cmp	r2, #0
 8000568:	f040 8090 	bne.w	800068c <__udivmoddi4+0x204>
 800056c:	eba1 040c 	sub.w	r4, r1, ip
 8000570:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000574:	fa1f f78c 	uxth.w	r7, ip
 8000578:	2101      	movs	r1, #1
 800057a:	fbb4 f6f8 	udiv	r6, r4, r8
 800057e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000582:	fb08 4416 	mls	r4, r8, r6, r4
 8000586:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800058a:	fb07 f006 	mul.w	r0, r7, r6
 800058e:	4298      	cmp	r0, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x11c>
 8000592:	eb1c 0303 	adds.w	r3, ip, r3
 8000596:	f106 34ff 	add.w	r4, r6, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x11a>
 800059c:	4298      	cmp	r0, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2b4>
 80005a2:	4626      	mov	r6, r4
 80005a4:	1a1c      	subs	r4, r3, r0
 80005a6:	fa1f f38e 	uxth.w	r3, lr
 80005aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80005ae:	fb08 4410 	mls	r4, r8, r0, r4
 80005b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005b6:	fb00 f707 	mul.w	r7, r0, r7
 80005ba:	429f      	cmp	r7, r3
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x148>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c6:	d202      	bcs.n	80005ce <__udivmoddi4+0x146>
 80005c8:	429f      	cmp	r7, r3
 80005ca:	f200 80b0 	bhi.w	800072e <__udivmoddi4+0x2a6>
 80005ce:	4620      	mov	r0, r4
 80005d0:	1bdb      	subs	r3, r3, r7
 80005d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005d6:	e7a5      	b.n	8000524 <__udivmoddi4+0x9c>
 80005d8:	f1c1 0620 	rsb	r6, r1, #32
 80005dc:	408b      	lsls	r3, r1
 80005de:	fa22 f706 	lsr.w	r7, r2, r6
 80005e2:	431f      	orrs	r7, r3
 80005e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e8:	fa04 f301 	lsl.w	r3, r4, r1
 80005ec:	ea43 030c 	orr.w	r3, r3, ip
 80005f0:	40f4      	lsrs	r4, r6
 80005f2:	fa00 f801 	lsl.w	r8, r0, r1
 80005f6:	0c38      	lsrs	r0, r7, #16
 80005f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000600:	fa1f fc87 	uxth.w	ip, r7
 8000604:	fb00 441e 	mls	r4, r0, lr, r4
 8000608:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800060c:	fb0e f90c 	mul.w	r9, lr, ip
 8000610:	45a1      	cmp	r9, r4
 8000612:	fa02 f201 	lsl.w	r2, r2, r1
 8000616:	d90a      	bls.n	800062e <__udivmoddi4+0x1a6>
 8000618:	193c      	adds	r4, r7, r4
 800061a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800061e:	f080 8084 	bcs.w	800072a <__udivmoddi4+0x2a2>
 8000622:	45a1      	cmp	r9, r4
 8000624:	f240 8081 	bls.w	800072a <__udivmoddi4+0x2a2>
 8000628:	f1ae 0e02 	sub.w	lr, lr, #2
 800062c:	443c      	add	r4, r7
 800062e:	eba4 0409 	sub.w	r4, r4, r9
 8000632:	fa1f f983 	uxth.w	r9, r3
 8000636:	fbb4 f3f0 	udiv	r3, r4, r0
 800063a:	fb00 4413 	mls	r4, r0, r3, r4
 800063e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000642:	fb03 fc0c 	mul.w	ip, r3, ip
 8000646:	45a4      	cmp	ip, r4
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0x1d2>
 800064a:	193c      	adds	r4, r7, r4
 800064c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000650:	d267      	bcs.n	8000722 <__udivmoddi4+0x29a>
 8000652:	45a4      	cmp	ip, r4
 8000654:	d965      	bls.n	8000722 <__udivmoddi4+0x29a>
 8000656:	3b02      	subs	r3, #2
 8000658:	443c      	add	r4, r7
 800065a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800065e:	fba0 9302 	umull	r9, r3, r0, r2
 8000662:	eba4 040c 	sub.w	r4, r4, ip
 8000666:	429c      	cmp	r4, r3
 8000668:	46ce      	mov	lr, r9
 800066a:	469c      	mov	ip, r3
 800066c:	d351      	bcc.n	8000712 <__udivmoddi4+0x28a>
 800066e:	d04e      	beq.n	800070e <__udivmoddi4+0x286>
 8000670:	b155      	cbz	r5, 8000688 <__udivmoddi4+0x200>
 8000672:	ebb8 030e 	subs.w	r3, r8, lr
 8000676:	eb64 040c 	sbc.w	r4, r4, ip
 800067a:	fa04 f606 	lsl.w	r6, r4, r6
 800067e:	40cb      	lsrs	r3, r1
 8000680:	431e      	orrs	r6, r3
 8000682:	40cc      	lsrs	r4, r1
 8000684:	e9c5 6400 	strd	r6, r4, [r5]
 8000688:	2100      	movs	r1, #0
 800068a:	e750      	b.n	800052e <__udivmoddi4+0xa6>
 800068c:	f1c2 0320 	rsb	r3, r2, #32
 8000690:	fa20 f103 	lsr.w	r1, r0, r3
 8000694:	fa0c fc02 	lsl.w	ip, ip, r2
 8000698:	fa24 f303 	lsr.w	r3, r4, r3
 800069c:	4094      	lsls	r4, r2
 800069e:	430c      	orrs	r4, r1
 80006a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a8:	fa1f f78c 	uxth.w	r7, ip
 80006ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b0:	fb08 3110 	mls	r1, r8, r0, r3
 80006b4:	0c23      	lsrs	r3, r4, #16
 80006b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ba:	fb00 f107 	mul.w	r1, r0, r7
 80006be:	4299      	cmp	r1, r3
 80006c0:	d908      	bls.n	80006d4 <__udivmoddi4+0x24c>
 80006c2:	eb1c 0303 	adds.w	r3, ip, r3
 80006c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80006ca:	d22c      	bcs.n	8000726 <__udivmoddi4+0x29e>
 80006cc:	4299      	cmp	r1, r3
 80006ce:	d92a      	bls.n	8000726 <__udivmoddi4+0x29e>
 80006d0:	3802      	subs	r0, #2
 80006d2:	4463      	add	r3, ip
 80006d4:	1a5b      	subs	r3, r3, r1
 80006d6:	b2a4      	uxth	r4, r4
 80006d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80006dc:	fb08 3311 	mls	r3, r8, r1, r3
 80006e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e4:	fb01 f307 	mul.w	r3, r1, r7
 80006e8:	42a3      	cmp	r3, r4
 80006ea:	d908      	bls.n	80006fe <__udivmoddi4+0x276>
 80006ec:	eb1c 0404 	adds.w	r4, ip, r4
 80006f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80006f4:	d213      	bcs.n	800071e <__udivmoddi4+0x296>
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	d911      	bls.n	800071e <__udivmoddi4+0x296>
 80006fa:	3902      	subs	r1, #2
 80006fc:	4464      	add	r4, ip
 80006fe:	1ae4      	subs	r4, r4, r3
 8000700:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000704:	e739      	b.n	800057a <__udivmoddi4+0xf2>
 8000706:	4604      	mov	r4, r0
 8000708:	e6f0      	b.n	80004ec <__udivmoddi4+0x64>
 800070a:	4608      	mov	r0, r1
 800070c:	e706      	b.n	800051c <__udivmoddi4+0x94>
 800070e:	45c8      	cmp	r8, r9
 8000710:	d2ae      	bcs.n	8000670 <__udivmoddi4+0x1e8>
 8000712:	ebb9 0e02 	subs.w	lr, r9, r2
 8000716:	eb63 0c07 	sbc.w	ip, r3, r7
 800071a:	3801      	subs	r0, #1
 800071c:	e7a8      	b.n	8000670 <__udivmoddi4+0x1e8>
 800071e:	4631      	mov	r1, r6
 8000720:	e7ed      	b.n	80006fe <__udivmoddi4+0x276>
 8000722:	4603      	mov	r3, r0
 8000724:	e799      	b.n	800065a <__udivmoddi4+0x1d2>
 8000726:	4630      	mov	r0, r6
 8000728:	e7d4      	b.n	80006d4 <__udivmoddi4+0x24c>
 800072a:	46d6      	mov	lr, sl
 800072c:	e77f      	b.n	800062e <__udivmoddi4+0x1a6>
 800072e:	4463      	add	r3, ip
 8000730:	3802      	subs	r0, #2
 8000732:	e74d      	b.n	80005d0 <__udivmoddi4+0x148>
 8000734:	4606      	mov	r6, r0
 8000736:	4623      	mov	r3, r4
 8000738:	4608      	mov	r0, r1
 800073a:	e70f      	b.n	800055c <__udivmoddi4+0xd4>
 800073c:	3e02      	subs	r6, #2
 800073e:	4463      	add	r3, ip
 8000740:	e730      	b.n	80005a4 <__udivmoddi4+0x11c>
 8000742:	bf00      	nop

08000744 <__aeabi_idiv0>:
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000754:	2334      	movs	r3, #52	@ 0x34
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800075c:	4a0b      	ldr	r2, [pc, #44]	@ (800078c <tx_application_define+0x44>)
 800075e:	490c      	ldr	r1, [pc, #48]	@ (8000790 <tx_application_define+0x48>)
 8000760:	480c      	ldr	r0, [pc, #48]	@ (8000794 <tx_application_define+0x4c>)
 8000762:	f009 fcb1 	bl	800a0c8 <_txe_byte_pool_create>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10a      	bne.n	8000782 <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <tx_application_define+0x4c>)
 800076e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f000 fa81 	bl	8000c78 <App_ThreadX_Init>
 8000776:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000074 	.word	0x20000074
 8000790:	0800a648 	.word	0x0800a648
 8000794:	20000474 	.word	0x20000474

08000798 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	@ 0x30
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800079e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2220      	movs	r2, #32
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f009 ff11 	bl	800a5d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007b6:	4b32      	ldr	r3, [pc, #200]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007b8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007be:	4b30      	ldr	r3, [pc, #192]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d8:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007de:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007e0:	2204      	movs	r2, #4
 80007e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e4:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ea:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80007f0:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f6:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fe:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000804:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_ADC1_Init+0xe8>)
 8000806:	2200      	movs	r2, #0
 8000808:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800080a:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_ADC1_Init+0xe8>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_ADC1_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_ADC1_Init+0xe8>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	4817      	ldr	r0, [pc, #92]	@ (8000880 <MX_ADC1_Init+0xe8>)
 8000822:	f001 fdd7 	bl	80023d4 <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800082c:	f000 ffbc 	bl	80017a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	4811      	ldr	r0, [pc, #68]	@ (8000880 <MX_ADC1_Init+0xe8>)
 800083c:	f003 f89a 	bl	8003974 <HAL_ADCEx_MultiModeConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000846:	f000 ffaf 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <MX_ADC1_Init+0xec>)
 800084c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084e:	2306      	movs	r3, #6
 8000850:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000856:	237f      	movs	r3, #127	@ 0x7f
 8000858:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085a:	2304      	movs	r3, #4
 800085c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <MX_ADC1_Init+0xe8>)
 8000868:	f002 fac2 	bl	8002df0 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000872:	f000 ff99 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3730      	adds	r7, #48	@ 0x30
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200004a8 	.word	0x200004a8
 8000884:	10c00010 	.word	0x10c00010

08000888 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2220      	movs	r2, #32
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f009 fe9f 	bl	800a5d8 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800089a:	4b5e      	ldr	r3, [pc, #376]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 800089c:	4a5e      	ldr	r2, [pc, #376]	@ (8000a18 <MX_ADC4_Init+0x190>)
 800089e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a0:	4b5c      	ldr	r3, [pc, #368]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008a2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008a6:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008a8:	4b5a      	ldr	r3, [pc, #360]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ae:	4b59      	ldr	r3, [pc, #356]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008b4:	4b57      	ldr	r3, [pc, #348]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ba:	4b56      	ldr	r3, [pc, #344]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008bc:	2201      	movs	r2, #1
 80008be:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008c0:	4b54      	ldr	r3, [pc, #336]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008c2:	2208      	movs	r2, #8
 80008c4:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008c6:	4b53      	ldr	r3, [pc, #332]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008cc:	4b51      	ldr	r3, [pc, #324]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 8;
 80008d2:	4b50      	ldr	r3, [pc, #320]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008d4:	2208      	movs	r2, #8
 80008d6:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008d8:	4b4e      	ldr	r3, [pc, #312]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e0:	4b4c      	ldr	r3, [pc, #304]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e6:	4b4b      	ldr	r3, [pc, #300]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80008ec:	4b49      	ldr	r3, [pc, #292]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008f4:	4b47      	ldr	r3, [pc, #284]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80008fc:	4b45      	ldr	r3, [pc, #276]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000904:	4843      	ldr	r0, [pc, #268]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 8000906:	f001 fd65 	bl	80023d4 <HAL_ADC_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 ff4a 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000914:	4b41      	ldr	r3, [pc, #260]	@ (8000a1c <MX_ADC4_Init+0x194>)
 8000916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000918:	2306      	movs	r3, #6
 800091a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000920:	237f      	movs	r3, #127	@ 0x7f
 8000922:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000924:	2304      	movs	r3, #4
 8000926:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4619      	mov	r1, r3
 8000930:	4838      	ldr	r0, [pc, #224]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 8000932:	f002 fa5d 	bl	8002df0 <HAL_ADC_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 800093c:	f000 ff34 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000940:	4b37      	ldr	r3, [pc, #220]	@ (8000a20 <MX_ADC4_Init+0x198>)
 8000942:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000944:	230c      	movs	r3, #12
 8000946:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	4831      	ldr	r0, [pc, #196]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 800094e:	f002 fa4f 	bl	8002df0 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC4_Init+0xd4>
  {
    Error_Handler();
 8000958:	f000 ff26 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800095c:	4b31      	ldr	r3, [pc, #196]	@ (8000a24 <MX_ADC4_Init+0x19c>)
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000960:	2312      	movs	r3, #18
 8000962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	482a      	ldr	r0, [pc, #168]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 800096a:	f002 fa41 	bl	8002df0 <HAL_ADC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC4_Init+0xf0>
  {
    Error_Handler();
 8000974:	f000 ff18 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000978:	4b2b      	ldr	r3, [pc, #172]	@ (8000a28 <MX_ADC4_Init+0x1a0>)
 800097a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800097c:	2318      	movs	r3, #24
 800097e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	4823      	ldr	r0, [pc, #140]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 8000986:	f002 fa33 	bl	8002df0 <HAL_ADC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC4_Init+0x10c>
  {
    Error_Handler();
 8000990:	f000 ff0a 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000994:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <MX_ADC4_Init+0x1a4>)
 8000996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000998:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800099c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	4619      	mov	r1, r3
 80009a2:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80009a4:	f002 fa24 	bl	8002df0 <HAL_ADC_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC4_Init+0x12a>
  {
    Error_Handler();
 80009ae:	f000 fefb 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <MX_ADC4_Init+0x1a8>)
 80009b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009b6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80009ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	4814      	ldr	r0, [pc, #80]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80009c2:	f002 fa15 	bl	8002df0 <HAL_ADC_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC4_Init+0x148>
  {
    Error_Handler();
 80009cc:	f000 feec 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <MX_ADC4_Init+0x1ac>)
 80009d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009d4:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80009d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80009e0:	f002 fa06 	bl	8002df0 <HAL_ADC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC4_Init+0x166>
  {
    Error_Handler();
 80009ea:	f000 fedd 	bl	80017a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009ee:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_ADC4_Init+0x1b0>)
 80009f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009f2:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80009f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_ADC4_Init+0x18c>)
 80009fe:	f002 f9f7 	bl	8002df0 <HAL_ADC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC4_Init+0x184>
  {
    Error_Handler();
 8000a08:	f000 fece 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000514 	.word	0x20000514
 8000a18:	50000500 	.word	0x50000500
 8000a1c:	14f00020 	.word	0x14f00020
 8000a20:	32601000 	.word	0x32601000
 8000a24:	2a000400 	.word	0x2a000400
 8000a28:	2e300800 	.word	0x2e300800
 8000a2c:	36902000 	.word	0x36902000
 8000a30:	1d500080 	.word	0x1d500080
 8000a34:	21800100 	.word	0x21800100
 8000a38:	25b00200 	.word	0x25b00200

08000a3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0a2      	sub	sp, #136	@ 0x88
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	2254      	movs	r2, #84	@ 0x54
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f009 fdbb 	bl	800a5d8 <memset>
  if(adcHandle->Instance==ADC1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a6a:	d135      	bne.n	8000ad8 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a70:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a72:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a76:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a78:	f107 0320 	add.w	r3, r7, #32
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f005 fef1 	bl	8006864 <HAL_RCCEx_PeriphCLKConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a88:	f000 fe8e 	bl	80017a8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a8c:	4b58      	ldr	r3, [pc, #352]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a90:	4a57      	ldr	r2, [pc, #348]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000a92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a98:	4b55      	ldr	r3, [pc, #340]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b52      	ldr	r3, [pc, #328]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa8:	4a51      	ldr	r2, [pc, #324]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = FIRMWARECHECK_Pin;
 8000abc:	2308      	movs	r3, #8
 8000abe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(FIRMWARECHECK_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad2:	f003 feff 	bl	80048d4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000ad6:	e086      	b.n	8000be6 <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC4)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a45      	ldr	r2, [pc, #276]	@ (8000bf4 <HAL_ADC_MspInit+0x1b8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	f040 8081 	bne.w	8000be6 <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000ae4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ae8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000aea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000aee:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f005 feb5 	bl	8006864 <HAL_RCCEx_PeriphCLKConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 8000b00:	f000 fe52 	bl	80017a8 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000b04:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b08:	4a39      	ldr	r2, [pc, #228]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000b0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b10:	4b37      	ldr	r3, [pc, #220]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b34      	ldr	r3, [pc, #208]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b20:	4a33      	ldr	r2, [pc, #204]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b28:	4b31      	ldr	r3, [pc, #196]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b34:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b38:	4a2d      	ldr	r2, [pc, #180]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000b3a:	f043 0308 	orr.w	r3, r3, #8
 8000b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b40:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf0 <HAL_ADC_MspInit+0x1b4>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b44:	f003 0308 	and.w	r3, r3, #8
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8000b4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b50:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b52:	2303      	movs	r3, #3
 8000b54:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4825      	ldr	r0, [pc, #148]	@ (8000bf8 <HAL_ADC_MspInit+0x1bc>)
 8000b62:	f003 feb7 	bl	80048d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG_2_Pin|ANALOG_5_Pin|ANALOG_6_Pin|ANALOG_7_Pin
 8000b66:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8000b6a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b74:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4820      	ldr	r0, [pc, #128]	@ (8000bfc <HAL_ADC_MspInit+0x1c0>)
 8000b7c:	f003 feaa 	bl	80048d4 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel3;
 8000b80:	4b1f      	ldr	r3, [pc, #124]	@ (8000c00 <HAL_ADC_MspInit+0x1c4>)
 8000b82:	4a20      	ldr	r2, [pc, #128]	@ (8000c04 <HAL_ADC_MspInit+0x1c8>)
 8000b84:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	@ (8000c00 <HAL_ADC_MspInit+0x1c4>)
 8000b88:	2226      	movs	r2, #38	@ 0x26
 8000b8a:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <HAL_ADC_MspInit+0x1c4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b92:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <HAL_ADC_MspInit+0x1c4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_ADC_MspInit+0x1c4>)
 8000b9a:	2280      	movs	r2, #128	@ 0x80
 8000b9c:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b9e:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <HAL_ADC_MspInit+0x1c4>)
 8000ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ba4:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <HAL_ADC_MspInit+0x1c4>)
 8000ba8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bac:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <HAL_ADC_MspInit+0x1c4>)
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_ADC_MspInit+0x1c4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000bba:	4811      	ldr	r0, [pc, #68]	@ (8000c00 <HAL_ADC_MspInit+0x1c4>)
 8000bbc:	f003 f9b4 	bl	8003f28 <HAL_DMA_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 8000bc6:	f000 fdef 	bl	80017a8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c00 <HAL_ADC_MspInit+0x1c4>)
 8000bce:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8000c00 <HAL_ADC_MspInit+0x1c4>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	203d      	movs	r0, #61	@ 0x3d
 8000bdc:	f003 f88a 	bl	8003cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000be0:	203d      	movs	r0, #61	@ 0x3d
 8000be2:	f003 f8a1 	bl	8003d28 <HAL_NVIC_EnableIRQ>
}
 8000be6:	bf00      	nop
 8000be8:	3788      	adds	r7, #136	@ 0x88
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	50000500 	.word	0x50000500
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	48000c00 	.word	0x48000c00
 8000c00:	20000580 	.word	0x20000580
 8000c04:	40020030 	.word	0x40020030

08000c08 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC4_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    tx_semaphore_put(&analogSemaphore);
 8000c10:	4803      	ldr	r0, [pc, #12]	@ (8000c20 <HAL_ADC_ConvCpltCallback+0x18>)
 8000c12:	f009 fbd1 	bl	800a3b8 <_txe_semaphore_put>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000690 	.word	0x20000690

08000c24 <SetDividers>:
        {ANALOGSWITCH_6_GPIO_Port, ANALOGSWITCH_6_Pin},
        {ANALOGSWITCH_7_GPIO_Port, ANALOGSWITCH_7_Pin},
        {ANALOGSWITCH_8_GPIO_Port, ANALOGSWITCH_8_Pin}
};

void SetDividers(uint8_t voltageModes[]){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    uint8_t size = sizeof(voltageModes) / sizeof(voltageModes[0]);
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	72fb      	strb	r3, [r7, #11]
    for(int i = 0; i < size; i ++){
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e014      	b.n	8000c60 <SetDividers+0x3c>
        HAL_GPIO_WritePin((GPIO_TypeDef *)analogPins[i][0], analogPins[i][1], voltageModes[i]);
 8000c36:	4a0f      	ldr	r2, [pc, #60]	@ (8000c74 <SetDividers+0x50>)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	4a0c      	ldr	r2, [pc, #48]	@ (8000c74 <SetDividers+0x50>)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4413      	add	r3, r2
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	b299      	uxth	r1, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	f003 ffbf 	bl	8004bd8 <HAL_GPIO_WritePin>
    for(int i = 0; i < size; i ++){
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	7afb      	ldrb	r3, [r7, #11]
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbe6      	blt.n	8000c36 <SetDividers+0x12>
    }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000000 	.word	0x20000000

08000c78 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	@ 0x38
 8000c7c:	af08      	add	r7, sp, #32
 8000c7e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	613b      	str	r3, [r7, #16]
  CHAR *pointer;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8000c88:	f107 010c 	add.w	r1, r7, #12
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c92:	6938      	ldr	r0, [r7, #16]
 8000c94:	f009 f9a4 	bl	8009fe0 <_txe_byte_allocate>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <App_ThreadX_Init+0x2a>
	  return TX_POOL_ERROR;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	e081      	b.n	8000da6 <App_ThreadX_Init+0x12e>
  }

  if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8000ca2:	f107 010c 	add.w	r1, r7, #12
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cac:	6938      	ldr	r0, [r7, #16]
 8000cae:	f009 f997 	bl	8009fe0 <_txe_byte_allocate>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <App_ThreadX_Init+0x44>
	  return TX_POOL_ERROR;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e074      	b.n	8000da6 <App_ThreadX_Init+0x12e>
  }

  if(tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	22b0      	movs	r2, #176	@ 0xb0
 8000cc0:	9206      	str	r2, [sp, #24]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	9205      	str	r2, [sp, #20]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	9204      	str	r2, [sp, #16]
 8000cca:	220a      	movs	r2, #10
 8000ccc:	9203      	str	r2, [sp, #12]
 8000cce:	220a      	movs	r2, #10
 8000cd0:	9202      	str	r2, [sp, #8]
 8000cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cd6:	9201      	str	r2, [sp, #4]
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	4a34      	ldr	r2, [pc, #208]	@ (8000db0 <App_ThreadX_Init+0x138>)
 8000cde:	4935      	ldr	r1, [pc, #212]	@ (8000db4 <App_ThreadX_Init+0x13c>)
 8000ce0:	4835      	ldr	r0, [pc, #212]	@ (8000db8 <App_ThreadX_Init+0x140>)
 8000ce2:	f009 fb87 	bl	800a3f4 <_txe_thread_create>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <App_ThreadX_Init+0x78>
                         TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                         TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
      return TX_THREAD_ERROR;
 8000cec:	230e      	movs	r3, #14
 8000cee:	e05a      	b.n	8000da6 <App_ThreadX_Init+0x12e>
  }

  if(tx_thread_create(&txMainThread, "txAnalogThread", txAnalogThreadEntry, 0, pointer,
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	22b0      	movs	r2, #176	@ 0xb0
 8000cf4:	9206      	str	r2, [sp, #24]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	9205      	str	r2, [sp, #20]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	9204      	str	r2, [sp, #16]
 8000cfe:	220a      	movs	r2, #10
 8000d00:	9203      	str	r2, [sp, #12]
 8000d02:	220a      	movs	r2, #10
 8000d04:	9202      	str	r2, [sp, #8]
 8000d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d0a:	9201      	str	r2, [sp, #4]
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	4a2a      	ldr	r2, [pc, #168]	@ (8000dbc <App_ThreadX_Init+0x144>)
 8000d12:	492b      	ldr	r1, [pc, #172]	@ (8000dc0 <App_ThreadX_Init+0x148>)
 8000d14:	4828      	ldr	r0, [pc, #160]	@ (8000db8 <App_ThreadX_Init+0x140>)
 8000d16:	f009 fb6d 	bl	800a3f4 <_txe_thread_create>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <App_ThreadX_Init+0xac>
                         TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                         TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
      return TX_THREAD_ERROR;
 8000d20:	230e      	movs	r3, #14
 8000d22:	e040      	b.n	8000da6 <App_ThreadX_Init+0x12e>
  }

  if(tx_thread_create(&txMainThread, "txAeroThread", txAeroThreadEntry, 0, pointer,
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	22b0      	movs	r2, #176	@ 0xb0
 8000d28:	9206      	str	r2, [sp, #24]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	9205      	str	r2, [sp, #20]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	9204      	str	r2, [sp, #16]
 8000d32:	220a      	movs	r2, #10
 8000d34:	9203      	str	r2, [sp, #12]
 8000d36:	220a      	movs	r2, #10
 8000d38:	9202      	str	r2, [sp, #8]
 8000d3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d3e:	9201      	str	r2, [sp, #4]
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2300      	movs	r3, #0
 8000d44:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc4 <App_ThreadX_Init+0x14c>)
 8000d46:	4920      	ldr	r1, [pc, #128]	@ (8000dc8 <App_ThreadX_Init+0x150>)
 8000d48:	481b      	ldr	r0, [pc, #108]	@ (8000db8 <App_ThreadX_Init+0x140>)
 8000d4a:	f009 fb53 	bl	800a3f4 <_txe_thread_create>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <App_ThreadX_Init+0xe0>
                       TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                       TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
        return TX_THREAD_ERROR;
 8000d54:	230e      	movs	r3, #14
 8000d56:	e026      	b.n	8000da6 <App_ThreadX_Init+0x12e>
    }
  if(tx_thread_create(&txMainThread, "txCAN500HZ", txCAN500HZThreadEntry, 0, pointer,
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	22b0      	movs	r2, #176	@ 0xb0
 8000d5c:	9206      	str	r2, [sp, #24]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	9205      	str	r2, [sp, #20]
 8000d62:	2200      	movs	r2, #0
 8000d64:	9204      	str	r2, [sp, #16]
 8000d66:	220a      	movs	r2, #10
 8000d68:	9203      	str	r2, [sp, #12]
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	9202      	str	r2, [sp, #8]
 8000d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d72:	9201      	str	r2, [sp, #4]
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2300      	movs	r3, #0
 8000d78:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <App_ThreadX_Init+0x154>)
 8000d7a:	4915      	ldr	r1, [pc, #84]	@ (8000dd0 <App_ThreadX_Init+0x158>)
 8000d7c:	480e      	ldr	r0, [pc, #56]	@ (8000db8 <App_ThreadX_Init+0x140>)
 8000d7e:	f009 fb39 	bl	800a3f4 <_txe_thread_create>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <App_ThreadX_Init+0x114>
                       TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                       TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
        return TX_THREAD_ERROR;
 8000d88:	230e      	movs	r3, #14
 8000d8a:	e00c      	b.n	8000da6 <App_ThreadX_Init+0x12e>
    }

  tx_semaphore_create(&analogSemaphore, "analogSemaphore", 0);
 8000d8c:	231c      	movs	r3, #28
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4910      	ldr	r1, [pc, #64]	@ (8000dd4 <App_ThreadX_Init+0x15c>)
 8000d92:	4811      	ldr	r0, [pc, #68]	@ (8000dd8 <App_ThreadX_Init+0x160>)
 8000d94:	f009 fa38 	bl	800a208 <_txe_semaphore_create>
  tx_semaphore_create(&aeroSemaphore, "aeroSemaphore", 0);
 8000d98:	231c      	movs	r3, #28
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	490f      	ldr	r1, [pc, #60]	@ (8000ddc <App_ThreadX_Init+0x164>)
 8000d9e:	4810      	ldr	r0, [pc, #64]	@ (8000de0 <App_ThreadX_Init+0x168>)
 8000da0:	f009 fa32 	bl	800a208 <_txe_semaphore_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000da4:	697b      	ldr	r3, [r7, #20]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	08000df1 	.word	0x08000df1
 8000db4:	0800a65c 	.word	0x0800a65c
 8000db8:	200005e0 	.word	0x200005e0
 8000dbc:	08000e1d 	.word	0x08000e1d
 8000dc0:	0800a66c 	.word	0x0800a66c
 8000dc4:	08000e59 	.word	0x08000e59
 8000dc8:	0800a67c 	.word	0x0800a67c
 8000dcc:	08000e65 	.word	0x08000e65
 8000dd0:	0800a68c 	.word	0x0800a68c
 8000dd4:	0800a698 	.word	0x0800a698
 8000dd8:	20000690 	.word	0x20000690
 8000ddc:	0800a6a8 	.word	0x0800a6a8
 8000de0:	200006ac 	.word	0x200006ac

08000de4 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000de8:	f008 f804 	bl	8008df4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <txMainThreadEntry>:

/* USER CODE BEGIN 1 */
void txMainThreadEntry(ULONG threadInput){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

    HAL_FDCAN_Start(&hfdcan1);
 8000df8:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <txMainThreadEntry+0x24>)
 8000dfa:	f003 fcd7 	bl	80047ac <HAL_FDCAN_Start>
	while(1){
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8000dfe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <txMainThreadEntry+0x28>)
 8000e04:	f003 ff00 	bl	8004c08 <HAL_GPIO_TogglePin>
	    tx_thread_sleep(1000);
 8000e08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e0c:	f008 fb52 	bl	80094b4 <_tx_thread_sleep>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8000e10:	bf00      	nop
 8000e12:	e7f4      	b.n	8000dfe <txMainThreadEntry+0xe>
 8000e14:	2000070c 	.word	0x2000070c
 8000e18:	48000800 	.word	0x48000800

08000e1c <txAnalogThreadEntry>:
	}
}

void txAnalogThreadEntry(ULONG threadInput){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    SetDividers(voltageDividerStates);
 8000e24:	4808      	ldr	r0, [pc, #32]	@ (8000e48 <txAnalogThreadEntry+0x2c>)
 8000e26:	f7ff fefd 	bl	8000c24 <SetDividers>
    while(1){
        HAL_ADC_Start_DMA(&hadc1, adcValues, NUM_ADC_CHANNELS);
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	4907      	ldr	r1, [pc, #28]	@ (8000e4c <txAnalogThreadEntry+0x30>)
 8000e2e:	4808      	ldr	r0, [pc, #32]	@ (8000e50 <txAnalogThreadEntry+0x34>)
 8000e30:	f001 fc8c 	bl	800274c <HAL_ADC_Start_DMA>
        tx_semaphore_get(&analogSemaphore, TX_WAIT_FOREVER);
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	4806      	ldr	r0, [pc, #24]	@ (8000e54 <txAnalogThreadEntry+0x38>)
 8000e3a:	f009 fa7b 	bl	800a334 <_txe_semaphore_get>
//        data will be processed and sent over CAN here
//        adcValues

        tx_thread_sleep(2);
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f008 fb38 	bl	80094b4 <_tx_thread_sleep>
        HAL_ADC_Start_DMA(&hadc1, adcValues, NUM_ADC_CHANNELS);
 8000e44:	bf00      	nop
 8000e46:	e7f0      	b.n	8000e2a <txAnalogThreadEntry+0xe>
 8000e48:	20000040 	.word	0x20000040
 8000e4c:	200006c8 	.word	0x200006c8
 8000e50:	200004a8 	.word	0x200004a8
 8000e54:	20000690 	.word	0x20000690

08000e58 <txAeroThreadEntry>:
    }
}

void txAeroThreadEntry(ULONG threadInput){
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

    while(1){
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <txAeroThreadEntry+0x8>

08000e64 <txCAN500HZThreadEntry>:
//        SetChannel(1);

    }
}

void txCAN500HZThreadEntry(ULONG threadInput){
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

    while(1){
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <txCAN500HZThreadEntry+0x8>

08000e70 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <MX_CRC_Init+0x3c>)
 8000e76:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb0 <MX_CRC_Init+0x40>)
 8000e78:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <MX_CRC_Init+0x3c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <MX_CRC_Init+0x3c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <MX_CRC_Init+0x3c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <MX_CRC_Init+0x3c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <MX_CRC_Init+0x3c>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	@ (8000eac <MX_CRC_Init+0x3c>)
 8000e9a:	f002 ff53 	bl	8003d44 <HAL_CRC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ea4:	f000 fc80 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200006e8 	.word	0x200006e8
 8000eb0:	40023000 	.word	0x40023000

08000eb4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <HAL_CRC_MspInit+0x38>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d10b      	bne.n	8000ede <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_CRC_MspInit+0x3c>)
 8000ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eca:	4a09      	ldr	r2, [pc, #36]	@ (8000ef0 <HAL_CRC_MspInit+0x3c>)
 8000ecc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ed0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ed2:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <HAL_CRC_MspInit+0x3c>)
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023000 	.word	0x40023000
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000efa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <MX_DMA_Init+0x70>)
 8000efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000efe:	4a19      	ldr	r2, [pc, #100]	@ (8000f64 <MX_DMA_Init+0x70>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f06:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <MX_DMA_Init+0x70>)
 8000f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f12:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <MX_DMA_Init+0x70>)
 8000f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f16:	4a13      	ldr	r2, [pc, #76]	@ (8000f64 <MX_DMA_Init+0x70>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <MX_DMA_Init+0x70>)
 8000f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	200b      	movs	r0, #11
 8000f30:	f002 fee0 	bl	8003cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f34:	200b      	movs	r0, #11
 8000f36:	f002 fef7 	bl	8003d28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	200c      	movs	r0, #12
 8000f40:	f002 fed8 	bl	8003cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f44:	200c      	movs	r0, #12
 8000f46:	f002 feef 	bl	8003d28 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	200d      	movs	r0, #13
 8000f50:	f002 fed0 	bl	8003cf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f54:	200d      	movs	r0, #13
 8000f56:	f002 fee7 	bl	8003d28 <HAL_NVIC_EnableIRQ>

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000

08000f68 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000f6e:	4a20      	ldr	r2, [pc, #128]	@ (8000ff0 <MX_FDCAN1_Init+0x88>)
 8000f70:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f84:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f90:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000f98:	2210      	movs	r2, #16
 8000f9a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	@ (8000fec <MX_FDCAN1_Init+0x84>)
 8000fda:	f003 fa8d 	bl	80044f8 <HAL_FDCAN_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000fe4:	f000 fbe0 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000070c 	.word	0x2000070c
 8000ff0:	40006400 	.word	0x40006400

08000ff4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09e      	sub	sp, #120	@ 0x78
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	2254      	movs	r2, #84	@ 0x54
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f009 fadf 	bl	800a5d8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a20      	ldr	r2, [pc, #128]	@ (80010a0 <HAL_FDCAN_MspInit+0xac>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d139      	bne.n	8001098 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001028:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800102a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800102e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	4618      	mov	r0, r3
 8001036:	f005 fc15 	bl	8006864 <HAL_RCCEx_PeriphCLKConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001040:	f000 fbb2 	bl	80017a8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001044:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <HAL_FDCAN_MspInit+0xb0>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001048:	4a16      	ldr	r2, [pc, #88]	@ (80010a4 <HAL_FDCAN_MspInit+0xb0>)
 800104a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800104e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_FDCAN_MspInit+0xb0>)
 8001052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <HAL_FDCAN_MspInit+0xb0>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001060:	4a10      	ldr	r2, [pc, #64]	@ (80010a4 <HAL_FDCAN_MspInit+0xb0>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <HAL_FDCAN_MspInit+0xb0>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001074:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001078:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001086:	2309      	movs	r3, #9
 8001088:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001094:	f003 fc1e 	bl	80048d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001098:	bf00      	nop
 800109a:	3778      	adds	r7, #120	@ 0x78
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40006400 	.word	0x40006400
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2[4];
uint32_t difference[4];
double frequency[4];
uint8_t is_first_captured[4];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    uint8_t channel = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
    uint8_t hal_channel = 0u;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73bb      	strb	r3, [r7, #14]

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7f1b      	ldrb	r3, [r3, #28]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d104      	bne.n	80010ca <HAL_TIM_IC_CaptureCallback+0x22>
        channel = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73bb      	strb	r3, [r7, #14]
 80010c8:	e019      	b.n	80010fe <HAL_TIM_IC_CaptureCallback+0x56>
    } else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7f1b      	ldrb	r3, [r3, #28]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d104      	bne.n	80010dc <HAL_TIM_IC_CaptureCallback+0x34>
        channel = 1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_2;
 80010d6:	2304      	movs	r3, #4
 80010d8:	73bb      	strb	r3, [r7, #14]
 80010da:	e010      	b.n	80010fe <HAL_TIM_IC_CaptureCallback+0x56>
    } else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7f1b      	ldrb	r3, [r3, #28]
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d104      	bne.n	80010ee <HAL_TIM_IC_CaptureCallback+0x46>
        channel = 2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_3;
 80010e8:	2308      	movs	r3, #8
 80010ea:	73bb      	strb	r3, [r7, #14]
 80010ec:	e007      	b.n	80010fe <HAL_TIM_IC_CaptureCallback+0x56>
    } else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7f1b      	ldrb	r3, [r3, #28]
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d103      	bne.n	80010fe <HAL_TIM_IC_CaptureCallback+0x56>
        channel = 3;
 80010f6:	2303      	movs	r3, #3
 80010f8:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_4;
 80010fa:	230c      	movs	r3, #12
 80010fc:	73bb      	strb	r3, [r7, #14]
    }

    if (is_first_captured[channel] == 0) {  // check if first rising edge to begin capture
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4a2c      	ldr	r2, [pc, #176]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001102:	5cd3      	ldrb	r3, [r2, r3]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10e      	bne.n	8001126 <HAL_TIM_IC_CaptureCallback+0x7e>
        IC_Val1[channel] = HAL_TIM_ReadCapturedValue(htim, hal_channel);
 8001108:	7bbb      	ldrb	r3, [r7, #14]
 800110a:	7bfc      	ldrb	r4, [r7, #15]
 800110c:	4619      	mov	r1, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f006 f9bc 	bl	800748c <HAL_TIM_ReadCapturedValue>
 8001114:	4603      	mov	r3, r0
 8001116:	4a28      	ldr	r2, [pc, #160]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001118:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        is_first_captured[channel] = 1; // set flag to indicate next value will be second rising edge
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	4a25      	ldr	r2, [pc, #148]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001120:	2101      	movs	r1, #1
 8001122:	54d1      	strb	r1, [r2, r3]
//        float refClock = TIMCLOCK/(PRESCALAR);
//        frequency[channel] = refClock / difference[channel];
        is_first_captured[channel] = 0;
    }

}
 8001124:	e042      	b.n	80011ac <HAL_TIM_IC_CaptureCallback+0x104>
    } else if (is_first_captured[channel] == 1) {   // second rising edge
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	4a22      	ldr	r2, [pc, #136]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800112a:	5cd3      	ldrb	r3, [r2, r3]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d13d      	bne.n	80011ac <HAL_TIM_IC_CaptureCallback+0x104>
        IC_Val2[channel] = HAL_TIM_ReadCapturedValue(htim, hal_channel);
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	7bfc      	ldrb	r4, [r7, #15]
 8001134:	4619      	mov	r1, r3
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f006 f9a8 	bl	800748c <HAL_TIM_ReadCapturedValue>
 800113c:	4603      	mov	r3, r0
 800113e:	4a1f      	ldr	r2, [pc, #124]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001140:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        if (IC_Val2[channel] > IC_Val1[channel]) {  // first capture before second
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	4a1d      	ldr	r2, [pc, #116]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001148:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	491a      	ldr	r1, [pc, #104]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001150:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001154:	429a      	cmp	r2, r3
 8001156:	d90d      	bls.n	8001174 <HAL_TIM_IC_CaptureCallback+0xcc>
            difference[channel] = IC_Val2[channel] - IC_Val1[channel];
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x114>)
 800115c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	4a15      	ldr	r2, [pc, #84]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001164:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	1a8a      	subs	r2, r1, r2
 800116c:	4914      	ldr	r1, [pc, #80]	@ (80011c0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001172:	e017      	b.n	80011a4 <HAL_TIM_IC_CaptureCallback+0xfc>
        } else if (IC_Val2[channel] < IC_Val1[channel]) {   // first capture after second robust check
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x114>)
 8001178:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	490e      	ldr	r1, [pc, #56]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001180:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001184:	429a      	cmp	r2, r3
 8001186:	d20d      	bcs.n	80011a4 <HAL_TIM_IC_CaptureCallback+0xfc>
            difference[channel] = ((100 - IC_Val1[channel]) + IC_Val2[channel]) + 1;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	4a0c      	ldr	r2, [pc, #48]	@ (80011bc <HAL_TIM_IC_CaptureCallback+0x114>)
 800118c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	4909      	ldr	r1, [pc, #36]	@ (80011b8 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001194:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001198:	1ad2      	subs	r2, r2, r3
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	3265      	adds	r2, #101	@ 0x65
 800119e:	4908      	ldr	r1, [pc, #32]	@ (80011c0 <HAL_TIM_IC_CaptureCallback+0x118>)
 80011a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        is_first_captured[channel] = 0;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	4a03      	ldr	r2, [pc, #12]	@ (80011b4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80011a8:	2100      	movs	r1, #0
 80011aa:	54d1      	strb	r1, [r2, r3]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd90      	pop	{r4, r7, pc}
 80011b4:	200007a0 	.word	0x200007a0
 80011b8:	20000770 	.word	0x20000770
 80011bc:	20000780 	.word	0x20000780
 80011c0:	20000790 	.word	0x20000790

080011c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	@ 0x30
 80011c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011da:	4b5b      	ldr	r3, [pc, #364]	@ (8001348 <MX_GPIO_Init+0x184>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a5a      	ldr	r2, [pc, #360]	@ (8001348 <MX_GPIO_Init+0x184>)
 80011e0:	f043 0320 	orr.w	r3, r3, #32
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b58      	ldr	r3, [pc, #352]	@ (8001348 <MX_GPIO_Init+0x184>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0320 	and.w	r3, r3, #32
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	4b55      	ldr	r3, [pc, #340]	@ (8001348 <MX_GPIO_Init+0x184>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	4a54      	ldr	r2, [pc, #336]	@ (8001348 <MX_GPIO_Init+0x184>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fe:	4b52      	ldr	r3, [pc, #328]	@ (8001348 <MX_GPIO_Init+0x184>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b4f      	ldr	r3, [pc, #316]	@ (8001348 <MX_GPIO_Init+0x184>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	4a4e      	ldr	r2, [pc, #312]	@ (8001348 <MX_GPIO_Init+0x184>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001216:	4b4c      	ldr	r3, [pc, #304]	@ (8001348 <MX_GPIO_Init+0x184>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	4b49      	ldr	r3, [pc, #292]	@ (8001348 <MX_GPIO_Init+0x184>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a48      	ldr	r2, [pc, #288]	@ (8001348 <MX_GPIO_Init+0x184>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b46      	ldr	r3, [pc, #280]	@ (8001348 <MX_GPIO_Init+0x184>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123a:	4b43      	ldr	r3, [pc, #268]	@ (8001348 <MX_GPIO_Init+0x184>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	4a42      	ldr	r2, [pc, #264]	@ (8001348 <MX_GPIO_Init+0x184>)
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001246:	4b40      	ldr	r3, [pc, #256]	@ (8001348 <MX_GPIO_Init+0x184>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001252:	4b3d      	ldr	r3, [pc, #244]	@ (8001348 <MX_GPIO_Init+0x184>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a3c      	ldr	r2, [pc, #240]	@ (8001348 <MX_GPIO_Init+0x184>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b3a      	ldr	r3, [pc, #232]	@ (8001348 <MX_GPIO_Init+0x184>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 800126a:	2200      	movs	r2, #0
 800126c:	f641 7130 	movw	r1, #7984	@ 0x1f30
 8001270:	4836      	ldr	r0, [pc, #216]	@ (800134c <MX_GPIO_Init+0x188>)
 8001272:	f003 fcb1 	bl	8004bd8 <HAL_GPIO_WritePin>
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRDY1_Pin|RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f246 0103 	movw	r1, #24579	@ 0x6003
 800127c:	4834      	ldr	r0, [pc, #208]	@ (8001350 <MX_GPIO_Init+0x18c>)
 800127e:	f003 fcab 	bl	8004bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STARTSYNC_2_Pin|CS2_Pin|DRDY2_Pin|RESET2_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8001288:	4832      	ldr	r0, [pc, #200]	@ (8001354 <MX_GPIO_Init+0x190>)
 800128a:	f003 fca5 	bl	8004bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANALOGSWITCH_5_GPIO_Port, ANALOGSWITCH_5_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001294:	4830      	ldr	r0, [pc, #192]	@ (8001358 <MX_GPIO_Init+0x194>)
 8001296:	f003 fc9f 	bl	8004bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f003 fc98 	bl	8004bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 80012a8:	f641 7330 	movw	r3, #7984	@ 0x1f30
 80012ac:	61fb      	str	r3, [r7, #28]
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4822      	ldr	r0, [pc, #136]	@ (800134c <MX_GPIO_Init+0x188>)
 80012c2:	f003 fb07 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin;
 80012c6:	f246 0303 	movw	r3, #24579	@ 0x6003
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4619      	mov	r1, r3
 80012de:	481c      	ldr	r0, [pc, #112]	@ (8001350 <MX_GPIO_Init+0x18c>)
 80012e0:	f003 faf8 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STARTSYNC_2_Pin|CS2_Pin|DRDY2_Pin|RESET2_Pin;
 80012e4:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4815      	ldr	r0, [pc, #84]	@ (8001354 <MX_GPIO_Init+0x190>)
 80012fe:	f003 fae9 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_5_Pin;
 8001302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001308:	2301      	movs	r3, #1
 800130a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ANALOGSWITCH_5_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	480f      	ldr	r0, [pc, #60]	@ (8001358 <MX_GPIO_Init+0x194>)
 800131c:	f003 fada 	bl	80048d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin;
 8001320:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133c:	f003 faca 	bl	80048d4 <HAL_GPIO_Init>

}
 8001340:	bf00      	nop
 8001342:	3730      	adds	r7, #48	@ 0x30
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	48000800 	.word	0x48000800
 8001350:	48000400 	.word	0x48000400
 8001354:	48001000 	.word	0x48001000
 8001358:	48000c00 	.word	0x48000c00

0800135c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	@ (80013d4 <MX_I2C1_Init+0x78>)
 8001364:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001368:	4a1b      	ldr	r2, [pc, #108]	@ (80013d8 <MX_I2C1_Init+0x7c>)
 800136a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <MX_I2C1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001374:	2201      	movs	r2, #1
 8001376:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <MX_I2C1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800137e:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MX_I2C1_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001396:	480e      	ldr	r0, [pc, #56]	@ (80013d0 <MX_I2C1_Init+0x74>)
 8001398:	f003 fc50 	bl	8004c3c <HAL_I2C_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013a2:	f000 fa01 	bl	80017a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4809      	ldr	r0, [pc, #36]	@ (80013d0 <MX_I2C1_Init+0x74>)
 80013aa:	f004 fae0 	bl	800596e <HAL_I2CEx_ConfigAnalogFilter>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013b4:	f000 f9f8 	bl	80017a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013b8:	2100      	movs	r1, #0
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_I2C1_Init+0x74>)
 80013bc:	f004 fb22 	bl	8005a04 <HAL_I2CEx_ConfigDigitalFilter>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013c6:	f000 f9ef 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200007a4 	.word	0x200007a4
 80013d4:	40005400 	.word	0x40005400
 80013d8:	30a0a7fb 	.word	0x30a0a7fb

080013dc <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <MX_I2C4_Init+0x74>)
 80013e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001454 <MX_I2C4_Init+0x78>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10802D9B;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_I2C4_Init+0x74>)
 80013e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <MX_I2C4_Init+0x7c>)
 80013ea:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_I2C4_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_I2C4_Init+0x74>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <MX_I2C4_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <MX_I2C4_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <MX_I2C4_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_I2C4_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <MX_I2C4_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001416:	480e      	ldr	r0, [pc, #56]	@ (8001450 <MX_I2C4_Init+0x74>)
 8001418:	f003 fc10 	bl	8004c3c <HAL_I2C_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001422:	f000 f9c1 	bl	80017a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001426:	2100      	movs	r1, #0
 8001428:	4809      	ldr	r0, [pc, #36]	@ (8001450 <MX_I2C4_Init+0x74>)
 800142a:	f004 faa0 	bl	800596e <HAL_I2CEx_ConfigAnalogFilter>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001434:	f000 f9b8 	bl	80017a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001438:	2100      	movs	r1, #0
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_I2C4_Init+0x74>)
 800143c:	f004 fae2 	bl	8005a04 <HAL_I2CEx_ConfigDigitalFilter>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001446:	f000 f9af 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200007f8 	.word	0x200007f8
 8001454:	40008400 	.word	0x40008400
 8001458:	10802d9b 	.word	0x10802d9b

0800145c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0a2      	sub	sp, #136	@ 0x88
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	2254      	movs	r2, #84	@ 0x54
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f009 f8ab 	bl	800a5d8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a80      	ldr	r2, [pc, #512]	@ (8001688 <HAL_I2C_MspInit+0x22c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d158      	bne.n	800153e <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800148c:	2340      	movs	r3, #64	@ 0x40
 800148e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001490:	2300      	movs	r3, #0
 8001492:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001494:	f107 0320 	add.w	r3, r7, #32
 8001498:	4618      	mov	r0, r3
 800149a:	f005 f9e3 	bl	8006864 <HAL_RCCEx_PeriphCLKConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014a4:	f000 f980 	bl	80017a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b78      	ldr	r3, [pc, #480]	@ (800168c <HAL_I2C_MspInit+0x230>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ac:	4a77      	ldr	r2, [pc, #476]	@ (800168c <HAL_I2C_MspInit+0x230>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b4:	4b75      	ldr	r3, [pc, #468]	@ (800168c <HAL_I2C_MspInit+0x230>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c0:	4b72      	ldr	r3, [pc, #456]	@ (800168c <HAL_I2C_MspInit+0x230>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c4:	4a71      	ldr	r2, [pc, #452]	@ (800168c <HAL_I2C_MspInit+0x230>)
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014cc:	4b6f      	ldr	r3, [pc, #444]	@ (800168c <HAL_I2C_MspInit+0x230>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
 80014d6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014dc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014de:	2312      	movs	r3, #18
 80014e0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ec:	2304      	movs	r3, #4
 80014ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fc:	f003 f9ea 	bl	80048d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001504:	2312      	movs	r3, #18
 8001506:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001512:	2304      	movs	r3, #4
 8001514:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800151c:	4619      	mov	r1, r3
 800151e:	485c      	ldr	r0, [pc, #368]	@ (8001690 <HAL_I2C_MspInit+0x234>)
 8001520:	f003 f9d8 	bl	80048d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001524:	4b59      	ldr	r3, [pc, #356]	@ (800168c <HAL_I2C_MspInit+0x230>)
 8001526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001528:	4a58      	ldr	r2, [pc, #352]	@ (800168c <HAL_I2C_MspInit+0x230>)
 800152a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800152e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001530:	4b56      	ldr	r3, [pc, #344]	@ (800168c <HAL_I2C_MspInit+0x230>)
 8001532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800153c:	e0a0      	b.n	8001680 <HAL_I2C_MspInit+0x224>
  else if(i2cHandle->Instance==I2C4)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a54      	ldr	r2, [pc, #336]	@ (8001694 <HAL_I2C_MspInit+0x238>)
 8001544:	4293      	cmp	r3, r2
 8001546:	f040 809b 	bne.w	8001680 <HAL_I2C_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800154a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800154e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001550:	2300      	movs	r3, #0
 8001552:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001554:	f107 0320 	add.w	r3, r7, #32
 8001558:	4618      	mov	r0, r3
 800155a:	f005 f983 	bl	8006864 <HAL_RCCEx_PeriphCLKConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_I2C_MspInit+0x10c>
      Error_Handler();
 8001564:	f000 f920 	bl	80017a8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001568:	4b48      	ldr	r3, [pc, #288]	@ (800168c <HAL_I2C_MspInit+0x230>)
 800156a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156c:	4a47      	ldr	r2, [pc, #284]	@ (800168c <HAL_I2C_MspInit+0x230>)
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001574:	4b45      	ldr	r3, [pc, #276]	@ (800168c <HAL_I2C_MspInit+0x230>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001580:	23c0      	movs	r3, #192	@ 0xc0
 8001582:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001584:	2312      	movs	r3, #18
 8001586:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8001592:	2308      	movs	r3, #8
 8001594:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001598:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800159c:	4619      	mov	r1, r3
 800159e:	483e      	ldr	r0, [pc, #248]	@ (8001698 <HAL_I2C_MspInit+0x23c>)
 80015a0:	f003 f998 	bl	80048d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80015a4:	4b39      	ldr	r3, [pc, #228]	@ (800168c <HAL_I2C_MspInit+0x230>)
 80015a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a8:	4a38      	ldr	r2, [pc, #224]	@ (800168c <HAL_I2C_MspInit+0x230>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80015b0:	4b36      	ldr	r3, [pc, #216]	@ (800168c <HAL_I2C_MspInit+0x230>)
 80015b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 80015bc:	4b37      	ldr	r3, [pc, #220]	@ (800169c <HAL_I2C_MspInit+0x240>)
 80015be:	4a38      	ldr	r2, [pc, #224]	@ (80016a0 <HAL_I2C_MspInit+0x244>)
 80015c0:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 80015c2:	4b36      	ldr	r3, [pc, #216]	@ (800169c <HAL_I2C_MspInit+0x240>)
 80015c4:	2216      	movs	r2, #22
 80015c6:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c8:	4b34      	ldr	r3, [pc, #208]	@ (800169c <HAL_I2C_MspInit+0x240>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ce:	4b33      	ldr	r3, [pc, #204]	@ (800169c <HAL_I2C_MspInit+0x240>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015d4:	4b31      	ldr	r3, [pc, #196]	@ (800169c <HAL_I2C_MspInit+0x240>)
 80015d6:	2280      	movs	r2, #128	@ 0x80
 80015d8:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015da:	4b30      	ldr	r3, [pc, #192]	@ (800169c <HAL_I2C_MspInit+0x240>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e0:	4b2e      	ldr	r3, [pc, #184]	@ (800169c <HAL_I2C_MspInit+0x240>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 80015e6:	4b2d      	ldr	r3, [pc, #180]	@ (800169c <HAL_I2C_MspInit+0x240>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015ec:	4b2b      	ldr	r3, [pc, #172]	@ (800169c <HAL_I2C_MspInit+0x240>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 80015f2:	482a      	ldr	r0, [pc, #168]	@ (800169c <HAL_I2C_MspInit+0x240>)
 80015f4:	f002 fc98 	bl	8003f28 <HAL_DMA_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_I2C_MspInit+0x1a6>
      Error_Handler();
 80015fe:	f000 f8d3 	bl	80017a8 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a25      	ldr	r2, [pc, #148]	@ (800169c <HAL_I2C_MspInit+0x240>)
 8001606:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001608:	4a24      	ldr	r2, [pc, #144]	@ (800169c <HAL_I2C_MspInit+0x240>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 800160e:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001610:	4a25      	ldr	r2, [pc, #148]	@ (80016a8 <HAL_I2C_MspInit+0x24c>)
 8001612:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 8001614:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001616:	2217      	movs	r2, #23
 8001618:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800161a:	4b22      	ldr	r3, [pc, #136]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 800161c:	2210      	movs	r2, #16
 800161e:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001620:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001626:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001628:	2280      	movs	r2, #128	@ 0x80
 800162a:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800162c:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001632:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001638:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800163e:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001644:	4817      	ldr	r0, [pc, #92]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001646:	f002 fc6f 	bl	8003f28 <HAL_DMA_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_I2C_MspInit+0x1f8>
      Error_Handler();
 8001650:	f000 f8aa 	bl	80017a8 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a13      	ldr	r2, [pc, #76]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 8001658:	639a      	str	r2, [r3, #56]	@ 0x38
 800165a:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <HAL_I2C_MspInit+0x248>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2052      	movs	r0, #82	@ 0x52
 8001666:	f002 fb45 	bl	8003cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800166a:	2052      	movs	r0, #82	@ 0x52
 800166c:	f002 fb5c 	bl	8003d28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	2053      	movs	r0, #83	@ 0x53
 8001676:	f002 fb3d 	bl	8003cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800167a:	2053      	movs	r0, #83	@ 0x53
 800167c:	f002 fb54 	bl	8003d28 <HAL_NVIC_EnableIRQ>
}
 8001680:	bf00      	nop
 8001682:	3788      	adds	r7, #136	@ 0x88
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40005400 	.word	0x40005400
 800168c:	40021000 	.word	0x40021000
 8001690:	48000400 	.word	0x48000400
 8001694:	40008400 	.word	0x40008400
 8001698:	48000800 	.word	0x48000800
 800169c:	2000084c 	.word	0x2000084c
 80016a0:	40020008 	.word	0x40020008
 80016a4:	200008ac 	.word	0x200008ac
 80016a8:	4002001c 	.word	0x4002001c

080016ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b0:	f000 fbf5 	bl	8001e9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b4:	f000 f81c 	bl	80016f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b8:	f7ff fd84 	bl	80011c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80016bc:	f7ff fc1a 	bl	8000ef4 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80016c0:	f7ff fc52 	bl	8000f68 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 80016c4:	f000 fa62 	bl	8001b8c <MX_TIM2_Init>
  MX_CRC_Init();
 80016c8:	f7ff fbd2 	bl	8000e70 <MX_CRC_Init>
  MX_ADC4_Init();
 80016cc:	f7ff f8dc 	bl	8000888 <MX_ADC4_Init>
  MX_SPI4_Init();
 80016d0:	f000 f8c8 	bl	8001864 <MX_SPI4_Init>
  MX_ADC1_Init();
 80016d4:	f7ff f860 	bl	8000798 <MX_ADC1_Init>
  MX_I2C1_Init();
 80016d8:	f7ff fe40 	bl	800135c <MX_I2C1_Init>
  MX_I2C4_Init();
 80016dc:	f7ff fe7e 	bl	80013dc <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 80016e0:	f000 fb12 	bl	8001d08 <MX_LPUART1_UART_Init>
  MX_OPAMP1_Init();
 80016e4:	f000 f866 	bl	80017b4 <MX_OPAMP1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80016e8:	f7ff fb7c 	bl	8000de4 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <main+0x40>

080016f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b094      	sub	sp, #80	@ 0x50
 80016f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f6:	f107 0318 	add.w	r3, r7, #24
 80016fa:	2238      	movs	r2, #56	@ 0x38
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f008 ff6a 	bl	800a5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001712:	2000      	movs	r0, #0
 8001714:	f004 fa92 	bl	8005c3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001718:	2301      	movs	r3, #1
 800171a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800171c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001720:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001722:	2302      	movs	r3, #2
 8001724:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001726:	2303      	movs	r3, #3
 8001728:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800172a:	2306      	movs	r3, #6
 800172c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800172e:	2355      	movs	r3, #85	@ 0x55
 8001730:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001732:	2302      	movs	r3, #2
 8001734:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001736:	2302      	movs	r3, #2
 8001738:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800173a:	2302      	movs	r3, #2
 800173c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173e:	f107 0318 	add.w	r3, r7, #24
 8001742:	4618      	mov	r0, r3
 8001744:	f004 fb2e 	bl	8005da4 <HAL_RCC_OscConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800174e:	f000 f82b 	bl	80017a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2303      	movs	r3, #3
 8001758:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2104      	movs	r1, #4
 800176a:	4618      	mov	r0, r3
 800176c:	f004 fe2c 	bl	80063c8 <HAL_RCC_ClockConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001776:	f000 f817 	bl	80017a8 <Error_Handler>
  }
}
 800177a:	bf00      	nop
 800177c:	3750      	adds	r7, #80	@ 0x50
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001796:	f000 fb9b 	bl	8001ed0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40001000 	.word	0x40001000

080017a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
}
 80017ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <Error_Handler+0x8>

080017b4 <MX_OPAMP1_Init>:

OPAMP_HandleTypeDef hopamp1;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <MX_OPAMP1_Init+0x44>)
 80017ba:	4a10      	ldr	r2, [pc, #64]	@ (80017fc <MX_OPAMP1_Init+0x48>)
 80017bc:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80017be:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <MX_OPAMP1_Init+0x44>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <MX_OPAMP1_Init+0x44>)
 80017c6:	2260      	movs	r2, #96	@ 0x60
 80017c8:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <MX_OPAMP1_Init+0x44>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80017d0:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <MX_OPAMP1_Init+0x44>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <MX_OPAMP1_Init+0x44>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <MX_OPAMP1_Init+0x44>)
 80017de:	2200      	movs	r2, #0
 80017e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	@ (80017f8 <MX_OPAMP1_Init+0x44>)
 80017e4:	f004 f95a 	bl	8005a9c <HAL_OPAMP_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 80017ee:	f7ff ffdb 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000090c 	.word	0x2000090c
 80017fc:	40010300 	.word	0x40010300

08001800 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0f      	ldr	r2, [pc, #60]	@ (800185c <HAL_OPAMP_MspInit+0x5c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d118      	bne.n	8001854 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <HAL_OPAMP_MspInit+0x60>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	4a0e      	ldr	r2, [pc, #56]	@ (8001860 <HAL_OPAMP_MspInit+0x60>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <HAL_OPAMP_MspInit+0x60>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800183a:	2306      	movs	r3, #6
 800183c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183e:	2303      	movs	r3, #3
 8001840:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001850:	f003 f840 	bl	80048d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40010300 	.word	0x40010300
 8001860:	40021000 	.word	0x40021000

08001864 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <MX_SPI4_Init+0x74>)
 800186a:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <MX_SPI4_Init+0x78>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <MX_SPI4_Init+0x74>)
 8001870:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001874:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <MX_SPI4_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800187c:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <MX_SPI4_Init+0x74>)
 800187e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001882:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <MX_SPI4_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <MX_SPI4_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <MX_SPI4_Init+0x74>)
 8001892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001896:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <MX_SPI4_Init+0x74>)
 800189a:	2210      	movs	r2, #16
 800189c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <MX_SPI4_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <MX_SPI4_Init+0x74>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <MX_SPI4_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80018b0:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <MX_SPI4_Init+0x74>)
 80018b2:	2207      	movs	r2, #7
 80018b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <MX_SPI4_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <MX_SPI4_Init+0x74>)
 80018be:	2208      	movs	r2, #8
 80018c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80018c2:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <MX_SPI4_Init+0x74>)
 80018c4:	f005 fa1c 	bl	8006d00 <HAL_SPI_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80018ce:	f7ff ff6b 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000948 	.word	0x20000948
 80018dc:	40013c00 	.word	0x40013c00

080018e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	@ 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a17      	ldr	r2, [pc, #92]	@ (800195c <HAL_SPI_MspInit+0x7c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d128      	bne.n	8001954 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <HAL_SPI_MspInit+0x80>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001906:	4a16      	ldr	r2, [pc, #88]	@ (8001960 <HAL_SPI_MspInit+0x80>)
 8001908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800190c:	6613      	str	r3, [r2, #96]	@ 0x60
 800190e:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <HAL_SPI_MspInit+0x80>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001912:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <HAL_SPI_MspInit+0x80>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	4a10      	ldr	r2, [pc, #64]	@ (8001960 <HAL_SPI_MspInit+0x80>)
 8001920:	f043 0310 	orr.w	r3, r3, #16
 8001924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <HAL_SPI_MspInit+0x80>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001932:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001944:	2305      	movs	r3, #5
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4805      	ldr	r0, [pc, #20]	@ (8001964 <HAL_SPI_MspInit+0x84>)
 8001950:	f002 ffc0 	bl	80048d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	@ 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40013c00 	.word	0x40013c00
 8001960:	40021000 	.word	0x40021000
 8001964:	48001000 	.word	0x48001000

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <HAL_MspInit+0x4c>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001972:	4a10      	ldr	r2, [pc, #64]	@ (80019b4 <HAL_MspInit+0x4c>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6613      	str	r3, [r2, #96]	@ 0x60
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <HAL_MspInit+0x4c>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <HAL_MspInit+0x4c>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <HAL_MspInit+0x4c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	6593      	str	r3, [r2, #88]	@ 0x58
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <HAL_MspInit+0x4c>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 800199e:	f000 fac9 	bl	8001f34 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80019a2:	2002      	movs	r0, #2
 80019a4:	f000 fab2 	bl	8001f0c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019a8:	f004 f9ec 	bl	8005d84 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	@ 0x30
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019c8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a7c <HAL_InitTick+0xc4>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	4a2b      	ldr	r2, [pc, #172]	@ (8001a7c <HAL_InitTick+0xc4>)
 80019ce:	f043 0310 	orr.w	r3, r3, #16
 80019d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d4:	4b29      	ldr	r3, [pc, #164]	@ (8001a7c <HAL_InitTick+0xc4>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019e0:	f107 020c 	add.w	r2, r7, #12
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f004 fec2 	bl	8006774 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019f0:	f004 fe94 	bl	800671c <HAL_RCC_GetPCLK1Freq>
 80019f4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f8:	4a21      	ldr	r2, [pc, #132]	@ (8001a80 <HAL_InitTick+0xc8>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	0c9b      	lsrs	r3, r3, #18
 8001a00:	3b01      	subs	r3, #1
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a04:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <HAL_InitTick+0xcc>)
 8001a06:	4a20      	ldr	r2, [pc, #128]	@ (8001a88 <HAL_InitTick+0xd0>)
 8001a08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <HAL_InitTick+0xcc>)
 8001a0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a12:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <HAL_InitTick+0xcc>)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <HAL_InitTick+0xcc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <HAL_InitTick+0xcc>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001a24:	4817      	ldr	r0, [pc, #92]	@ (8001a84 <HAL_InitTick+0xcc>)
 8001a26:	f005 fa16 	bl	8006e56 <HAL_TIM_Base_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d11b      	bne.n	8001a70 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a38:	4812      	ldr	r0, [pc, #72]	@ (8001a84 <HAL_InitTick+0xcc>)
 8001a3a:	f005 fa6d 	bl	8006f18 <HAL_TIM_Base_Start_IT>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d111      	bne.n	8001a70 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a4c:	2036      	movs	r0, #54	@ 0x36
 8001a4e:	f002 f96b 	bl	8003d28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d808      	bhi.n	8001a6a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	2036      	movs	r0, #54	@ 0x36
 8001a5e:	f002 f949 	bl	8003cf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a62:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <HAL_InitTick+0xd4>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e002      	b.n	8001a70 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3730      	adds	r7, #48	@ 0x30
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	431bde83 	.word	0x431bde83
 8001a84:	200009ac 	.word	0x200009ac
 8001a88:	40001000 	.word	0x40001000
 8001a8c:	2000004c 	.word	0x2000004c

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <NMI_Handler+0x4>

08001a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8001acc:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <DMA1_Channel1_IRQHandler+0x10>)
 8001ace:	f002 fbb5 	bl	800423c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000084c 	.word	0x2000084c

08001adc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <DMA1_Channel2_IRQHandler+0x10>)
 8001ae2:	f002 fbab 	bl	800423c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200008ac 	.word	0x200008ac

08001af0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001af4:	4802      	ldr	r0, [pc, #8]	@ (8001b00 <DMA1_Channel3_IRQHandler+0x10>)
 8001af6:	f002 fba1 	bl	800423c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000580 	.word	0x20000580

08001b04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <TIM2_IRQHandler+0x10>)
 8001b0a:	f005 fad4 	bl	80070b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200009f8 	.word	0x200009f8

08001b18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <TIM6_DAC_IRQHandler+0x10>)
 8001b1e:	f005 faca 	bl	80070b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200009ac 	.word	0x200009ac

08001b2c <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <ADC4_IRQHandler+0x10>)
 8001b32:	f000 fedf 	bl	80028f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000514 	.word	0x20000514

08001b40 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <I2C4_EV_IRQHandler+0x10>)
 8001b46:	f003 f914 	bl	8004d72 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200007f8 	.word	0x200007f8

08001b54 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <I2C4_ER_IRQHandler+0x10>)
 8001b5a:	f003 f924 	bl	8004da6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200007f8 	.word	0x200007f8

08001b68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	@ (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001baa:	4b31      	ldr	r3, [pc, #196]	@ (8001c70 <MX_TIM2_Init+0xe4>)
 8001bac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8001bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <MX_TIM2_Init+0xe4>)
 8001bb4:	22a9      	movs	r2, #169	@ 0xa9
 8001bb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c70 <MX_TIM2_Init+0xe4>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001c70 <MX_TIM2_Init+0xe4>)
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <MX_TIM2_Init+0xe4>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bcc:	4b28      	ldr	r3, [pc, #160]	@ (8001c70 <MX_TIM2_Init+0xe4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001bd2:	4827      	ldr	r0, [pc, #156]	@ (8001c70 <MX_TIM2_Init+0xe4>)
 8001bd4:	f005 fa18 	bl	8007008 <HAL_TIM_IC_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001bde:	f7ff fde3 	bl	80017a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	481f      	ldr	r0, [pc, #124]	@ (8001c70 <MX_TIM2_Init+0xe4>)
 8001bf2:	f005 fe8b 	bl	800790c <HAL_TIMEx_MasterConfigSynchronization>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001bfc:	f7ff fdd4 	bl	80017a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c04:	2301      	movs	r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2200      	movs	r2, #0
 8001c14:	4619      	mov	r1, r3
 8001c16:	4816      	ldr	r0, [pc, #88]	@ (8001c70 <MX_TIM2_Init+0xe4>)
 8001c18:	f005 fb9c 	bl	8007354 <HAL_TIM_IC_ConfigChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c22:	f7ff fdc1 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2204      	movs	r2, #4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4810      	ldr	r0, [pc, #64]	@ (8001c70 <MX_TIM2_Init+0xe4>)
 8001c2e:	f005 fb91 	bl	8007354 <HAL_TIM_IC_ConfigChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001c38:	f7ff fdb6 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2208      	movs	r2, #8
 8001c40:	4619      	mov	r1, r3
 8001c42:	480b      	ldr	r0, [pc, #44]	@ (8001c70 <MX_TIM2_Init+0xe4>)
 8001c44:	f005 fb86 	bl	8007354 <HAL_TIM_IC_ConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001c4e:	f7ff fdab 	bl	80017a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	220c      	movs	r2, #12
 8001c56:	4619      	mov	r1, r3
 8001c58:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <MX_TIM2_Init+0xe4>)
 8001c5a:	f005 fb7b 	bl	8007354 <HAL_TIM_IC_ConfigChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001c64:	f7ff fda0 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	3720      	adds	r7, #32
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200009f8 	.word	0x200009f8

08001c74 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	@ 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c94:	d12f      	bne.n	8001cf6 <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c96:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <HAL_TIM_IC_MspInit+0x8c>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	4a19      	ldr	r2, [pc, #100]	@ (8001d00 <HAL_TIM_IC_MspInit+0x8c>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ca2:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <HAL_TIM_IC_MspInit+0x8c>)
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <HAL_TIM_IC_MspInit+0x8c>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	4a13      	ldr	r2, [pc, #76]	@ (8001d00 <HAL_TIM_IC_MspInit+0x8c>)
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <HAL_TIM_IC_MspInit+0x8c>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FREQUENCY_3_Pin|FREQUENCY_2_Pin|FREQUENCY_1_Pin|FREQUENCY_4_Pin;
 8001cc6:	23d8      	movs	r3, #216	@ 0xd8
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4808      	ldr	r0, [pc, #32]	@ (8001d04 <HAL_TIM_IC_MspInit+0x90>)
 8001ce2:	f002 fdf7 	bl	80048d4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	201c      	movs	r0, #28
 8001cec:	f002 f802 	bl	8003cf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cf0:	201c      	movs	r0, #28
 8001cf2:	f002 f819 	bl	8003d28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	@ 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	48000c00 	.word	0x48000c00

08001d08 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001d0c:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d0e:	4a21      	ldr	r2, [pc, #132]	@ (8001d94 <MX_LPUART1_UART_Init+0x8c>)
 8001d10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001d12:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d14:	4a20      	ldr	r2, [pc, #128]	@ (8001d98 <MX_LPUART1_UART_Init+0x90>)
 8001d16:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001d24:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d30:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d36:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d42:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001d48:	4811      	ldr	r0, [pc, #68]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d4a:	f005 febb 	bl	8007ac4 <HAL_UART_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001d54:	f7ff fd28 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d5c:	f006 fc56 	bl	800860c <HAL_UARTEx_SetTxFifoThreshold>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001d66:	f7ff fd1f 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4808      	ldr	r0, [pc, #32]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d6e:	f006 fc8b 	bl	8008688 <HAL_UARTEx_SetRxFifoThreshold>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001d78:	f7ff fd16 	bl	80017a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	@ (8001d90 <MX_LPUART1_UART_Init+0x88>)
 8001d7e:	f006 fc0c 	bl	800859a <HAL_UARTEx_DisableFifoMode>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001d88:	f7ff fd0e 	bl	80017a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000a44 	.word	0x20000a44
 8001d94:	40008000 	.word	0x40008000
 8001d98:	00033324 	.word	0x00033324

08001d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b09e      	sub	sp, #120	@ 0x78
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	2254      	movs	r2, #84	@ 0x54
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f008 fc0b 	bl	800a5d8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e40 <HAL_UART_MspInit+0xa4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d135      	bne.n	8001e38 <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001dcc:	2320      	movs	r3, #32
 8001dce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 fd43 	bl	8006864 <HAL_RCCEx_PeriphCLKConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001de4:	f7ff fce0 	bl	80017a8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <HAL_UART_MspInit+0xa8>)
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	4a15      	ldr	r2, [pc, #84]	@ (8001e44 <HAL_UART_MspInit+0xa8>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001df4:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <HAL_UART_MspInit+0xa8>)
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e00:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_UART_MspInit+0xa8>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e04:	4a0f      	ldr	r2, [pc, #60]	@ (8001e44 <HAL_UART_MspInit+0xa8>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <HAL_UART_MspInit+0xa8>)
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e30:	4619      	mov	r1, r3
 8001e32:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <HAL_UART_MspInit+0xac>)
 8001e34:	f002 fd4e 	bl	80048d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3778      	adds	r7, #120	@ 0x78
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40008000 	.word	0x40008000
 8001e44:	40021000 	.word	0x40021000
 8001e48:	48000800 	.word	0x48000800

08001e4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e4c:	480d      	ldr	r0, [pc, #52]	@ (8001e84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e50:	f7ff fe8a 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e54:	480c      	ldr	r0, [pc, #48]	@ (8001e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e56:	490d      	ldr	r1, [pc, #52]	@ (8001e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e58:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <LoopForever+0xe>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e98 <LoopForever+0x16>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f008 fbb5 	bl	800a5e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e7e:	f7ff fc15 	bl	80016ac <main>

08001e82 <LoopForever>:

LoopForever:
    b LoopForever
 8001e82:	e7fe      	b.n	8001e82 <LoopForever>
  ldr   r0, =_estack
 8001e84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001e90:	0800a71c 	.word	0x0800a71c
  ldr r2, =_sbss
 8001e94:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001e98:	2000111c 	.word	0x2000111c

08001e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC1_2_IRQHandler>

08001e9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	f001 ff18 	bl	8003cde <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eae:	200f      	movs	r0, #15
 8001eb0:	f7ff fd82 	bl	80019b8 <HAL_InitTick>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	71fb      	strb	r3, [r7, #7]
 8001ebe:	e001      	b.n	8001ec4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ec0:	f7ff fd52 	bl	8001968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ec4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <HAL_IncTick+0x1c>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <HAL_IncTick+0x20>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4413      	add	r3, r2
 8001ede:	4a03      	ldr	r2, [pc, #12]	@ (8001eec <HAL_IncTick+0x1c>)
 8001ee0:	6013      	str	r3, [r2, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000ad8 	.word	0x20000ad8
 8001ef0:	20000050 	.word	0x20000050

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000ad8 	.word	0x20000ad8

08001f0c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 0202 	bic.w	r2, r3, #2
 8001f1c:	4904      	ldr	r1, [pc, #16]	@ (8001f30 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	40010030 	.word	0x40010030

08001f34 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001f38:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a04      	ldr	r2, [pc, #16]	@ (8001f50 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40010030 	.word	0x40010030

08001f54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3360      	adds	r3, #96	@ 0x60
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <LL_ADC_SetOffset+0x44>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ff4:	bf00      	nop
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	03fff000 	.word	0x03fff000

08002004 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3360      	adds	r3, #96	@ 0x60
 8002012:	461a      	mov	r2, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3360      	adds	r3, #96	@ 0x60
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	431a      	orrs	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800205a:	bf00      	nop
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002066:	b480      	push	{r7}
 8002068:	b087      	sub	sp, #28
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3360      	adds	r3, #96	@ 0x60
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	431a      	orrs	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002090:	bf00      	nop
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3360      	adds	r3, #96	@ 0x60
 80020ac:	461a      	mov	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80020c6:	bf00      	nop
 80020c8:	371c      	adds	r7, #28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	615a      	str	r2, [r3, #20]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800211e:	b480      	push	{r7}
 8002120:	b087      	sub	sp, #28
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3330      	adds	r3, #48	@ 0x30
 800212e:	461a      	mov	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	4413      	add	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	211f      	movs	r1, #31
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	f003 011f 	and.w	r1, r3, #31
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	431a      	orrs	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800216a:	bf00      	nop
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3314      	adds	r3, #20
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0e5b      	lsrs	r3, r3, #25
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	0d1b      	lsrs	r3, r3, #20
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	2107      	movs	r1, #7
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	401a      	ands	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	0d1b      	lsrs	r3, r3, #20
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	431a      	orrs	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220c:	43db      	mvns	r3, r3
 800220e:	401a      	ands	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0318 	and.w	r3, r3, #24
 8002216:	4908      	ldr	r1, [pc, #32]	@ (8002238 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002218:	40d9      	lsrs	r1, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	400b      	ands	r3, r1
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	431a      	orrs	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	0007ffff 	.word	0x0007ffff

0800223c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 031f 	and.w	r3, r3, #31
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002284:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6093      	str	r3, [r2, #8]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022ac:	d101      	bne.n	80022b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80022d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022fc:	d101      	bne.n	8002302 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002320:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <LL_ADC_IsEnabled+0x18>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <LL_ADC_IsEnabled+0x1a>
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800236e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002372:	f043 0204 	orr.w	r2, r3, #4
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b04      	cmp	r3, #4
 8002398:	d101      	bne.n	800239e <LL_ADC_REG_IsConversionOngoing+0x18>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d101      	bne.n	80023c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b089      	sub	sp, #36	@ 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e1a9      	b.n	8002742 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fe fb1d 	bl	8000a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff3f 	bl	8002298 <LL_ADC_IsDeepPowerDownEnabled>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff25 	bl	8002274 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff5a 	bl	80022e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d115      	bne.n	8002466 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff3e 	bl	80022c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002444:	4b9c      	ldr	r3, [pc, #624]	@ (80026b8 <HAL_ADC_Init+0x2e4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	4a9c      	ldr	r2, [pc, #624]	@ (80026bc <HAL_ADC_Init+0x2e8>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	3301      	adds	r3, #1
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002458:	e002      	b.n	8002460 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3b01      	subs	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f9      	bne.n	800245a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff3c 	bl	80022e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10d      	bne.n	8002492 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247a:	f043 0210 	orr.w	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff75 	bl	8002386 <LL_ADC_REG_IsConversionOngoing>
 800249c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 8142 	bne.w	8002730 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 813e 	bne.w	8002730 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024bc:	f043 0202 	orr.w	r2, r3, #2
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff35 	bl	8002338 <LL_ADC_IsEnabled>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d141      	bne.n	8002558 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024dc:	d004      	beq.n	80024e8 <HAL_ADC_Init+0x114>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a77      	ldr	r2, [pc, #476]	@ (80026c0 <HAL_ADC_Init+0x2ec>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d10f      	bne.n	8002508 <HAL_ADC_Init+0x134>
 80024e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80024ec:	f7ff ff24 	bl	8002338 <LL_ADC_IsEnabled>
 80024f0:	4604      	mov	r4, r0
 80024f2:	4873      	ldr	r0, [pc, #460]	@ (80026c0 <HAL_ADC_Init+0x2ec>)
 80024f4:	f7ff ff20 	bl	8002338 <LL_ADC_IsEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4323      	orrs	r3, r4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e012      	b.n	800252e <HAL_ADC_Init+0x15a>
 8002508:	486e      	ldr	r0, [pc, #440]	@ (80026c4 <HAL_ADC_Init+0x2f0>)
 800250a:	f7ff ff15 	bl	8002338 <LL_ADC_IsEnabled>
 800250e:	4604      	mov	r4, r0
 8002510:	486d      	ldr	r0, [pc, #436]	@ (80026c8 <HAL_ADC_Init+0x2f4>)
 8002512:	f7ff ff11 	bl	8002338 <LL_ADC_IsEnabled>
 8002516:	4603      	mov	r3, r0
 8002518:	431c      	orrs	r4, r3
 800251a:	486c      	ldr	r0, [pc, #432]	@ (80026cc <HAL_ADC_Init+0x2f8>)
 800251c:	f7ff ff0c 	bl	8002338 <LL_ADC_IsEnabled>
 8002520:	4603      	mov	r3, r0
 8002522:	4323      	orrs	r3, r4
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d012      	beq.n	8002558 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800253a:	d004      	beq.n	8002546 <HAL_ADC_Init+0x172>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a5f      	ldr	r2, [pc, #380]	@ (80026c0 <HAL_ADC_Init+0x2ec>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_ADC_Init+0x176>
 8002546:	4a62      	ldr	r2, [pc, #392]	@ (80026d0 <HAL_ADC_Init+0x2fc>)
 8002548:	e000      	b.n	800254c <HAL_ADC_Init+0x178>
 800254a:	4a62      	ldr	r2, [pc, #392]	@ (80026d4 <HAL_ADC_Init+0x300>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f7ff fcfe 	bl	8001f54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7f5b      	ldrb	r3, [r3, #29]
 800255c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002562:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002568:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800256e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002576:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002582:	2b01      	cmp	r3, #1
 8002584:	d106      	bne.n	8002594 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	045b      	lsls	r3, r3, #17
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	4b48      	ldr	r3, [pc, #288]	@ (80026d8 <HAL_ADC_Init+0x304>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	69b9      	ldr	r1, [r7, #24]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fee4 	bl	80023ac <LL_ADC_INJ_IsConversionOngoing>
 80025e4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d17f      	bne.n	80026ec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d17c      	bne.n	80026ec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025f6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025fe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800260e:	f023 0302 	bic.w	r3, r3, #2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	69b9      	ldr	r1, [r7, #24]
 8002618:	430b      	orrs	r3, r1
 800261a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d017      	beq.n	8002654 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002632:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800263c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002640:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6911      	ldr	r1, [r2, #16]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	430b      	orrs	r3, r1
 800264e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002652:	e013      	b.n	800267c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002662:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002678:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002682:	2b01      	cmp	r3, #1
 8002684:	d12a      	bne.n	80026dc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002690:	f023 0304 	bic.w	r3, r3, #4
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800269c:	4311      	orrs	r1, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80026a2:	4311      	orrs	r1, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026a8:	430a      	orrs	r2, r1
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	611a      	str	r2, [r3, #16]
 80026b6:	e019      	b.n	80026ec <HAL_ADC_Init+0x318>
 80026b8:	20000048 	.word	0x20000048
 80026bc:	053e2d63 	.word	0x053e2d63
 80026c0:	50000100 	.word	0x50000100
 80026c4:	50000400 	.word	0x50000400
 80026c8:	50000500 	.word	0x50000500
 80026cc:	50000600 	.word	0x50000600
 80026d0:	50000300 	.word	0x50000300
 80026d4:	50000700 	.word	0x50000700
 80026d8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d10c      	bne.n	800270e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	f023 010f 	bic.w	r1, r3, #15
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	1e5a      	subs	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	631a      	str	r2, [r3, #48]	@ 0x30
 800270c:	e007      	b.n	800271e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 020f 	bic.w	r2, r2, #15
 800271c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800272e:	e007      	b.n	8002740 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002734:	f043 0210 	orr.w	r2, r3, #16
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002740:	7ffb      	ldrb	r3, [r7, #31]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	@ 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd90      	pop	{r4, r7, pc}
 800274a:	bf00      	nop

0800274c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002760:	d004      	beq.n	800276c <HAL_ADC_Start_DMA+0x20>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5a      	ldr	r2, [pc, #360]	@ (80028d0 <HAL_ADC_Start_DMA+0x184>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d101      	bne.n	8002770 <HAL_ADC_Start_DMA+0x24>
 800276c:	4b59      	ldr	r3, [pc, #356]	@ (80028d4 <HAL_ADC_Start_DMA+0x188>)
 800276e:	e000      	b.n	8002772 <HAL_ADC_Start_DMA+0x26>
 8002770:	4b59      	ldr	r3, [pc, #356]	@ (80028d8 <HAL_ADC_Start_DMA+0x18c>)
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fd62 	bl	800223c <LL_ADC_GetMultimode>
 8002778:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fe01 	bl	8002386 <LL_ADC_REG_IsConversionOngoing>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 809b 	bne.w	80028c2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_ADC_Start_DMA+0x4e>
 8002796:	2302      	movs	r3, #2
 8002798:	e096      	b.n	80028c8 <HAL_ADC_Start_DMA+0x17c>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a4d      	ldr	r2, [pc, #308]	@ (80028dc <HAL_ADC_Start_DMA+0x190>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d008      	beq.n	80027be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d002      	beq.n	80027be <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2b09      	cmp	r3, #9
 80027bc:	d17a      	bne.n	80028b4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 ff56 	bl	8003670 <ADC_Enable>
 80027c4:	4603      	mov	r3, r0
 80027c6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d16d      	bne.n	80028aa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a3a      	ldr	r2, [pc, #232]	@ (80028d0 <HAL_ADC_Start_DMA+0x184>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d009      	beq.n	8002800 <HAL_ADC_Start_DMA+0xb4>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3b      	ldr	r2, [pc, #236]	@ (80028e0 <HAL_ADC_Start_DMA+0x194>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d002      	beq.n	80027fc <HAL_ADC_Start_DMA+0xb0>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	e003      	b.n	8002804 <HAL_ADC_Start_DMA+0xb8>
 80027fc:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <HAL_ADC_Start_DMA+0x198>)
 80027fe:	e001      	b.n	8002804 <HAL_ADC_Start_DMA+0xb8>
 8002800:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	4293      	cmp	r3, r2
 800280a:	d002      	beq.n	8002812 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d105      	bne.n	800281e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002816:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282e:	f023 0206 	bic.w	r2, r3, #6
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	661a      	str	r2, [r3, #96]	@ 0x60
 8002836:	e002      	b.n	800283e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002842:	4a29      	ldr	r2, [pc, #164]	@ (80028e8 <HAL_ADC_Start_DMA+0x19c>)
 8002844:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284a:	4a28      	ldr	r2, [pc, #160]	@ (80028ec <HAL_ADC_Start_DMA+0x1a0>)
 800284c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002852:	4a27      	ldr	r2, [pc, #156]	@ (80028f0 <HAL_ADC_Start_DMA+0x1a4>)
 8002854:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	221c      	movs	r2, #28
 800285c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0210 	orr.w	r2, r2, #16
 8002874:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3340      	adds	r3, #64	@ 0x40
 8002890:	4619      	mov	r1, r3
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f001 fbef 	bl	8004078 <HAL_DMA_Start_IT>
 800289a:	4603      	mov	r3, r0
 800289c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fd5b 	bl	800235e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80028a8:	e00d      	b.n	80028c6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80028b2:	e008      	b.n	80028c6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80028c0:	e001      	b.n	80028c6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	50000100 	.word	0x50000100
 80028d4:	50000300 	.word	0x50000300
 80028d8:	50000700 	.word	0x50000700
 80028dc:	50000600 	.word	0x50000600
 80028e0:	50000500 	.word	0x50000500
 80028e4:	50000400 	.word	0x50000400
 80028e8:	0800379d 	.word	0x0800379d
 80028ec:	08003875 	.word	0x08003875
 80028f0:	08003891 	.word	0x08003891

080028f4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	@ 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80028fc:	2300      	movs	r3, #0
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002918:	d004      	beq.n	8002924 <HAL_ADC_IRQHandler+0x30>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a8e      	ldr	r2, [pc, #568]	@ (8002b58 <HAL_ADC_IRQHandler+0x264>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d101      	bne.n	8002928 <HAL_ADC_IRQHandler+0x34>
 8002924:	4b8d      	ldr	r3, [pc, #564]	@ (8002b5c <HAL_ADC_IRQHandler+0x268>)
 8002926:	e000      	b.n	800292a <HAL_ADC_IRQHandler+0x36>
 8002928:	4b8d      	ldr	r3, [pc, #564]	@ (8002b60 <HAL_ADC_IRQHandler+0x26c>)
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fc86 	bl	800223c <LL_ADC_GetMultimode>
 8002930:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d017      	beq.n	800296c <HAL_ADC_IRQHandler+0x78>
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d012      	beq.n	800296c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	d105      	bne.n	800295e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002956:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fffe 	bl	8003960 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2202      	movs	r2, #2
 800296a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <HAL_ADC_IRQHandler+0x8c>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8094 	beq.w	8002ab4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 808e 	beq.w	8002ab4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fb9f 	bl	80020f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d072      	beq.n	8002aa6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a64      	ldr	r2, [pc, #400]	@ (8002b58 <HAL_ADC_IRQHandler+0x264>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_ADC_IRQHandler+0xea>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a65      	ldr	r2, [pc, #404]	@ (8002b64 <HAL_ADC_IRQHandler+0x270>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d002      	beq.n	80029da <HAL_ADC_IRQHandler+0xe6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	e003      	b.n	80029e2 <HAL_ADC_IRQHandler+0xee>
 80029da:	4b63      	ldr	r3, [pc, #396]	@ (8002b68 <HAL_ADC_IRQHandler+0x274>)
 80029dc:	e001      	b.n	80029e2 <HAL_ADC_IRQHandler+0xee>
 80029de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d008      	beq.n	80029fc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b05      	cmp	r3, #5
 80029f4:	d002      	beq.n	80029fc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	d104      	bne.n	8002a06 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	e014      	b.n	8002a30 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a53      	ldr	r2, [pc, #332]	@ (8002b58 <HAL_ADC_IRQHandler+0x264>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d009      	beq.n	8002a24 <HAL_ADC_IRQHandler+0x130>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a53      	ldr	r2, [pc, #332]	@ (8002b64 <HAL_ADC_IRQHandler+0x270>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d002      	beq.n	8002a20 <HAL_ADC_IRQHandler+0x12c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	e003      	b.n	8002a28 <HAL_ADC_IRQHandler+0x134>
 8002a20:	4b51      	ldr	r3, [pc, #324]	@ (8002b68 <HAL_ADC_IRQHandler+0x274>)
 8002a22:	e001      	b.n	8002a28 <HAL_ADC_IRQHandler+0x134>
 8002a24:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002a28:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d135      	bne.n	8002aa6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d12e      	bne.n	8002aa6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fc9a 	bl	8002386 <LL_ADC_REG_IsConversionOngoing>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11a      	bne.n	8002a8e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 020c 	bic.w	r2, r2, #12
 8002a66:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d112      	bne.n	8002aa6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a8c:	e00b      	b.n	8002aa6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	f043 0210 	orr.w	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe f8ae 	bl	8000c08 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	220c      	movs	r2, #12
 8002ab2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <HAL_ADC_IRQHandler+0x1d4>
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80b3 	beq.w	8002c3a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80ad 	beq.w	8002c3a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d105      	bne.n	8002af8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fb3a 	bl	8002176 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b02:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff faf5 	bl	80020f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b0e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a10      	ldr	r2, [pc, #64]	@ (8002b58 <HAL_ADC_IRQHandler+0x264>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_ADC_IRQHandler+0x23a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a11      	ldr	r2, [pc, #68]	@ (8002b64 <HAL_ADC_IRQHandler+0x270>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d002      	beq.n	8002b2a <HAL_ADC_IRQHandler+0x236>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	e003      	b.n	8002b32 <HAL_ADC_IRQHandler+0x23e>
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b68 <HAL_ADC_IRQHandler+0x274>)
 8002b2c:	e001      	b.n	8002b32 <HAL_ADC_IRQHandler+0x23e>
 8002b2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d008      	beq.n	8002b4c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d002      	beq.n	8002b4c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b07      	cmp	r3, #7
 8002b4a:	d10f      	bne.n	8002b6c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	e01f      	b.n	8002b96 <HAL_ADC_IRQHandler+0x2a2>
 8002b56:	bf00      	nop
 8002b58:	50000100 	.word	0x50000100
 8002b5c:	50000300 	.word	0x50000300
 8002b60:	50000700 	.word	0x50000700
 8002b64:	50000500 	.word	0x50000500
 8002b68:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a8b      	ldr	r2, [pc, #556]	@ (8002da0 <HAL_ADC_IRQHandler+0x4ac>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d009      	beq.n	8002b8a <HAL_ADC_IRQHandler+0x296>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a8a      	ldr	r2, [pc, #552]	@ (8002da4 <HAL_ADC_IRQHandler+0x4b0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d002      	beq.n	8002b86 <HAL_ADC_IRQHandler+0x292>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	e003      	b.n	8002b8e <HAL_ADC_IRQHandler+0x29a>
 8002b86:	4b88      	ldr	r3, [pc, #544]	@ (8002da8 <HAL_ADC_IRQHandler+0x4b4>)
 8002b88:	e001      	b.n	8002b8e <HAL_ADC_IRQHandler+0x29a>
 8002b8a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b8e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d047      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <HAL_ADC_IRQHandler+0x2c2>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d03f      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d13a      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc0:	2b40      	cmp	r3, #64	@ 0x40
 8002bc2:	d133      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d12e      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fbea 	bl	80023ac <LL_ADC_INJ_IsConversionOngoing>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d11a      	bne.n	8002c14 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d112      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0a:	f043 0201 	orr.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c12:	e00b      	b.n	8002c2c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c18:	f043 0210 	orr.w	r2, r3, #16
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c24:	f043 0201 	orr.w	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fe6f 	bl	8003910 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2260      	movs	r2, #96	@ 0x60
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d011      	beq.n	8002c68 <HAL_ADC_IRQHandler+0x374>
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c52:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8b4 	bl	8002dc8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2280      	movs	r2, #128	@ 0x80
 8002c66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d012      	beq.n	8002c98 <HAL_ADC_IRQHandler+0x3a4>
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00d      	beq.n	8002c98 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c80:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fe55 	bl	8003938 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d012      	beq.n	8002cc8 <HAL_ADC_IRQHandler+0x3d4>
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fe47 	bl	800394c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d043      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x466>
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d03e      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce8:	e021      	b.n	8002d2e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d015      	beq.n	8002d1c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cf8:	d004      	beq.n	8002d04 <HAL_ADC_IRQHandler+0x410>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a28      	ldr	r2, [pc, #160]	@ (8002da0 <HAL_ADC_IRQHandler+0x4ac>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_IRQHandler+0x414>
 8002d04:	4b29      	ldr	r3, [pc, #164]	@ (8002dac <HAL_ADC_IRQHandler+0x4b8>)
 8002d06:	e000      	b.n	8002d0a <HAL_ADC_IRQHandler+0x416>
 8002d08:	4b29      	ldr	r3, [pc, #164]	@ (8002db0 <HAL_ADC_IRQHandler+0x4bc>)
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff faa4 	bl	8002258 <LL_ADC_GetMultiDMATransfer>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002d16:	2301      	movs	r3, #1
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1a:	e008      	b.n	8002d2e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d10e      	bne.n	8002d52 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d38:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d44:	f043 0202 	orr.w	r2, r3, #2
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f845 	bl	8002ddc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2210      	movs	r2, #16
 8002d58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d018      	beq.n	8002d96 <HAL_ADC_IRQHandler+0x4a2>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d013      	beq.n	8002d96 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d72:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d7e:	f043 0208 	orr.w	r2, r3, #8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d8e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fdc7 	bl	8003924 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d96:	bf00      	nop
 8002d98:	3728      	adds	r7, #40	@ 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	50000100 	.word	0x50000100
 8002da4:	50000500 	.word	0x50000500
 8002da8:	50000400 	.word	0x50000400
 8002dac:	50000300 	.word	0x50000300
 8002db0:	50000700 	.word	0x50000700

08002db4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b0b6      	sub	sp, #216	@ 0xd8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d102      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x24>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	f000 bc13 	b.w	800363a <HAL_ADC_ConfigChannel+0x84a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fab0 	bl	8002386 <LL_ADC_REG_IsConversionOngoing>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f040 83f3 	bne.w	8003614 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f7ff f96f 	bl	800211e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fa9e 	bl	8002386 <LL_ADC_REG_IsConversionOngoing>
 8002e4a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff faaa 	bl	80023ac <LL_ADC_INJ_IsConversionOngoing>
 8002e58:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 81d9 	bne.w	8003218 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f040 81d4 	bne.w	8003218 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e78:	d10f      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2200      	movs	r2, #0
 8002e84:	4619      	mov	r1, r3
 8002e86:	f7ff f989 	bl	800219c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff f91d 	bl	80020d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002e98:	e00e      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f7ff f978 	bl	800219c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff f90d 	bl	80020d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	08db      	lsrs	r3, r3, #3
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d022      	beq.n	8002f20 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6919      	ldr	r1, [r3, #16]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002eea:	f7ff f867 	bl	8001fbc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6919      	ldr	r1, [r3, #16]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f7ff f8b3 	bl	8002066 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d102      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x126>
 8002f10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f14:	e000      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x128>
 8002f16:	2300      	movs	r3, #0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f7ff f8bf 	bl	800209c <LL_ADC_SetOffsetSaturation>
 8002f1e:	e17b      	b.n	8003218 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff f86c 	bl	8002004 <LL_ADC_GetOffsetChannel>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10a      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x15c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff f861 	bl	8002004 <LL_ADC_GetOffsetChannel>
 8002f42:	4603      	mov	r3, r0
 8002f44:	0e9b      	lsrs	r3, r3, #26
 8002f46:	f003 021f 	and.w	r2, r3, #31
 8002f4a:	e01e      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x19a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2100      	movs	r1, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff f856 	bl	8002004 <LL_ADC_GetOffsetChannel>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	e004      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x1b2>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0e9b      	lsrs	r3, r3, #26
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	e018      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x1e4>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e004      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d106      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff f825 	bl	8002030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2101      	movs	r1, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff f809 	bl	8002004 <LL_ADC_GetOffsetChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x222>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2101      	movs	r1, #1
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fffe 	bl	8002004 <LL_ADC_GetOffsetChannel>
 8003008:	4603      	mov	r3, r0
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	e01e      	b.n	8003050 <HAL_ADC_ConfigChannel+0x260>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2101      	movs	r1, #1
 8003018:	4618      	mov	r0, r3
 800301a:	f7fe fff3 	bl	8002004 <LL_ADC_GetOffsetChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003030:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003034:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003038:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003040:	2320      	movs	r3, #32
 8003042:	e004      	b.n	800304e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003058:	2b00      	cmp	r3, #0
 800305a:	d105      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x278>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	0e9b      	lsrs	r3, r3, #26
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	e018      	b.n	800309a <HAL_ADC_ConfigChannel+0x2aa>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800307c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003080:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003084:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800308c:	2320      	movs	r3, #32
 800308e:	e004      	b.n	800309a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003090:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800309a:	429a      	cmp	r2, r3
 800309c:	d106      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2101      	movs	r1, #1
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe ffc2 	bl	8002030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2102      	movs	r1, #2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe ffa6 	bl	8002004 <LL_ADC_GetOffsetChannel>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x2e8>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2102      	movs	r1, #2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe ff9b 	bl	8002004 <LL_ADC_GetOffsetChannel>
 80030ce:	4603      	mov	r3, r0
 80030d0:	0e9b      	lsrs	r3, r3, #26
 80030d2:	f003 021f 	and.w	r2, r3, #31
 80030d6:	e01e      	b.n	8003116 <HAL_ADC_ConfigChannel+0x326>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2102      	movs	r1, #2
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe ff90 	bl	8002004 <LL_ADC_GetOffsetChannel>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80030f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80030fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003106:	2320      	movs	r3, #32
 8003108:	e004      	b.n	8003114 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800310a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <HAL_ADC_ConfigChannel+0x33e>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	e016      	b.n	800315c <HAL_ADC_ConfigChannel+0x36c>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003140:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003142:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003146:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800314e:	2320      	movs	r3, #32
 8003150:	e004      	b.n	800315c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003152:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800315c:	429a      	cmp	r2, r3
 800315e:	d106      	bne.n	800316e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	2102      	movs	r1, #2
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe ff61 	bl	8002030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2103      	movs	r1, #3
 8003174:	4618      	mov	r0, r3
 8003176:	f7fe ff45 	bl	8002004 <LL_ADC_GetOffsetChannel>
 800317a:	4603      	mov	r3, r0
 800317c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10a      	bne.n	800319a <HAL_ADC_ConfigChannel+0x3aa>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2103      	movs	r1, #3
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe ff3a 	bl	8002004 <LL_ADC_GetOffsetChannel>
 8003190:	4603      	mov	r3, r0
 8003192:	0e9b      	lsrs	r3, r3, #26
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	e017      	b.n	80031ca <HAL_ADC_ConfigChannel+0x3da>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2103      	movs	r1, #3
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe ff2f 	bl	8002004 <LL_ADC_GetOffsetChannel>
 80031a6:	4603      	mov	r3, r0
 80031a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80031b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80031b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80031bc:	2320      	movs	r3, #32
 80031be:	e003      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80031c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x3f2>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	0e9b      	lsrs	r3, r3, #26
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	e011      	b.n	8003206 <HAL_ADC_ConfigChannel+0x416>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80031f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80031f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80031fa:	2320      	movs	r3, #32
 80031fc:	e003      	b.n	8003206 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80031fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003206:	429a      	cmp	r2, r3
 8003208:	d106      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2200      	movs	r2, #0
 8003210:	2103      	movs	r1, #3
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe ff0c 	bl	8002030 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff f88b 	bl	8002338 <LL_ADC_IsEnabled>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 813d 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	461a      	mov	r2, r3
 8003238:	f7fe ffdc 	bl	80021f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4aa2      	ldr	r2, [pc, #648]	@ (80034cc <HAL_ADC_ConfigChannel+0x6dc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	f040 812e 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x480>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	0e9b      	lsrs	r3, r3, #26
 800325e:	3301      	adds	r3, #1
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	2b09      	cmp	r3, #9
 8003266:	bf94      	ite	ls
 8003268:	2301      	movls	r3, #1
 800326a:	2300      	movhi	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e019      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x4b4>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800327e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003280:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003288:	2320      	movs	r3, #32
 800328a:	e003      	b.n	8003294 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800328c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800328e:	fab3 f383 	clz	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	3301      	adds	r3, #1
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	2b09      	cmp	r3, #9
 800329c:	bf94      	ite	ls
 800329e:	2301      	movls	r3, #1
 80032a0:	2300      	movhi	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d079      	beq.n	800339c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d107      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x4d4>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	0e9b      	lsrs	r3, r3, #26
 80032ba:	3301      	adds	r3, #1
 80032bc:	069b      	lsls	r3, r3, #26
 80032be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032c2:	e015      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x500>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80032d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80032d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80032dc:	2320      	movs	r3, #32
 80032de:	e003      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80032e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	3301      	adds	r3, #1
 80032ea:	069b      	lsls	r3, r3, #26
 80032ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x520>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	0e9b      	lsrs	r3, r3, #26
 8003302:	3301      	adds	r3, #1
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2101      	movs	r1, #1
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	e017      	b.n	8003340 <HAL_ADC_ConfigChannel+0x550>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800331e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003320:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003328:	2320      	movs	r3, #32
 800332a:	e003      	b.n	8003334 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800332c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	3301      	adds	r3, #1
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	2101      	movs	r1, #1
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	ea42 0103 	orr.w	r1, r2, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10a      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x576>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	0e9b      	lsrs	r3, r3, #26
 8003356:	3301      	adds	r3, #1
 8003358:	f003 021f 	and.w	r2, r3, #31
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	051b      	lsls	r3, r3, #20
 8003364:	e018      	b.n	8003398 <HAL_ADC_ConfigChannel+0x5a8>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003376:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800337e:	2320      	movs	r3, #32
 8003380:	e003      	b.n	800338a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	3301      	adds	r3, #1
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4613      	mov	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003398:	430b      	orrs	r3, r1
 800339a:	e07e      	b.n	800349a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x5c8>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	0e9b      	lsrs	r3, r3, #26
 80033ae:	3301      	adds	r3, #1
 80033b0:	069b      	lsls	r3, r3, #26
 80033b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033b6:	e015      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x5f4>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80033c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80033ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80033d0:	2320      	movs	r3, #32
 80033d2:	e003      	b.n	80033dc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80033d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	069b      	lsls	r3, r3, #26
 80033e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x614>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	0e9b      	lsrs	r3, r3, #26
 80033f6:	3301      	adds	r3, #1
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	e017      	b.n	8003434 <HAL_ADC_ConfigChannel+0x644>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	61fb      	str	r3, [r7, #28]
  return result;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	e003      	b.n	8003428 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	2101      	movs	r1, #1
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	ea42 0103 	orr.w	r1, r2, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10d      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x670>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	0e9b      	lsrs	r3, r3, #26
 800344a:	3301      	adds	r3, #1
 800344c:	f003 021f 	and.w	r2, r3, #31
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	3b1e      	subs	r3, #30
 8003458:	051b      	lsls	r3, r3, #20
 800345a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800345e:	e01b      	b.n	8003498 <HAL_ADC_ConfigChannel+0x6a8>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	613b      	str	r3, [r7, #16]
  return result;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	e003      	b.n	8003484 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3301      	adds	r3, #1
 8003486:	f003 021f 	and.w	r2, r3, #31
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	3b1e      	subs	r3, #30
 8003492:	051b      	lsls	r3, r3, #20
 8003494:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003498:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800349e:	4619      	mov	r1, r3
 80034a0:	f7fe fe7c 	bl	800219c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <HAL_ADC_ConfigChannel+0x6e0>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80be 	beq.w	800362e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ba:	d004      	beq.n	80034c6 <HAL_ADC_ConfigChannel+0x6d6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a04      	ldr	r2, [pc, #16]	@ (80034d4 <HAL_ADC_ConfigChannel+0x6e4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10a      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x6ec>
 80034c6:	4b04      	ldr	r3, [pc, #16]	@ (80034d8 <HAL_ADC_ConfigChannel+0x6e8>)
 80034c8:	e009      	b.n	80034de <HAL_ADC_ConfigChannel+0x6ee>
 80034ca:	bf00      	nop
 80034cc:	407f0000 	.word	0x407f0000
 80034d0:	80080000 	.word	0x80080000
 80034d4:	50000100 	.word	0x50000100
 80034d8:	50000300 	.word	0x50000300
 80034dc:	4b59      	ldr	r3, [pc, #356]	@ (8003644 <HAL_ADC_ConfigChannel+0x854>)
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe fd5e 	bl	8001fa0 <LL_ADC_GetCommonPathInternalCh>
 80034e4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a56      	ldr	r2, [pc, #344]	@ (8003648 <HAL_ADC_ConfigChannel+0x858>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <HAL_ADC_ConfigChannel+0x70c>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a55      	ldr	r2, [pc, #340]	@ (800364c <HAL_ADC_ConfigChannel+0x85c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d13a      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003500:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d134      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003510:	d005      	beq.n	800351e <HAL_ADC_ConfigChannel+0x72e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a4e      	ldr	r2, [pc, #312]	@ (8003650 <HAL_ADC_ConfigChannel+0x860>)
 8003518:	4293      	cmp	r3, r2
 800351a:	f040 8085 	bne.w	8003628 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003526:	d004      	beq.n	8003532 <HAL_ADC_ConfigChannel+0x742>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a49      	ldr	r2, [pc, #292]	@ (8003654 <HAL_ADC_ConfigChannel+0x864>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x746>
 8003532:	4a49      	ldr	r2, [pc, #292]	@ (8003658 <HAL_ADC_ConfigChannel+0x868>)
 8003534:	e000      	b.n	8003538 <HAL_ADC_ConfigChannel+0x748>
 8003536:	4a43      	ldr	r2, [pc, #268]	@ (8003644 <HAL_ADC_ConfigChannel+0x854>)
 8003538:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800353c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f7fe fd19 	bl	8001f7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003548:	4b44      	ldr	r3, [pc, #272]	@ (800365c <HAL_ADC_ConfigChannel+0x86c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	4a44      	ldr	r2, [pc, #272]	@ (8003660 <HAL_ADC_ConfigChannel+0x870>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	099b      	lsrs	r3, r3, #6
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003562:	e002      	b.n	800356a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3b01      	subs	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f9      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003570:	e05a      	b.n	8003628 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a3b      	ldr	r2, [pc, #236]	@ (8003664 <HAL_ADC_ConfigChannel+0x874>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d125      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800357c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003580:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d11f      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a31      	ldr	r2, [pc, #196]	@ (8003654 <HAL_ADC_ConfigChannel+0x864>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d104      	bne.n	800359c <HAL_ADC_ConfigChannel+0x7ac>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a34      	ldr	r2, [pc, #208]	@ (8003668 <HAL_ADC_ConfigChannel+0x878>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d047      	beq.n	800362c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035a4:	d004      	beq.n	80035b0 <HAL_ADC_ConfigChannel+0x7c0>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003654 <HAL_ADC_ConfigChannel+0x864>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x7c4>
 80035b0:	4a29      	ldr	r2, [pc, #164]	@ (8003658 <HAL_ADC_ConfigChannel+0x868>)
 80035b2:	e000      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x7c6>
 80035b4:	4a23      	ldr	r2, [pc, #140]	@ (8003644 <HAL_ADC_ConfigChannel+0x854>)
 80035b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f7fe fcda 	bl	8001f7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035c6:	e031      	b.n	800362c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a27      	ldr	r2, [pc, #156]	@ (800366c <HAL_ADC_ConfigChannel+0x87c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d12d      	bne.n	800362e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d127      	bne.n	800362e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003654 <HAL_ADC_ConfigChannel+0x864>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035f0:	d004      	beq.n	80035fc <HAL_ADC_ConfigChannel+0x80c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a17      	ldr	r2, [pc, #92]	@ (8003654 <HAL_ADC_ConfigChannel+0x864>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d101      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x810>
 80035fc:	4a16      	ldr	r2, [pc, #88]	@ (8003658 <HAL_ADC_ConfigChannel+0x868>)
 80035fe:	e000      	b.n	8003602 <HAL_ADC_ConfigChannel+0x812>
 8003600:	4a10      	ldr	r2, [pc, #64]	@ (8003644 <HAL_ADC_ConfigChannel+0x854>)
 8003602:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003606:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f7fe fcb4 	bl	8001f7a <LL_ADC_SetCommonPathInternalCh>
 8003612:	e00c      	b.n	800362e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003626:	e002      	b.n	800362e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003628:	bf00      	nop
 800362a:	e000      	b.n	800362e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800362c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003636:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800363a:	4618      	mov	r0, r3
 800363c:	37d8      	adds	r7, #216	@ 0xd8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	50000700 	.word	0x50000700
 8003648:	c3210000 	.word	0xc3210000
 800364c:	90c00010 	.word	0x90c00010
 8003650:	50000600 	.word	0x50000600
 8003654:	50000100 	.word	0x50000100
 8003658:	50000300 	.word	0x50000300
 800365c:	20000048 	.word	0x20000048
 8003660:	053e2d63 	.word	0x053e2d63
 8003664:	c7520000 	.word	0xc7520000
 8003668:	50000500 	.word	0x50000500
 800366c:	cb840000 	.word	0xcb840000

08003670 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003678:	2300      	movs	r3, #0
 800367a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe fe59 	bl	8002338 <LL_ADC_IsEnabled>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d176      	bne.n	800377a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	4b3c      	ldr	r3, [pc, #240]	@ (8003784 <ADC_Enable+0x114>)
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369e:	f043 0210 	orr.w	r2, r3, #16
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036aa:	f043 0201 	orr.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e062      	b.n	800377c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fe28 	bl	8002310 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036c8:	d004      	beq.n	80036d4 <ADC_Enable+0x64>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2e      	ldr	r2, [pc, #184]	@ (8003788 <ADC_Enable+0x118>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d101      	bne.n	80036d8 <ADC_Enable+0x68>
 80036d4:	4b2d      	ldr	r3, [pc, #180]	@ (800378c <ADC_Enable+0x11c>)
 80036d6:	e000      	b.n	80036da <ADC_Enable+0x6a>
 80036d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003790 <ADC_Enable+0x120>)
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fe fc60 	bl	8001fa0 <LL_ADC_GetCommonPathInternalCh>
 80036e0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d013      	beq.n	8003712 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003794 <ADC_Enable+0x124>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	099b      	lsrs	r3, r3, #6
 80036f0:	4a29      	ldr	r2, [pc, #164]	@ (8003798 <ADC_Enable+0x128>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	4613      	mov	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003704:	e002      	b.n	800370c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	3b01      	subs	r3, #1
 800370a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f9      	bne.n	8003706 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003712:	f7fe fbef 	bl	8001ef4 <HAL_GetTick>
 8003716:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003718:	e028      	b.n	800376c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fe0a 	bl	8002338 <LL_ADC_IsEnabled>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fdee 	bl	8002310 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003734:	f7fe fbde 	bl	8001ef4 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d914      	bls.n	800376c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b01      	cmp	r3, #1
 800374e:	d00d      	beq.n	800376c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003754:	f043 0210 	orr.w	r2, r3, #16
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003760:	f043 0201 	orr.w	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e007      	b.n	800377c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d1cf      	bne.n	800371a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	8000003f 	.word	0x8000003f
 8003788:	50000100 	.word	0x50000100
 800378c:	50000300 	.word	0x50000300
 8003790:	50000700 	.word	0x50000700
 8003794:	20000048 	.word	0x20000048
 8003798:	053e2d63 	.word	0x053e2d63

0800379c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d14b      	bne.n	800384e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d021      	beq.n	8003814 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fe fc8f 	bl	80020f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d032      	beq.n	8003846 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d12b      	bne.n	8003846 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11f      	bne.n	8003846 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003812:	e018      	b.n	8003846 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d111      	bne.n	8003846 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003826:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003832:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7fd f9de 	bl	8000c08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800384c:	e00e      	b.n	800386c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f7ff fabe 	bl	8002ddc <HAL_ADC_ErrorCallback>
}
 8003860:	e004      	b.n	800386c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fa96 	bl	8002db4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ae:	f043 0204 	orr.w	r2, r3, #4
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff fa90 	bl	8002ddc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <LL_ADC_IsEnabled>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <LL_ADC_IsEnabled+0x18>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <LL_ADC_IsEnabled+0x1a>
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <LL_ADC_REG_IsConversionOngoing>:
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d101      	bne.n	8003902 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b0a1      	sub	sp, #132	@ 0x84
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800398e:	2302      	movs	r3, #2
 8003990:	e0e7      	b.n	8003b62 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800399a:	2300      	movs	r3, #0
 800399c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800399e:	2300      	movs	r3, #0
 80039a0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039aa:	d102      	bne.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039ac:	4b6f      	ldr	r3, [pc, #444]	@ (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	e009      	b.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d102      	bne.n	80039c2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80039bc:	4b6d      	ldr	r3, [pc, #436]	@ (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	e001      	b.n	80039c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10b      	bne.n	80039e4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0be      	b.n	8003b62 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff7f 	bl	80038ea <LL_ADC_REG_IsConversionOngoing>
 80039ec:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff ff79 	bl	80038ea <LL_ADC_REG_IsConversionOngoing>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f040 80a0 	bne.w	8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 809c 	bne.w	8003b40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a10:	d004      	beq.n	8003a1c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a55      	ldr	r2, [pc, #340]	@ (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a1c:	4b56      	ldr	r3, [pc, #344]	@ (8003b78 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a1e:	e000      	b.n	8003a22 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a20:	4b56      	ldr	r3, [pc, #344]	@ (8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a22:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d04b      	beq.n	8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a3e:	035b      	lsls	r3, r3, #13
 8003a40:	430b      	orrs	r3, r1
 8003a42:	431a      	orrs	r2, r3
 8003a44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a50:	d004      	beq.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a45      	ldr	r2, [pc, #276]	@ (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d10f      	bne.n	8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a60:	f7ff ff30 	bl	80038c4 <LL_ADC_IsEnabled>
 8003a64:	4604      	mov	r4, r0
 8003a66:	4841      	ldr	r0, [pc, #260]	@ (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a68:	f7ff ff2c 	bl	80038c4 <LL_ADC_IsEnabled>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4323      	orrs	r3, r4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf0c      	ite	eq
 8003a74:	2301      	moveq	r3, #1
 8003a76:	2300      	movne	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e012      	b.n	8003aa2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003a7c:	483c      	ldr	r0, [pc, #240]	@ (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a7e:	f7ff ff21 	bl	80038c4 <LL_ADC_IsEnabled>
 8003a82:	4604      	mov	r4, r0
 8003a84:	483b      	ldr	r0, [pc, #236]	@ (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a86:	f7ff ff1d 	bl	80038c4 <LL_ADC_IsEnabled>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	431c      	orrs	r4, r3
 8003a8e:	483c      	ldr	r0, [pc, #240]	@ (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a90:	f7ff ff18 	bl	80038c4 <LL_ADC_IsEnabled>
 8003a94:	4603      	mov	r3, r0
 8003a96:	4323      	orrs	r3, r4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d056      	beq.n	8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003aa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003aae:	f023 030f 	bic.w	r3, r3, #15
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	6811      	ldr	r1, [r2, #0]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	6892      	ldr	r2, [r2, #8]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	431a      	orrs	r2, r3
 8003abe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ac0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ac2:	e047      	b.n	8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ac4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003acc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ace:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ad8:	d004      	beq.n	8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a23      	ldr	r2, [pc, #140]	@ (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d10f      	bne.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ae4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ae8:	f7ff feec 	bl	80038c4 <LL_ADC_IsEnabled>
 8003aec:	4604      	mov	r4, r0
 8003aee:	481f      	ldr	r0, [pc, #124]	@ (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003af0:	f7ff fee8 	bl	80038c4 <LL_ADC_IsEnabled>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4323      	orrs	r3, r4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e012      	b.n	8003b2a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b04:	481a      	ldr	r0, [pc, #104]	@ (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b06:	f7ff fedd 	bl	80038c4 <LL_ADC_IsEnabled>
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4819      	ldr	r0, [pc, #100]	@ (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b0e:	f7ff fed9 	bl	80038c4 <LL_ADC_IsEnabled>
 8003b12:	4603      	mov	r3, r0
 8003b14:	431c      	orrs	r4, r3
 8003b16:	481a      	ldr	r0, [pc, #104]	@ (8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b18:	f7ff fed4 	bl	80038c4 <LL_ADC_IsEnabled>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4323      	orrs	r3, r4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d012      	beq.n	8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b36:	f023 030f 	bic.w	r3, r3, #15
 8003b3a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b3c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b3e:	e009      	b.n	8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003b52:	e000      	b.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b54:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3784      	adds	r7, #132	@ 0x84
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd90      	pop	{r4, r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	50000100 	.word	0x50000100
 8003b70:	50000400 	.word	0x50000400
 8003b74:	50000500 	.word	0x50000500
 8003b78:	50000300 	.word	0x50000300
 8003b7c:	50000700 	.word	0x50000700
 8003b80:	50000600 	.word	0x50000600

08003b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b94:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bb6:	4a04      	ldr	r2, [pc, #16]	@ (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	60d3      	str	r3, [r2, #12]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd0:	4b04      	ldr	r3, [pc, #16]	@ (8003be4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	0a1b      	lsrs	r3, r3, #8
 8003bd6:	f003 0307 	and.w	r3, r3, #7
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	db0b      	blt.n	8003c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	f003 021f 	and.w	r2, r3, #31
 8003c00:	4907      	ldr	r1, [pc, #28]	@ (8003c20 <__NVIC_EnableIRQ+0x38>)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2001      	movs	r0, #1
 8003c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	e000e100 	.word	0xe000e100

08003c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	6039      	str	r1, [r7, #0]
 8003c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	db0a      	blt.n	8003c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	490c      	ldr	r1, [pc, #48]	@ (8003c70 <__NVIC_SetPriority+0x4c>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	0112      	lsls	r2, r2, #4
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	440b      	add	r3, r1
 8003c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c4c:	e00a      	b.n	8003c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	4908      	ldr	r1, [pc, #32]	@ (8003c74 <__NVIC_SetPriority+0x50>)
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	3b04      	subs	r3, #4
 8003c5c:	0112      	lsls	r2, r2, #4
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	440b      	add	r3, r1
 8003c62:	761a      	strb	r2, [r3, #24]
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000e100 	.word	0xe000e100
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	@ 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f1c3 0307 	rsb	r3, r3, #7
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	bf28      	it	cs
 8003c96:	2304      	movcs	r3, #4
 8003c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	2b06      	cmp	r3, #6
 8003ca0:	d902      	bls.n	8003ca8 <NVIC_EncodePriority+0x30>
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3b03      	subs	r3, #3
 8003ca6:	e000      	b.n	8003caa <NVIC_EncodePriority+0x32>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cac:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43da      	mvns	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	401a      	ands	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	43d9      	mvns	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd0:	4313      	orrs	r3, r2
         );
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3724      	adds	r7, #36	@ 0x24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ff4c 	bl	8003b84 <__NVIC_SetPriorityGrouping>
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d02:	f7ff ff63 	bl	8003bcc <__NVIC_GetPriorityGrouping>
 8003d06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	6978      	ldr	r0, [r7, #20]
 8003d0e:	f7ff ffb3 	bl	8003c78 <NVIC_EncodePriority>
 8003d12:	4602      	mov	r2, r0
 8003d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ff82 	bl	8003c24 <__NVIC_SetPriority>
}
 8003d20:	bf00      	nop
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff56 	bl	8003be8 <__NVIC_EnableIRQ>
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e054      	b.n	8003e00 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	7f5b      	ldrb	r3, [r3, #29]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fd f8a4 	bl	8000eb4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	791b      	ldrb	r3, [r3, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10c      	bne.n	8003d94 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a22      	ldr	r2, [pc, #136]	@ (8003e08 <HAL_CRC_Init+0xc4>)
 8003d80:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0218 	bic.w	r2, r2, #24
 8003d90:	609a      	str	r2, [r3, #8]
 8003d92:	e00c      	b.n	8003dae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6899      	ldr	r1, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f834 	bl	8003e0c <HAL_CRCEx_Polynomial_Set>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e028      	b.n	8003e00 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	795b      	ldrb	r3, [r3, #5]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d105      	bne.n	8003dc2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbe:	611a      	str	r2, [r3, #16]
 8003dc0:	e004      	b.n	8003dcc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6912      	ldr	r2, [r2, #16]
 8003dca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699a      	ldr	r2, [r3, #24]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	04c11db7 	.word	0x04c11db7

08003e0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003e1c:	231f      	movs	r3, #31
 8003e1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
 8003e2e:	e063      	b.n	8003ef8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003e30:	bf00      	nop
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1e5a      	subs	r2, r3, #1
 8003e36:	613a      	str	r2, [r7, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_CRCEx_Polynomial_Set+0x44>
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b18      	cmp	r3, #24
 8003e54:	d846      	bhi.n	8003ee4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003e56:	a201      	add	r2, pc, #4	@ (adr r2, 8003e5c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003eeb 	.word	0x08003eeb
 8003e60:	08003ee5 	.word	0x08003ee5
 8003e64:	08003ee5 	.word	0x08003ee5
 8003e68:	08003ee5 	.word	0x08003ee5
 8003e6c:	08003ee5 	.word	0x08003ee5
 8003e70:	08003ee5 	.word	0x08003ee5
 8003e74:	08003ee5 	.word	0x08003ee5
 8003e78:	08003ee5 	.word	0x08003ee5
 8003e7c:	08003ed9 	.word	0x08003ed9
 8003e80:	08003ee5 	.word	0x08003ee5
 8003e84:	08003ee5 	.word	0x08003ee5
 8003e88:	08003ee5 	.word	0x08003ee5
 8003e8c:	08003ee5 	.word	0x08003ee5
 8003e90:	08003ee5 	.word	0x08003ee5
 8003e94:	08003ee5 	.word	0x08003ee5
 8003e98:	08003ee5 	.word	0x08003ee5
 8003e9c:	08003ecd 	.word	0x08003ecd
 8003ea0:	08003ee5 	.word	0x08003ee5
 8003ea4:	08003ee5 	.word	0x08003ee5
 8003ea8:	08003ee5 	.word	0x08003ee5
 8003eac:	08003ee5 	.word	0x08003ee5
 8003eb0:	08003ee5 	.word	0x08003ee5
 8003eb4:	08003ee5 	.word	0x08003ee5
 8003eb8:	08003ee5 	.word	0x08003ee5
 8003ebc:	08003ec1 	.word	0x08003ec1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d913      	bls.n	8003eee <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003eca:	e010      	b.n	8003eee <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b07      	cmp	r3, #7
 8003ed0:	d90f      	bls.n	8003ef2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ed6:	e00c      	b.n	8003ef2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b0f      	cmp	r3, #15
 8003edc:	d90b      	bls.n	8003ef6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ee2:	e008      	b.n	8003ef6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	75fb      	strb	r3, [r7, #23]
        break;
 8003ee8:	e006      	b.n	8003ef8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003eea:	bf00      	nop
 8003eec:	e004      	b.n	8003ef8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003eee:	bf00      	nop
 8003ef0:	e002      	b.n	8003ef8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ef2:	bf00      	nop
 8003ef4:	e000      	b.n	8003ef8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003ef6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10d      	bne.n	8003f1a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f023 0118 	bic.w	r1, r3, #24
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e08d      	b.n	8004056 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b47      	ldr	r3, [pc, #284]	@ (8004060 <HAL_DMA_Init+0x138>)
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d80f      	bhi.n	8003f66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4b45      	ldr	r3, [pc, #276]	@ (8004064 <HAL_DMA_Init+0x13c>)
 8003f4e:	4413      	add	r3, r2
 8003f50:	4a45      	ldr	r2, [pc, #276]	@ (8004068 <HAL_DMA_Init+0x140>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	009a      	lsls	r2, r3, #2
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a42      	ldr	r2, [pc, #264]	@ (800406c <HAL_DMA_Init+0x144>)
 8003f62:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f64:	e00e      	b.n	8003f84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	4b40      	ldr	r3, [pc, #256]	@ (8004070 <HAL_DMA_Init+0x148>)
 8003f6e:	4413      	add	r3, r2
 8003f70:	4a3d      	ldr	r2, [pc, #244]	@ (8004068 <HAL_DMA_Init+0x140>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	009a      	lsls	r2, r3, #2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a3c      	ldr	r2, [pc, #240]	@ (8004074 <HAL_DMA_Init+0x14c>)
 8003f82:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fa2c 	bl	8004434 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe4:	d102      	bne.n	8003fec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004000:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d010      	beq.n	800402c <HAL_DMA_Init+0x104>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b04      	cmp	r3, #4
 8004010:	d80c      	bhi.n	800402c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fa4c 	bl	80044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	e008      	b.n	800403e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40020407 	.word	0x40020407
 8004064:	bffdfff8 	.word	0xbffdfff8
 8004068:	cccccccd 	.word	0xcccccccd
 800406c:	40020000 	.word	0x40020000
 8004070:	bffdfbf8 	.word	0xbffdfbf8
 8004074:	40020400 	.word	0x40020400

08004078 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_DMA_Start_IT+0x20>
 8004094:	2302      	movs	r3, #2
 8004096:	e066      	b.n	8004166 <HAL_DMA_Start_IT+0xee>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d155      	bne.n	8004158 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f970 	bl	80043b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 020e 	orr.w	r2, r2, #14
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e00f      	b.n	8004110 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0204 	bic.w	r2, r2, #4
 80040fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 020a 	orr.w	r2, r2, #10
 800410e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800412c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004140:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004144:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0201 	orr.w	r2, r2, #1
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	e005      	b.n	8004164 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004160:	2302      	movs	r3, #2
 8004162:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d00d      	beq.n	80041a2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2204      	movs	r2, #4
 800418a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	e047      	b.n	8004232 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 020e 	bic.w	r2, r2, #14
 80041b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0201 	bic.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d6:	f003 021f 	and.w	r2, r3, #31
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	2101      	movs	r1, #1
 80041e0:	fa01 f202 	lsl.w	r2, r1, r2
 80041e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00c      	beq.n	8004212 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004202:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004206:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004210:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
    }
  }
  return status;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	2204      	movs	r2, #4
 800425e:	409a      	lsls	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d026      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x7a>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d021      	beq.n	80042b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b00      	cmp	r3, #0
 800427e:	d107      	bne.n	8004290 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0204 	bic.w	r2, r2, #4
 800428e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004294:	f003 021f 	and.w	r2, r3, #31
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429c:	2104      	movs	r1, #4
 800429e:	fa01 f202 	lsl.w	r2, r1, r2
 80042a2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d071      	beq.n	8004390 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80042b4:	e06c      	b.n	8004390 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2202      	movs	r2, #2
 80042c0:	409a      	lsls	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d02e      	beq.n	8004328 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d029      	beq.n	8004328 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10b      	bne.n	80042fa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 020a 	bic.w	r2, r2, #10
 80042f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	f003 021f 	and.w	r2, r3, #31
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	2102      	movs	r1, #2
 8004308:	fa01 f202 	lsl.w	r2, r1, r2
 800430c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d038      	beq.n	8004390 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004326:	e033      	b.n	8004390 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	2208      	movs	r2, #8
 8004332:	409a      	lsls	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d02a      	beq.n	8004392 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d025      	beq.n	8004392 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 020e 	bic.w	r2, r2, #14
 8004354:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	f003 021f 	and.w	r2, r3, #31
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	2101      	movs	r1, #1
 8004364:	fa01 f202 	lsl.w	r2, r1, r2
 8004368:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004384:	2b00      	cmp	r3, #0
 8004386:	d004      	beq.n	8004392 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004390:	bf00      	nop
 8004392:	bf00      	nop
}
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043a8:	b2db      	uxtb	r3, r3
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043cc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043de:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e4:	f003 021f 	and.w	r2, r3, #31
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ec:	2101      	movs	r1, #1
 80043ee:	fa01 f202 	lsl.w	r2, r1, r2
 80043f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b10      	cmp	r3, #16
 8004402:	d108      	bne.n	8004416 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004414:	e007      	b.n	8004426 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	60da      	str	r2, [r3, #12]
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	4b16      	ldr	r3, [pc, #88]	@ (800449c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004444:	429a      	cmp	r2, r3
 8004446:	d802      	bhi.n	800444e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004448:	4b15      	ldr	r3, [pc, #84]	@ (80044a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e001      	b.n	8004452 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800444e:	4b15      	ldr	r3, [pc, #84]	@ (80044a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004450:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	3b08      	subs	r3, #8
 800445e:	4a12      	ldr	r2, [pc, #72]	@ (80044a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446c:	089b      	lsrs	r3, r3, #2
 800446e:	009a      	lsls	r2, r3, #2
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4413      	add	r3, r2
 8004474:	461a      	mov	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a0b      	ldr	r2, [pc, #44]	@ (80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800447e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2201      	movs	r2, #1
 8004488:	409a      	lsls	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40020407 	.word	0x40020407
 80044a0:	40020800 	.word	0x40020800
 80044a4:	40020820 	.word	0x40020820
 80044a8:	cccccccd 	.word	0xcccccccd
 80044ac:	40020880 	.word	0x40020880

080044b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4b0b      	ldr	r3, [pc, #44]	@ (80044f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	461a      	mov	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a08      	ldr	r2, [pc, #32]	@ (80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044d2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	2201      	movs	r2, #1
 80044de:	409a      	lsls	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80044e4:	bf00      	nop
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	1000823f 	.word	0x1000823f
 80044f4:	40020940 	.word	0x40020940

080044f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e147      	b.n	800479a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fc fd68 	bl	8000ff4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0210 	bic.w	r2, r2, #16
 8004532:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004534:	f7fd fcde 	bl	8001ef4 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800453a:	e012      	b.n	8004562 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800453c:	f7fd fcda 	bl	8001ef4 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b0a      	cmp	r3, #10
 8004548:	d90b      	bls.n	8004562 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454e:	f043 0201 	orr.w	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2203      	movs	r2, #3
 800455a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e11b      	b.n	800479a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b08      	cmp	r3, #8
 800456e:	d0e5      	beq.n	800453c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004580:	f7fd fcb8 	bl	8001ef4 <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004586:	e012      	b.n	80045ae <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004588:	f7fd fcb4 	bl	8001ef4 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b0a      	cmp	r3, #10
 8004594:	d90b      	bls.n	80045ae <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800459a:	f043 0201 	orr.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2203      	movs	r2, #3
 80045a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0f5      	b.n	800479a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0e5      	beq.n	8004588 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0202 	orr.w	r2, r2, #2
 80045ca:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a74      	ldr	r2, [pc, #464]	@ (80047a4 <HAL_FDCAN_Init+0x2ac>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d103      	bne.n	80045de <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80045d6:	4a74      	ldr	r2, [pc, #464]	@ (80047a8 <HAL_FDCAN_Init+0x2b0>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	7c1b      	ldrb	r3, [r3, #16]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d108      	bne.n	80045f8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699a      	ldr	r2, [r3, #24]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045f4:	619a      	str	r2, [r3, #24]
 80045f6:	e007      	b.n	8004608 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004606:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	7c5b      	ldrb	r3, [r3, #17]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d108      	bne.n	8004622 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800461e:	619a      	str	r2, [r3, #24]
 8004620:	e007      	b.n	8004632 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699a      	ldr	r2, [r3, #24]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004630:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	7c9b      	ldrb	r3, [r3, #18]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d108      	bne.n	800464c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	699a      	ldr	r2, [r3, #24]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004648:	619a      	str	r2, [r3, #24]
 800464a:	e007      	b.n	800465c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800465a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004680:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0210 	bic.w	r2, r2, #16
 8004690:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d108      	bne.n	80046ac <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699a      	ldr	r2, [r3, #24]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f042 0204 	orr.w	r2, r2, #4
 80046a8:	619a      	str	r2, [r3, #24]
 80046aa:	e02c      	b.n	8004706 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d028      	beq.n	8004706 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d01c      	beq.n	80046f6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046ca:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0210 	orr.w	r2, r2, #16
 80046da:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d110      	bne.n	8004706 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0220 	orr.w	r2, r2, #32
 80046f2:	619a      	str	r2, [r3, #24]
 80046f4:	e007      	b.n	8004706 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0220 	orr.w	r2, r2, #32
 8004704:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	3b01      	subs	r3, #1
 800470c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	3b01      	subs	r3, #1
 8004714:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004716:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800471e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	3b01      	subs	r3, #1
 8004728:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800472e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004730:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800473a:	d115      	bne.n	8004768 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004746:	3b01      	subs	r3, #1
 8004748:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800474a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004750:	3b01      	subs	r3, #1
 8004752:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004754:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	3b01      	subs	r3, #1
 800475e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004764:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004766:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f83c 	bl	80047fc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40006400 	.word	0x40006400
 80047a8:	40006500 	.word	0x40006500

080047ac <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d110      	bne.n	80047e2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699a      	ldr	r2, [r3, #24]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e006      	b.n	80047f0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e6:	f043 0204 	orr.w	r2, r3, #4
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
  }
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004804:	4b30      	ldr	r3, [pc, #192]	@ (80048c8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004806:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a2f      	ldr	r2, [pc, #188]	@ (80048cc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d103      	bne.n	800481a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004818:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a2c      	ldr	r2, [pc, #176]	@ (80048d0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d103      	bne.n	800482c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800482a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800483a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004842:	041a      	lsls	r2, r3, #16
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004860:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004868:	061a      	lsls	r2, r3, #24
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e005      	b.n	80048ae <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3304      	adds	r3, #4
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d3f3      	bcc.n	80048a2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	4000a400 	.word	0x4000a400
 80048cc:	40006800 	.word	0x40006800
 80048d0:	40006c00 	.word	0x40006c00

080048d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048e2:	e15a      	b.n	8004b9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	2101      	movs	r1, #1
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	4013      	ands	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 814c 	beq.w	8004b94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d005      	beq.n	8004914 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004910:	2b02      	cmp	r3, #2
 8004912:	d130      	bne.n	8004976 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	2203      	movs	r2, #3
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4013      	ands	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800494a:	2201      	movs	r2, #1
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43db      	mvns	r3, r3
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4013      	ands	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	091b      	lsrs	r3, r3, #4
 8004960:	f003 0201 	and.w	r2, r3, #1
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b03      	cmp	r3, #3
 8004980:	d017      	beq.n	80049b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	2203      	movs	r2, #3
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4013      	ands	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d123      	bne.n	8004a06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	08da      	lsrs	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3208      	adds	r2, #8
 80049c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	220f      	movs	r2, #15
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43db      	mvns	r3, r3
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4013      	ands	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	08da      	lsrs	r2, r3, #3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3208      	adds	r2, #8
 8004a00:	6939      	ldr	r1, [r7, #16]
 8004a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	2203      	movs	r2, #3
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43db      	mvns	r3, r3
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f003 0203 	and.w	r2, r3, #3
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80a6 	beq.w	8004b94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a48:	4b5b      	ldr	r3, [pc, #364]	@ (8004bb8 <HAL_GPIO_Init+0x2e4>)
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4c:	4a5a      	ldr	r2, [pc, #360]	@ (8004bb8 <HAL_GPIO_Init+0x2e4>)
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a54:	4b58      	ldr	r3, [pc, #352]	@ (8004bb8 <HAL_GPIO_Init+0x2e4>)
 8004a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a60:	4a56      	ldr	r2, [pc, #344]	@ (8004bbc <HAL_GPIO_Init+0x2e8>)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	089b      	lsrs	r3, r3, #2
 8004a66:	3302      	adds	r3, #2
 8004a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	220f      	movs	r2, #15
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4013      	ands	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a8a:	d01f      	beq.n	8004acc <HAL_GPIO_Init+0x1f8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a4c      	ldr	r2, [pc, #304]	@ (8004bc0 <HAL_GPIO_Init+0x2ec>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d019      	beq.n	8004ac8 <HAL_GPIO_Init+0x1f4>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a4b      	ldr	r2, [pc, #300]	@ (8004bc4 <HAL_GPIO_Init+0x2f0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <HAL_GPIO_Init+0x1f0>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a4a      	ldr	r2, [pc, #296]	@ (8004bc8 <HAL_GPIO_Init+0x2f4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_GPIO_Init+0x1ec>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a49      	ldr	r2, [pc, #292]	@ (8004bcc <HAL_GPIO_Init+0x2f8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d007      	beq.n	8004abc <HAL_GPIO_Init+0x1e8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a48      	ldr	r2, [pc, #288]	@ (8004bd0 <HAL_GPIO_Init+0x2fc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <HAL_GPIO_Init+0x1e4>
 8004ab4:	2305      	movs	r3, #5
 8004ab6:	e00a      	b.n	8004ace <HAL_GPIO_Init+0x1fa>
 8004ab8:	2306      	movs	r3, #6
 8004aba:	e008      	b.n	8004ace <HAL_GPIO_Init+0x1fa>
 8004abc:	2304      	movs	r3, #4
 8004abe:	e006      	b.n	8004ace <HAL_GPIO_Init+0x1fa>
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e004      	b.n	8004ace <HAL_GPIO_Init+0x1fa>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e002      	b.n	8004ace <HAL_GPIO_Init+0x1fa>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <HAL_GPIO_Init+0x1fa>
 8004acc:	2300      	movs	r3, #0
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	f002 0203 	and.w	r2, r2, #3
 8004ad4:	0092      	lsls	r2, r2, #2
 8004ad6:	4093      	lsls	r3, r2
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ade:	4937      	ldr	r1, [pc, #220]	@ (8004bbc <HAL_GPIO_Init+0x2e8>)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	3302      	adds	r3, #2
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aec:	4b39      	ldr	r3, [pc, #228]	@ (8004bd4 <HAL_GPIO_Init+0x300>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	43db      	mvns	r3, r3
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4013      	ands	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b10:	4a30      	ldr	r2, [pc, #192]	@ (8004bd4 <HAL_GPIO_Init+0x300>)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b16:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd4 <HAL_GPIO_Init+0x300>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4013      	ands	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b3a:	4a26      	ldr	r2, [pc, #152]	@ (8004bd4 <HAL_GPIO_Init+0x300>)
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004b40:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <HAL_GPIO_Init+0x300>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b64:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd4 <HAL_GPIO_Init+0x300>)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd4 <HAL_GPIO_Init+0x300>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4013      	ands	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b8e:	4a11      	ldr	r2, [pc, #68]	@ (8004bd4 <HAL_GPIO_Init+0x300>)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	3301      	adds	r3, #1
 8004b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f47f ae9d 	bne.w	80048e4 <HAL_GPIO_Init+0x10>
  }
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	48000400 	.word	0x48000400
 8004bc4:	48000800 	.word	0x48000800
 8004bc8:	48000c00 	.word	0x48000c00
 8004bcc:	48001000 	.word	0x48001000
 8004bd0:	48001400 	.word	0x48001400
 8004bd4:	40010400 	.word	0x40010400

08004bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	807b      	strh	r3, [r7, #2]
 8004be4:	4613      	mov	r3, r2
 8004be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004be8:	787b      	ldrb	r3, [r7, #1]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bee:	887a      	ldrh	r2, [r7, #2]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bf4:	e002      	b.n	8004bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bf6:	887a      	ldrh	r2, [r7, #2]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c1a:	887a      	ldrh	r2, [r7, #2]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	041a      	lsls	r2, r3, #16
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	43d9      	mvns	r1, r3
 8004c26:	887b      	ldrh	r3, [r7, #2]
 8004c28:	400b      	ands	r3, r1
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	619a      	str	r2, [r3, #24]
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e08d      	b.n	8004d6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc fbfa 	bl	800145c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2224      	movs	r2, #36	@ 0x24
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d107      	bne.n	8004cb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cb2:	609a      	str	r2, [r3, #8]
 8004cb4:	e006      	b.n	8004cc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004cc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d108      	bne.n	8004cde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cda:	605a      	str	r2, [r3, #4]
 8004cdc:	e007      	b.n	8004cee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004cfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69d9      	ldr	r1, [r3, #28]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1a      	ldr	r2, [r3, #32]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	4798      	blx	r3
  }
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b086      	sub	sp, #24
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00f      	beq.n	8004de8 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd6:	f043 0201 	orr.w	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004de6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00f      	beq.n	8004e12 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e00:	f043 0208 	orr.w	r2, r3, #8
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e10:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00f      	beq.n	8004e3c <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	f043 0202 	orr.w	r2, r3, #2
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e3a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 030b 	and.w	r3, r3, #11
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004e4c:	68f9      	ldr	r1, [r7, #12]
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fbd6 	bl	8005600 <I2C_ITError>
  }
}
 8004e54:	bf00      	nop
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
 8004e90:	4613      	mov	r3, r2
 8004e92:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <I2C_Slave_ISR_IT+0x24>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e0e2      	b.n	80050c6 <I2C_Slave_ISR_IT+0x1ea>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d004      	beq.n	8004f26 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004f1c:	6939      	ldr	r1, [r7, #16]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f9b6 	bl	8005290 <I2C_ITSlaveCplt>
 8004f24:	e0ca      	b.n	80050bc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f003 0310 	and.w	r3, r3, #16
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d04b      	beq.n	8004fc8 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d046      	beq.n	8004fc8 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d128      	bne.n	8004f96 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b28      	cmp	r3, #40	@ 0x28
 8004f4e:	d108      	bne.n	8004f62 <I2C_Slave_ISR_IT+0x86>
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f56:	d104      	bne.n	8004f62 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f58:	6939      	ldr	r1, [r7, #16]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fafc 	bl	8005558 <I2C_ITListenCplt>
 8004f60:	e031      	b.n	8004fc6 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b29      	cmp	r3, #41	@ 0x29
 8004f6c:	d10e      	bne.n	8004f8c <I2C_Slave_ISR_IT+0xb0>
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f74:	d00a      	beq.n	8004f8c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2210      	movs	r2, #16
 8004f7c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fc55 	bl	800582e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f926 	bl	80051d6 <I2C_ITSlaveSeqCplt>
 8004f8a:	e01c      	b.n	8004fc6 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2210      	movs	r2, #16
 8004f92:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004f94:	e08f      	b.n	80050b6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa2:	f043 0204 	orr.w	r2, r3, #4
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <I2C_Slave_ISR_IT+0xdc>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fb6:	d17e      	bne.n	80050b6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 fb1e 	bl	8005600 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004fc4:	e077      	b.n	80050b6 <I2C_Slave_ISR_IT+0x1da>
 8004fc6:	e076      	b.n	80050b6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d02f      	beq.n	8005032 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d02a      	beq.n	8005032 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d018      	beq.n	8005018 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d14b      	bne.n	80050ba <I2C_Slave_ISR_IT+0x1de>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005028:	d047      	beq.n	80050ba <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f8d3 	bl	80051d6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005030:	e043      	b.n	80050ba <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d009      	beq.n	8005050 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005046:	6939      	ldr	r1, [r7, #16]
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f840 	bl	80050ce <I2C_ITAddrCplt>
 800504e:	e035      	b.n	80050bc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d030      	beq.n	80050bc <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005060:	2b00      	cmp	r3, #0
 8005062:	d02b      	beq.n	80050bc <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d018      	beq.n	80050a0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	781a      	ldrb	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800509e:	e00d      	b.n	80050bc <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050a6:	d002      	beq.n	80050ae <I2C_Slave_ISR_IT+0x1d2>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f891 	bl	80051d6 <I2C_ITSlaveSeqCplt>
 80050b4:	e002      	b.n	80050bc <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80050b6:	bf00      	nop
 80050b8:	e000      	b.n	80050bc <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80050ba:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050e4:	2b28      	cmp	r3, #40	@ 0x28
 80050e6:	d16a      	bne.n	80051be <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	0c1b      	lsrs	r3, r3, #16
 8005100:	b29b      	uxth	r3, r3
 8005102:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005106:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	b29b      	uxth	r3, r3
 8005110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005114:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005122:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d138      	bne.n	800519e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800512c:	897b      	ldrh	r3, [r7, #10]
 800512e:	09db      	lsrs	r3, r3, #7
 8005130:	b29a      	uxth	r2, r3
 8005132:	89bb      	ldrh	r3, [r7, #12]
 8005134:	4053      	eors	r3, r2
 8005136:	b29b      	uxth	r3, r3
 8005138:	f003 0306 	and.w	r3, r3, #6
 800513c:	2b00      	cmp	r3, #0
 800513e:	d11c      	bne.n	800517a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005140:	897b      	ldrh	r3, [r7, #10]
 8005142:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005152:	2b02      	cmp	r3, #2
 8005154:	d13b      	bne.n	80051ce <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2208      	movs	r2, #8
 8005162:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800516c:	89ba      	ldrh	r2, [r7, #12]
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fe86 	bl	8004e84 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005178:	e029      	b.n	80051ce <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800517a:	893b      	ldrh	r3, [r7, #8]
 800517c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800517e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fb95 	bl	80058b2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005190:	89ba      	ldrh	r2, [r7, #12]
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	4619      	mov	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff fe74 	bl	8004e84 <HAL_I2C_AddrCallback>
}
 800519c:	e017      	b.n	80051ce <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800519e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fb85 	bl	80058b2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80051b0:	89ba      	ldrh	r2, [r7, #12]
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	4619      	mov	r1, r3
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff fe64 	bl	8004e84 <HAL_I2C_AddrCallback>
}
 80051bc:	e007      	b.n	80051ce <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2208      	movs	r2, #8
 80051c4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80051ce:	bf00      	nop
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e00c      	b.n	8005224 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005222:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b29      	cmp	r3, #41	@ 0x29
 800522e:	d112      	bne.n	8005256 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2228      	movs	r2, #40	@ 0x28
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2221      	movs	r2, #33	@ 0x21
 800523c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800523e:	2101      	movs	r1, #1
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fb36 	bl	80058b2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff fe04 	bl	8004e5c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005254:	e017      	b.n	8005286 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005260:	d111      	bne.n	8005286 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2228      	movs	r2, #40	@ 0x28
 8005266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2222      	movs	r2, #34	@ 0x22
 800526e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005270:	2102      	movs	r1, #2
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fb1d 	bl	80058b2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff fdf5 	bl	8004e70 <HAL_I2C_SlaveRxCpltCallback>
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052aa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2220      	movs	r2, #32
 80052ba:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052bc:	7afb      	ldrb	r3, [r7, #11]
 80052be:	2b21      	cmp	r3, #33	@ 0x21
 80052c0:	d002      	beq.n	80052c8 <I2C_ITSlaveCplt+0x38>
 80052c2:	7afb      	ldrb	r3, [r7, #11]
 80052c4:	2b29      	cmp	r3, #41	@ 0x29
 80052c6:	d108      	bne.n	80052da <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80052c8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 faf0 	bl	80058b2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2221      	movs	r2, #33	@ 0x21
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80052d8:	e019      	b.n	800530e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052da:	7afb      	ldrb	r3, [r7, #11]
 80052dc:	2b22      	cmp	r3, #34	@ 0x22
 80052de:	d002      	beq.n	80052e6 <I2C_ITSlaveCplt+0x56>
 80052e0:	7afb      	ldrb	r3, [r7, #11]
 80052e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80052e4:	d108      	bne.n	80052f8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80052e6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fae1 	bl	80058b2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2222      	movs	r2, #34	@ 0x22
 80052f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80052f6:	e00a      	b.n	800530e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80052f8:	7afb      	ldrb	r3, [r7, #11]
 80052fa:	2b28      	cmp	r3, #40	@ 0x28
 80052fc:	d107      	bne.n	800530e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80052fe:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fad5 	bl	80058b2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800531c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b89      	ldr	r3, [pc, #548]	@ (8005550 <I2C_ITSlaveCplt+0x2c0>)
 800532a:	400b      	ands	r3, r1
 800532c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fa7d 	bl	800582e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d013      	beq.n	8005366 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800534c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01f      	beq.n	8005396 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	b29a      	uxth	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005364:	e017      	b.n	8005396 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d012      	beq.n	8005396 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800537e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d006      	beq.n	8005396 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	b29a      	uxth	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d020      	beq.n	80053e2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f023 0304 	bic.w	r3, r3, #4
 80053a6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00c      	beq.n	80053e2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f0:	f043 0204 	orr.w	r2, r3, #4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d049      	beq.n	8005496 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005408:	2b00      	cmp	r3, #0
 800540a:	d044      	beq.n	8005496 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d128      	bne.n	8005468 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b28      	cmp	r3, #40	@ 0x28
 8005420:	d108      	bne.n	8005434 <I2C_ITSlaveCplt+0x1a4>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005428:	d104      	bne.n	8005434 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800542a:	6979      	ldr	r1, [r7, #20]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f893 	bl	8005558 <I2C_ITListenCplt>
 8005432:	e030      	b.n	8005496 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b29      	cmp	r3, #41	@ 0x29
 800543e:	d10e      	bne.n	800545e <I2C_ITSlaveCplt+0x1ce>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005446:	d00a      	beq.n	800545e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2210      	movs	r2, #16
 800544e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f9ec 	bl	800582e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff febd 	bl	80051d6 <I2C_ITSlaveSeqCplt>
 800545c:	e01b      	b.n	8005496 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2210      	movs	r2, #16
 8005464:	61da      	str	r2, [r3, #28]
 8005466:	e016      	b.n	8005496 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2210      	movs	r2, #16
 800546e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005474:	f043 0204 	orr.w	r2, r3, #4
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <I2C_ITSlaveCplt+0x1fa>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005488:	d105      	bne.n	8005496 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f8b5 	bl	8005600 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d010      	beq.n	80054ce <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b0:	4619      	mov	r1, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f8a4 	bl	8005600 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b28      	cmp	r3, #40	@ 0x28
 80054c2:	d141      	bne.n	8005548 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80054c4:	6979      	ldr	r1, [r7, #20]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f846 	bl	8005558 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054cc:	e03c      	b.n	8005548 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054d6:	d014      	beq.n	8005502 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff fe7c 	bl	80051d6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005554 <I2C_ITSlaveCplt+0x2c4>)
 80054e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff fcd0 	bl	8004ea0 <HAL_I2C_ListenCpltCallback>
}
 8005500:	e022      	b.n	8005548 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b22      	cmp	r3, #34	@ 0x22
 800550c:	d10e      	bne.n	800552c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff fca3 	bl	8004e70 <HAL_I2C_SlaveRxCpltCallback>
}
 800552a:	e00d      	b.n	8005548 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fc8a 	bl	8004e5c <HAL_I2C_SlaveTxCpltCallback>
}
 8005548:	bf00      	nop
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	fe00e800 	.word	0xfe00e800
 8005554:	ffff0000 	.word	0xffff0000

08005558 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a25      	ldr	r2, [pc, #148]	@ (80055fc <I2C_ITListenCplt+0xa4>)
 8005566:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d022      	beq.n	80055d4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d012      	beq.n	80055d4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055cc:	f043 0204 	orr.w	r2, r3, #4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80055d4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f96a 	bl	80058b2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2210      	movs	r2, #16
 80055e4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff fc56 	bl	8004ea0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80055f4:	bf00      	nop
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	ffff0000 	.word	0xffff0000

08005600 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005610:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a6d      	ldr	r2, [pc, #436]	@ (80057d4 <I2C_ITError+0x1d4>)
 800561e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	2b28      	cmp	r3, #40	@ 0x28
 8005636:	d005      	beq.n	8005644 <I2C_ITError+0x44>
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	2b29      	cmp	r3, #41	@ 0x29
 800563c:	d002      	beq.n	8005644 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	2b2a      	cmp	r3, #42	@ 0x2a
 8005642:	d10b      	bne.n	800565c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005644:	2103      	movs	r1, #3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f933 	bl	80058b2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2228      	movs	r2, #40	@ 0x28
 8005650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a60      	ldr	r2, [pc, #384]	@ (80057d8 <I2C_ITError+0x1d8>)
 8005658:	635a      	str	r2, [r3, #52]	@ 0x34
 800565a:	e030      	b.n	80056be <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800565c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f926 	bl	80058b2 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8e1 	bl	800582e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b60      	cmp	r3, #96	@ 0x60
 8005676:	d01f      	beq.n	80056b8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b20      	cmp	r3, #32
 800568c:	d114      	bne.n	80056b8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b10      	cmp	r3, #16
 800569a:	d109      	bne.n	80056b0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2210      	movs	r2, #16
 80056a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a8:	f043 0204 	orr.w	r2, r3, #4
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2220      	movs	r2, #32
 80056b6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d039      	beq.n	8005740 <I2C_ITError+0x140>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b11      	cmp	r3, #17
 80056d0:	d002      	beq.n	80056d8 <I2C_ITError+0xd8>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2b21      	cmp	r3, #33	@ 0x21
 80056d6:	d133      	bne.n	8005740 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056e6:	d107      	bne.n	80056f8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe fe4c 	bl	800439a <HAL_DMA_GetState>
 8005702:	4603      	mov	r3, r0
 8005704:	2b01      	cmp	r3, #1
 8005706:	d017      	beq.n	8005738 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570c:	4a33      	ldr	r2, [pc, #204]	@ (80057dc <I2C_ITError+0x1dc>)
 800570e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571c:	4618      	mov	r0, r3
 800571e:	f7fe fd26 	bl	800416e <HAL_DMA_Abort_IT>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d04d      	beq.n	80057c4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005732:	4610      	mov	r0, r2
 8005734:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005736:	e045      	b.n	80057c4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f851 	bl	80057e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800573e:	e041      	b.n	80057c4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d039      	beq.n	80057bc <I2C_ITError+0x1bc>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b12      	cmp	r3, #18
 800574c:	d002      	beq.n	8005754 <I2C_ITError+0x154>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b22      	cmp	r3, #34	@ 0x22
 8005752:	d133      	bne.n	80057bc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800575e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005762:	d107      	bne.n	8005774 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005772:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fe0e 	bl	800439a <HAL_DMA_GetState>
 800577e:	4603      	mov	r3, r0
 8005780:	2b01      	cmp	r3, #1
 8005782:	d017      	beq.n	80057b4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005788:	4a14      	ldr	r2, [pc, #80]	@ (80057dc <I2C_ITError+0x1dc>)
 800578a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe fce8 	bl	800416e <HAL_DMA_Abort_IT>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d011      	beq.n	80057c8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057ae:	4610      	mov	r0, r2
 80057b0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057b2:	e009      	b.n	80057c8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f813 	bl	80057e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057ba:	e005      	b.n	80057c8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f80f 	bl	80057e0 <I2C_TreatErrorCallback>
  }
}
 80057c2:	e002      	b.n	80057ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057c4:	bf00      	nop
 80057c6:	e000      	b.n	80057ca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057c8:	bf00      	nop
}
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	ffff0000 	.word	0xffff0000
 80057d8:	08004edd 	.word	0x08004edd
 80057dc:	08005877 	.word	0x08005877

080057e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b60      	cmp	r3, #96	@ 0x60
 80057f2:	d10e      	bne.n	8005812 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fb5c 	bl	8004ec8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005810:	e009      	b.n	8005826 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff fb47 	bl	8004eb4 <HAL_I2C_ErrorCallback>
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b02      	cmp	r3, #2
 8005842:	d103      	bne.n	800584c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2200      	movs	r2, #0
 800584a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b01      	cmp	r3, #1
 8005858:	d007      	beq.n	800586a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699a      	ldr	r2, [r3, #24]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	619a      	str	r2, [r3, #24]
  }
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005890:	2200      	movs	r2, #0
 8005892:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a0:	2200      	movs	r2, #0
 80058a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f7ff ff9b 	bl	80057e0 <I2C_TreatErrorCallback>
}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80058c2:	887b      	ldrh	r3, [r7, #2]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00f      	beq.n	80058ec <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80058d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80058e0:	2b28      	cmp	r3, #40	@ 0x28
 80058e2:	d003      	beq.n	80058ec <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80058ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80058ec:	887b      	ldrh	r3, [r7, #2]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00f      	beq.n	8005916 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80058fc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005904:	b2db      	uxtb	r3, r3
 8005906:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800590a:	2b28      	cmp	r3, #40	@ 0x28
 800590c:	d003      	beq.n	8005916 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005914:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005916:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800591a:	2b00      	cmp	r3, #0
 800591c:	da03      	bge.n	8005926 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005924:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005926:	887b      	ldrh	r3, [r7, #2]
 8005928:	2b10      	cmp	r3, #16
 800592a:	d103      	bne.n	8005934 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005932:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005934:	887b      	ldrh	r3, [r7, #2]
 8005936:	2b20      	cmp	r3, #32
 8005938:	d103      	bne.n	8005942 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f043 0320 	orr.w	r3, r3, #32
 8005940:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005942:	887b      	ldrh	r3, [r7, #2]
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d103      	bne.n	8005950 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800594e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6819      	ldr	r1, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	43da      	mvns	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	400a      	ands	r2, r1
 8005960:	601a      	str	r2, [r3, #0]
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b20      	cmp	r3, #32
 8005982:	d138      	bne.n	80059f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800598e:	2302      	movs	r3, #2
 8005990:	e032      	b.n	80059f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2224      	movs	r2, #36	@ 0x24
 800599e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6819      	ldr	r1, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	e000      	b.n	80059f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
  }
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d139      	bne.n	8005a8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e033      	b.n	8005a90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2224      	movs	r2, #36	@ 0x24
 8005a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0201 	bic.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005a56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0201 	orr.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e000      	b.n	8005a90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a8e:	2302      	movs	r3, #2
  }
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e0bb      	b.n	8005c2a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b05      	cmp	r3, #5
 8005abc:	d101      	bne.n	8005ac2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e0b3      	b.n	8005c2a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d101      	bne.n	8005ad2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e0ab      	b.n	8005c2a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ad2:	4b58      	ldr	r3, [pc, #352]	@ (8005c34 <HAL_OPAMP_Init+0x198>)
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad6:	4a57      	ldr	r2, [pc, #348]	@ (8005c34 <HAL_OPAMP_Init+0x198>)
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	6613      	str	r3, [r2, #96]	@ 0x60
 8005ade:	4b55      	ldr	r3, [pc, #340]	@ (8005c34 <HAL_OPAMP_Init+0x198>)
 8005ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	60bb      	str	r3, [r7, #8]
 8005ae8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d103      	bne.n	8005afe <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fb fe7e 	bl	8001800 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b40      	cmp	r3, #64	@ 0x40
 8005b0a:	d003      	beq.n	8005b14 <HAL_OPAMP_Init+0x78>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b60      	cmp	r3, #96	@ 0x60
 8005b12:	d133      	bne.n	8005b7c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f023 0110 	bic.w	r1, r3, #16
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	4b41      	ldr	r3, [pc, #260]	@ (8005c38 <HAL_OPAMP_Init+0x19c>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6851      	ldr	r1, [r2, #4]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6892      	ldr	r2, [r2, #8]
 8005b3c:	4311      	orrs	r1, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6912      	ldr	r2, [r2, #16]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	7d09      	ldrb	r1, [r1, #20]
 8005b48:	2901      	cmp	r1, #1
 8005b4a:	d102      	bne.n	8005b52 <HAL_OPAMP_Init+0xb6>
 8005b4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b50:	e000      	b.n	8005b54 <HAL_OPAMP_Init+0xb8>
 8005b52:	2100      	movs	r1, #0
 8005b54:	4311      	orrs	r1, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b5a:	4311      	orrs	r1, r2
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005b60:	4311      	orrs	r1, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b66:	04d2      	lsls	r2, r2, #19
 8005b68:	4311      	orrs	r1, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b6e:	0612      	lsls	r2, r2, #24
 8005b70:	4311      	orrs	r1, r2
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	430b      	orrs	r3, r1
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e035      	b.n	8005be8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 0110 	bic.w	r1, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	4b27      	ldr	r3, [pc, #156]	@ (8005c38 <HAL_OPAMP_Init+0x19c>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6851      	ldr	r1, [r2, #4]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6892      	ldr	r2, [r2, #8]
 8005ba4:	4311      	orrs	r1, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	68d2      	ldr	r2, [r2, #12]
 8005baa:	4311      	orrs	r1, r2
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6912      	ldr	r2, [r2, #16]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	7d09      	ldrb	r1, [r1, #20]
 8005bb6:	2901      	cmp	r1, #1
 8005bb8:	d102      	bne.n	8005bc0 <HAL_OPAMP_Init+0x124>
 8005bba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005bbe:	e000      	b.n	8005bc2 <HAL_OPAMP_Init+0x126>
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4311      	orrs	r1, r2
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005bc8:	4311      	orrs	r1, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005bce:	4311      	orrs	r1, r2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005bd4:	04d2      	lsls	r2, r2, #19
 8005bd6:	4311      	orrs	r1, r2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005bdc:	0612      	lsls	r2, r2, #24
 8005bde:	4311      	orrs	r1, r2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	db10      	blt.n	8005c14 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699a      	ldr	r2, [r3, #24]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d103      	bne.n	8005c28 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000
 8005c38:	e0003e11 	.word	0xe0003e11

08005c3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d141      	bne.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c56:	d131      	bne.n	8005cbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c58:	4b47      	ldr	r3, [pc, #284]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c5e:	4a46      	ldr	r2, [pc, #280]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c68:	4b43      	ldr	r3, [pc, #268]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c70:	4a41      	ldr	r2, [pc, #260]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c78:	4b40      	ldr	r3, [pc, #256]	@ (8005d7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2232      	movs	r2, #50	@ 0x32
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	4a3f      	ldr	r2, [pc, #252]	@ (8005d80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	0c9b      	lsrs	r3, r3, #18
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c8e:	e002      	b.n	8005c96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c96:	4b38      	ldr	r3, [pc, #224]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca2:	d102      	bne.n	8005caa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f2      	bne.n	8005c90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005caa:	4b33      	ldr	r3, [pc, #204]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cb6:	d158      	bne.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e057      	b.n	8005d6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cc2:	4a2d      	ldr	r2, [pc, #180]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ccc:	e04d      	b.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cd4:	d141      	bne.n	8005d5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cd6:	4b28      	ldr	r3, [pc, #160]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce2:	d131      	bne.n	8005d48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ce4:	4b24      	ldr	r3, [pc, #144]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cea:	4a23      	ldr	r2, [pc, #140]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cf4:	4b20      	ldr	r3, [pc, #128]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d04:	4b1d      	ldr	r3, [pc, #116]	@ (8005d7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2232      	movs	r2, #50	@ 0x32
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005d80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d10:	fba2 2303 	umull	r2, r3, r2, r3
 8005d14:	0c9b      	lsrs	r3, r3, #18
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d1a:	e002      	b.n	8005d22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d22:	4b15      	ldr	r3, [pc, #84]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d2e:	d102      	bne.n	8005d36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f2      	bne.n	8005d1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d36:	4b10      	ldr	r3, [pc, #64]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d42:	d112      	bne.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e011      	b.n	8005d6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d48:	4b0b      	ldr	r3, [pc, #44]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d58:	e007      	b.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d5a:	4b07      	ldr	r3, [pc, #28]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d62:	4a05      	ldr	r2, [pc, #20]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d68:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	40007000 	.word	0x40007000
 8005d7c:	20000048 	.word	0x20000048
 8005d80:	431bde83 	.word	0x431bde83

08005d84 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	4a04      	ldr	r2, [pc, #16]	@ (8005da0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d92:	6093      	str	r3, [r2, #8]
}
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40007000 	.word	0x40007000

08005da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e2fe      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d075      	beq.n	8005eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc2:	4b97      	ldr	r3, [pc, #604]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 030c 	and.w	r3, r3, #12
 8005dca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dcc:	4b94      	ldr	r3, [pc, #592]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2b0c      	cmp	r3, #12
 8005dda:	d102      	bne.n	8005de2 <HAL_RCC_OscConfig+0x3e>
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d002      	beq.n	8005de8 <HAL_RCC_OscConfig+0x44>
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d10b      	bne.n	8005e00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de8:	4b8d      	ldr	r3, [pc, #564]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d05b      	beq.n	8005eac <HAL_RCC_OscConfig+0x108>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d157      	bne.n	8005eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e2d9      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e08:	d106      	bne.n	8005e18 <HAL_RCC_OscConfig+0x74>
 8005e0a:	4b85      	ldr	r3, [pc, #532]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a84      	ldr	r2, [pc, #528]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e01d      	b.n	8005e54 <HAL_RCC_OscConfig+0xb0>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e20:	d10c      	bne.n	8005e3c <HAL_RCC_OscConfig+0x98>
 8005e22:	4b7f      	ldr	r3, [pc, #508]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a7e      	ldr	r2, [pc, #504]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	4b7c      	ldr	r3, [pc, #496]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a7b      	ldr	r2, [pc, #492]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	e00b      	b.n	8005e54 <HAL_RCC_OscConfig+0xb0>
 8005e3c:	4b78      	ldr	r3, [pc, #480]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a77      	ldr	r2, [pc, #476]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	4b75      	ldr	r3, [pc, #468]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a74      	ldr	r2, [pc, #464]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d013      	beq.n	8005e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5c:	f7fc f84a 	bl	8001ef4 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e64:	f7fc f846 	bl	8001ef4 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b64      	cmp	r3, #100	@ 0x64
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e29e      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e76:	4b6a      	ldr	r3, [pc, #424]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCC_OscConfig+0xc0>
 8005e82:	e014      	b.n	8005eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fc f836 	bl	8001ef4 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e8c:	f7fc f832 	bl	8001ef4 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b64      	cmp	r3, #100	@ 0x64
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e28a      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e9e:	4b60      	ldr	r3, [pc, #384]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0xe8>
 8005eaa:	e000      	b.n	8005eae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d075      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eba:	4b59      	ldr	r3, [pc, #356]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
 8005ec2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ec4:	4b56      	ldr	r3, [pc, #344]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b0c      	cmp	r3, #12
 8005ed2:	d102      	bne.n	8005eda <HAL_RCC_OscConfig+0x136>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d002      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x13c>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d11f      	bne.n	8005f20 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ee0:	4b4f      	ldr	r3, [pc, #316]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x154>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e25d      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef8:	4b49      	ldr	r3, [pc, #292]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	061b      	lsls	r3, r3, #24
 8005f06:	4946      	ldr	r1, [pc, #280]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f0c:	4b45      	ldr	r3, [pc, #276]	@ (8006024 <HAL_RCC_OscConfig+0x280>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fb fd51 	bl	80019b8 <HAL_InitTick>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d043      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e249      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d023      	beq.n	8005f70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f28:	4b3d      	ldr	r3, [pc, #244]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a3c      	ldr	r2, [pc, #240]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f34:	f7fb ffde 	bl	8001ef4 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f3c:	f7fb ffda 	bl	8001ef4 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e232      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f4e:	4b34      	ldr	r3, [pc, #208]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5a:	4b31      	ldr	r3, [pc, #196]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	061b      	lsls	r3, r3, #24
 8005f68:	492d      	ldr	r1, [pc, #180]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	604b      	str	r3, [r1, #4]
 8005f6e:	e01a      	b.n	8005fa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f70:	4b2b      	ldr	r3, [pc, #172]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a2a      	ldr	r2, [pc, #168]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fb ffba 	bl	8001ef4 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f84:	f7fb ffb6 	bl	8001ef4 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e20e      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f96:	4b22      	ldr	r3, [pc, #136]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0x1e0>
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fa4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d041      	beq.n	8006036 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d01c      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fba:	4b19      	ldr	r3, [pc, #100]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fc0:	4a17      	ldr	r2, [pc, #92]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005fc2:	f043 0301 	orr.w	r3, r3, #1
 8005fc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fca:	f7fb ff93 	bl	8001ef4 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fd2:	f7fb ff8f 	bl	8001ef4 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e1e7      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0ef      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x22e>
 8005ff2:	e020      	b.n	8006036 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ffa:	4a09      	ldr	r2, [pc, #36]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ffc:	f023 0301 	bic.w	r3, r3, #1
 8006000:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006004:	f7fb ff76 	bl	8001ef4 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800600a:	e00d      	b.n	8006028 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800600c:	f7fb ff72 	bl	8001ef4 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d906      	bls.n	8006028 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e1ca      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000
 8006024:	2000004c 	.word	0x2000004c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006028:	4b8c      	ldr	r3, [pc, #560]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800602a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1ea      	bne.n	800600c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 80a6 	beq.w	8006190 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006044:	2300      	movs	r3, #0
 8006046:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006048:	4b84      	ldr	r3, [pc, #528]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800604a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_RCC_OscConfig+0x2b4>
 8006054:	2301      	movs	r3, #1
 8006056:	e000      	b.n	800605a <HAL_RCC_OscConfig+0x2b6>
 8006058:	2300      	movs	r3, #0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800605e:	4b7f      	ldr	r3, [pc, #508]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006062:	4a7e      	ldr	r2, [pc, #504]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006068:	6593      	str	r3, [r2, #88]	@ 0x58
 800606a:	4b7c      	ldr	r3, [pc, #496]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006076:	2301      	movs	r3, #1
 8006078:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800607a:	4b79      	ldr	r3, [pc, #484]	@ (8006260 <HAL_RCC_OscConfig+0x4bc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d118      	bne.n	80060b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006086:	4b76      	ldr	r3, [pc, #472]	@ (8006260 <HAL_RCC_OscConfig+0x4bc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a75      	ldr	r2, [pc, #468]	@ (8006260 <HAL_RCC_OscConfig+0x4bc>)
 800608c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006092:	f7fb ff2f 	bl	8001ef4 <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006098:	e008      	b.n	80060ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800609a:	f7fb ff2b 	bl	8001ef4 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e183      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060ac:	4b6c      	ldr	r3, [pc, #432]	@ (8006260 <HAL_RCC_OscConfig+0x4bc>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0f0      	beq.n	800609a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d108      	bne.n	80060d2 <HAL_RCC_OscConfig+0x32e>
 80060c0:	4b66      	ldr	r3, [pc, #408]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c6:	4a65      	ldr	r2, [pc, #404]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060d0:	e024      	b.n	800611c <HAL_RCC_OscConfig+0x378>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	d110      	bne.n	80060fc <HAL_RCC_OscConfig+0x358>
 80060da:	4b60      	ldr	r3, [pc, #384]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e0:	4a5e      	ldr	r2, [pc, #376]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060e2:	f043 0304 	orr.w	r3, r3, #4
 80060e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060ea:	4b5c      	ldr	r3, [pc, #368]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f0:	4a5a      	ldr	r2, [pc, #360]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060fa:	e00f      	b.n	800611c <HAL_RCC_OscConfig+0x378>
 80060fc:	4b57      	ldr	r3, [pc, #348]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006102:	4a56      	ldr	r2, [pc, #344]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006104:	f023 0301 	bic.w	r3, r3, #1
 8006108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800610c:	4b53      	ldr	r3, [pc, #332]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006112:	4a52      	ldr	r2, [pc, #328]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006114:	f023 0304 	bic.w	r3, r3, #4
 8006118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d016      	beq.n	8006152 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006124:	f7fb fee6 	bl	8001ef4 <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800612a:	e00a      	b.n	8006142 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612c:	f7fb fee2 	bl	8001ef4 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e138      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006142:	4b46      	ldr	r3, [pc, #280]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0ed      	beq.n	800612c <HAL_RCC_OscConfig+0x388>
 8006150:	e015      	b.n	800617e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006152:	f7fb fecf 	bl	8001ef4 <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006158:	e00a      	b.n	8006170 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615a:	f7fb fecb 	bl	8001ef4 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006168:	4293      	cmp	r3, r2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e121      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006170:	4b3a      	ldr	r3, [pc, #232]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1ed      	bne.n	800615a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800617e:	7ffb      	ldrb	r3, [r7, #31]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d105      	bne.n	8006190 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006184:	4b35      	ldr	r3, [pc, #212]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006188:	4a34      	ldr	r2, [pc, #208]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800618a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800618e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b00      	cmp	r3, #0
 800619a:	d03c      	beq.n	8006216 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01c      	beq.n	80061de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061a4:	4b2d      	ldr	r3, [pc, #180]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80061a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061aa:	4a2c      	ldr	r2, [pc, #176]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80061ac:	f043 0301 	orr.w	r3, r3, #1
 80061b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b4:	f7fb fe9e 	bl	8001ef4 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061bc:	f7fb fe9a 	bl	8001ef4 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e0f2      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061ce:	4b23      	ldr	r3, [pc, #140]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80061d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0ef      	beq.n	80061bc <HAL_RCC_OscConfig+0x418>
 80061dc:	e01b      	b.n	8006216 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061de:	4b1f      	ldr	r3, [pc, #124]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80061e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061e4:	4a1d      	ldr	r2, [pc, #116]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ee:	f7fb fe81 	bl	8001ef4 <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061f6:	f7fb fe7d 	bl	8001ef4 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e0d5      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006208:	4b14      	ldr	r3, [pc, #80]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800620a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1ef      	bne.n	80061f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 80c9 	beq.w	80063b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006220:	4b0e      	ldr	r3, [pc, #56]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 030c 	and.w	r3, r3, #12
 8006228:	2b0c      	cmp	r3, #12
 800622a:	f000 8083 	beq.w	8006334 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d15e      	bne.n	80062f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006236:	4b09      	ldr	r3, [pc, #36]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a08      	ldr	r2, [pc, #32]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800623c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006242:	f7fb fe57 	bl	8001ef4 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006248:	e00c      	b.n	8006264 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800624a:	f7fb fe53 	bl	8001ef4 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d905      	bls.n	8006264 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e0ab      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
 800625c:	40021000 	.word	0x40021000
 8006260:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006264:	4b55      	ldr	r3, [pc, #340]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1ec      	bne.n	800624a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006270:	4b52      	ldr	r3, [pc, #328]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	4b52      	ldr	r3, [pc, #328]	@ (80063c0 <HAL_RCC_OscConfig+0x61c>)
 8006276:	4013      	ands	r3, r2
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6a11      	ldr	r1, [r2, #32]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006280:	3a01      	subs	r2, #1
 8006282:	0112      	lsls	r2, r2, #4
 8006284:	4311      	orrs	r1, r2
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800628a:	0212      	lsls	r2, r2, #8
 800628c:	4311      	orrs	r1, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006292:	0852      	lsrs	r2, r2, #1
 8006294:	3a01      	subs	r2, #1
 8006296:	0552      	lsls	r2, r2, #21
 8006298:	4311      	orrs	r1, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800629e:	0852      	lsrs	r2, r2, #1
 80062a0:	3a01      	subs	r2, #1
 80062a2:	0652      	lsls	r2, r2, #25
 80062a4:	4311      	orrs	r1, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80062aa:	06d2      	lsls	r2, r2, #27
 80062ac:	430a      	orrs	r2, r1
 80062ae:	4943      	ldr	r1, [pc, #268]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062b4:	4b41      	ldr	r3, [pc, #260]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a40      	ldr	r2, [pc, #256]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062c0:	4b3e      	ldr	r3, [pc, #248]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	4a3d      	ldr	r2, [pc, #244]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fb fe12 	bl	8001ef4 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d4:	f7fb fe0e 	bl	8001ef4 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e066      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062e6:	4b35      	ldr	r3, [pc, #212]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0f0      	beq.n	80062d4 <HAL_RCC_OscConfig+0x530>
 80062f2:	e05e      	b.n	80063b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f4:	4b31      	ldr	r3, [pc, #196]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a30      	ldr	r2, [pc, #192]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006300:	f7fb fdf8 	bl	8001ef4 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006308:	f7fb fdf4 	bl	8001ef4 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e04c      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800631a:	4b28      	ldr	r3, [pc, #160]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f0      	bne.n	8006308 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006326:	4b25      	ldr	r3, [pc, #148]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	4924      	ldr	r1, [pc, #144]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 800632c:	4b25      	ldr	r3, [pc, #148]	@ (80063c4 <HAL_RCC_OscConfig+0x620>)
 800632e:	4013      	ands	r3, r2
 8006330:	60cb      	str	r3, [r1, #12]
 8006332:	e03e      	b.n	80063b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e039      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006340:	4b1e      	ldr	r3, [pc, #120]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f003 0203 	and.w	r2, r3, #3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	429a      	cmp	r2, r3
 8006352:	d12c      	bne.n	80063ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	3b01      	subs	r3, #1
 8006360:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006362:	429a      	cmp	r2, r3
 8006364:	d123      	bne.n	80063ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006370:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006372:	429a      	cmp	r2, r3
 8006374:	d11b      	bne.n	80063ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006380:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006382:	429a      	cmp	r2, r3
 8006384:	d113      	bne.n	80063ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	3b01      	subs	r3, #1
 8006394:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006396:	429a      	cmp	r2, r3
 8006398:	d109      	bne.n	80063ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a4:	085b      	lsrs	r3, r3, #1
 80063a6:	3b01      	subs	r3, #1
 80063a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d001      	beq.n	80063b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3720      	adds	r7, #32
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40021000 	.word	0x40021000
 80063c0:	019f800c 	.word	0x019f800c
 80063c4:	feeefffc 	.word	0xfeeefffc

080063c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80063d2:	2300      	movs	r3, #0
 80063d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e11e      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063e0:	4b91      	ldr	r3, [pc, #580]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d910      	bls.n	8006410 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ee:	4b8e      	ldr	r3, [pc, #568]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f023 020f 	bic.w	r2, r3, #15
 80063f6:	498c      	ldr	r1, [pc, #560]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fe:	4b8a      	ldr	r3, [pc, #552]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d001      	beq.n	8006410 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e106      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d073      	beq.n	8006504 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d129      	bne.n	8006478 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006424:	4b81      	ldr	r3, [pc, #516]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0f4      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006434:	f000 f9d0 	bl	80067d8 <RCC_GetSysClockFreqFromPLLSource>
 8006438:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4a7c      	ldr	r2, [pc, #496]	@ (8006630 <HAL_RCC_ClockConfig+0x268>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d93f      	bls.n	80064c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006442:	4b7a      	ldr	r3, [pc, #488]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006456:	2b00      	cmp	r3, #0
 8006458:	d033      	beq.n	80064c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800645e:	2b00      	cmp	r3, #0
 8006460:	d12f      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006462:	4b72      	ldr	r3, [pc, #456]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800646a:	4a70      	ldr	r2, [pc, #448]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 800646c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006470:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006472:	2380      	movs	r3, #128	@ 0x80
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	e024      	b.n	80064c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d107      	bne.n	8006490 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006480:	4b6a      	ldr	r3, [pc, #424]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d109      	bne.n	80064a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e0c6      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006490:	4b66      	ldr	r3, [pc, #408]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e0be      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80064a0:	f000 f8ce 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 80064a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4a61      	ldr	r2, [pc, #388]	@ (8006630 <HAL_RCC_ClockConfig+0x268>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d909      	bls.n	80064c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064ae:	4b5f      	ldr	r3, [pc, #380]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064b6:	4a5d      	ldr	r2, [pc, #372]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80064b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80064be:	2380      	movs	r3, #128	@ 0x80
 80064c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064c2:	4b5a      	ldr	r3, [pc, #360]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f023 0203 	bic.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4957      	ldr	r1, [pc, #348]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d4:	f7fb fd0e 	bl	8001ef4 <HAL_GetTick>
 80064d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064da:	e00a      	b.n	80064f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064dc:	f7fb fd0a 	bl	8001ef4 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e095      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f2:	4b4e      	ldr	r3, [pc, #312]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 020c 	and.w	r2, r3, #12
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	429a      	cmp	r2, r3
 8006502:	d1eb      	bne.n	80064dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d023      	beq.n	8006558 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800651c:	4b43      	ldr	r3, [pc, #268]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	4a42      	ldr	r2, [pc, #264]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006522:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006526:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006534:	4b3d      	ldr	r3, [pc, #244]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800653c:	4a3b      	ldr	r2, [pc, #236]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 800653e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006542:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006544:	4b39      	ldr	r3, [pc, #228]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	4936      	ldr	r1, [pc, #216]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006552:	4313      	orrs	r3, r2
 8006554:	608b      	str	r3, [r1, #8]
 8006556:	e008      	b.n	800656a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2b80      	cmp	r3, #128	@ 0x80
 800655c:	d105      	bne.n	800656a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800655e:	4b33      	ldr	r3, [pc, #204]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	4a32      	ldr	r2, [pc, #200]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006564:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006568:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800656a:	4b2f      	ldr	r3, [pc, #188]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d21d      	bcs.n	80065b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006578:	4b2b      	ldr	r3, [pc, #172]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f023 020f 	bic.w	r2, r3, #15
 8006580:	4929      	ldr	r1, [pc, #164]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	4313      	orrs	r3, r2
 8006586:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006588:	f7fb fcb4 	bl	8001ef4 <HAL_GetTick>
 800658c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800658e:	e00a      	b.n	80065a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006590:	f7fb fcb0 	bl	8001ef4 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800659e:	4293      	cmp	r3, r2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e03b      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a6:	4b20      	ldr	r3, [pc, #128]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d1ed      	bne.n	8006590 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065c0:	4b1a      	ldr	r3, [pc, #104]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4917      	ldr	r1, [pc, #92]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065de:	4b13      	ldr	r3, [pc, #76]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	490f      	ldr	r1, [pc, #60]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065f2:	f000 f825 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 80065f6:	4602      	mov	r2, r0
 80065f8:	4b0c      	ldr	r3, [pc, #48]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	091b      	lsrs	r3, r3, #4
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	490c      	ldr	r1, [pc, #48]	@ (8006634 <HAL_RCC_ClockConfig+0x26c>)
 8006604:	5ccb      	ldrb	r3, [r1, r3]
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	fa22 f303 	lsr.w	r3, r2, r3
 800660e:	4a0a      	ldr	r2, [pc, #40]	@ (8006638 <HAL_RCC_ClockConfig+0x270>)
 8006610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006612:	4b0a      	ldr	r3, [pc, #40]	@ (800663c <HAL_RCC_ClockConfig+0x274>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f7fb f9ce 	bl	80019b8 <HAL_InitTick>
 800661c:	4603      	mov	r3, r0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40022000 	.word	0x40022000
 800662c:	40021000 	.word	0x40021000
 8006630:	04c4b400 	.word	0x04c4b400
 8006634:	0800a6cc 	.word	0x0800a6cc
 8006638:	20000048 	.word	0x20000048
 800663c:	2000004c 	.word	0x2000004c

08006640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006646:	4b2c      	ldr	r3, [pc, #176]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f003 030c 	and.w	r3, r3, #12
 800664e:	2b04      	cmp	r3, #4
 8006650:	d102      	bne.n	8006658 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006652:	4b2a      	ldr	r3, [pc, #168]	@ (80066fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	e047      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006658:	4b27      	ldr	r3, [pc, #156]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 030c 	and.w	r3, r3, #12
 8006660:	2b08      	cmp	r3, #8
 8006662:	d102      	bne.n	800666a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006664:	4b26      	ldr	r3, [pc, #152]	@ (8006700 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	e03e      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800666a:	4b23      	ldr	r3, [pc, #140]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 030c 	and.w	r3, r3, #12
 8006672:	2b0c      	cmp	r3, #12
 8006674:	d136      	bne.n	80066e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006676:	4b20      	ldr	r3, [pc, #128]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006680:	4b1d      	ldr	r3, [pc, #116]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	091b      	lsrs	r3, r3, #4
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	3301      	adds	r3, #1
 800668c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d10c      	bne.n	80066ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006694:	4a1a      	ldr	r2, [pc, #104]	@ (8006700 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	fbb2 f3f3 	udiv	r3, r2, r3
 800669c:	4a16      	ldr	r2, [pc, #88]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800669e:	68d2      	ldr	r2, [r2, #12]
 80066a0:	0a12      	lsrs	r2, r2, #8
 80066a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	617b      	str	r3, [r7, #20]
      break;
 80066ac:	e00c      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066ae:	4a13      	ldr	r2, [pc, #76]	@ (80066fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b6:	4a10      	ldr	r2, [pc, #64]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066b8:	68d2      	ldr	r2, [r2, #12]
 80066ba:	0a12      	lsrs	r2, r2, #8
 80066bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066c0:	fb02 f303 	mul.w	r3, r2, r3
 80066c4:	617b      	str	r3, [r7, #20]
      break;
 80066c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066c8:	4b0b      	ldr	r3, [pc, #44]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	0e5b      	lsrs	r3, r3, #25
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	3301      	adds	r3, #1
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	e001      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80066e8:	693b      	ldr	r3, [r7, #16]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40021000 	.word	0x40021000
 80066fc:	00f42400 	.word	0x00f42400
 8006700:	016e3600 	.word	0x016e3600

08006704 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006708:	4b03      	ldr	r3, [pc, #12]	@ (8006718 <HAL_RCC_GetHCLKFreq+0x14>)
 800670a:	681b      	ldr	r3, [r3, #0]
}
 800670c:	4618      	mov	r0, r3
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20000048 	.word	0x20000048

0800671c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006720:	f7ff fff0 	bl	8006704 <HAL_RCC_GetHCLKFreq>
 8006724:	4602      	mov	r2, r0
 8006726:	4b06      	ldr	r3, [pc, #24]	@ (8006740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	0a1b      	lsrs	r3, r3, #8
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	4904      	ldr	r1, [pc, #16]	@ (8006744 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006732:	5ccb      	ldrb	r3, [r1, r3]
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800673c:	4618      	mov	r0, r3
 800673e:	bd80      	pop	{r7, pc}
 8006740:	40021000 	.word	0x40021000
 8006744:	0800a6dc 	.word	0x0800a6dc

08006748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800674c:	f7ff ffda 	bl	8006704 <HAL_RCC_GetHCLKFreq>
 8006750:	4602      	mov	r2, r0
 8006752:	4b06      	ldr	r3, [pc, #24]	@ (800676c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	0adb      	lsrs	r3, r3, #11
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	4904      	ldr	r1, [pc, #16]	@ (8006770 <HAL_RCC_GetPCLK2Freq+0x28>)
 800675e:	5ccb      	ldrb	r3, [r1, r3]
 8006760:	f003 031f 	and.w	r3, r3, #31
 8006764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006768:	4618      	mov	r0, r3
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40021000 	.word	0x40021000
 8006770:	0800a6dc 	.word	0x0800a6dc

08006774 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	220f      	movs	r2, #15
 8006782:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006784:	4b12      	ldr	r3, [pc, #72]	@ (80067d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 0203 	and.w	r2, r3, #3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006790:	4b0f      	ldr	r3, [pc, #60]	@ (80067d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800679c:	4b0c      	ldr	r3, [pc, #48]	@ (80067d0 <HAL_RCC_GetClockConfig+0x5c>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80067a8:	4b09      	ldr	r3, [pc, #36]	@ (80067d0 <HAL_RCC_GetClockConfig+0x5c>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	08db      	lsrs	r3, r3, #3
 80067ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80067b6:	4b07      	ldr	r3, [pc, #28]	@ (80067d4 <HAL_RCC_GetClockConfig+0x60>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 020f 	and.w	r2, r3, #15
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	601a      	str	r2, [r3, #0]
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40021000 	.word	0x40021000
 80067d4:	40022000 	.word	0x40022000

080067d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067de:	4b1e      	ldr	r3, [pc, #120]	@ (8006858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	091b      	lsrs	r3, r3, #4
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	3301      	adds	r3, #1
 80067f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d10c      	bne.n	8006816 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067fc:	4a17      	ldr	r2, [pc, #92]	@ (800685c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	fbb2 f3f3 	udiv	r3, r2, r3
 8006804:	4a14      	ldr	r2, [pc, #80]	@ (8006858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006806:	68d2      	ldr	r2, [r2, #12]
 8006808:	0a12      	lsrs	r2, r2, #8
 800680a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800680e:	fb02 f303 	mul.w	r3, r2, r3
 8006812:	617b      	str	r3, [r7, #20]
    break;
 8006814:	e00c      	b.n	8006830 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006816:	4a12      	ldr	r2, [pc, #72]	@ (8006860 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	fbb2 f3f3 	udiv	r3, r2, r3
 800681e:	4a0e      	ldr	r2, [pc, #56]	@ (8006858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006820:	68d2      	ldr	r2, [r2, #12]
 8006822:	0a12      	lsrs	r2, r2, #8
 8006824:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006828:	fb02 f303 	mul.w	r3, r2, r3
 800682c:	617b      	str	r3, [r7, #20]
    break;
 800682e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006830:	4b09      	ldr	r3, [pc, #36]	@ (8006858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	0e5b      	lsrs	r3, r3, #25
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	3301      	adds	r3, #1
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	fbb2 f3f3 	udiv	r3, r2, r3
 8006848:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800684a:	687b      	ldr	r3, [r7, #4]
}
 800684c:	4618      	mov	r0, r3
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	40021000 	.word	0x40021000
 800685c:	016e3600 	.word	0x016e3600
 8006860:	00f42400 	.word	0x00f42400

08006864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800686c:	2300      	movs	r3, #0
 800686e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006870:	2300      	movs	r3, #0
 8006872:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8098 	beq.w	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006882:	2300      	movs	r3, #0
 8006884:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006886:	4b43      	ldr	r3, [pc, #268]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10d      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006892:	4b40      	ldr	r3, [pc, #256]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006896:	4a3f      	ldr	r2, [pc, #252]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800689c:	6593      	str	r3, [r2, #88]	@ 0x58
 800689e:	4b3d      	ldr	r3, [pc, #244]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068aa:	2301      	movs	r3, #1
 80068ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a39      	ldr	r2, [pc, #228]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068ba:	f7fb fb1b 	bl	8001ef4 <HAL_GetTick>
 80068be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068c0:	e009      	b.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068c2:	f7fb fb17 	bl	8001ef4 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d902      	bls.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	74fb      	strb	r3, [r7, #19]
        break;
 80068d4:	e005      	b.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068d6:	4b30      	ldr	r3, [pc, #192]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0ef      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80068e2:	7cfb      	ldrb	r3, [r7, #19]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d159      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d01e      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	429a      	cmp	r2, r3
 8006902:	d019      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006904:	4b23      	ldr	r3, [pc, #140]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800690a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800690e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006910:	4b20      	ldr	r3, [pc, #128]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006916:	4a1f      	ldr	r2, [pc, #124]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800691c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006920:	4b1c      	ldr	r3, [pc, #112]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006926:	4a1b      	ldr	r2, [pc, #108]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800692c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006930:	4a18      	ldr	r2, [pc, #96]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d016      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006942:	f7fb fad7 	bl	8001ef4 <HAL_GetTick>
 8006946:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006948:	e00b      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800694a:	f7fb fad3 	bl	8001ef4 <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006958:	4293      	cmp	r3, r2
 800695a:	d902      	bls.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	74fb      	strb	r3, [r7, #19]
            break;
 8006960:	e006      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006962:	4b0c      	ldr	r3, [pc, #48]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0ec      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006970:	7cfb      	ldrb	r3, [r7, #19]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006976:	4b07      	ldr	r3, [pc, #28]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800697c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006984:	4903      	ldr	r1, [pc, #12]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800698c:	e008      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800698e:	7cfb      	ldrb	r3, [r7, #19]
 8006990:	74bb      	strb	r3, [r7, #18]
 8006992:	e005      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006994:	40021000 	.word	0x40021000
 8006998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699c:	7cfb      	ldrb	r3, [r7, #19]
 800699e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069a0:	7c7b      	ldrb	r3, [r7, #17]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d105      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069a6:	4ba7      	ldr	r3, [pc, #668]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069aa:	4aa6      	ldr	r2, [pc, #664]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069be:	4ba1      	ldr	r3, [pc, #644]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c4:	f023 0203 	bic.w	r2, r3, #3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	499d      	ldr	r1, [pc, #628]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069e0:	4b98      	ldr	r3, [pc, #608]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e6:	f023 020c 	bic.w	r2, r3, #12
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	4995      	ldr	r1, [pc, #596]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0304 	and.w	r3, r3, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a02:	4b90      	ldr	r3, [pc, #576]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	498c      	ldr	r1, [pc, #560]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a24:	4b87      	ldr	r3, [pc, #540]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	4984      	ldr	r1, [pc, #528]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0310 	and.w	r3, r3, #16
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a46:	4b7f      	ldr	r3, [pc, #508]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	497b      	ldr	r1, [pc, #492]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0320 	and.w	r3, r3, #32
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00a      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a68:	4b76      	ldr	r3, [pc, #472]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	4973      	ldr	r1, [pc, #460]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	496a      	ldr	r1, [pc, #424]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006aac:	4b65      	ldr	r3, [pc, #404]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	4962      	ldr	r1, [pc, #392]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ace:	4b5d      	ldr	r3, [pc, #372]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006adc:	4959      	ldr	r1, [pc, #356]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00a      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006af0:	4b54      	ldr	r3, [pc, #336]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006af6:	f023 0203 	bic.w	r2, r3, #3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afe:	4951      	ldr	r1, [pc, #324]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00a      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b12:	4b4c      	ldr	r3, [pc, #304]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b20:	4948      	ldr	r1, [pc, #288]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d015      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b34:	4b43      	ldr	r3, [pc, #268]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b42:	4940      	ldr	r1, [pc, #256]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b52:	d105      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b54:	4b3b      	ldr	r3, [pc, #236]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	4a3a      	ldr	r2, [pc, #232]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b5e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d015      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b6c:	4b35      	ldr	r3, [pc, #212]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7a:	4932      	ldr	r1, [pc, #200]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b8a:	d105      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	4a2c      	ldr	r2, [pc, #176]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b96:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d015      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ba4:	4b27      	ldr	r3, [pc, #156]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006baa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb2:	4924      	ldr	r1, [pc, #144]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bc2:	d105      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d015      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bdc:	4b19      	ldr	r3, [pc, #100]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bea:	4916      	ldr	r1, [pc, #88]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bfa:	d105      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bfc:	4b11      	ldr	r3, [pc, #68]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	4a10      	ldr	r2, [pc, #64]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d019      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c14:	4b0b      	ldr	r3, [pc, #44]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c22:	4908      	ldr	r1, [pc, #32]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c32:	d109      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c34:	4b03      	ldr	r3, [pc, #12]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	4a02      	ldr	r2, [pc, #8]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c3e:	60d3      	str	r3, [r2, #12]
 8006c40:	e002      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c42:	bf00      	nop
 8006c44:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d015      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c54:	4b29      	ldr	r3, [pc, #164]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c62:	4926      	ldr	r1, [pc, #152]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c72:	d105      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c74:	4b21      	ldr	r3, [pc, #132]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	4a20      	ldr	r2, [pc, #128]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c7e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d015      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c92:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c9a:	4918      	ldr	r1, [pc, #96]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006caa:	d105      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cac:	4b13      	ldr	r3, [pc, #76]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	4a12      	ldr	r2, [pc, #72]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cb6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d015      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cd2:	490a      	ldr	r1, [pc, #40]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ce2:	d105      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ce4:	4b05      	ldr	r3, [pc, #20]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4a04      	ldr	r2, [pc, #16]	@ (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006cea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006cf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40021000 	.word	0x40021000

08006d00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e09d      	b.n	8006e4e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d108      	bne.n	8006d2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d22:	d009      	beq.n	8006d38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	61da      	str	r2, [r3, #28]
 8006d2a:	e005      	b.n	8006d38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fa fdc4 	bl	80018e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d78:	d902      	bls.n	8006d80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	e002      	b.n	8006d86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006d8e:	d007      	beq.n	8006da0 <HAL_SPI_Init+0xa0>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d98:	d002      	beq.n	8006da0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006de2:	ea42 0103 	orr.w	r1, r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	0c1b      	lsrs	r3, r3, #16
 8006dfc:	f003 0204 	and.w	r2, r3, #4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0e:	f003 0308 	and.w	r3, r3, #8
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006e1c:	ea42 0103 	orr.w	r1, r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69da      	ldr	r2, [r3, #28]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e049      	b.n	8006efc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d106      	bne.n	8006e82 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f841 	bl	8006f04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3304      	adds	r3, #4
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f000 fb5b 	bl	8007550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d001      	beq.n	8006f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e054      	b.n	8006fda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a26      	ldr	r2, [pc, #152]	@ (8006fe8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d022      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x80>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f5a:	d01d      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x80>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a22      	ldr	r2, [pc, #136]	@ (8006fec <HAL_TIM_Base_Start_IT+0xd4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d018      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x80>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a21      	ldr	r2, [pc, #132]	@ (8006ff0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d013      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x80>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1f      	ldr	r2, [pc, #124]	@ (8006ff4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00e      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x80>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ff8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d009      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x80>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1c      	ldr	r2, [pc, #112]	@ (8006ffc <HAL_TIM_Base_Start_IT+0xe4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_TIM_Base_Start_IT+0x80>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1b      	ldr	r2, [pc, #108]	@ (8007000 <HAL_TIM_Base_Start_IT+0xe8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d115      	bne.n	8006fc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	4b19      	ldr	r3, [pc, #100]	@ (8007004 <HAL_TIM_Base_Start_IT+0xec>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b06      	cmp	r3, #6
 8006fa8:	d015      	beq.n	8006fd6 <HAL_TIM_Base_Start_IT+0xbe>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fb0:	d011      	beq.n	8006fd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f042 0201 	orr.w	r2, r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc2:	e008      	b.n	8006fd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0201 	orr.w	r2, r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e000      	b.n	8006fd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40000400 	.word	0x40000400
 8006ff0:	40000800 	.word	0x40000800
 8006ff4:	40000c00 	.word	0x40000c00
 8006ff8:	40013400 	.word	0x40013400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40015000 	.word	0x40015000
 8007004:	00010007 	.word	0x00010007

08007008 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e049      	b.n	80070ae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d106      	bne.n	8007034 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fa fe20 	bl	8001c74 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f000 fa82 	bl	8007550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d020      	beq.n	800711a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01b      	beq.n	800711a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f06f 0202 	mvn.w	r2, #2
 80070ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7f9 ffd1 	bl	80010a8 <HAL_TIM_IC_CaptureCallback>
 8007106:	e005      	b.n	8007114 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fa03 	bl	8007514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa0a 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b00      	cmp	r3, #0
 8007122:	d020      	beq.n	8007166 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d01b      	beq.n	8007166 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f06f 0204 	mvn.w	r2, #4
 8007136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7f9 ffab 	bl	80010a8 <HAL_TIM_IC_CaptureCallback>
 8007152:	e005      	b.n	8007160 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f9dd 	bl	8007514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f9e4 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f003 0308 	and.w	r3, r3, #8
 800716c:	2b00      	cmp	r3, #0
 800716e:	d020      	beq.n	80071b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f003 0308 	and.w	r3, r3, #8
 8007176:	2b00      	cmp	r3, #0
 8007178:	d01b      	beq.n	80071b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f06f 0208 	mvn.w	r2, #8
 8007182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2204      	movs	r2, #4
 8007188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	f003 0303 	and.w	r3, r3, #3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7f9 ff85 	bl	80010a8 <HAL_TIM_IC_CaptureCallback>
 800719e:	e005      	b.n	80071ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f9b7 	bl	8007514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f9be 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f003 0310 	and.w	r3, r3, #16
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d020      	beq.n	80071fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f003 0310 	and.w	r3, r3, #16
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01b      	beq.n	80071fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f06f 0210 	mvn.w	r2, #16
 80071ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2208      	movs	r2, #8
 80071d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7f9 ff5f 	bl	80010a8 <HAL_TIM_IC_CaptureCallback>
 80071ea:	e005      	b.n	80071f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f991 	bl	8007514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f998 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00c      	beq.n	8007222 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f06f 0201 	mvn.w	r2, #1
 800721a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7fa fab1 	bl	8001784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007228:	2b00      	cmp	r3, #0
 800722a:	d104      	bne.n	8007236 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00c      	beq.n	8007250 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fbfe 	bl	8007a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800726c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fbf6 	bl	8007a60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00c      	beq.n	8007298 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f952 	bl	800753c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00c      	beq.n	80072bc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d007      	beq.n	80072bc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0220 	mvn.w	r2, #32
 80072b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fbbe 	bl	8007a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00c      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80072d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fbca 	bl	8007a74 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00c      	beq.n	8007304 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d007      	beq.n	8007304 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80072fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fbc2 	bl	8007a88 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00c      	beq.n	8007328 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d007      	beq.n	8007328 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fbba 	bl	8007a9c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00c      	beq.n	800734c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d007      	beq.n	800734c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fbb2 	bl	8007ab0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800736a:	2b01      	cmp	r3, #1
 800736c:	d101      	bne.n	8007372 <HAL_TIM_IC_ConfigChannel+0x1e>
 800736e:	2302      	movs	r3, #2
 8007370:	e088      	b.n	8007484 <HAL_TIM_IC_ConfigChannel+0x130>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d11b      	bne.n	80073b8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007390:	f000 f992 	bl	80076b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 020c 	bic.w	r2, r2, #12
 80073a2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6999      	ldr	r1, [r3, #24]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	689a      	ldr	r2, [r3, #8]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	619a      	str	r2, [r3, #24]
 80073b6:	e060      	b.n	800747a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d11c      	bne.n	80073f8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80073ce:	f000 f9e7 	bl	80077a0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	699a      	ldr	r2, [r3, #24]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80073e0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6999      	ldr	r1, [r3, #24]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	021a      	lsls	r2, r3, #8
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	619a      	str	r2, [r3, #24]
 80073f6:	e040      	b.n	800747a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	d11b      	bne.n	8007436 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800740e:	f000 fa04 	bl	800781a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	69da      	ldr	r2, [r3, #28]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 020c 	bic.w	r2, r2, #12
 8007420:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69d9      	ldr	r1, [r3, #28]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	61da      	str	r2, [r3, #28]
 8007434:	e021      	b.n	800747a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b0c      	cmp	r3, #12
 800743a:	d11c      	bne.n	8007476 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800744c:	f000 fa21 	bl	8007892 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	69da      	ldr	r2, [r3, #28]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800745e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	69d9      	ldr	r1, [r3, #28]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	021a      	lsls	r2, r3, #8
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	61da      	str	r2, [r3, #28]
 8007474:	e001      	b.n	800747a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007482:	7dfb      	ldrb	r3, [r7, #23]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b0c      	cmp	r3, #12
 800749e:	d831      	bhi.n	8007504 <HAL_TIM_ReadCapturedValue+0x78>
 80074a0:	a201      	add	r2, pc, #4	@ (adr r2, 80074a8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	080074dd 	.word	0x080074dd
 80074ac:	08007505 	.word	0x08007505
 80074b0:	08007505 	.word	0x08007505
 80074b4:	08007505 	.word	0x08007505
 80074b8:	080074e7 	.word	0x080074e7
 80074bc:	08007505 	.word	0x08007505
 80074c0:	08007505 	.word	0x08007505
 80074c4:	08007505 	.word	0x08007505
 80074c8:	080074f1 	.word	0x080074f1
 80074cc:	08007505 	.word	0x08007505
 80074d0:	08007505 	.word	0x08007505
 80074d4:	08007505 	.word	0x08007505
 80074d8:	080074fb 	.word	0x080074fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e2:	60fb      	str	r3, [r7, #12]

      break;
 80074e4:	e00f      	b.n	8007506 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ec:	60fb      	str	r3, [r7, #12]

      break;
 80074ee:	e00a      	b.n	8007506 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f6:	60fb      	str	r3, [r7, #12]

      break;
 80074f8:	e005      	b.n	8007506 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007500:	60fb      	str	r3, [r7, #12]

      break;
 8007502:	e000      	b.n	8007506 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007504:	bf00      	nop
  }

  return tmpreg;
 8007506:	68fb      	ldr	r3, [r7, #12]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a4c      	ldr	r2, [pc, #304]	@ (8007694 <TIM_Base_SetConfig+0x144>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d017      	beq.n	8007598 <TIM_Base_SetConfig+0x48>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756e:	d013      	beq.n	8007598 <TIM_Base_SetConfig+0x48>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a49      	ldr	r2, [pc, #292]	@ (8007698 <TIM_Base_SetConfig+0x148>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00f      	beq.n	8007598 <TIM_Base_SetConfig+0x48>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a48      	ldr	r2, [pc, #288]	@ (800769c <TIM_Base_SetConfig+0x14c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00b      	beq.n	8007598 <TIM_Base_SetConfig+0x48>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a47      	ldr	r2, [pc, #284]	@ (80076a0 <TIM_Base_SetConfig+0x150>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d007      	beq.n	8007598 <TIM_Base_SetConfig+0x48>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a46      	ldr	r2, [pc, #280]	@ (80076a4 <TIM_Base_SetConfig+0x154>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_Base_SetConfig+0x48>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a45      	ldr	r2, [pc, #276]	@ (80076a8 <TIM_Base_SetConfig+0x158>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d108      	bne.n	80075aa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800759e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a39      	ldr	r2, [pc, #228]	@ (8007694 <TIM_Base_SetConfig+0x144>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d023      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075b8:	d01f      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a36      	ldr	r2, [pc, #216]	@ (8007698 <TIM_Base_SetConfig+0x148>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d01b      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a35      	ldr	r2, [pc, #212]	@ (800769c <TIM_Base_SetConfig+0x14c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d017      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a34      	ldr	r2, [pc, #208]	@ (80076a0 <TIM_Base_SetConfig+0x150>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d013      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a33      	ldr	r2, [pc, #204]	@ (80076a4 <TIM_Base_SetConfig+0x154>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00f      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a33      	ldr	r2, [pc, #204]	@ (80076ac <TIM_Base_SetConfig+0x15c>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00b      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a32      	ldr	r2, [pc, #200]	@ (80076b0 <TIM_Base_SetConfig+0x160>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d007      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a31      	ldr	r2, [pc, #196]	@ (80076b4 <TIM_Base_SetConfig+0x164>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d003      	beq.n	80075fa <TIM_Base_SetConfig+0xaa>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a2c      	ldr	r2, [pc, #176]	@ (80076a8 <TIM_Base_SetConfig+0x158>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d108      	bne.n	800760c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a18      	ldr	r2, [pc, #96]	@ (8007694 <TIM_Base_SetConfig+0x144>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d013      	beq.n	8007660 <TIM_Base_SetConfig+0x110>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a1a      	ldr	r2, [pc, #104]	@ (80076a4 <TIM_Base_SetConfig+0x154>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00f      	beq.n	8007660 <TIM_Base_SetConfig+0x110>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a1a      	ldr	r2, [pc, #104]	@ (80076ac <TIM_Base_SetConfig+0x15c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d00b      	beq.n	8007660 <TIM_Base_SetConfig+0x110>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a19      	ldr	r2, [pc, #100]	@ (80076b0 <TIM_Base_SetConfig+0x160>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d007      	beq.n	8007660 <TIM_Base_SetConfig+0x110>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a18      	ldr	r2, [pc, #96]	@ (80076b4 <TIM_Base_SetConfig+0x164>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d003      	beq.n	8007660 <TIM_Base_SetConfig+0x110>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a13      	ldr	r2, [pc, #76]	@ (80076a8 <TIM_Base_SetConfig+0x158>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d103      	bne.n	8007668 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	691a      	ldr	r2, [r3, #16]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b01      	cmp	r3, #1
 8007678:	d105      	bne.n	8007686 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f023 0201 	bic.w	r2, r3, #1
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	611a      	str	r2, [r3, #16]
  }
}
 8007686:	bf00      	nop
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	40012c00 	.word	0x40012c00
 8007698:	40000400 	.word	0x40000400
 800769c:	40000800 	.word	0x40000800
 80076a0:	40000c00 	.word	0x40000c00
 80076a4:	40013400 	.word	0x40013400
 80076a8:	40015000 	.word	0x40015000
 80076ac:	40014000 	.word	0x40014000
 80076b0:	40014400 	.word	0x40014400
 80076b4:	40014800 	.word	0x40014800

080076b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	f023 0201 	bic.w	r2, r3, #1
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	4a28      	ldr	r2, [pc, #160]	@ (8007784 <TIM_TI1_SetConfig+0xcc>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01b      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ec:	d017      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4a25      	ldr	r2, [pc, #148]	@ (8007788 <TIM_TI1_SetConfig+0xd0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d013      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4a24      	ldr	r2, [pc, #144]	@ (800778c <TIM_TI1_SetConfig+0xd4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00f      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4a23      	ldr	r2, [pc, #140]	@ (8007790 <TIM_TI1_SetConfig+0xd8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00b      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4a22      	ldr	r2, [pc, #136]	@ (8007794 <TIM_TI1_SetConfig+0xdc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d007      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a21      	ldr	r2, [pc, #132]	@ (8007798 <TIM_TI1_SetConfig+0xe0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d003      	beq.n	800771e <TIM_TI1_SetConfig+0x66>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4a20      	ldr	r2, [pc, #128]	@ (800779c <TIM_TI1_SetConfig+0xe4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d101      	bne.n	8007722 <TIM_TI1_SetConfig+0x6a>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <TIM_TI1_SetConfig+0x6c>
 8007722:	2300      	movs	r3, #0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d008      	beq.n	800773a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f023 0303 	bic.w	r3, r3, #3
 800772e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	e003      	b.n	8007742 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f043 0301 	orr.w	r3, r3, #1
 8007740:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	011b      	lsls	r3, r3, #4
 800774e:	b2db      	uxtb	r3, r3
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f023 030a 	bic.w	r3, r3, #10
 800775c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f003 030a 	and.w	r3, r3, #10
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	4313      	orrs	r3, r2
 8007768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	621a      	str	r2, [r3, #32]
}
 8007776:	bf00      	nop
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	40012c00 	.word	0x40012c00
 8007788:	40000400 	.word	0x40000400
 800778c:	40000800 	.word	0x40000800
 8007790:	40000c00 	.word	0x40000c00
 8007794:	40013400 	.word	0x40013400
 8007798:	40014000 	.word	0x40014000
 800779c:	40015000 	.word	0x40015000

080077a0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	f023 0210 	bic.w	r2, r3, #16
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	021b      	lsls	r3, r3, #8
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	031b      	lsls	r3, r3, #12
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80077f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	4313      	orrs	r3, r2
 8007800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	621a      	str	r2, [r3, #32]
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800781a:	b480      	push	{r7}
 800781c:	b087      	sub	sp, #28
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f023 0303 	bic.w	r3, r3, #3
 8007846:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4313      	orrs	r3, r2
 800784e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007856:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	011b      	lsls	r3, r3, #4
 800785c:	b2db      	uxtb	r3, r3
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	4313      	orrs	r3, r2
 8007862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800786a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	021b      	lsls	r3, r3, #8
 8007870:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	621a      	str	r2, [r3, #32]
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007892:	b480      	push	{r7}
 8007894:	b087      	sub	sp, #28
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	031b      	lsls	r3, r3, #12
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80078e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	031b      	lsls	r3, r3, #12
 80078ea:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	621a      	str	r2, [r3, #32]
}
 8007900:	bf00      	nop
 8007902:	371c      	adds	r7, #28
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007920:	2302      	movs	r3, #2
 8007922:	e074      	b.n	8007a0e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a34      	ldr	r2, [pc, #208]	@ (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d009      	beq.n	8007962 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a33      	ldr	r2, [pc, #204]	@ (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d004      	beq.n	8007962 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a31      	ldr	r2, [pc, #196]	@ (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d108      	bne.n	8007974 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007968:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	4313      	orrs	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800797a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800797e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a21      	ldr	r2, [pc, #132]	@ (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d022      	beq.n	80079e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a4:	d01d      	beq.n	80079e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007a28 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d018      	beq.n	80079e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a1d      	ldr	r2, [pc, #116]	@ (8007a2c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d013      	beq.n	80079e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a1c      	ldr	r2, [pc, #112]	@ (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00e      	beq.n	80079e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a15      	ldr	r2, [pc, #84]	@ (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d009      	beq.n	80079e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a18      	ldr	r2, [pc, #96]	@ (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d004      	beq.n	80079e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a11      	ldr	r2, [pc, #68]	@ (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d10c      	bne.n	80079fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	40012c00 	.word	0x40012c00
 8007a20:	40013400 	.word	0x40013400
 8007a24:	40015000 	.word	0x40015000
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40000800 	.word	0x40000800
 8007a30:	40000c00 	.word	0x40000c00
 8007a34:	40014000 	.word	0x40014000

08007a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e042      	b.n	8007b5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d106      	bne.n	8007aee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7fa f957 	bl	8001d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2224      	movs	r2, #36	@ 0x24
 8007af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 0201 	bic.w	r2, r2, #1
 8007b04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fb24 	bl	800815c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f825 	bl	8007b64 <UART_SetConfig>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e01b      	b.n	8007b5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f042 0201 	orr.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fba3 	bl	80082a0 <UART_CheckIdleState>
 8007b5a:	4603      	mov	r3, r0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b68:	b08c      	sub	sp, #48	@ 0x30
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	4baa      	ldr	r3, [pc, #680]	@ (8007e3c <UART_SetConfig+0x2d8>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	6812      	ldr	r2, [r2, #0]
 8007b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a9f      	ldr	r2, [pc, #636]	@ (8007e40 <UART_SetConfig+0x2dc>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d004      	beq.n	8007bd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007bda:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	6812      	ldr	r2, [r2, #0]
 8007be2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007be4:	430b      	orrs	r3, r1
 8007be6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bee:	f023 010f 	bic.w	r1, r3, #15
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a90      	ldr	r2, [pc, #576]	@ (8007e44 <UART_SetConfig+0x2e0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d125      	bne.n	8007c54 <UART_SetConfig+0xf0>
 8007c08:	4b8f      	ldr	r3, [pc, #572]	@ (8007e48 <UART_SetConfig+0x2e4>)
 8007c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d81a      	bhi.n	8007c4c <UART_SetConfig+0xe8>
 8007c16:	a201      	add	r2, pc, #4	@ (adr r2, 8007c1c <UART_SetConfig+0xb8>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007c2d 	.word	0x08007c2d
 8007c20:	08007c3d 	.word	0x08007c3d
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c45 	.word	0x08007c45
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c32:	e116      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007c34:	2302      	movs	r3, #2
 8007c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c3a:	e112      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007c3c:	2304      	movs	r3, #4
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c42:	e10e      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007c44:	2308      	movs	r3, #8
 8007c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c4a:	e10a      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007c4c:	2310      	movs	r3, #16
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c52:	e106      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a7c      	ldr	r2, [pc, #496]	@ (8007e4c <UART_SetConfig+0x2e8>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d138      	bne.n	8007cd0 <UART_SetConfig+0x16c>
 8007c5e:	4b7a      	ldr	r3, [pc, #488]	@ (8007e48 <UART_SetConfig+0x2e4>)
 8007c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c64:	f003 030c 	and.w	r3, r3, #12
 8007c68:	2b0c      	cmp	r3, #12
 8007c6a:	d82d      	bhi.n	8007cc8 <UART_SetConfig+0x164>
 8007c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c74 <UART_SetConfig+0x110>)
 8007c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c72:	bf00      	nop
 8007c74:	08007ca9 	.word	0x08007ca9
 8007c78:	08007cc9 	.word	0x08007cc9
 8007c7c:	08007cc9 	.word	0x08007cc9
 8007c80:	08007cc9 	.word	0x08007cc9
 8007c84:	08007cb9 	.word	0x08007cb9
 8007c88:	08007cc9 	.word	0x08007cc9
 8007c8c:	08007cc9 	.word	0x08007cc9
 8007c90:	08007cc9 	.word	0x08007cc9
 8007c94:	08007cb1 	.word	0x08007cb1
 8007c98:	08007cc9 	.word	0x08007cc9
 8007c9c:	08007cc9 	.word	0x08007cc9
 8007ca0:	08007cc9 	.word	0x08007cc9
 8007ca4:	08007cc1 	.word	0x08007cc1
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cae:	e0d8      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cb6:	e0d4      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007cb8:	2304      	movs	r3, #4
 8007cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cbe:	e0d0      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cc6:	e0cc      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007cc8:	2310      	movs	r3, #16
 8007cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cce:	e0c8      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8007e50 <UART_SetConfig+0x2ec>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d125      	bne.n	8007d26 <UART_SetConfig+0x1c2>
 8007cda:	4b5b      	ldr	r3, [pc, #364]	@ (8007e48 <UART_SetConfig+0x2e4>)
 8007cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ce4:	2b30      	cmp	r3, #48	@ 0x30
 8007ce6:	d016      	beq.n	8007d16 <UART_SetConfig+0x1b2>
 8007ce8:	2b30      	cmp	r3, #48	@ 0x30
 8007cea:	d818      	bhi.n	8007d1e <UART_SetConfig+0x1ba>
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	d00a      	beq.n	8007d06 <UART_SetConfig+0x1a2>
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	d814      	bhi.n	8007d1e <UART_SetConfig+0x1ba>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <UART_SetConfig+0x19a>
 8007cf8:	2b10      	cmp	r3, #16
 8007cfa:	d008      	beq.n	8007d0e <UART_SetConfig+0x1aa>
 8007cfc:	e00f      	b.n	8007d1e <UART_SetConfig+0x1ba>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d04:	e0ad      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007d06:	2302      	movs	r3, #2
 8007d08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d0c:	e0a9      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007d0e:	2304      	movs	r3, #4
 8007d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d14:	e0a5      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007d16:	2308      	movs	r3, #8
 8007d18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d1c:	e0a1      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007d1e:	2310      	movs	r3, #16
 8007d20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d24:	e09d      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a4a      	ldr	r2, [pc, #296]	@ (8007e54 <UART_SetConfig+0x2f0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d125      	bne.n	8007d7c <UART_SetConfig+0x218>
 8007d30:	4b45      	ldr	r3, [pc, #276]	@ (8007e48 <UART_SetConfig+0x2e4>)
 8007d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d3c:	d016      	beq.n	8007d6c <UART_SetConfig+0x208>
 8007d3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d40:	d818      	bhi.n	8007d74 <UART_SetConfig+0x210>
 8007d42:	2b80      	cmp	r3, #128	@ 0x80
 8007d44:	d00a      	beq.n	8007d5c <UART_SetConfig+0x1f8>
 8007d46:	2b80      	cmp	r3, #128	@ 0x80
 8007d48:	d814      	bhi.n	8007d74 <UART_SetConfig+0x210>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <UART_SetConfig+0x1f0>
 8007d4e:	2b40      	cmp	r3, #64	@ 0x40
 8007d50:	d008      	beq.n	8007d64 <UART_SetConfig+0x200>
 8007d52:	e00f      	b.n	8007d74 <UART_SetConfig+0x210>
 8007d54:	2300      	movs	r3, #0
 8007d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d5a:	e082      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d62:	e07e      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007d64:	2304      	movs	r3, #4
 8007d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d6a:	e07a      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007d6c:	2308      	movs	r3, #8
 8007d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d72:	e076      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007d74:	2310      	movs	r3, #16
 8007d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d7a:	e072      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a35      	ldr	r2, [pc, #212]	@ (8007e58 <UART_SetConfig+0x2f4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d12a      	bne.n	8007ddc <UART_SetConfig+0x278>
 8007d86:	4b30      	ldr	r3, [pc, #192]	@ (8007e48 <UART_SetConfig+0x2e4>)
 8007d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d94:	d01a      	beq.n	8007dcc <UART_SetConfig+0x268>
 8007d96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d9a:	d81b      	bhi.n	8007dd4 <UART_SetConfig+0x270>
 8007d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007da0:	d00c      	beq.n	8007dbc <UART_SetConfig+0x258>
 8007da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007da6:	d815      	bhi.n	8007dd4 <UART_SetConfig+0x270>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <UART_SetConfig+0x250>
 8007dac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007db0:	d008      	beq.n	8007dc4 <UART_SetConfig+0x260>
 8007db2:	e00f      	b.n	8007dd4 <UART_SetConfig+0x270>
 8007db4:	2300      	movs	r3, #0
 8007db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dba:	e052      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dc2:	e04e      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dca:	e04a      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007dcc:	2308      	movs	r3, #8
 8007dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dd2:	e046      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dda:	e042      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a17      	ldr	r2, [pc, #92]	@ (8007e40 <UART_SetConfig+0x2dc>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d13a      	bne.n	8007e5c <UART_SetConfig+0x2f8>
 8007de6:	4b18      	ldr	r3, [pc, #96]	@ (8007e48 <UART_SetConfig+0x2e4>)
 8007de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007df0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007df4:	d01a      	beq.n	8007e2c <UART_SetConfig+0x2c8>
 8007df6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dfa:	d81b      	bhi.n	8007e34 <UART_SetConfig+0x2d0>
 8007dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e00:	d00c      	beq.n	8007e1c <UART_SetConfig+0x2b8>
 8007e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e06:	d815      	bhi.n	8007e34 <UART_SetConfig+0x2d0>
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <UART_SetConfig+0x2b0>
 8007e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e10:	d008      	beq.n	8007e24 <UART_SetConfig+0x2c0>
 8007e12:	e00f      	b.n	8007e34 <UART_SetConfig+0x2d0>
 8007e14:	2300      	movs	r3, #0
 8007e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e1a:	e022      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e22:	e01e      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007e24:	2304      	movs	r3, #4
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e2a:	e01a      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007e2c:	2308      	movs	r3, #8
 8007e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e32:	e016      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007e34:	2310      	movs	r3, #16
 8007e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e3a:	e012      	b.n	8007e62 <UART_SetConfig+0x2fe>
 8007e3c:	cfff69f3 	.word	0xcfff69f3
 8007e40:	40008000 	.word	0x40008000
 8007e44:	40013800 	.word	0x40013800
 8007e48:	40021000 	.word	0x40021000
 8007e4c:	40004400 	.word	0x40004400
 8007e50:	40004800 	.word	0x40004800
 8007e54:	40004c00 	.word	0x40004c00
 8007e58:	40005000 	.word	0x40005000
 8007e5c:	2310      	movs	r3, #16
 8007e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4aae      	ldr	r2, [pc, #696]	@ (8008120 <UART_SetConfig+0x5bc>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	f040 8097 	bne.w	8007f9c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e72:	2b08      	cmp	r3, #8
 8007e74:	d823      	bhi.n	8007ebe <UART_SetConfig+0x35a>
 8007e76:	a201      	add	r2, pc, #4	@ (adr r2, 8007e7c <UART_SetConfig+0x318>)
 8007e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7c:	08007ea1 	.word	0x08007ea1
 8007e80:	08007ebf 	.word	0x08007ebf
 8007e84:	08007ea9 	.word	0x08007ea9
 8007e88:	08007ebf 	.word	0x08007ebf
 8007e8c:	08007eaf 	.word	0x08007eaf
 8007e90:	08007ebf 	.word	0x08007ebf
 8007e94:	08007ebf 	.word	0x08007ebf
 8007e98:	08007ebf 	.word	0x08007ebf
 8007e9c:	08007eb7 	.word	0x08007eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea0:	f7fe fc3c 	bl	800671c <HAL_RCC_GetPCLK1Freq>
 8007ea4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ea6:	e010      	b.n	8007eca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ea8:	4b9e      	ldr	r3, [pc, #632]	@ (8008124 <UART_SetConfig+0x5c0>)
 8007eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007eac:	e00d      	b.n	8007eca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eae:	f7fe fbc7 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 8007eb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eb4:	e009      	b.n	8007eca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ebc:	e005      	b.n	8007eca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ec8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 8130 	beq.w	8008132 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed6:	4a94      	ldr	r2, [pc, #592]	@ (8008128 <UART_SetConfig+0x5c4>)
 8007ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007edc:	461a      	mov	r2, r3
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ee4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	4613      	mov	r3, r2
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	4413      	add	r3, r2
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d305      	bcc.n	8007f02 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007efc:	69ba      	ldr	r2, [r7, #24]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d903      	bls.n	8007f0a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f08:	e113      	b.n	8008132 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	60bb      	str	r3, [r7, #8]
 8007f10:	60fa      	str	r2, [r7, #12]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f16:	4a84      	ldr	r2, [pc, #528]	@ (8008128 <UART_SetConfig+0x5c4>)
 8007f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	2200      	movs	r2, #0
 8007f20:	603b      	str	r3, [r7, #0]
 8007f22:	607a      	str	r2, [r7, #4]
 8007f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f2c:	f7f8 fa94 	bl	8000458 <__aeabi_uldivmod>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4610      	mov	r0, r2
 8007f36:	4619      	mov	r1, r3
 8007f38:	f04f 0200 	mov.w	r2, #0
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	020b      	lsls	r3, r1, #8
 8007f42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f46:	0202      	lsls	r2, r0, #8
 8007f48:	6979      	ldr	r1, [r7, #20]
 8007f4a:	6849      	ldr	r1, [r1, #4]
 8007f4c:	0849      	lsrs	r1, r1, #1
 8007f4e:	2000      	movs	r0, #0
 8007f50:	460c      	mov	r4, r1
 8007f52:	4605      	mov	r5, r0
 8007f54:	eb12 0804 	adds.w	r8, r2, r4
 8007f58:	eb43 0905 	adc.w	r9, r3, r5
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	469a      	mov	sl, r3
 8007f64:	4693      	mov	fp, r2
 8007f66:	4652      	mov	r2, sl
 8007f68:	465b      	mov	r3, fp
 8007f6a:	4640      	mov	r0, r8
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	f7f8 fa73 	bl	8000458 <__aeabi_uldivmod>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4613      	mov	r3, r2
 8007f78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f80:	d308      	bcc.n	8007f94 <UART_SetConfig+0x430>
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f88:	d204      	bcs.n	8007f94 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6a3a      	ldr	r2, [r7, #32]
 8007f90:	60da      	str	r2, [r3, #12]
 8007f92:	e0ce      	b.n	8008132 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f9a:	e0ca      	b.n	8008132 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fa4:	d166      	bne.n	8008074 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007fa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007faa:	2b08      	cmp	r3, #8
 8007fac:	d827      	bhi.n	8007ffe <UART_SetConfig+0x49a>
 8007fae:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb4 <UART_SetConfig+0x450>)
 8007fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb4:	08007fd9 	.word	0x08007fd9
 8007fb8:	08007fe1 	.word	0x08007fe1
 8007fbc:	08007fe9 	.word	0x08007fe9
 8007fc0:	08007fff 	.word	0x08007fff
 8007fc4:	08007fef 	.word	0x08007fef
 8007fc8:	08007fff 	.word	0x08007fff
 8007fcc:	08007fff 	.word	0x08007fff
 8007fd0:	08007fff 	.word	0x08007fff
 8007fd4:	08007ff7 	.word	0x08007ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fd8:	f7fe fba0 	bl	800671c <HAL_RCC_GetPCLK1Freq>
 8007fdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fde:	e014      	b.n	800800a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fe0:	f7fe fbb2 	bl	8006748 <HAL_RCC_GetPCLK2Freq>
 8007fe4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fe6:	e010      	b.n	800800a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fe8:	4b4e      	ldr	r3, [pc, #312]	@ (8008124 <UART_SetConfig+0x5c0>)
 8007fea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fec:	e00d      	b.n	800800a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fee:	f7fe fb27 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 8007ff2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ff4:	e009      	b.n	800800a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ffc:	e005      	b.n	800800a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 8090 	beq.w	8008132 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008016:	4a44      	ldr	r2, [pc, #272]	@ (8008128 <UART_SetConfig+0x5c4>)
 8008018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800801c:	461a      	mov	r2, r3
 800801e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008020:	fbb3 f3f2 	udiv	r3, r3, r2
 8008024:	005a      	lsls	r2, r3, #1
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	085b      	lsrs	r3, r3, #1
 800802c:	441a      	add	r2, r3
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	fbb2 f3f3 	udiv	r3, r2, r3
 8008036:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	2b0f      	cmp	r3, #15
 800803c:	d916      	bls.n	800806c <UART_SetConfig+0x508>
 800803e:	6a3b      	ldr	r3, [r7, #32]
 8008040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008044:	d212      	bcs.n	800806c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	b29b      	uxth	r3, r3
 800804a:	f023 030f 	bic.w	r3, r3, #15
 800804e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	085b      	lsrs	r3, r3, #1
 8008054:	b29b      	uxth	r3, r3
 8008056:	f003 0307 	and.w	r3, r3, #7
 800805a:	b29a      	uxth	r2, r3
 800805c:	8bfb      	ldrh	r3, [r7, #30]
 800805e:	4313      	orrs	r3, r2
 8008060:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	8bfa      	ldrh	r2, [r7, #30]
 8008068:	60da      	str	r2, [r3, #12]
 800806a:	e062      	b.n	8008132 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008072:	e05e      	b.n	8008132 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008074:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008078:	2b08      	cmp	r3, #8
 800807a:	d828      	bhi.n	80080ce <UART_SetConfig+0x56a>
 800807c:	a201      	add	r2, pc, #4	@ (adr r2, 8008084 <UART_SetConfig+0x520>)
 800807e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008082:	bf00      	nop
 8008084:	080080a9 	.word	0x080080a9
 8008088:	080080b1 	.word	0x080080b1
 800808c:	080080b9 	.word	0x080080b9
 8008090:	080080cf 	.word	0x080080cf
 8008094:	080080bf 	.word	0x080080bf
 8008098:	080080cf 	.word	0x080080cf
 800809c:	080080cf 	.word	0x080080cf
 80080a0:	080080cf 	.word	0x080080cf
 80080a4:	080080c7 	.word	0x080080c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080a8:	f7fe fb38 	bl	800671c <HAL_RCC_GetPCLK1Freq>
 80080ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080ae:	e014      	b.n	80080da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080b0:	f7fe fb4a 	bl	8006748 <HAL_RCC_GetPCLK2Freq>
 80080b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080b6:	e010      	b.n	80080da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008124 <UART_SetConfig+0x5c0>)
 80080ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080bc:	e00d      	b.n	80080da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080be:	f7fe fabf 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 80080c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080c4:	e009      	b.n	80080da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080cc:	e005      	b.n	80080da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080d8:	bf00      	nop
    }

    if (pclk != 0U)
 80080da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d028      	beq.n	8008132 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e4:	4a10      	ldr	r2, [pc, #64]	@ (8008128 <UART_SetConfig+0x5c4>)
 80080e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ea:	461a      	mov	r2, r3
 80080ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	085b      	lsrs	r3, r3, #1
 80080f8:	441a      	add	r2, r3
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008102:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	2b0f      	cmp	r3, #15
 8008108:	d910      	bls.n	800812c <UART_SetConfig+0x5c8>
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008110:	d20c      	bcs.n	800812c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	b29a      	uxth	r2, r3
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	60da      	str	r2, [r3, #12]
 800811c:	e009      	b.n	8008132 <UART_SetConfig+0x5ce>
 800811e:	bf00      	nop
 8008120:	40008000 	.word	0x40008000
 8008124:	00f42400 	.word	0x00f42400
 8008128:	0800a6e4 	.word	0x0800a6e4
      }
      else
      {
        ret = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2201      	movs	r2, #1
 8008136:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2201      	movs	r2, #1
 800813e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2200      	movs	r2, #0
 8008146:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2200      	movs	r2, #0
 800814c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800814e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008152:	4618      	mov	r0, r3
 8008154:	3730      	adds	r7, #48	@ 0x30
 8008156:	46bd      	mov	sp, r7
 8008158:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800815c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008168:	f003 0308 	and.w	r3, r3, #8
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00a      	beq.n	8008186 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ce:	f003 0304 	and.w	r3, r3, #4
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f0:	f003 0310 	and.w	r3, r3, #16
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00a      	beq.n	800820e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008238:	2b00      	cmp	r3, #0
 800823a:	d01a      	beq.n	8008272 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800825a:	d10a      	bne.n	8008272 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	430a      	orrs	r2, r1
 8008292:	605a      	str	r2, [r3, #4]
  }
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b098      	sub	sp, #96	@ 0x60
 80082a4:	af02      	add	r7, sp, #8
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082b0:	f7f9 fe20 	bl	8001ef4 <HAL_GetTick>
 80082b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d12f      	bne.n	8008324 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082cc:	2200      	movs	r2, #0
 80082ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f88e 	bl	80083f4 <UART_WaitOnFlagUntilTimeout>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d022      	beq.n	8008324 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e6:	e853 3f00 	ldrex	r3, [r3]
 80082ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	461a      	mov	r2, r3
 80082fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80082fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008300:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008304:	e841 2300 	strex	r3, r2, [r1]
 8008308:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800830a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e6      	bne.n	80082de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2220      	movs	r2, #32
 8008314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e063      	b.n	80083ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0304 	and.w	r3, r3, #4
 800832e:	2b04      	cmp	r3, #4
 8008330:	d149      	bne.n	80083c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008332:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800833a:	2200      	movs	r2, #0
 800833c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f857 	bl	80083f4 <UART_WaitOnFlagUntilTimeout>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d03c      	beq.n	80083c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008354:	e853 3f00 	ldrex	r3, [r3]
 8008358:	623b      	str	r3, [r7, #32]
   return(result);
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008360:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800836a:	633b      	str	r3, [r7, #48]	@ 0x30
 800836c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e6      	bne.n	800834c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	60fb      	str	r3, [r7, #12]
   return(result);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f023 0301 	bic.w	r3, r3, #1
 8008394:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800839e:	61fa      	str	r2, [r7, #28]
 80083a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	69b9      	ldr	r1, [r7, #24]
 80083a4:	69fa      	ldr	r2, [r7, #28]
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	617b      	str	r3, [r7, #20]
   return(result);
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e5      	bne.n	800837e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e012      	b.n	80083ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3758      	adds	r7, #88	@ 0x58
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	4613      	mov	r3, r2
 8008402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008404:	e04f      	b.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840c:	d04b      	beq.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800840e:	f7f9 fd71 	bl	8001ef4 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	429a      	cmp	r2, r3
 800841c:	d302      	bcc.n	8008424 <UART_WaitOnFlagUntilTimeout+0x30>
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e04e      	b.n	80084c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	2b00      	cmp	r3, #0
 8008434:	d037      	beq.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b80      	cmp	r3, #128	@ 0x80
 800843a:	d034      	beq.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b40      	cmp	r3, #64	@ 0x40
 8008440:	d031      	beq.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b08      	cmp	r3, #8
 800844e:	d110      	bne.n	8008472 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2208      	movs	r2, #8
 8008456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 f838 	bl	80084ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2208      	movs	r2, #8
 8008462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e029      	b.n	80084c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800847c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008480:	d111      	bne.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800848a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 f81e 	bl	80084ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2220      	movs	r2, #32
 8008496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e00f      	b.n	80084c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69da      	ldr	r2, [r3, #28]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4013      	ands	r3, r2
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	bf0c      	ite	eq
 80084b6:	2301      	moveq	r3, #1
 80084b8:	2300      	movne	r3, #0
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	461a      	mov	r2, r3
 80084be:	79fb      	ldrb	r3, [r7, #7]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d0a0      	beq.n	8008406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b095      	sub	sp, #84	@ 0x54
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80084f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e6      	bne.n	80084d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	61fb      	str	r3, [r7, #28]
   return(result);
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800851e:	f023 0301 	bic.w	r3, r3, #1
 8008522:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3308      	adds	r3, #8
 800852a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800852c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800852e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e3      	bne.n	8008508 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008544:	2b01      	cmp	r3, #1
 8008546:	d118      	bne.n	800857a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	60bb      	str	r3, [r7, #8]
   return(result);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f023 0310 	bic.w	r3, r3, #16
 800855c:	647b      	str	r3, [r7, #68]	@ 0x44
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008566:	61bb      	str	r3, [r7, #24]
 8008568:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	6979      	ldr	r1, [r7, #20]
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	613b      	str	r3, [r7, #16]
   return(result);
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e6      	bne.n	8008548 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2220      	movs	r2, #32
 800857e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800858e:	bf00      	nop
 8008590:	3754      	adds	r7, #84	@ 0x54
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800859a:	b480      	push	{r7}
 800859c:	b085      	sub	sp, #20
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d101      	bne.n	80085b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80085ac:	2302      	movs	r3, #2
 80085ae:	e027      	b.n	8008600 <HAL_UARTEx_DisableFifoMode+0x66>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2224      	movs	r2, #36	@ 0x24
 80085bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 0201 	bic.w	r2, r2, #1
 80085d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80085de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800861c:	2b01      	cmp	r3, #1
 800861e:	d101      	bne.n	8008624 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008620:	2302      	movs	r3, #2
 8008622:	e02d      	b.n	8008680 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2224      	movs	r2, #36	@ 0x24
 8008630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 0201 	bic.w	r2, r2, #1
 800864a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	430a      	orrs	r2, r1
 800865e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f84f 	bl	8008704 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008698:	2b01      	cmp	r3, #1
 800869a:	d101      	bne.n	80086a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800869c:	2302      	movs	r3, #2
 800869e:	e02d      	b.n	80086fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2224      	movs	r2, #36	@ 0x24
 80086ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0201 	bic.w	r2, r2, #1
 80086c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	430a      	orrs	r2, r1
 80086da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f811 	bl	8008704 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2220      	movs	r2, #32
 80086ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008710:	2b00      	cmp	r3, #0
 8008712:	d108      	bne.n	8008726 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008724:	e031      	b.n	800878a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008726:	2308      	movs	r3, #8
 8008728:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800872a:	2308      	movs	r3, #8
 800872c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	0e5b      	lsrs	r3, r3, #25
 8008736:	b2db      	uxtb	r3, r3
 8008738:	f003 0307 	and.w	r3, r3, #7
 800873c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	0f5b      	lsrs	r3, r3, #29
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f003 0307 	and.w	r3, r3, #7
 800874c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	7b3a      	ldrb	r2, [r7, #12]
 8008752:	4911      	ldr	r1, [pc, #68]	@ (8008798 <UARTEx_SetNbDataToProcess+0x94>)
 8008754:	5c8a      	ldrb	r2, [r1, r2]
 8008756:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800875a:	7b3a      	ldrb	r2, [r7, #12]
 800875c:	490f      	ldr	r1, [pc, #60]	@ (800879c <UARTEx_SetNbDataToProcess+0x98>)
 800875e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008760:	fb93 f3f2 	sdiv	r3, r3, r2
 8008764:	b29a      	uxth	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	7b7a      	ldrb	r2, [r7, #13]
 8008770:	4909      	ldr	r1, [pc, #36]	@ (8008798 <UARTEx_SetNbDataToProcess+0x94>)
 8008772:	5c8a      	ldrb	r2, [r1, r2]
 8008774:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008778:	7b7a      	ldrb	r2, [r7, #13]
 800877a:	4908      	ldr	r1, [pc, #32]	@ (800879c <UARTEx_SetNbDataToProcess+0x98>)
 800877c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800877e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008782:	b29a      	uxth	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800878a:	bf00      	nop
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	0800a6fc 	.word	0x0800a6fc
 800879c:	0800a704 	.word	0x0800a704

080087a0 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b096      	sub	sp, #88	@ 0x58
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3303      	adds	r3, #3
 80087b2:	f023 0303 	bic.w	r3, r3, #3
 80087b6:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80087b8:	f3ef 8310 	mrs	r3, PRIMASK
 80087bc:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 80087be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80087c0:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80087c2:	b672      	cpsid	i
#endif
    return(int_posture);
 80087c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 80087c6:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80087c8:	4b55      	ldr	r3, [pc, #340]	@ (8008920 <_tx_byte_allocate+0x180>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 80087ce:	2300      	movs	r3, #0
 80087d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087d6:	621a      	str	r2, [r3, #32]
 80087d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087da:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087de:	f383 8810 	msr	PRIMASK, r3
}
 80087e2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 f9b2 	bl	8008b50 <_tx_byte_pool_search>
 80087ec:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80087ee:	f3ef 8310 	mrs	r3, PRIMASK
 80087f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80087f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80087f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80087f8:	b672      	cpsid	i
    return(int_posture);
 80087fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80087fc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80087fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8008804:	2301      	movs	r3, #1
 8008806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008808:	e006      	b.n	8008818 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008810:	429a      	cmp	r2, r3
 8008812:	d101      	bne.n	8008818 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8008814:	2301      	movs	r3, #1
 8008816:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8008818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0d9      	beq.n	80087d2 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008822:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8008824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008826:	2b00      	cmp	r3, #0
 8008828:	d008      	beq.n	800883c <_tx_byte_allocate+0x9c>
 800882a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800882c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	f383 8810 	msr	PRIMASK, r3
}
 8008834:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8008836:	2300      	movs	r3, #0
 8008838:	653b      	str	r3, [r7, #80]	@ 0x50
 800883a:	e06c      	b.n	8008916 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d061      	beq.n	8008906 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8008842:	4b38      	ldr	r3, [pc, #224]	@ (8008924 <_tx_byte_allocate+0x184>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d007      	beq.n	800885a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800884a:	2310      	movs	r3, #16
 800884c:	653b      	str	r3, [r7, #80]	@ 0x50
 800884e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008850:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	f383 8810 	msr	PRIMASK, r3
}
 8008858:	e05d      	b.n	8008916 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800885a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800885c:	4a32      	ldr	r2, [pc, #200]	@ (8008928 <_tx_byte_allocate+0x188>)
 800885e:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8008860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8008866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800886c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8008872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008874:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008878:	1c5a      	adds	r2, r3, #1
 800887a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800887c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008884:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888a:	1c5a      	adds	r2, r3, #1
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8008890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	d109      	bne.n	80088aa <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800889a:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800889c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800889e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088a0:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80088a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088a6:	675a      	str	r2, [r3, #116]	@ 0x74
 80088a8:	e011      	b.n	80088ce <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80088b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80088b4:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80088b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088ba:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80088bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088c0:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80088c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088c6:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80088c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088cc:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 80088ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088d0:	2209      	movs	r2, #9
 80088d2:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80088d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088d6:	2201      	movs	r2, #1
 80088d8:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80088da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80088e0:	4b10      	ldr	r3, [pc, #64]	@ (8008924 <_tx_byte_allocate+0x184>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3301      	adds	r3, #1
 80088e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008924 <_tx_byte_allocate+0x184>)
 80088e8:	6013      	str	r3, [r2, #0]
 80088ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088ec:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	f383 8810 	msr	PRIMASK, r3
}
 80088f4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80088f6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80088f8:	f000 ff96 	bl	8009828 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80088fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008902:	653b      	str	r3, [r7, #80]	@ 0x50
 8008904:	e007      	b.n	8008916 <_tx_byte_allocate+0x176>
 8008906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008908:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f383 8810 	msr	PRIMASK, r3
}
 8008910:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8008912:	2310      	movs	r3, #16
 8008914:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8008916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8008918:	4618      	mov	r0, r3
 800891a:	3758      	adds	r7, #88	@ 0x58
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20000b14 	.word	0x20000b14
 8008924:	20000bac 	.word	0x20000bac
 8008928:	0800892d 	.word	0x0800892d

0800892c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08e      	sub	sp, #56	@ 0x38
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008936:	f3ef 8310 	mrs	r3, PRIMASK
 800893a:	623b      	str	r3, [r7, #32]
    return(posture);
 800893c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800893e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008940:	b672      	cpsid	i
    return(int_posture);
 8008942:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8008944:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800894a:	4a33      	ldr	r2, [pc, #204]	@ (8008a18 <_tx_byte_pool_cleanup+0xec>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d158      	bne.n	8008a02 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	429a      	cmp	r2, r3
 800895a:	d152      	bne.n	8008a02 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008960:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8008962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008964:	2b00      	cmp	r3, #0
 8008966:	d04c      	beq.n	8008a02 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8008968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a2b      	ldr	r2, [pc, #172]	@ (8008a1c <_tx_byte_pool_cleanup+0xf0>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d147      	bne.n	8008a02 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8008972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008976:	2b00      	cmp	r3, #0
 8008978:	d043      	beq.n	8008a02 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8008980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008984:	1e5a      	subs	r2, r3, #1
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800898a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d103      	bne.n	800899e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8008996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008998:	2200      	movs	r2, #0
 800899a:	625a      	str	r2, [r3, #36]	@ 0x24
 800899c:	e013      	b.n	80089c6 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a2:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089a8:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80089aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ae:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80089b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089b4:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 80089b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d102      	bne.n	80089c6 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 80089c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089c4:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ca:	2b09      	cmp	r3, #9
 80089cc:	d119      	bne.n	8008a02 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2210      	movs	r2, #16
 80089d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80089d6:	4b12      	ldr	r3, [pc, #72]	@ (8008a20 <_tx_byte_pool_cleanup+0xf4>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3301      	adds	r3, #1
 80089dc:	4a10      	ldr	r2, [pc, #64]	@ (8008a20 <_tx_byte_pool_cleanup+0xf4>)
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f383 8810 	msr	PRIMASK, r3
}
 80089ea:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fe1b 	bl	8009628 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80089f2:	f3ef 8310 	mrs	r3, PRIMASK
 80089f6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80089f8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80089fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80089fc:	b672      	cpsid	i
    return(int_posture);
 80089fe:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a04:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f383 8810 	msr	PRIMASK, r3
}
 8008a0c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008a0e:	bf00      	nop
 8008a10:	3738      	adds	r7, #56	@ 0x38
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	0800892d 	.word	0x0800892d
 8008a1c:	42595445 	.word	0x42595445
 8008a20:	20000bac 	.word	0x20000bac

08008a24 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08e      	sub	sp, #56	@ 0x38
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8008a32:	2234      	movs	r2, #52	@ 0x34
 8008a34:	2100      	movs	r1, #0
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f001 fdce 	bl	800a5d8 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	f023 0303 	bic.w	r3, r3, #3
 8008a42:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	f1a3 0208 	sub.w	r2, r3, #8
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8008a76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a80:	3b04      	subs	r3, #4
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8008a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a90:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8008a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a94:	3b04      	subs	r3, #4
 8008a96:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 8008aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008aae:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8008ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8008aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8008abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8008b40 <_tx_byte_pool_create+0x11c>)
 8008ac2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008aca:	f3ef 8310 	mrs	r3, PRIMASK
 8008ace:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008ad0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008ad2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008ad4:	b672      	cpsid	i
    return(int_posture);
 8008ad6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8008ad8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4a19      	ldr	r2, [pc, #100]	@ (8008b44 <_tx_byte_pool_create+0x120>)
 8008ade:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8008ae0:	4b19      	ldr	r3, [pc, #100]	@ (8008b48 <_tx_byte_pool_create+0x124>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d109      	bne.n	8008afc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8008ae8:	4a18      	ldr	r2, [pc, #96]	@ (8008b4c <_tx_byte_pool_create+0x128>)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	631a      	str	r2, [r3, #48]	@ 0x30
 8008afa:	e011      	b.n	8008b20 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8008afc:	4b13      	ldr	r3, [pc, #76]	@ (8008b4c <_tx_byte_pool_create+0x128>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8008b02:	6a3b      	ldr	r3, [r7, #32]
 8008b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b06:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a3a      	ldr	r2, [r7, #32]
 8008b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8008b20:	4b09      	ldr	r3, [pc, #36]	@ (8008b48 <_tx_byte_pool_create+0x124>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3301      	adds	r3, #1
 8008b26:	4a08      	ldr	r2, [pc, #32]	@ (8008b48 <_tx_byte_pool_create+0x124>)
 8008b28:	6013      	str	r3, [r2, #0]
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f383 8810 	msr	PRIMASK, r3
}
 8008b34:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3738      	adds	r7, #56	@ 0x38
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	ffffeeee 	.word	0xffffeeee
 8008b44:	42595445 	.word	0x42595445
 8008b48:	20000b08 	.word	0x20000b08
 8008b4c:	20000b04 	.word	0x20000b04

08008b50 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b097      	sub	sp, #92	@ 0x5c
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b62:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8008b66:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008b68:	b672      	cpsid	i
    return(int_posture);
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8008b6c:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	689a      	ldr	r2, [r3, #8]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	3b02      	subs	r3, #2
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d308      	bcc.n	8008b98 <_tx_byte_pool_search+0x48>
 8008b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b88:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	f383 8810 	msr	PRIMASK, r3
}
 8008b90:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b96:	e0dd      	b.n	8008d54 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008b98:	4b72      	ldr	r3, [pc, #456]	@ (8008d64 <_tx_byte_pool_search+0x214>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ba2:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bb8:	3304      	adds	r3, #4
 8008bba:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbe:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8008bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a68      	ldr	r2, [pc, #416]	@ (8008d68 <_tx_byte_pool_search+0x218>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d143      	bne.n	8008c52 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8008bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d104      	bne.n	8008bda <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008bd4:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008bda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bdc:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 8008bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8008be4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008be6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8008bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bee:	3b08      	subs	r3, #8
 8008bf0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8008bf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d257      	bcs.n	8008caa <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c00:	3304      	adds	r3, #4
 8008c02:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c06:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8008c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a56      	ldr	r2, [pc, #344]	@ (8008d68 <_tx_byte_pool_search+0x218>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d113      	bne.n	8008c3a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c14:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8008c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	1e5a      	subs	r2, r3, #1
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d114      	bne.n	8008c5c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008c36:	615a      	str	r2, [r3, #20]
 8008c38:	e010      	b.n	8008c5c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 8008c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8008c44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d008      	beq.n	8008c5c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8008c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c50:	e004      	b.n	8008c5c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008c52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c54:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8008c5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8008c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c64:	3b01      	subs	r3, #1
 8008c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c6a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f383 8810 	msr	PRIMASK, r3
}
 8008c72:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c74:	f3ef 8310 	mrs	r3, PRIMASK
 8008c78:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008c7a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008c7c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008c7e:	b672      	cpsid	i
    return(int_posture);
 8008c80:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8008c82:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a1b      	ldr	r3, [r3, #32]
 8008c88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d009      	beq.n	8008ca2 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ca0:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8008ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d186      	bne.n	8008bb6 <_tx_byte_pool_search+0x66>
 8008ca8:	e000      	b.n	8008cac <_tx_byte_pool_search+0x15c>
                    break;
 8008caa:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8008cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d048      	beq.n	8008d44 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8008cb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	2b13      	cmp	r3, #19
 8008cba:	d91e      	bls.n	8008cfa <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	3308      	adds	r3, #8
 8008cc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008cc2:	4413      	add	r3, r2
 8008cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ccc:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8008cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd4:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd8:	3304      	adds	r3, #4
 8008cda:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cde:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8008ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce2:	4a21      	ldr	r2, [pc, #132]	@ (8008d68 <_tx_byte_pool_search+0x218>)
 8008ce4:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cf4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8008d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d02:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	689a      	ldr	r2, [r3, #8]
 8008d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	f1a3 0208 	sub.w	r2, r3, #8
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d105      	bne.n	8008d30 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d26:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8008d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	615a      	str	r2, [r3, #20]
 8008d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d32:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f383 8810 	msr	PRIMASK, r3
}
 8008d3a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8008d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d3e:	3308      	adds	r3, #8
 8008d40:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d42:	e007      	b.n	8008d54 <_tx_byte_pool_search+0x204>
 8008d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d46:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f383 8810 	msr	PRIMASK, r3
}
 8008d4e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8008d54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	375c      	adds	r7, #92	@ 0x5c
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	20000b14 	.word	0x20000b14
 8008d68:	ffffeeee 	.word	0xffffeeee

08008d6c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8008d70:	f000 fb18 	bl	80093a4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8008d74:	f000 ff20 	bl	8009bb8 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8008d78:	4b12      	ldr	r3, [pc, #72]	@ (8008dc4 <_tx_initialize_high_level+0x58>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	4b12      	ldr	r3, [pc, #72]	@ (8008dc8 <_tx_initialize_high_level+0x5c>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8008d84:	4b11      	ldr	r3, [pc, #68]	@ (8008dcc <_tx_initialize_high_level+0x60>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	4b11      	ldr	r3, [pc, #68]	@ (8008dd0 <_tx_initialize_high_level+0x64>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8008d90:	4b10      	ldr	r3, [pc, #64]	@ (8008dd4 <_tx_initialize_high_level+0x68>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	4b10      	ldr	r3, [pc, #64]	@ (8008dd8 <_tx_initialize_high_level+0x6c>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8008d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8008ddc <_tx_initialize_high_level+0x70>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	4b0f      	ldr	r3, [pc, #60]	@ (8008de0 <_tx_initialize_high_level+0x74>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8008da8:	4b0e      	ldr	r3, [pc, #56]	@ (8008de4 <_tx_initialize_high_level+0x78>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	4b0e      	ldr	r3, [pc, #56]	@ (8008de8 <_tx_initialize_high_level+0x7c>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8008db4:	4b0d      	ldr	r3, [pc, #52]	@ (8008dec <_tx_initialize_high_level+0x80>)
 8008db6:	2200      	movs	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	4b0d      	ldr	r3, [pc, #52]	@ (8008df0 <_tx_initialize_high_level+0x84>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]
#endif
}
 8008dc0:	bf00      	nop
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	20000adc 	.word	0x20000adc
 8008dc8:	20000ae0 	.word	0x20000ae0
 8008dcc:	20000ae4 	.word	0x20000ae4
 8008dd0:	20000ae8 	.word	0x20000ae8
 8008dd4:	20000aec 	.word	0x20000aec
 8008dd8:	20000af0 	.word	0x20000af0
 8008ddc:	20000afc 	.word	0x20000afc
 8008de0:	20000b00 	.word	0x20000b00
 8008de4:	20000b04 	.word	0x20000b04
 8008de8:	20000b08 	.word	0x20000b08
 8008dec:	20000af4 	.word	0x20000af4
 8008df0:	20000af8 	.word	0x20000af8

08008df4 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8008df8:	4b10      	ldr	r3, [pc, #64]	@ (8008e3c <_tx_initialize_kernel_enter+0x48>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8008e00:	d00c      	beq.n	8008e1c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8008e02:	4b0e      	ldr	r3, [pc, #56]	@ (8008e3c <_tx_initialize_kernel_enter+0x48>)
 8008e04:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8008e08:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8008e0a:	f7f7 fa09 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8008e0e:	f7ff ffad 	bl	8008d6c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8008e12:	4b0b      	ldr	r3, [pc, #44]	@ (8008e40 <_tx_initialize_kernel_enter+0x4c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3301      	adds	r3, #1
 8008e18:	4a09      	ldr	r2, [pc, #36]	@ (8008e40 <_tx_initialize_kernel_enter+0x4c>)
 8008e1a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8008e1c:	4b07      	ldr	r3, [pc, #28]	@ (8008e3c <_tx_initialize_kernel_enter+0x48>)
 8008e1e:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8008e22:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8008e24:	4b07      	ldr	r3, [pc, #28]	@ (8008e44 <_tx_initialize_kernel_enter+0x50>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7f7 fc8d 	bl	8000748 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8008e2e:	4b03      	ldr	r3, [pc, #12]	@ (8008e3c <_tx_initialize_kernel_enter+0x48>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8008e34:	f7f7 fa34 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8008e38:	bf00      	nop
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	20000054 	.word	0x20000054
 8008e40:	20000bac 	.word	0x20000bac
 8008e44:	20000b0c 	.word	0x20000b0c

08008e48 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08e      	sub	sp, #56	@ 0x38
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e52:	f3ef 8310 	mrs	r3, PRIMASK
 8008e56:	623b      	str	r3, [r7, #32]
    return(posture);
 8008e58:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008e5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008e5c:	b672      	cpsid	i
    return(int_posture);
 8008e5e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8008e60:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e66:	4a33      	ldr	r2, [pc, #204]	@ (8008f34 <_tx_semaphore_cleanup+0xec>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d158      	bne.n	8008f1e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008e72:	683a      	ldr	r2, [r7, #0]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d152      	bne.n	8008f1e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e7c:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d04c      	beq.n	8008f1e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8008e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a2b      	ldr	r2, [pc, #172]	@ (8008f38 <_tx_semaphore_cleanup+0xf0>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d147      	bne.n	8008f1e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d043      	beq.n	8008f1e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	1e5a      	subs	r2, r3, #1
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea4:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d103      	bne.n	8008eba <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	60da      	str	r2, [r3, #12]
 8008eb8:	e013      	b.n	8008ee2 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ec4:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8008ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eca:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ed0:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d102      	bne.n	8008ee2 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8008edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ede:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ee0:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee6:	2b06      	cmp	r3, #6
 8008ee8:	d119      	bne.n	8008f1e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	220d      	movs	r2, #13
 8008eee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008ef2:	4b12      	ldr	r3, [pc, #72]	@ (8008f3c <_tx_semaphore_cleanup+0xf4>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	4a10      	ldr	r2, [pc, #64]	@ (8008f3c <_tx_semaphore_cleanup+0xf4>)
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008efe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	f383 8810 	msr	PRIMASK, r3
}
 8008f06:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fb8d 	bl	8009628 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f12:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008f14:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008f16:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008f18:	b672      	cpsid	i
    return(int_posture);
 8008f1a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f20:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f383 8810 	msr	PRIMASK, r3
}
 8008f28:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8008f2a:	bf00      	nop
 8008f2c:	3738      	adds	r7, #56	@ 0x38
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	08008e49 	.word	0x08008e49
 8008f38:	53454d41 	.word	0x53454d41
 8008f3c:	20000bac 	.word	0x20000bac

08008f40 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08a      	sub	sp, #40	@ 0x28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8008f4c:	221c      	movs	r2, #28
 8008f4e:	2100      	movs	r1, #0
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f001 fb41 	bl	800a5d8 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008f62:	f3ef 8310 	mrs	r3, PRIMASK
 8008f66:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008f68:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008f6a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008f6c:	b672      	cpsid	i
    return(int_posture);
 8008f6e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8008f70:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4a18      	ldr	r2, [pc, #96]	@ (8008fd8 <_tx_semaphore_create+0x98>)
 8008f76:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8008f78:	4b18      	ldr	r3, [pc, #96]	@ (8008fdc <_tx_semaphore_create+0x9c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8008f80:	4a17      	ldr	r2, [pc, #92]	@ (8008fe0 <_tx_semaphore_create+0xa0>)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	619a      	str	r2, [r3, #24]
 8008f92:	e011      	b.n	8008fb8 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8008f94:	4b12      	ldr	r3, [pc, #72]	@ (8008fe0 <_tx_semaphore_create+0xa0>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	69fa      	ldr	r2, [r7, #28]
 8008fb0:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6a3a      	ldr	r2, [r7, #32]
 8008fb6:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8008fb8:	4b08      	ldr	r3, [pc, #32]	@ (8008fdc <_tx_semaphore_create+0x9c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	4a07      	ldr	r2, [pc, #28]	@ (8008fdc <_tx_semaphore_create+0x9c>)
 8008fc0:	6013      	str	r3, [r2, #0]
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f383 8810 	msr	PRIMASK, r3
}
 8008fcc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3728      	adds	r7, #40	@ 0x28
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	53454d41 	.word	0x53454d41
 8008fdc:	20000ae0 	.word	0x20000ae0
 8008fe0:	20000adc 	.word	0x20000adc

08008fe4 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08e      	sub	sp, #56	@ 0x38
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ff6:	623b      	str	r3, [r7, #32]
    return(posture);
 8008ff8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008ffa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008ffc:	b672      	cpsid	i
    return(int_posture);
 8008ffe:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8009000:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	1e5a      	subs	r2, r3, #1
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	609a      	str	r2, [r3, #8]
 8009014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009016:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	f383 8810 	msr	PRIMASK, r3
}
 800901e:	e068      	b.n	80090f2 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d05d      	beq.n	80090e2 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009026:	4b35      	ldr	r3, [pc, #212]	@ (80090fc <_tx_semaphore_get+0x118>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d008      	beq.n	8009040 <_tx_semaphore_get+0x5c>
 800902e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009030:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f383 8810 	msr	PRIMASK, r3
}
 8009038:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800903a:	230d      	movs	r3, #13
 800903c:	637b      	str	r3, [r7, #52]	@ 0x34
 800903e:	e058      	b.n	80090f2 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009040:	4b2f      	ldr	r3, [pc, #188]	@ (8009100 <_tx_semaphore_get+0x11c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8009046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009048:	4a2e      	ldr	r2, [pc, #184]	@ (8009104 <_tx_semaphore_get+0x120>)
 800904a:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800904c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8009052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009054:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800905c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d109      	bne.n	800907c <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800906c:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 800906e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009072:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8009074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009078:	675a      	str	r2, [r3, #116]	@ 0x74
 800907a:	e011      	b.n	80090a0 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8009082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009086:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800908c:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800908e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009092:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009098:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800909a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800909e:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80090aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ac:	2206      	movs	r2, #6
 80090ae:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80090b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b2:	2201      	movs	r2, #1
 80090b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80090b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80090bc:	4b0f      	ldr	r3, [pc, #60]	@ (80090fc <_tx_semaphore_get+0x118>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3301      	adds	r3, #1
 80090c2:	4a0e      	ldr	r2, [pc, #56]	@ (80090fc <_tx_semaphore_get+0x118>)
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f383 8810 	msr	PRIMASK, r3
}
 80090d0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80090d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80090d4:	f000 fba8 	bl	8009828 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80090d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090de:	637b      	str	r3, [r7, #52]	@ 0x34
 80090e0:	e007      	b.n	80090f2 <_tx_semaphore_get+0x10e>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f383 8810 	msr	PRIMASK, r3
}
 80090ec:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 80090ee:	230d      	movs	r3, #13
 80090f0:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 80090f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3738      	adds	r7, #56	@ 0x38
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20000bac 	.word	0x20000bac
 8009100:	20000b14 	.word	0x20000b14
 8009104:	08008e49 	.word	0x08008e49

08009108 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08c      	sub	sp, #48	@ 0x30
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009110:	f3ef 8310 	mrs	r3, PRIMASK
 8009114:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009116:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009118:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800911a:	b672      	cpsid	i
    return(int_posture);
 800911c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800911e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8009126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10a      	bne.n	8009142 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	1c5a      	adds	r2, r3, #1
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	609a      	str	r2, [r3, #8]
 8009136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009138:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f383 8810 	msr	PRIMASK, r3
}
 8009140:	e033      	b.n	80091aa <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8009148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914a:	3b01      	subs	r3, #1
 800914c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800914e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009150:	2b00      	cmp	r3, #0
 8009152:	d103      	bne.n	800915c <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	60da      	str	r2, [r3, #12]
 800915a:	e00e      	b.n	800917a <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800915c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009160:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a3a      	ldr	r2, [r7, #32]
 8009166:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800916c:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	69fa      	ldr	r2, [r7, #28]
 8009172:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	6a3a      	ldr	r2, [r7, #32]
 8009178:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800917e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009182:	2200      	movs	r2, #0
 8009184:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009188:	2200      	movs	r2, #0
 800918a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800918e:	4b09      	ldr	r3, [pc, #36]	@ (80091b4 <_tx_semaphore_put+0xac>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3301      	adds	r3, #1
 8009194:	4a07      	ldr	r2, [pc, #28]	@ (80091b4 <_tx_semaphore_put+0xac>)
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f383 8810 	msr	PRIMASK, r3
}
 80091a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80091a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091a6:	f000 fa3f 	bl	8009628 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3730      	adds	r7, #48	@ 0x30
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20000bac 	.word	0x20000bac

080091b8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b092      	sub	sp, #72	@ 0x48
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
 80091c4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80091c6:	2300      	movs	r3, #0
 80091c8:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80091ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091cc:	21ef      	movs	r1, #239	@ 0xef
 80091ce:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80091d0:	f001 fa02 	bl	800a5d8 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80091d4:	22b0      	movs	r2, #176	@ 0xb0
 80091d6:	2100      	movs	r1, #0
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f001 f9fd 	bl	800a5d8 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80091f4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091fa:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009200:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009206:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800920e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009214:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2220      	movs	r2, #32
 800921a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800921e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009220:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8009222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009224:	3b01      	subs	r3, #1
 8009226:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009228:	4413      	add	r3, r2
 800922a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009230:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8009232:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009236:	429a      	cmp	r2, r3
 8009238:	d007      	beq.n	800924a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8009248:	e006      	b.n	8009258 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800924e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009254:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2203      	movs	r2, #3
 800925c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	4a48      	ldr	r2, [pc, #288]	@ (8009384 <_tx_thread_create+0x1cc>)
 8009262:	655a      	str	r2, [r3, #84]	@ 0x54
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800926a:	4947      	ldr	r1, [pc, #284]	@ (8009388 <_tx_thread_create+0x1d0>)
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f7f7 f877 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009272:	f3ef 8310 	mrs	r3, PRIMASK
 8009276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8009278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800927a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800927c:	b672      	cpsid	i
    return(int_posture);
 800927e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8009280:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	4a41      	ldr	r2, [pc, #260]	@ (800938c <_tx_thread_create+0x1d4>)
 8009286:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8009288:	4b41      	ldr	r3, [pc, #260]	@ (8009390 <_tx_thread_create+0x1d8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10b      	bne.n	80092a8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8009290:	4a40      	ldr	r2, [pc, #256]	@ (8009394 <_tx_thread_create+0x1dc>)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80092a6:	e016      	b.n	80092d6 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80092a8:	4b3a      	ldr	r3, [pc, #232]	@ (8009394 <_tx_thread_create+0x1dc>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80092ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092b4:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80092b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80092d6:	4b2e      	ldr	r3, [pc, #184]	@ (8009390 <_tx_thread_create+0x1d8>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3301      	adds	r3, #1
 80092dc:	4a2c      	ldr	r2, [pc, #176]	@ (8009390 <_tx_thread_create+0x1d8>)
 80092de:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80092e0:	4b2d      	ldr	r3, [pc, #180]	@ (8009398 <_tx_thread_create+0x1e0>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3301      	adds	r3, #1
 80092e6:	4a2c      	ldr	r2, [pc, #176]	@ (8009398 <_tx_thread_create+0x1e0>)
 80092e8:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80092ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d129      	bne.n	8009344 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80092f0:	f3ef 8305 	mrs	r3, IPSR
 80092f4:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 80092f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80092f8:	4b28      	ldr	r3, [pc, #160]	@ (800939c <_tx_thread_create+0x1e4>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8009302:	d30d      	bcc.n	8009320 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8009304:	4b26      	ldr	r3, [pc, #152]	@ (80093a0 <_tx_thread_create+0x1e8>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800930a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800930c:	2b00      	cmp	r3, #0
 800930e:	d009      	beq.n	8009324 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8009310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009314:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8009316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800931a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800931c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800931e:	e001      	b.n	8009324 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8009320:	2300      	movs	r3, #0
 8009322:	647b      	str	r3, [r7, #68]	@ 0x44
 8009324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009326:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	f383 8810 	msr	PRIMASK, r3
}
 800932e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 f979 	bl	8009628 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8009336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009338:	2b00      	cmp	r3, #0
 800933a:	d01e      	beq.n	800937a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800933c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800933e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009340:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009342:	e01a      	b.n	800937a <_tx_thread_create+0x1c2>
 8009344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009346:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	f383 8810 	msr	PRIMASK, r3
}
 800934e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009350:	f3ef 8310 	mrs	r3, PRIMASK
 8009354:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009356:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009358:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800935a:	b672      	cpsid	i
    return(int_posture);
 800935c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800935e:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8009360:	4b0d      	ldr	r3, [pc, #52]	@ (8009398 <_tx_thread_create+0x1e0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3b01      	subs	r3, #1
 8009366:	4a0c      	ldr	r2, [pc, #48]	@ (8009398 <_tx_thread_create+0x1e0>)
 8009368:	6013      	str	r3, [r2, #0]
 800936a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	f383 8810 	msr	PRIMASK, r3
}
 8009374:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009376:	f000 f91d 	bl	80095b4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3748      	adds	r7, #72	@ 0x48
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	08009afd 	.word	0x08009afd
 8009388:	0800941d 	.word	0x0800941d
 800938c:	54485244 	.word	0x54485244
 8009390:	20000b20 	.word	0x20000b20
 8009394:	20000b1c 	.word	0x20000b1c
 8009398:	20000bac 	.word	0x20000bac
 800939c:	20000054 	.word	0x20000054
 80093a0:	20000b18 	.word	0x20000b18

080093a4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80093a8:	4b12      	ldr	r3, [pc, #72]	@ (80093f4 <_tx_thread_initialize+0x50>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80093ae:	4b12      	ldr	r3, [pc, #72]	@ (80093f8 <_tx_thread_initialize+0x54>)
 80093b0:	2200      	movs	r2, #0
 80093b2:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 80093b4:	4b11      	ldr	r3, [pc, #68]	@ (80093fc <_tx_thread_initialize+0x58>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80093ba:	4b11      	ldr	r3, [pc, #68]	@ (8009400 <_tx_thread_initialize+0x5c>)
 80093bc:	2220      	movs	r2, #32
 80093be:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80093c0:	2280      	movs	r2, #128	@ 0x80
 80093c2:	2100      	movs	r1, #0
 80093c4:	480f      	ldr	r0, [pc, #60]	@ (8009404 <_tx_thread_initialize+0x60>)
 80093c6:	f001 f907 	bl	800a5d8 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80093ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009408 <_tx_thread_initialize+0x64>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80093d0:	4b0e      	ldr	r3, [pc, #56]	@ (800940c <_tx_thread_initialize+0x68>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80093d6:	4b0e      	ldr	r3, [pc, #56]	@ (8009410 <_tx_thread_initialize+0x6c>)
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80093dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009414 <_tx_thread_initialize+0x70>)
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80093e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009418 <_tx_thread_initialize+0x74>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 80093ea:	4a0b      	ldr	r2, [pc, #44]	@ (8009418 <_tx_thread_initialize+0x74>)
 80093ec:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80093ee:	bf00      	nop
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	20000b14 	.word	0x20000b14
 80093f8:	20000b18 	.word	0x20000b18
 80093fc:	20000b24 	.word	0x20000b24
 8009400:	20000b28 	.word	0x20000b28
 8009404:	20000b2c 	.word	0x20000b2c
 8009408:	20000b1c 	.word	0x20000b1c
 800940c:	20000b20 	.word	0x20000b20
 8009410:	20000bac 	.word	0x20000bac
 8009414:	20000bb0 	.word	0x20000bb0
 8009418:	20000bb4 	.word	0x20000bb4

0800941c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b088      	sub	sp, #32
 8009420:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009422:	4b21      	ldr	r3, [pc, #132]	@ (80094a8 <_tx_thread_shell_entry+0x8c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800942c:	69fa      	ldr	r2, [r7, #28]
 800942e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009430:	4610      	mov	r0, r2
 8009432:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8009434:	4b1d      	ldr	r3, [pc, #116]	@ (80094ac <_tx_thread_shell_entry+0x90>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800943c:	4b1b      	ldr	r3, [pc, #108]	@ (80094ac <_tx_thread_shell_entry+0x90>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	69f8      	ldr	r0, [r7, #28]
 8009442:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009444:	f3ef 8310 	mrs	r3, PRIMASK
 8009448:	607b      	str	r3, [r7, #4]
    return(posture);
 800944a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800944c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800944e:	b672      	cpsid	i
    return(int_posture);
 8009450:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8009452:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	2201      	movs	r2, #1
 8009458:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	2201      	movs	r2, #1
 800945e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	2200      	movs	r2, #0
 8009464:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009466:	4b12      	ldr	r3, [pc, #72]	@ (80094b0 <_tx_thread_shell_entry+0x94>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3301      	adds	r3, #1
 800946c:	4a10      	ldr	r2, [pc, #64]	@ (80094b0 <_tx_thread_shell_entry+0x94>)
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f383 8810 	msr	PRIMASK, r3
}
 800947a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800947c:	f3ef 8314 	mrs	r3, CONTROL
 8009480:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8009482:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f023 0304 	bic.w	r3, r3, #4
 800948c:	617b      	str	r3, [r7, #20]
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f383 8814 	msr	CONTROL, r3
}
 8009498:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800949a:	69f8      	ldr	r0, [r7, #28]
 800949c:	f000 f9c4 	bl	8009828 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80094a0:	bf00      	nop
 80094a2:	3720      	adds	r7, #32
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	20000b14 	.word	0x20000b14
 80094ac:	20000bb0 	.word	0x20000bb0
 80094b0:	20000bac 	.word	0x20000bac

080094b4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08e      	sub	sp, #56	@ 0x38
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80094bc:	f3ef 8310 	mrs	r3, PRIMASK
 80094c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 80094c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 80094c4:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80094c6:	b672      	cpsid	i
    return(int_posture);
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80094ca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80094cc:	4b35      	ldr	r3, [pc, #212]	@ (80095a4 <_tx_thread_sleep+0xf0>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80094d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d108      	bne.n	80094ea <_tx_thread_sleep+0x36>
 80094d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	f383 8810 	msr	PRIMASK, r3
}
 80094e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80094e4:	2313      	movs	r3, #19
 80094e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e8:	e056      	b.n	8009598 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80094ea:	f3ef 8305 	mrs	r3, IPSR
 80094ee:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80094f0:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80094f2:	4b2d      	ldr	r3, [pc, #180]	@ (80095a8 <_tx_thread_sleep+0xf4>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d008      	beq.n	800950e <_tx_thread_sleep+0x5a>
 80094fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	f383 8810 	msr	PRIMASK, r3
}
 8009506:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009508:	2313      	movs	r3, #19
 800950a:	637b      	str	r3, [r7, #52]	@ 0x34
 800950c:	e044      	b.n	8009598 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800950e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009510:	4a26      	ldr	r2, [pc, #152]	@ (80095ac <_tx_thread_sleep+0xf8>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d108      	bne.n	8009528 <_tx_thread_sleep+0x74>
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f383 8810 	msr	PRIMASK, r3
}
 8009520:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8009522:	2313      	movs	r3, #19
 8009524:	637b      	str	r3, [r7, #52]	@ 0x34
 8009526:	e037      	b.n	8009598 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d108      	bne.n	8009540 <_tx_thread_sleep+0x8c>
 800952e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009530:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	f383 8810 	msr	PRIMASK, r3
}
 8009538:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800953a:	2300      	movs	r3, #0
 800953c:	637b      	str	r3, [r7, #52]	@ 0x34
 800953e:	e02b      	b.n	8009598 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009540:	4b1b      	ldr	r3, [pc, #108]	@ (80095b0 <_tx_thread_sleep+0xfc>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d008      	beq.n	800955a <_tx_thread_sleep+0xa6>
 8009548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f383 8810 	msr	PRIMASK, r3
}
 8009552:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8009554:	2313      	movs	r3, #19
 8009556:	637b      	str	r3, [r7, #52]	@ 0x34
 8009558:	e01e      	b.n	8009598 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800955a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800955c:	2204      	movs	r2, #4
 800955e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009562:	2201      	movs	r2, #1
 8009564:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009568:	2200      	movs	r2, #0
 800956a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800956e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009574:	4b0e      	ldr	r3, [pc, #56]	@ (80095b0 <_tx_thread_sleep+0xfc>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3301      	adds	r3, #1
 800957a:	4a0d      	ldr	r2, [pc, #52]	@ (80095b0 <_tx_thread_sleep+0xfc>)
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009580:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	f383 8810 	msr	PRIMASK, r3
}
 8009588:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800958a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800958c:	f000 f94c 	bl	8009828 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009596:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8009598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800959a:	4618      	mov	r0, r3
 800959c:	3738      	adds	r7, #56	@ 0x38
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20000b14 	.word	0x20000b14
 80095a8:	20000054 	.word	0x20000054
 80095ac:	20000c5c 	.word	0x20000c5c
 80095b0:	20000bac 	.word	0x20000bac

080095b4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b089      	sub	sp, #36	@ 0x24
 80095b8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80095ba:	4b17      	ldr	r3, [pc, #92]	@ (8009618 <_tx_thread_system_preempt_check+0x64>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d121      	bne.n	800960a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80095c6:	4b15      	ldr	r3, [pc, #84]	@ (800961c <_tx_thread_system_preempt_check+0x68>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80095cc:	4b14      	ldr	r3, [pc, #80]	@ (8009620 <_tx_thread_system_preempt_check+0x6c>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80095d2:	69ba      	ldr	r2, [r7, #24]
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d017      	beq.n	800960a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80095da:	4b12      	ldr	r3, [pc, #72]	@ (8009624 <_tx_thread_system_preempt_check+0x70>)
 80095dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095e0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80095e2:	f3ef 8305 	mrs	r3, IPSR
 80095e6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80095e8:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10c      	bne.n	8009608 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80095ee:	f3ef 8310 	mrs	r3, PRIMASK
 80095f2:	60fb      	str	r3, [r7, #12]
    return(posture);
 80095f4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80095f6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80095f8:	b662      	cpsie	i
}
 80095fa:	bf00      	nop
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f383 8810 	msr	PRIMASK, r3
}
 8009606:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8009608:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800960a:	bf00      	nop
 800960c:	3724      	adds	r7, #36	@ 0x24
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop
 8009618:	20000bac 	.word	0x20000bac
 800961c:	20000b14 	.word	0x20000b14
 8009620:	20000b18 	.word	0x20000b18
 8009624:	e000ed04 	.word	0xe000ed04

08009628 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b096      	sub	sp, #88	@ 0x58
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009630:	f3ef 8310 	mrs	r3, PRIMASK
 8009634:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8009636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8009638:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800963a:	b672      	cpsid	i
    return(int_posture);
 800963c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800963e:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	334c      	adds	r3, #76	@ 0x4c
 800964c:	4618      	mov	r0, r3
 800964e:	f000 fb91 	bl	8009d74 <_tx_timer_system_deactivate>
 8009652:	e002      	b.n	800965a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800965a:	4b6c      	ldr	r3, [pc, #432]	@ (800980c <_tx_thread_system_resume+0x1e4>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3b01      	subs	r3, #1
 8009660:	4a6a      	ldr	r2, [pc, #424]	@ (800980c <_tx_thread_system_resume+0x1e4>)
 8009662:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009668:	2b00      	cmp	r3, #0
 800966a:	f040 8083 	bne.w	8009774 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 8097 	beq.w	80097a6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800967c:	2b00      	cmp	r3, #0
 800967e:	d172      	bne.n	8009766 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968a:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800968c:	4a60      	ldr	r2, [pc, #384]	@ (8009810 <_tx_thread_system_resume+0x1e8>)
 800968e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009694:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 8009696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009698:	2b00      	cmp	r3, #0
 800969a:	d154      	bne.n	8009746 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800969c:	495c      	ldr	r1, [pc, #368]	@ (8009810 <_tx_thread_system_resume+0x1e8>)
 800969e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80096b2:	2201      	movs	r2, #1
 80096b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096b6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ba:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80096bc:	4b55      	ldr	r3, [pc, #340]	@ (8009814 <_tx_thread_system_resume+0x1ec>)
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096c2:	4313      	orrs	r3, r2
 80096c4:	4a53      	ldr	r2, [pc, #332]	@ (8009814 <_tx_thread_system_resume+0x1ec>)
 80096c6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80096c8:	4b53      	ldr	r3, [pc, #332]	@ (8009818 <_tx_thread_system_resume+0x1f0>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d269      	bcs.n	80097a6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80096d2:	4a51      	ldr	r2, [pc, #324]	@ (8009818 <_tx_thread_system_resume+0x1f0>)
 80096d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096d6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80096d8:	4b50      	ldr	r3, [pc, #320]	@ (800981c <_tx_thread_system_resume+0x1f4>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80096de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d103      	bne.n	80096ec <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80096e4:	4a4d      	ldr	r2, [pc, #308]	@ (800981c <_tx_thread_system_resume+0x1f4>)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	e05c      	b.n	80097a6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80096ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d257      	bcs.n	80097a6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80096f6:	4a49      	ldr	r2, [pc, #292]	@ (800981c <_tx_thread_system_resume+0x1f4>)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6013      	str	r3, [r2, #0]
 80096fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009702:	f383 8810 	msr	PRIMASK, r3
}
 8009706:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009708:	4b40      	ldr	r3, [pc, #256]	@ (800980c <_tx_thread_system_resume+0x1e4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800970e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009710:	2b00      	cmp	r3, #0
 8009712:	d174      	bne.n	80097fe <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009714:	4b42      	ldr	r3, [pc, #264]	@ (8009820 <_tx_thread_system_resume+0x1f8>)
 8009716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800971a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800971c:	f3ef 8305 	mrs	r3, IPSR
 8009720:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8009722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10c      	bne.n	8009742 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009728:	f3ef 8310 	mrs	r3, PRIMASK
 800972c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800972e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 8009730:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009732:	b662      	cpsie	i
}
 8009734:	bf00      	nop
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	f383 8810 	msr	PRIMASK, r3
}
 8009740:	bf00      	nop
}
 8009742:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8009744:	e05b      	b.n	80097fe <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8009746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974a:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800974c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8009752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800975c:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009762:	621a      	str	r2, [r3, #32]
 8009764:	e01f      	b.n	80097a6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2203      	movs	r2, #3
 8009770:	631a      	str	r2, [r3, #48]	@ 0x30
 8009772:	e018      	b.n	80097a6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009778:	2b01      	cmp	r3, #1
 800977a:	d014      	beq.n	80097a6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009780:	2b02      	cmp	r3, #2
 8009782:	d010      	beq.n	80097a6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009788:	2b00      	cmp	r3, #0
 800978a:	d106      	bne.n	800979a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	631a      	str	r2, [r3, #48]	@ 0x30
 8009798:	e005      	b.n	80097a6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2203      	movs	r2, #3
 80097a4:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80097a6:	4b1f      	ldr	r3, [pc, #124]	@ (8009824 <_tx_thread_system_resume+0x1fc>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80097ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097ae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	f383 8810 	msr	PRIMASK, r3
}
 80097b6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80097b8:	4b18      	ldr	r3, [pc, #96]	@ (800981c <_tx_thread_system_resume+0x1f4>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097be:	429a      	cmp	r2, r3
 80097c0:	d020      	beq.n	8009804 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80097c2:	4b12      	ldr	r3, [pc, #72]	@ (800980c <_tx_thread_system_resume+0x1e4>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 80097c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d11a      	bne.n	8009804 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80097ce:	4b14      	ldr	r3, [pc, #80]	@ (8009820 <_tx_thread_system_resume+0x1f8>)
 80097d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097d4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80097d6:	f3ef 8305 	mrs	r3, IPSR
 80097da:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80097dc:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10f      	bne.n	8009802 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80097e2:	f3ef 8310 	mrs	r3, PRIMASK
 80097e6:	613b      	str	r3, [r7, #16]
    return(posture);
 80097e8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80097ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80097ec:	b662      	cpsie	i
}
 80097ee:	bf00      	nop
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f383 8810 	msr	PRIMASK, r3
}
 80097fa:	bf00      	nop
}
 80097fc:	e001      	b.n	8009802 <_tx_thread_system_resume+0x1da>
                                return;
 80097fe:	bf00      	nop
 8009800:	e000      	b.n	8009804 <_tx_thread_system_resume+0x1dc>
 8009802:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8009804:	3758      	adds	r7, #88	@ 0x58
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	20000bac 	.word	0x20000bac
 8009810:	20000b2c 	.word	0x20000b2c
 8009814:	20000b24 	.word	0x20000b24
 8009818:	20000b28 	.word	0x20000b28
 800981c:	20000b18 	.word	0x20000b18
 8009820:	e000ed04 	.word	0xe000ed04
 8009824:	20000b14 	.word	0x20000b14

08009828 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b09e      	sub	sp, #120	@ 0x78
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8009830:	4b81      	ldr	r3, [pc, #516]	@ (8009a38 <_tx_thread_system_suspend+0x210>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009836:	f3ef 8310 	mrs	r3, PRIMASK
 800983a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800983c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800983e:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8009840:	b672      	cpsid	i
    return(int_posture);
 8009842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8009844:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800984a:	429a      	cmp	r2, r3
 800984c:	d112      	bne.n	8009874 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009852:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8009854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d008      	beq.n	800986c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800985a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800985c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009860:	d004      	beq.n	800986c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	334c      	adds	r3, #76	@ 0x4c
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fa22 	bl	8009cb0 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	4a72      	ldr	r2, [pc, #456]	@ (8009a3c <_tx_thread_system_suspend+0x214>)
 8009872:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8009874:	4b72      	ldr	r3, [pc, #456]	@ (8009a40 <_tx_thread_system_suspend+0x218>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3b01      	subs	r3, #1
 800987a:	4a71      	ldr	r2, [pc, #452]	@ (8009a40 <_tx_thread_system_suspend+0x218>)
 800987c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009882:	2b01      	cmp	r3, #1
 8009884:	f040 80a6 	bne.w	80099d4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009892:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800989a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d015      	beq.n	80098ce <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a6:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80098a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80098ac:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80098ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80098b2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80098b4:	4a63      	ldr	r2, [pc, #396]	@ (8009a44 <_tx_thread_system_suspend+0x21c>)
 80098b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d157      	bne.n	8009972 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80098c2:	4960      	ldr	r1, [pc, #384]	@ (8009a44 <_tx_thread_system_suspend+0x21c>)
 80098c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80098c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80098cc:	e051      	b.n	8009972 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80098ce:	4a5d      	ldr	r2, [pc, #372]	@ (8009a44 <_tx_thread_system_suspend+0x21c>)
 80098d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098d2:	2100      	movs	r1, #0
 80098d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80098d8:	2201      	movs	r2, #1
 80098da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098dc:	fa02 f303 	lsl.w	r3, r2, r3
 80098e0:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80098e2:	4b59      	ldr	r3, [pc, #356]	@ (8009a48 <_tx_thread_system_suspend+0x220>)
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098e8:	43db      	mvns	r3, r3
 80098ea:	4013      	ands	r3, r2
 80098ec:	4a56      	ldr	r2, [pc, #344]	@ (8009a48 <_tx_thread_system_suspend+0x220>)
 80098ee:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80098f0:	2300      	movs	r3, #0
 80098f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80098f4:	4b54      	ldr	r3, [pc, #336]	@ (8009a48 <_tx_thread_system_suspend+0x220>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80098fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d12b      	bne.n	8009958 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009900:	4b52      	ldr	r3, [pc, #328]	@ (8009a4c <_tx_thread_system_suspend+0x224>)
 8009902:	2220      	movs	r2, #32
 8009904:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8009906:	4b52      	ldr	r3, [pc, #328]	@ (8009a50 <_tx_thread_system_suspend+0x228>)
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800990e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009912:	f383 8810 	msr	PRIMASK, r3
}
 8009916:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009918:	4b49      	ldr	r3, [pc, #292]	@ (8009a40 <_tx_thread_system_suspend+0x218>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800991e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009920:	2b00      	cmp	r3, #0
 8009922:	f040 8081 	bne.w	8009a28 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8009926:	4b4b      	ldr	r3, [pc, #300]	@ (8009a54 <_tx_thread_system_suspend+0x22c>)
 8009928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800992c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800992e:	f3ef 8305 	mrs	r3, IPSR
 8009932:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 8009934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10c      	bne.n	8009954 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800993a:	f3ef 8310 	mrs	r3, PRIMASK
 800993e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 8009940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 8009942:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009944:	b662      	cpsie	i
}
 8009946:	bf00      	nop
 8009948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994a:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800994c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800994e:	f383 8810 	msr	PRIMASK, r3
}
 8009952:	bf00      	nop
}
 8009954:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8009956:	e067      	b.n	8009a28 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8009958:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800995a:	fa93 f3a3 	rbit	r3, r3
 800995e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009960:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009962:	fab3 f383 	clz	r3, r3
 8009966:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8009968:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800996a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800996c:	4413      	add	r3, r2
 800996e:	4a37      	ldr	r2, [pc, #220]	@ (8009a4c <_tx_thread_system_suspend+0x224>)
 8009970:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8009972:	4b37      	ldr	r3, [pc, #220]	@ (8009a50 <_tx_thread_system_suspend+0x228>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	429a      	cmp	r2, r3
 800997a:	d12b      	bne.n	80099d4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800997c:	4b33      	ldr	r3, [pc, #204]	@ (8009a4c <_tx_thread_system_suspend+0x224>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a30      	ldr	r2, [pc, #192]	@ (8009a44 <_tx_thread_system_suspend+0x21c>)
 8009982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009986:	4a32      	ldr	r2, [pc, #200]	@ (8009a50 <_tx_thread_system_suspend+0x228>)
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800998c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800998e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009990:	f383 8810 	msr	PRIMASK, r3
}
 8009994:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8009996:	4b2a      	ldr	r3, [pc, #168]	@ (8009a40 <_tx_thread_system_suspend+0x218>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800999c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d144      	bne.n	8009a2c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80099a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009a54 <_tx_thread_system_suspend+0x22c>)
 80099a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099a8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099aa:	f3ef 8305 	mrs	r3, IPSR
 80099ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 80099b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10c      	bne.n	80099d0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80099b6:	f3ef 8310 	mrs	r3, PRIMASK
 80099ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 80099bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 80099be:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80099c0:	b662      	cpsie	i
}
 80099c2:	bf00      	nop
 80099c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	f383 8810 	msr	PRIMASK, r3
}
 80099ce:	bf00      	nop
}
 80099d0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80099d2:	e02b      	b.n	8009a2c <_tx_thread_system_suspend+0x204>
 80099d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	f383 8810 	msr	PRIMASK, r3
}
 80099de:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80099e0:	4b1b      	ldr	r3, [pc, #108]	@ (8009a50 <_tx_thread_system_suspend+0x228>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d022      	beq.n	8009a30 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80099ea:	4b15      	ldr	r3, [pc, #84]	@ (8009a40 <_tx_thread_system_suspend+0x218>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 80099f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d11c      	bne.n	8009a30 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80099f6:	4b17      	ldr	r3, [pc, #92]	@ (8009a54 <_tx_thread_system_suspend+0x22c>)
 80099f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099fc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80099fe:	f3ef 8305 	mrs	r3, IPSR
 8009a02:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009a04:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10c      	bne.n	8009a24 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8009a0e:	617b      	str	r3, [r7, #20]
    return(posture);
 8009a10:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8009a12:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8009a14:	b662      	cpsie	i
}
 8009a16:	bf00      	nop
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f383 8810 	msr	PRIMASK, r3
}
 8009a22:	bf00      	nop
}
 8009a24:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8009a26:	e003      	b.n	8009a30 <_tx_thread_system_suspend+0x208>
                return;
 8009a28:	bf00      	nop
 8009a2a:	e002      	b.n	8009a32 <_tx_thread_system_suspend+0x20a>
            return;
 8009a2c:	bf00      	nop
 8009a2e:	e000      	b.n	8009a32 <_tx_thread_system_suspend+0x20a>
    return;
 8009a30:	bf00      	nop
}
 8009a32:	3778      	adds	r7, #120	@ 0x78
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	20000b14 	.word	0x20000b14
 8009a3c:	20001118 	.word	0x20001118
 8009a40:	20000bac 	.word	0x20000bac
 8009a44:	20000b2c 	.word	0x20000b2c
 8009a48:	20000b24 	.word	0x20000b24
 8009a4c:	20000b28 	.word	0x20000b28
 8009a50:	20000b18 	.word	0x20000b18
 8009a54:	e000ed04 	.word	0xe000ed04

08009a58 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b087      	sub	sp, #28
 8009a5c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8009a5e:	4b21      	ldr	r3, [pc, #132]	@ (8009ae4 <_tx_thread_time_slice+0x8c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009a64:	f3ef 8310 	mrs	r3, PRIMASK
 8009a68:	60fb      	str	r3, [r7, #12]
    return(posture);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8009a6c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009a6e:	b672      	cpsid	i
    return(int_posture);
 8009a70:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8009a72:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009a74:	4b1c      	ldr	r3, [pc, #112]	@ (8009ae8 <_tx_thread_time_slice+0x90>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d024      	beq.n	8009aca <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d120      	bne.n	8009aca <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	69da      	ldr	r2, [r3, #28]
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	4a15      	ldr	r2, [pc, #84]	@ (8009aec <_tx_thread_time_slice+0x94>)
 8009a96:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	6a1b      	ldr	r3, [r3, #32]
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d013      	beq.n	8009aca <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d10d      	bne.n	8009aca <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	6a12      	ldr	r2, [r2, #32]
 8009ab6:	490e      	ldr	r1, [pc, #56]	@ (8009af0 <_tx_thread_time_slice+0x98>)
 8009ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8009abc:	4b0d      	ldr	r3, [pc, #52]	@ (8009af4 <_tx_thread_time_slice+0x9c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8009af0 <_tx_thread_time_slice+0x98>)
 8009ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8009af8 <_tx_thread_time_slice+0xa0>)
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f383 8810 	msr	PRIMASK, r3
}
 8009ad4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8009ad6:	bf00      	nop
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	20000b14 	.word	0x20000b14
 8009ae8:	20000bbc 	.word	0x20000bbc
 8009aec:	20001118 	.word	0x20001118
 8009af0:	20000b2c 	.word	0x20000b2c
 8009af4:	20000b28 	.word	0x20000b28
 8009af8:	20000b18 	.word	0x20000b18

08009afc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08a      	sub	sp, #40	@ 0x28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b08:	f3ef 8310 	mrs	r3, PRIMASK
 8009b0c:	617b      	str	r3, [r7, #20]
    return(posture);
 8009b0e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009b10:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b12:	b672      	cpsid	i
    return(int_posture);
 8009b14:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8009b16:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8009b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d10e      	bne.n	8009b3e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8009b20:	4b13      	ldr	r3, [pc, #76]	@ (8009b70 <_tx_thread_timeout+0x74>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3301      	adds	r3, #1
 8009b26:	4a12      	ldr	r2, [pc, #72]	@ (8009b70 <_tx_thread_timeout+0x74>)
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f383 8810 	msr	PRIMASK, r3
}
 8009b34:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009b36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b38:	f7ff fd76 	bl	8009628 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8009b3c:	e013      	b.n	8009b66 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b42:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8009b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009b4a:	61bb      	str	r3, [r7, #24]
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f383 8810 	msr	PRIMASK, r3
}
 8009b56:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	69b9      	ldr	r1, [r7, #24]
 8009b62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b64:	4798      	blx	r3
}
 8009b66:	bf00      	nop
 8009b68:	3728      	adds	r7, #40	@ 0x28
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	20000bac 	.word	0x20000bac

08009b74 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b7e:	607b      	str	r3, [r7, #4]
    return(posture);
 8009b80:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8009b82:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009b84:	b672      	cpsid	i
    return(int_posture);
 8009b86:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8009b88:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8009b8a:	4b09      	ldr	r3, [pc, #36]	@ (8009bb0 <_tx_timer_expiration_process+0x3c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	4a07      	ldr	r2, [pc, #28]	@ (8009bb0 <_tx_timer_expiration_process+0x3c>)
 8009b92:	6013      	str	r3, [r2, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f383 8810 	msr	PRIMASK, r3
}
 8009b9e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8009ba0:	4804      	ldr	r0, [pc, #16]	@ (8009bb4 <_tx_timer_expiration_process+0x40>)
 8009ba2:	f7ff fd41 	bl	8009628 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20000bac 	.word	0x20000bac
 8009bb4:	20000c5c 	.word	0x20000c5c

08009bb8 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8009bb8:	b590      	push	{r4, r7, lr}
 8009bba:	b089      	sub	sp, #36	@ 0x24
 8009bbc:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8009bbe:	4b28      	ldr	r3, [pc, #160]	@ (8009c60 <_tx_timer_initialize+0xa8>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8009bc4:	4b27      	ldr	r3, [pc, #156]	@ (8009c64 <_tx_timer_initialize+0xac>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009bca:	4b27      	ldr	r3, [pc, #156]	@ (8009c68 <_tx_timer_initialize+0xb0>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8009bd0:	4b26      	ldr	r3, [pc, #152]	@ (8009c6c <_tx_timer_initialize+0xb4>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8009bd6:	4b26      	ldr	r3, [pc, #152]	@ (8009c70 <_tx_timer_initialize+0xb8>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8009bdc:	2280      	movs	r2, #128	@ 0x80
 8009bde:	2100      	movs	r1, #0
 8009be0:	4824      	ldr	r0, [pc, #144]	@ (8009c74 <_tx_timer_initialize+0xbc>)
 8009be2:	f000 fcf9 	bl	800a5d8 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8009be6:	4b24      	ldr	r3, [pc, #144]	@ (8009c78 <_tx_timer_initialize+0xc0>)
 8009be8:	4a22      	ldr	r2, [pc, #136]	@ (8009c74 <_tx_timer_initialize+0xbc>)
 8009bea:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8009bec:	4b23      	ldr	r3, [pc, #140]	@ (8009c7c <_tx_timer_initialize+0xc4>)
 8009bee:	4a21      	ldr	r2, [pc, #132]	@ (8009c74 <_tx_timer_initialize+0xbc>)
 8009bf0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8009bf2:	4b23      	ldr	r3, [pc, #140]	@ (8009c80 <_tx_timer_initialize+0xc8>)
 8009bf4:	4a23      	ldr	r2, [pc, #140]	@ (8009c84 <_tx_timer_initialize+0xcc>)
 8009bf6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8009bf8:	4b21      	ldr	r3, [pc, #132]	@ (8009c80 <_tx_timer_initialize+0xc8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4a20      	ldr	r2, [pc, #128]	@ (8009c80 <_tx_timer_initialize+0xc8>)
 8009c00:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8009c02:	4b21      	ldr	r3, [pc, #132]	@ (8009c88 <_tx_timer_initialize+0xd0>)
 8009c04:	4a21      	ldr	r2, [pc, #132]	@ (8009c8c <_tx_timer_initialize+0xd4>)
 8009c06:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8009c08:	4b21      	ldr	r3, [pc, #132]	@ (8009c90 <_tx_timer_initialize+0xd8>)
 8009c0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009c0e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8009c10:	4b20      	ldr	r3, [pc, #128]	@ (8009c94 <_tx_timer_initialize+0xdc>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8009c16:	4b1c      	ldr	r3, [pc, #112]	@ (8009c88 <_tx_timer_initialize+0xd0>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8009c90 <_tx_timer_initialize+0xd8>)
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	491d      	ldr	r1, [pc, #116]	@ (8009c94 <_tx_timer_initialize+0xdc>)
 8009c20:	6809      	ldr	r1, [r1, #0]
 8009c22:	481c      	ldr	r0, [pc, #112]	@ (8009c94 <_tx_timer_initialize+0xdc>)
 8009c24:	6800      	ldr	r0, [r0, #0]
 8009c26:	2400      	movs	r4, #0
 8009c28:	9405      	str	r4, [sp, #20]
 8009c2a:	2400      	movs	r4, #0
 8009c2c:	9404      	str	r4, [sp, #16]
 8009c2e:	9003      	str	r0, [sp, #12]
 8009c30:	9102      	str	r1, [sp, #8]
 8009c32:	9201      	str	r2, [sp, #4]
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	4b18      	ldr	r3, [pc, #96]	@ (8009c98 <_tx_timer_initialize+0xe0>)
 8009c38:	4a18      	ldr	r2, [pc, #96]	@ (8009c9c <_tx_timer_initialize+0xe4>)
 8009c3a:	4919      	ldr	r1, [pc, #100]	@ (8009ca0 <_tx_timer_initialize+0xe8>)
 8009c3c:	4819      	ldr	r0, [pc, #100]	@ (8009ca4 <_tx_timer_initialize+0xec>)
 8009c3e:	f7ff fabb 	bl	80091b8 <_tx_thread_create>
 8009c42:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1e5      	bne.n	8009c16 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8009c4a:	4b17      	ldr	r3, [pc, #92]	@ (8009ca8 <_tx_timer_initialize+0xf0>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8009c50:	4b16      	ldr	r3, [pc, #88]	@ (8009cac <_tx_timer_initialize+0xf4>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd90      	pop	{r4, r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	20000bb8 	.word	0x20000bb8
 8009c64:	20001118 	.word	0x20001118
 8009c68:	20000bbc 	.word	0x20000bbc
 8009c6c:	20000c4c 	.word	0x20000c4c
 8009c70:	20000c58 	.word	0x20000c58
 8009c74:	20000bc0 	.word	0x20000bc0
 8009c78:	20000c40 	.word	0x20000c40
 8009c7c:	20000c48 	.word	0x20000c48
 8009c80:	20000c44 	.word	0x20000c44
 8009c84:	20000c3c 	.word	0x20000c3c
 8009c88:	20000d0c 	.word	0x20000d0c
 8009c8c:	20000d18 	.word	0x20000d18
 8009c90:	20000d10 	.word	0x20000d10
 8009c94:	20000d14 	.word	0x20000d14
 8009c98:	4154494d 	.word	0x4154494d
 8009c9c:	08009de5 	.word	0x08009de5
 8009ca0:	0800a6b8 	.word	0x0800a6b8
 8009ca4:	20000c5c 	.word	0x20000c5c
 8009ca8:	20000c50 	.word	0x20000c50
 8009cac:	20000c54 	.word	0x20000c54

08009cb0 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b089      	sub	sp, #36	@ 0x24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d04a      	beq.n	8009d5a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cca:	d046      	beq.n	8009d5a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d142      	bne.n	8009d5a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2b20      	cmp	r3, #32
 8009cd8:	d902      	bls.n	8009ce0 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8009cda:	231f      	movs	r3, #31
 8009cdc:	61bb      	str	r3, [r7, #24]
 8009cde:	e002      	b.n	8009ce6 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8009ce6:	4b20      	ldr	r3, [pc, #128]	@ (8009d68 <_tx_timer_system_activate+0xb8>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8009cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8009d6c <_tx_timer_system_activate+0xbc>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d30b      	bcc.n	8009d14 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8009cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8009d6c <_tx_timer_system_activate+0xbc>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	69fa      	ldr	r2, [r7, #28]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	109b      	asrs	r3, r3, #2
 8009d06:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8009d08:	4b19      	ldr	r3, [pc, #100]	@ (8009d70 <_tx_timer_system_activate+0xc0>)
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	e011      	b.n	8009d54 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8009d5a:	bf00      	nop
 8009d5c:	3724      	adds	r7, #36	@ 0x24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	20000c48 	.word	0x20000c48
 8009d6c:	20000c44 	.word	0x20000c44
 8009d70:	20000c40 	.word	0x20000c40

08009d74 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d026      	beq.n	8009dd6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d108      	bne.n	8009da8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d117      	bne.n	8009dd0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	e013      	b.n	8009dd0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	695b      	ldr	r3, [r3, #20]
 8009dac:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d105      	bne.n	8009dd0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	619a      	str	r2, [r3, #24]
    }
}
 8009dd6:	bf00      	nop
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
	...

08009de4 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b098      	sub	sp, #96	@ 0x60
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8009dec:	2300      	movs	r3, #0
 8009dee:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a73      	ldr	r2, [pc, #460]	@ (8009fc0 <_tx_timer_thread_entry+0x1dc>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	f040 80de 	bne.w	8009fb6 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8009dfe:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8009e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8009e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e04:	b672      	cpsid	i
    return(int_posture);
 8009e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8009e08:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8009e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8009fc4 <_tx_timer_thread_entry+0x1e0>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d003      	beq.n	8009e20 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f107 020c 	add.w	r2, r7, #12
 8009e1e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8009e20:	4b68      	ldr	r3, [pc, #416]	@ (8009fc4 <_tx_timer_thread_entry+0x1e0>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8009e28:	4b66      	ldr	r3, [pc, #408]	@ (8009fc4 <_tx_timer_thread_entry+0x1e0>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	4a65      	ldr	r2, [pc, #404]	@ (8009fc4 <_tx_timer_thread_entry+0x1e0>)
 8009e30:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8009e32:	4b64      	ldr	r3, [pc, #400]	@ (8009fc4 <_tx_timer_thread_entry+0x1e0>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	4b64      	ldr	r3, [pc, #400]	@ (8009fc8 <_tx_timer_thread_entry+0x1e4>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d103      	bne.n	8009e46 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8009e3e:	4b63      	ldr	r3, [pc, #396]	@ (8009fcc <_tx_timer_thread_entry+0x1e8>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a60      	ldr	r2, [pc, #384]	@ (8009fc4 <_tx_timer_thread_entry+0x1e0>)
 8009e44:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8009e46:	4b62      	ldr	r3, [pc, #392]	@ (8009fd0 <_tx_timer_thread_entry+0x1ec>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e4e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e52:	f383 8810 	msr	PRIMASK, r3
}
 8009e56:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e58:	f3ef 8310 	mrs	r3, PRIMASK
 8009e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8009e60:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e62:	b672      	cpsid	i
    return(int_posture);
 8009e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8009e66:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8009e68:	e07f      	b.n	8009f6a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8009e74:	2300      	movs	r3, #0
 8009e76:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8009e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d102      	bne.n	8009e86 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8009e80:	2300      	movs	r3, #0
 8009e82:	60fb      	str	r3, [r7, #12]
 8009e84:	e00e      	b.n	8009ea4 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8009e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e90:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e96:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8009e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e9a:	f107 020c 	add.w	r2, r7, #12
 8009e9e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8009ea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ea2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b20      	cmp	r3, #32
 8009eaa:	d911      	bls.n	8009ed0 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8009eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8009eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eb6:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ebe:	f107 0208 	add.w	r2, r7, #8
 8009ec2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8009ec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ec6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ec8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8009eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ecc:	60bb      	str	r3, [r7, #8]
 8009ece:	e01a      	b.n	8009f06 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8009ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8009ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8009edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ee2:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8009ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d009      	beq.n	8009f00 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009eee:	f107 0208 	add.w	r2, r7, #8
 8009ef2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8009ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ef6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ef8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8009efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009efc:	60bb      	str	r3, [r7, #8]
 8009efe:	e002      	b.n	8009f06 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8009f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f02:	2200      	movs	r2, #0
 8009f04:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8009f06:	4a33      	ldr	r2, [pc, #204]	@ (8009fd4 <_tx_timer_thread_entry+0x1f0>)
 8009f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f12:	f383 8810 	msr	PRIMASK, r3
}
 8009f16:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8009f18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8009f1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f20:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009f22:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f24:	f3ef 8310 	mrs	r3, PRIMASK
 8009f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8009f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8009f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f2e:	b672      	cpsid	i
    return(int_posture);
 8009f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8009f32:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8009f34:	4b27      	ldr	r3, [pc, #156]	@ (8009fd4 <_tx_timer_thread_entry+0x1f0>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d105      	bne.n	8009f4e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8009f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f44:	2200      	movs	r2, #0
 8009f46:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8009f48:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009f4a:	f7ff feb1 	bl	8009cb0 <_tx_timer_system_activate>
 8009f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f50:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	f383 8810 	msr	PRIMASK, r3
}
 8009f58:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8009f5e:	623b      	str	r3, [r7, #32]
    return(posture);
 8009f60:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009f62:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f64:	b672      	cpsid	i
    return(int_posture);
 8009f66:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8009f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f47f af7c 	bne.w	8009e6a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8009f72:	4b17      	ldr	r3, [pc, #92]	@ (8009fd0 <_tx_timer_thread_entry+0x1ec>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d116      	bne.n	8009fa8 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8009f7a:	4b17      	ldr	r3, [pc, #92]	@ (8009fd8 <_tx_timer_thread_entry+0x1f4>)
 8009f7c:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009f7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f80:	2203      	movs	r2, #3
 8009f82:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f86:	2201      	movs	r2, #1
 8009f88:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8009f8a:	4b14      	ldr	r3, [pc, #80]	@ (8009fdc <_tx_timer_thread_entry+0x1f8>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	4a12      	ldr	r2, [pc, #72]	@ (8009fdc <_tx_timer_thread_entry+0x1f8>)
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f96:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f383 8810 	msr	PRIMASK, r3
}
 8009f9e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8009fa0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009fa2:	f7ff fc41 	bl	8009828 <_tx_thread_system_suspend>
 8009fa6:	e728      	b.n	8009dfa <_tx_timer_thread_entry+0x16>
 8009fa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009faa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	f383 8810 	msr	PRIMASK, r3
}
 8009fb2:	bf00      	nop
            TX_DISABLE
 8009fb4:	e721      	b.n	8009dfa <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8009fb6:	bf00      	nop
 8009fb8:	3760      	adds	r7, #96	@ 0x60
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	4154494d 	.word	0x4154494d
 8009fc4:	20000c48 	.word	0x20000c48
 8009fc8:	20000c44 	.word	0x20000c44
 8009fcc:	20000c40 	.word	0x20000c40
 8009fd0:	20000c4c 	.word	0x20000c4c
 8009fd4:	20000c58 	.word	0x20000c58
 8009fd8:	20000c5c 	.word	0x20000c5c
 8009fdc:	20000bac 	.word	0x20000bac

08009fe0 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b08a      	sub	sp, #40	@ 0x28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d102      	bne.n	8009ffe <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ffc:	e029      	b.n	800a052 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a2d      	ldr	r2, [pc, #180]	@ (800a0b8 <_txe_byte_allocate+0xd8>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d002      	beq.n	800a00e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a008:	2302      	movs	r3, #2
 800a00a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a00c:	e021      	b.n	800a052 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800a014:	2303      	movs	r3, #3
 800a016:	627b      	str	r3, [r7, #36]	@ 0x24
 800a018:	e01b      	b.n	800a052 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d102      	bne.n	800a026 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800a020:	2305      	movs	r3, #5
 800a022:	627b      	str	r3, [r7, #36]	@ 0x24
 800a024:	e015      	b.n	800a052 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	69db      	ldr	r3, [r3, #28]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d902      	bls.n	800a036 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800a030:	2305      	movs	r3, #5
 800a032:	627b      	str	r3, [r7, #36]	@ 0x24
 800a034:	e00d      	b.n	800a052 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00a      	beq.n	800a052 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a03c:	f3ef 8305 	mrs	r3, IPSR
 800a040:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800a042:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a044:	4b1d      	ldr	r3, [pc, #116]	@ (800a0bc <_txe_byte_allocate+0xdc>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4313      	orrs	r3, r2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a04e:	2304      	movs	r3, #4
 800a050:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800a052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a054:	2b00      	cmp	r3, #0
 800a056:	d108      	bne.n	800a06a <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a058:	4b19      	ldr	r3, [pc, #100]	@ (800a0c0 <_txe_byte_allocate+0xe0>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	4a18      	ldr	r2, [pc, #96]	@ (800a0c4 <_txe_byte_allocate+0xe4>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d101      	bne.n	800a06a <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800a066:	2313      	movs	r3, #19
 800a068:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800a06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d114      	bne.n	800a09a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a070:	f3ef 8305 	mrs	r3, IPSR
 800a074:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a076:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a078:	4b10      	ldr	r3, [pc, #64]	@ (800a0bc <_txe_byte_allocate+0xdc>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00b      	beq.n	800a09a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a082:	f3ef 8305 	mrs	r3, IPSR
 800a086:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a088:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a08a:	4b0c      	ldr	r3, [pc, #48]	@ (800a0bc <_txe_byte_allocate+0xdc>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4313      	orrs	r3, r2
 800a090:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800a094:	d201      	bcs.n	800a09a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a096:	2313      	movs	r3, #19
 800a098:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d106      	bne.n	800a0ae <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	68b9      	ldr	r1, [r7, #8]
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7fe fb7a 	bl	80087a0 <_tx_byte_allocate>
 800a0ac:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3728      	adds	r7, #40	@ 0x28
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	42595445 	.word	0x42595445
 800a0bc:	20000054 	.word	0x20000054
 800a0c0:	20000b14 	.word	0x20000b14
 800a0c4:	20000c5c 	.word	0x20000c5c

0800a0c8 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b092      	sub	sp, #72	@ 0x48
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
 800a0d4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d102      	bne.n	800a0e6 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a0e0:	2302      	movs	r3, #2
 800a0e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0e4:	e075      	b.n	800a1d2 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800a0e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0e8:	2b34      	cmp	r3, #52	@ 0x34
 800a0ea:	d002      	beq.n	800a0f2 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0f0:	e06f      	b.n	800a1d2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0f2:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a0fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0fc:	b672      	cpsid	i
    return(int_posture);
 800a0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a100:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a102:	4b3b      	ldr	r3, [pc, #236]	@ (800a1f0 <_txe_byte_pool_create+0x128>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3301      	adds	r3, #1
 800a108:	4a39      	ldr	r2, [pc, #228]	@ (800a1f0 <_txe_byte_pool_create+0x128>)
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a112:	f383 8810 	msr	PRIMASK, r3
}
 800a116:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800a118:	4b36      	ldr	r3, [pc, #216]	@ (800a1f4 <_txe_byte_pool_create+0x12c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a11e:	2300      	movs	r3, #0
 800a120:	643b      	str	r3, [r7, #64]	@ 0x40
 800a122:	e009      	b.n	800a138 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a128:	429a      	cmp	r2, r3
 800a12a:	d00b      	beq.n	800a144 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800a12c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800a132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a134:	3301      	adds	r3, #1
 800a136:	643b      	str	r3, [r7, #64]	@ 0x40
 800a138:	4b2f      	ldr	r3, [pc, #188]	@ (800a1f8 <_txe_byte_pool_create+0x130>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a13e:	429a      	cmp	r2, r3
 800a140:	d3f0      	bcc.n	800a124 <_txe_byte_pool_create+0x5c>
 800a142:	e000      	b.n	800a146 <_txe_byte_pool_create+0x7e>
                break;
 800a144:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a146:	f3ef 8310 	mrs	r3, PRIMASK
 800a14a:	623b      	str	r3, [r7, #32]
    return(posture);
 800a14c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a14e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a150:	b672      	cpsid	i
    return(int_posture);
 800a152:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a154:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a156:	4b26      	ldr	r3, [pc, #152]	@ (800a1f0 <_txe_byte_pool_create+0x128>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	4a24      	ldr	r2, [pc, #144]	@ (800a1f0 <_txe_byte_pool_create+0x128>)
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a162:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a166:	f383 8810 	msr	PRIMASK, r3
}
 800a16a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a16c:	f7ff fa22 	bl	80095b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a174:	429a      	cmp	r2, r3
 800a176:	d102      	bne.n	800a17e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800a178:	2302      	movs	r3, #2
 800a17a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a17c:	e029      	b.n	800a1d2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d102      	bne.n	800a18a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800a184:	2303      	movs	r3, #3
 800a186:	647b      	str	r3, [r7, #68]	@ 0x44
 800a188:	e023      	b.n	800a1d2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b63      	cmp	r3, #99	@ 0x63
 800a18e:	d802      	bhi.n	800a196 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800a190:	2305      	movs	r3, #5
 800a192:	647b      	str	r3, [r7, #68]	@ 0x44
 800a194:	e01d      	b.n	800a1d2 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a196:	4b19      	ldr	r3, [pc, #100]	@ (800a1fc <_txe_byte_pool_create+0x134>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a19e:	4a18      	ldr	r2, [pc, #96]	@ (800a200 <_txe_byte_pool_create+0x138>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d101      	bne.n	800a1a8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a1a4:	2313      	movs	r3, #19
 800a1a6:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a1a8:	f3ef 8305 	mrs	r3, IPSR
 800a1ac:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a1ae:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a1b0:	4b14      	ldr	r3, [pc, #80]	@ (800a204 <_txe_byte_pool_create+0x13c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d00b      	beq.n	800a1d2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a1ba:	f3ef 8305 	mrs	r3, IPSR
 800a1be:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a1c0:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a1c2:	4b10      	ldr	r3, [pc, #64]	@ (800a204 <_txe_byte_pool_create+0x13c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800a1cc:	d201      	bcs.n	800a1d2 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a1ce:	2313      	movs	r3, #19
 800a1d0:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a1d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d106      	bne.n	800a1e6 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	68b9      	ldr	r1, [r7, #8]
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f7fe fc20 	bl	8008a24 <_tx_byte_pool_create>
 800a1e4:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800a1e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3748      	adds	r7, #72	@ 0x48
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	20000bac 	.word	0x20000bac
 800a1f4:	20000b04 	.word	0x20000b04
 800a1f8:	20000b08 	.word	0x20000b08
 800a1fc:	20000b14 	.word	0x20000b14
 800a200:	20000c5c 	.word	0x20000c5c
 800a204:	20000054 	.word	0x20000054

0800a208 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b092      	sub	sp, #72	@ 0x48
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
 800a214:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a216:	2300      	movs	r3, #0
 800a218:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d102      	bne.n	800a226 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a220:	230c      	movs	r3, #12
 800a222:	647b      	str	r3, [r7, #68]	@ 0x44
 800a224:	e054      	b.n	800a2d0 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b1c      	cmp	r3, #28
 800a22a:	d002      	beq.n	800a232 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a22c:	230c      	movs	r3, #12
 800a22e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a230:	e04e      	b.n	800a2d0 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a232:	f3ef 8310 	mrs	r3, PRIMASK
 800a236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800a238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800a23a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a23c:	b672      	cpsid	i
    return(int_posture);
 800a23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a240:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a242:	4b36      	ldr	r3, [pc, #216]	@ (800a31c <_txe_semaphore_create+0x114>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3301      	adds	r3, #1
 800a248:	4a34      	ldr	r2, [pc, #208]	@ (800a31c <_txe_semaphore_create+0x114>)
 800a24a:	6013      	str	r3, [r2, #0]
 800a24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a252:	f383 8810 	msr	PRIMASK, r3
}
 800a256:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800a258:	4b31      	ldr	r3, [pc, #196]	@ (800a320 <_txe_semaphore_create+0x118>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800a25e:	2300      	movs	r3, #0
 800a260:	643b      	str	r3, [r7, #64]	@ 0x40
 800a262:	e009      	b.n	800a278 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a268:	429a      	cmp	r2, r3
 800a26a:	d00b      	beq.n	800a284 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800a26c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800a272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a274:	3301      	adds	r3, #1
 800a276:	643b      	str	r3, [r7, #64]	@ 0x40
 800a278:	4b2a      	ldr	r3, [pc, #168]	@ (800a324 <_txe_semaphore_create+0x11c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a27e:	429a      	cmp	r2, r3
 800a280:	d3f0      	bcc.n	800a264 <_txe_semaphore_create+0x5c>
 800a282:	e000      	b.n	800a286 <_txe_semaphore_create+0x7e>
                break;
 800a284:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a286:	f3ef 8310 	mrs	r3, PRIMASK
 800a28a:	623b      	str	r3, [r7, #32]
    return(posture);
 800a28c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a28e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a290:	b672      	cpsid	i
    return(int_posture);
 800a292:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a294:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a296:	4b21      	ldr	r3, [pc, #132]	@ (800a31c <_txe_semaphore_create+0x114>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	4a1f      	ldr	r2, [pc, #124]	@ (800a31c <_txe_semaphore_create+0x114>)
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	f383 8810 	msr	PRIMASK, r3
}
 800a2aa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a2ac:	f7ff f982 	bl	80095b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d102      	bne.n	800a2be <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800a2b8:	230c      	movs	r3, #12
 800a2ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2bc:	e008      	b.n	800a2d0 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800a2be:	4b1a      	ldr	r3, [pc, #104]	@ (800a328 <_txe_semaphore_create+0x120>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800a2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c6:	4a19      	ldr	r2, [pc, #100]	@ (800a32c <_txe_semaphore_create+0x124>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d101      	bne.n	800a2d0 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a2cc:	2313      	movs	r3, #19
 800a2ce:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a2d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d114      	bne.n	800a300 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a2d6:	f3ef 8305 	mrs	r3, IPSR
 800a2da:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a2dc:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a2de:	4b14      	ldr	r3, [pc, #80]	@ (800a330 <_txe_semaphore_create+0x128>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00b      	beq.n	800a300 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a2e8:	f3ef 8305 	mrs	r3, IPSR
 800a2ec:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a2ee:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a2f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a330 <_txe_semaphore_create+0x128>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800a2fa:	d201      	bcs.n	800a300 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a2fc:	2313      	movs	r3, #19
 800a2fe:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a302:	2b00      	cmp	r3, #0
 800a304:	d105      	bne.n	800a312 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	68b9      	ldr	r1, [r7, #8]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7fe fe18 	bl	8008f40 <_tx_semaphore_create>
 800a310:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800a312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a314:	4618      	mov	r0, r3
 800a316:	3748      	adds	r7, #72	@ 0x48
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	20000bac 	.word	0x20000bac
 800a320:	20000adc 	.word	0x20000adc
 800a324:	20000ae0 	.word	0x20000ae0
 800a328:	20000b14 	.word	0x20000b14
 800a32c:	20000c5c 	.word	0x20000c5c
 800a330:	20000054 	.word	0x20000054

0800a334 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a33e:	2300      	movs	r3, #0
 800a340:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d102      	bne.n	800a34e <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a348:	230c      	movs	r3, #12
 800a34a:	617b      	str	r3, [r7, #20]
 800a34c:	e01f      	b.n	800a38e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a15      	ldr	r2, [pc, #84]	@ (800a3a8 <_txe_semaphore_get+0x74>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d002      	beq.n	800a35e <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a358:	230c      	movs	r3, #12
 800a35a:	617b      	str	r3, [r7, #20]
 800a35c:	e017      	b.n	800a38e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d014      	beq.n	800a38e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a364:	f3ef 8305 	mrs	r3, IPSR
 800a368:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800a36a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a36c:	4b0f      	ldr	r3, [pc, #60]	@ (800a3ac <_txe_semaphore_get+0x78>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4313      	orrs	r3, r2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800a376:	2304      	movs	r3, #4
 800a378:	617b      	str	r3, [r7, #20]
 800a37a:	e008      	b.n	800a38e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800a37c:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b0 <_txe_semaphore_get+0x7c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	4a0b      	ldr	r2, [pc, #44]	@ (800a3b4 <_txe_semaphore_get+0x80>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d101      	bne.n	800a38e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800a38a:	2304      	movs	r3, #4
 800a38c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d104      	bne.n	800a39e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800a394:	6839      	ldr	r1, [r7, #0]
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7fe fe24 	bl	8008fe4 <_tx_semaphore_get>
 800a39c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800a39e:	697b      	ldr	r3, [r7, #20]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3718      	adds	r7, #24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	53454d41 	.word	0x53454d41
 800a3ac:	20000054 	.word	0x20000054
 800a3b0:	20000b14 	.word	0x20000b14
 800a3b4:	20000c5c 	.word	0x20000c5c

0800a3b8 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d102      	bne.n	800a3cc <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a3c6:	230c      	movs	r3, #12
 800a3c8:	60fb      	str	r3, [r7, #12]
 800a3ca:	e00b      	b.n	800a3e4 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a07      	ldr	r2, [pc, #28]	@ (800a3f0 <_txe_semaphore_put+0x38>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d002      	beq.n	800a3dc <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800a3d6:	230c      	movs	r3, #12
 800a3d8:	60fb      	str	r3, [r7, #12]
 800a3da:	e003      	b.n	800a3e4 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7fe fe93 	bl	8009108 <_tx_semaphore_put>
 800a3e2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	53454d41 	.word	0x53454d41

0800a3f4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b09a      	sub	sp, #104	@ 0x68
 800a3f8:	af06      	add	r7, sp, #24
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
 800a400:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a402:	2300      	movs	r3, #0
 800a404:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d102      	bne.n	800a412 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800a40c:	230e      	movs	r3, #14
 800a40e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a410:	e0bb      	b.n	800a58a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800a412:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a414:	2bb0      	cmp	r3, #176	@ 0xb0
 800a416:	d002      	beq.n	800a41e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800a418:	230e      	movs	r3, #14
 800a41a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a41c:	e0b5      	b.n	800a58a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a41e:	f3ef 8310 	mrs	r3, PRIMASK
 800a422:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800a424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800a426:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800a428:	b672      	cpsid	i
    return(int_posture);
 800a42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800a42c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800a42e:	4b64      	ldr	r3, [pc, #400]	@ (800a5c0 <_txe_thread_create+0x1cc>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	3301      	adds	r3, #1
 800a434:	4a62      	ldr	r2, [pc, #392]	@ (800a5c0 <_txe_thread_create+0x1cc>)
 800a436:	6013      	str	r3, [r2, #0]
 800a438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a43a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a43e:	f383 8810 	msr	PRIMASK, r3
}
 800a442:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800a444:	2300      	movs	r3, #0
 800a446:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800a448:	4b5e      	ldr	r3, [pc, #376]	@ (800a5c4 <_txe_thread_create+0x1d0>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800a44e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a450:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800a452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a454:	3b01      	subs	r3, #1
 800a456:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a458:	4413      	add	r3, r2
 800a45a:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800a45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800a460:	2300      	movs	r3, #0
 800a462:	647b      	str	r3, [r7, #68]	@ 0x44
 800a464:	e02b      	b.n	800a4be <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d101      	bne.n	800a472 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800a46e:	2301      	movs	r3, #1
 800a470:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800a472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a474:	2b01      	cmp	r3, #1
 800a476:	d028      	beq.n	800a4ca <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800a478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a47e:	429a      	cmp	r2, r3
 800a480:	d308      	bcc.n	800a494 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800a482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a488:	429a      	cmp	r2, r3
 800a48a:	d203      	bcs.n	800a494 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800a490:	2301      	movs	r3, #1
 800a492:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800a494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d308      	bcc.n	800a4b0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800a49e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d203      	bcs.n	800a4b0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800a4b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4b6:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800a4b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4be:	4b42      	ldr	r3, [pc, #264]	@ (800a5c8 <_txe_thread_create+0x1d4>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d3ce      	bcc.n	800a466 <_txe_thread_create+0x72>
 800a4c8:	e000      	b.n	800a4cc <_txe_thread_create+0xd8>
                break;
 800a4ca:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a4cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a4d0:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a4d2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a4d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a4d6:	b672      	cpsid	i
    return(int_posture);
 800a4d8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800a4da:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a4dc:	4b38      	ldr	r3, [pc, #224]	@ (800a5c0 <_txe_thread_create+0x1cc>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	4a37      	ldr	r2, [pc, #220]	@ (800a5c0 <_txe_thread_create+0x1cc>)
 800a4e4:	6013      	str	r3, [r2, #0]
 800a4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4e8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	f383 8810 	msr	PRIMASK, r3
}
 800a4f0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a4f2:	f7ff f85f 	bl	80095b4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d102      	bne.n	800a504 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800a4fe:	230e      	movs	r3, #14
 800a500:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a502:	e042      	b.n	800a58a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800a504:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a506:	2b00      	cmp	r3, #0
 800a508:	d102      	bne.n	800a510 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800a50a:	2303      	movs	r3, #3
 800a50c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a50e:	e03c      	b.n	800a58a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d102      	bne.n	800a51c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800a516:	2303      	movs	r3, #3
 800a518:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a51a:	e036      	b.n	800a58a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800a51c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a51e:	2bc7      	cmp	r3, #199	@ 0xc7
 800a520:	d802      	bhi.n	800a528 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800a522:	2305      	movs	r3, #5
 800a524:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a526:	e030      	b.n	800a58a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800a528:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a52a:	2b1f      	cmp	r3, #31
 800a52c:	d902      	bls.n	800a534 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800a52e:	230f      	movs	r3, #15
 800a530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a532:	e02a      	b.n	800a58a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800a534:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a536:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a538:	429a      	cmp	r2, r3
 800a53a:	d902      	bls.n	800a542 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800a53c:	2318      	movs	r3, #24
 800a53e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a540:	e023      	b.n	800a58a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800a542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a544:	2b01      	cmp	r3, #1
 800a546:	d902      	bls.n	800a54e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800a548:	2310      	movs	r3, #16
 800a54a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a54c:	e01d      	b.n	800a58a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800a54e:	4b1f      	ldr	r3, [pc, #124]	@ (800a5cc <_txe_thread_create+0x1d8>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800a554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a556:	4a1e      	ldr	r2, [pc, #120]	@ (800a5d0 <_txe_thread_create+0x1dc>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d101      	bne.n	800a560 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800a55c:	2313      	movs	r3, #19
 800a55e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a560:	f3ef 8305 	mrs	r3, IPSR
 800a564:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a566:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a568:	4b1a      	ldr	r3, [pc, #104]	@ (800a5d4 <_txe_thread_create+0x1e0>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00b      	beq.n	800a58a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a572:	f3ef 8305 	mrs	r3, IPSR
 800a576:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a578:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800a57a:	4b16      	ldr	r3, [pc, #88]	@ (800a5d4 <_txe_thread_create+0x1e0>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4313      	orrs	r3, r2
 800a580:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800a584:	d201      	bcs.n	800a58a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800a586:	2313      	movs	r3, #19
 800a588:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800a58a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d112      	bne.n	800a5b6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800a590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a592:	9305      	str	r3, [sp, #20]
 800a594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a596:	9304      	str	r3, [sp, #16]
 800a598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a59a:	9303      	str	r3, [sp, #12]
 800a59c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a59e:	9302      	str	r3, [sp, #8]
 800a5a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a5a2:	9301      	str	r3, [sp, #4]
 800a5a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	68b9      	ldr	r1, [r7, #8]
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f7fe fe02 	bl	80091b8 <_tx_thread_create>
 800a5b4:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800a5b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3750      	adds	r7, #80	@ 0x50
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20000bac 	.word	0x20000bac
 800a5c4:	20000b1c 	.word	0x20000b1c
 800a5c8:	20000b20 	.word	0x20000b20
 800a5cc:	20000b14 	.word	0x20000b14
 800a5d0:	20000c5c 	.word	0x20000c5c
 800a5d4:	20000054 	.word	0x20000054

0800a5d8 <memset>:
 800a5d8:	4402      	add	r2, r0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d100      	bne.n	800a5e2 <memset+0xa>
 800a5e0:	4770      	bx	lr
 800a5e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5e6:	e7f9      	b.n	800a5dc <memset+0x4>

0800a5e8 <__libc_init_array>:
 800a5e8:	b570      	push	{r4, r5, r6, lr}
 800a5ea:	4d0d      	ldr	r5, [pc, #52]	@ (800a620 <__libc_init_array+0x38>)
 800a5ec:	4c0d      	ldr	r4, [pc, #52]	@ (800a624 <__libc_init_array+0x3c>)
 800a5ee:	1b64      	subs	r4, r4, r5
 800a5f0:	10a4      	asrs	r4, r4, #2
 800a5f2:	2600      	movs	r6, #0
 800a5f4:	42a6      	cmp	r6, r4
 800a5f6:	d109      	bne.n	800a60c <__libc_init_array+0x24>
 800a5f8:	4d0b      	ldr	r5, [pc, #44]	@ (800a628 <__libc_init_array+0x40>)
 800a5fa:	4c0c      	ldr	r4, [pc, #48]	@ (800a62c <__libc_init_array+0x44>)
 800a5fc:	f000 f818 	bl	800a630 <_init>
 800a600:	1b64      	subs	r4, r4, r5
 800a602:	10a4      	asrs	r4, r4, #2
 800a604:	2600      	movs	r6, #0
 800a606:	42a6      	cmp	r6, r4
 800a608:	d105      	bne.n	800a616 <__libc_init_array+0x2e>
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
 800a60c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a610:	4798      	blx	r3
 800a612:	3601      	adds	r6, #1
 800a614:	e7ee      	b.n	800a5f4 <__libc_init_array+0xc>
 800a616:	f855 3b04 	ldr.w	r3, [r5], #4
 800a61a:	4798      	blx	r3
 800a61c:	3601      	adds	r6, #1
 800a61e:	e7f2      	b.n	800a606 <__libc_init_array+0x1e>
 800a620:	0800a714 	.word	0x0800a714
 800a624:	0800a714 	.word	0x0800a714
 800a628:	0800a714 	.word	0x0800a714
 800a62c:	0800a718 	.word	0x0800a718

0800a630 <_init>:
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a632:	bf00      	nop
 800a634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a636:	bc08      	pop	{r3}
 800a638:	469e      	mov	lr, r3
 800a63a:	4770      	bx	lr

0800a63c <_fini>:
 800a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63e:	bf00      	nop
 800a640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a642:	bc08      	pop	{r3}
 800a644:	469e      	mov	lr, r3
 800a646:	4770      	bx	lr
