
DAQ_DaughterBoards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000984c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08009a2c  08009a2c  0000aa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009af0  08009af0  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  08009af0  08009af0  0000aaf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009af8  08009af8  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009af8  08009af8  0000aaf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009afc  08009afc  0000aafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08009b00  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001068  20000010  08009b10  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001078  08009b10  0000b078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002db97  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007371  00000000  00000000  00038bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002188  00000000  00000000  0003ff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001918  00000000  00000000  000420d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031318  00000000  00000000  000439e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036a43  00000000  00000000  00074d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001248b2  00000000  00000000  000ab743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cfff5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000835c  00000000  00000000  001d0038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fd  00000000  00000000  001d8394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009a14 	.word	0x08009a14

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08009a14 	.word	0x08009a14

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	@ (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	@ (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	@ (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	@ (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	@ (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	20000a6c 	.word	0x20000a6c
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	0019f09f 	.word	0x0019f09f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	@ (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	@ (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20000b08 	.word	0x20000b08
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	20000a70 	.word	0x20000a70
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	20000a74 	.word	0x20000a74
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	20001074 	.word	0x20001074

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f008 fe0d 	bl	8009018 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f008 fd7a 	bl	8008efc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	@ (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	@ (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20000b14 	.word	0x20000b14
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	20001074 	.word	0x20001074
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20000b18 	.word	0x20000b18
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20000ba4 	.word	0x20000ba4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20000ba8 	.word	0x20000ba8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20000ba0 	.word	0x20000ba0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	20000b9c 	.word	0x20000b9c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20000b08 	.word	0x20000b08
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	20000a70 	.word	0x20000a70
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	20000a74 	.word	0x20000a74
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <__aeabi_uldivmod>:
 8000458:	b953      	cbnz	r3, 8000470 <__aeabi_uldivmod+0x18>
 800045a:	b94a      	cbnz	r2, 8000470 <__aeabi_uldivmod+0x18>
 800045c:	2900      	cmp	r1, #0
 800045e:	bf08      	it	eq
 8000460:	2800      	cmpeq	r0, #0
 8000462:	bf1c      	itt	ne
 8000464:	f04f 31ff 	movne.w	r1, #4294967295
 8000468:	f04f 30ff 	movne.w	r0, #4294967295
 800046c:	f000 b96a 	b.w	8000744 <__aeabi_idiv0>
 8000470:	f1ad 0c08 	sub.w	ip, sp, #8
 8000474:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000478:	f000 f806 	bl	8000488 <__udivmoddi4>
 800047c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000484:	b004      	add	sp, #16
 8000486:	4770      	bx	lr

08000488 <__udivmoddi4>:
 8000488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800048c:	9d08      	ldr	r5, [sp, #32]
 800048e:	460c      	mov	r4, r1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d14e      	bne.n	8000532 <__udivmoddi4+0xaa>
 8000494:	4694      	mov	ip, r2
 8000496:	458c      	cmp	ip, r1
 8000498:	4686      	mov	lr, r0
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	d962      	bls.n	8000566 <__udivmoddi4+0xde>
 80004a0:	b14a      	cbz	r2, 80004b6 <__udivmoddi4+0x2e>
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	4091      	lsls	r1, r2
 80004a8:	fa20 f303 	lsr.w	r3, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	4319      	orrs	r1, r3
 80004b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ba:	fa1f f68c 	uxth.w	r6, ip
 80004be:	fbb1 f4f7 	udiv	r4, r1, r7
 80004c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004c6:	fb07 1114 	mls	r1, r7, r4, r1
 80004ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ce:	fb04 f106 	mul.w	r1, r4, r6
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d90a      	bls.n	80004ec <__udivmoddi4+0x64>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f104 30ff 	add.w	r0, r4, #4294967295
 80004de:	f080 8112 	bcs.w	8000706 <__udivmoddi4+0x27e>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 810f 	bls.w	8000706 <__udivmoddi4+0x27e>
 80004e8:	3c02      	subs	r4, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a59      	subs	r1, r3, r1
 80004ee:	fa1f f38e 	uxth.w	r3, lr
 80004f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f6:	fb07 1110 	mls	r1, r7, r0, r1
 80004fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fe:	fb00 f606 	mul.w	r6, r0, r6
 8000502:	429e      	cmp	r6, r3
 8000504:	d90a      	bls.n	800051c <__udivmoddi4+0x94>
 8000506:	eb1c 0303 	adds.w	r3, ip, r3
 800050a:	f100 31ff 	add.w	r1, r0, #4294967295
 800050e:	f080 80fc 	bcs.w	800070a <__udivmoddi4+0x282>
 8000512:	429e      	cmp	r6, r3
 8000514:	f240 80f9 	bls.w	800070a <__udivmoddi4+0x282>
 8000518:	4463      	add	r3, ip
 800051a:	3802      	subs	r0, #2
 800051c:	1b9b      	subs	r3, r3, r6
 800051e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000522:	2100      	movs	r1, #0
 8000524:	b11d      	cbz	r5, 800052e <__udivmoddi4+0xa6>
 8000526:	40d3      	lsrs	r3, r2
 8000528:	2200      	movs	r2, #0
 800052a:	e9c5 3200 	strd	r3, r2, [r5]
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	428b      	cmp	r3, r1
 8000534:	d905      	bls.n	8000542 <__udivmoddi4+0xba>
 8000536:	b10d      	cbz	r5, 800053c <__udivmoddi4+0xb4>
 8000538:	e9c5 0100 	strd	r0, r1, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	4608      	mov	r0, r1
 8000540:	e7f5      	b.n	800052e <__udivmoddi4+0xa6>
 8000542:	fab3 f183 	clz	r1, r3
 8000546:	2900      	cmp	r1, #0
 8000548:	d146      	bne.n	80005d8 <__udivmoddi4+0x150>
 800054a:	42a3      	cmp	r3, r4
 800054c:	d302      	bcc.n	8000554 <__udivmoddi4+0xcc>
 800054e:	4290      	cmp	r0, r2
 8000550:	f0c0 80f0 	bcc.w	8000734 <__udivmoddi4+0x2ac>
 8000554:	1a86      	subs	r6, r0, r2
 8000556:	eb64 0303 	sbc.w	r3, r4, r3
 800055a:	2001      	movs	r0, #1
 800055c:	2d00      	cmp	r5, #0
 800055e:	d0e6      	beq.n	800052e <__udivmoddi4+0xa6>
 8000560:	e9c5 6300 	strd	r6, r3, [r5]
 8000564:	e7e3      	b.n	800052e <__udivmoddi4+0xa6>
 8000566:	2a00      	cmp	r2, #0
 8000568:	f040 8090 	bne.w	800068c <__udivmoddi4+0x204>
 800056c:	eba1 040c 	sub.w	r4, r1, ip
 8000570:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000574:	fa1f f78c 	uxth.w	r7, ip
 8000578:	2101      	movs	r1, #1
 800057a:	fbb4 f6f8 	udiv	r6, r4, r8
 800057e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000582:	fb08 4416 	mls	r4, r8, r6, r4
 8000586:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800058a:	fb07 f006 	mul.w	r0, r7, r6
 800058e:	4298      	cmp	r0, r3
 8000590:	d908      	bls.n	80005a4 <__udivmoddi4+0x11c>
 8000592:	eb1c 0303 	adds.w	r3, ip, r3
 8000596:	f106 34ff 	add.w	r4, r6, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x11a>
 800059c:	4298      	cmp	r0, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2b4>
 80005a2:	4626      	mov	r6, r4
 80005a4:	1a1c      	subs	r4, r3, r0
 80005a6:	fa1f f38e 	uxth.w	r3, lr
 80005aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80005ae:	fb08 4410 	mls	r4, r8, r0, r4
 80005b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005b6:	fb00 f707 	mul.w	r7, r0, r7
 80005ba:	429f      	cmp	r7, r3
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x148>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c6:	d202      	bcs.n	80005ce <__udivmoddi4+0x146>
 80005c8:	429f      	cmp	r7, r3
 80005ca:	f200 80b0 	bhi.w	800072e <__udivmoddi4+0x2a6>
 80005ce:	4620      	mov	r0, r4
 80005d0:	1bdb      	subs	r3, r3, r7
 80005d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005d6:	e7a5      	b.n	8000524 <__udivmoddi4+0x9c>
 80005d8:	f1c1 0620 	rsb	r6, r1, #32
 80005dc:	408b      	lsls	r3, r1
 80005de:	fa22 f706 	lsr.w	r7, r2, r6
 80005e2:	431f      	orrs	r7, r3
 80005e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e8:	fa04 f301 	lsl.w	r3, r4, r1
 80005ec:	ea43 030c 	orr.w	r3, r3, ip
 80005f0:	40f4      	lsrs	r4, r6
 80005f2:	fa00 f801 	lsl.w	r8, r0, r1
 80005f6:	0c38      	lsrs	r0, r7, #16
 80005f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000600:	fa1f fc87 	uxth.w	ip, r7
 8000604:	fb00 441e 	mls	r4, r0, lr, r4
 8000608:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800060c:	fb0e f90c 	mul.w	r9, lr, ip
 8000610:	45a1      	cmp	r9, r4
 8000612:	fa02 f201 	lsl.w	r2, r2, r1
 8000616:	d90a      	bls.n	800062e <__udivmoddi4+0x1a6>
 8000618:	193c      	adds	r4, r7, r4
 800061a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800061e:	f080 8084 	bcs.w	800072a <__udivmoddi4+0x2a2>
 8000622:	45a1      	cmp	r9, r4
 8000624:	f240 8081 	bls.w	800072a <__udivmoddi4+0x2a2>
 8000628:	f1ae 0e02 	sub.w	lr, lr, #2
 800062c:	443c      	add	r4, r7
 800062e:	eba4 0409 	sub.w	r4, r4, r9
 8000632:	fa1f f983 	uxth.w	r9, r3
 8000636:	fbb4 f3f0 	udiv	r3, r4, r0
 800063a:	fb00 4413 	mls	r4, r0, r3, r4
 800063e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000642:	fb03 fc0c 	mul.w	ip, r3, ip
 8000646:	45a4      	cmp	ip, r4
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0x1d2>
 800064a:	193c      	adds	r4, r7, r4
 800064c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000650:	d267      	bcs.n	8000722 <__udivmoddi4+0x29a>
 8000652:	45a4      	cmp	ip, r4
 8000654:	d965      	bls.n	8000722 <__udivmoddi4+0x29a>
 8000656:	3b02      	subs	r3, #2
 8000658:	443c      	add	r4, r7
 800065a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800065e:	fba0 9302 	umull	r9, r3, r0, r2
 8000662:	eba4 040c 	sub.w	r4, r4, ip
 8000666:	429c      	cmp	r4, r3
 8000668:	46ce      	mov	lr, r9
 800066a:	469c      	mov	ip, r3
 800066c:	d351      	bcc.n	8000712 <__udivmoddi4+0x28a>
 800066e:	d04e      	beq.n	800070e <__udivmoddi4+0x286>
 8000670:	b155      	cbz	r5, 8000688 <__udivmoddi4+0x200>
 8000672:	ebb8 030e 	subs.w	r3, r8, lr
 8000676:	eb64 040c 	sbc.w	r4, r4, ip
 800067a:	fa04 f606 	lsl.w	r6, r4, r6
 800067e:	40cb      	lsrs	r3, r1
 8000680:	431e      	orrs	r6, r3
 8000682:	40cc      	lsrs	r4, r1
 8000684:	e9c5 6400 	strd	r6, r4, [r5]
 8000688:	2100      	movs	r1, #0
 800068a:	e750      	b.n	800052e <__udivmoddi4+0xa6>
 800068c:	f1c2 0320 	rsb	r3, r2, #32
 8000690:	fa20 f103 	lsr.w	r1, r0, r3
 8000694:	fa0c fc02 	lsl.w	ip, ip, r2
 8000698:	fa24 f303 	lsr.w	r3, r4, r3
 800069c:	4094      	lsls	r4, r2
 800069e:	430c      	orrs	r4, r1
 80006a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a8:	fa1f f78c 	uxth.w	r7, ip
 80006ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80006b0:	fb08 3110 	mls	r1, r8, r0, r3
 80006b4:	0c23      	lsrs	r3, r4, #16
 80006b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ba:	fb00 f107 	mul.w	r1, r0, r7
 80006be:	4299      	cmp	r1, r3
 80006c0:	d908      	bls.n	80006d4 <__udivmoddi4+0x24c>
 80006c2:	eb1c 0303 	adds.w	r3, ip, r3
 80006c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80006ca:	d22c      	bcs.n	8000726 <__udivmoddi4+0x29e>
 80006cc:	4299      	cmp	r1, r3
 80006ce:	d92a      	bls.n	8000726 <__udivmoddi4+0x29e>
 80006d0:	3802      	subs	r0, #2
 80006d2:	4463      	add	r3, ip
 80006d4:	1a5b      	subs	r3, r3, r1
 80006d6:	b2a4      	uxth	r4, r4
 80006d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80006dc:	fb08 3311 	mls	r3, r8, r1, r3
 80006e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e4:	fb01 f307 	mul.w	r3, r1, r7
 80006e8:	42a3      	cmp	r3, r4
 80006ea:	d908      	bls.n	80006fe <__udivmoddi4+0x276>
 80006ec:	eb1c 0404 	adds.w	r4, ip, r4
 80006f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80006f4:	d213      	bcs.n	800071e <__udivmoddi4+0x296>
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	d911      	bls.n	800071e <__udivmoddi4+0x296>
 80006fa:	3902      	subs	r1, #2
 80006fc:	4464      	add	r4, ip
 80006fe:	1ae4      	subs	r4, r4, r3
 8000700:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000704:	e739      	b.n	800057a <__udivmoddi4+0xf2>
 8000706:	4604      	mov	r4, r0
 8000708:	e6f0      	b.n	80004ec <__udivmoddi4+0x64>
 800070a:	4608      	mov	r0, r1
 800070c:	e706      	b.n	800051c <__udivmoddi4+0x94>
 800070e:	45c8      	cmp	r8, r9
 8000710:	d2ae      	bcs.n	8000670 <__udivmoddi4+0x1e8>
 8000712:	ebb9 0e02 	subs.w	lr, r9, r2
 8000716:	eb63 0c07 	sbc.w	ip, r3, r7
 800071a:	3801      	subs	r0, #1
 800071c:	e7a8      	b.n	8000670 <__udivmoddi4+0x1e8>
 800071e:	4631      	mov	r1, r6
 8000720:	e7ed      	b.n	80006fe <__udivmoddi4+0x276>
 8000722:	4603      	mov	r3, r0
 8000724:	e799      	b.n	800065a <__udivmoddi4+0x1d2>
 8000726:	4630      	mov	r0, r6
 8000728:	e7d4      	b.n	80006d4 <__udivmoddi4+0x24c>
 800072a:	46d6      	mov	lr, sl
 800072c:	e77f      	b.n	800062e <__udivmoddi4+0x1a6>
 800072e:	4463      	add	r3, ip
 8000730:	3802      	subs	r0, #2
 8000732:	e74d      	b.n	80005d0 <__udivmoddi4+0x148>
 8000734:	4606      	mov	r6, r0
 8000736:	4623      	mov	r3, r4
 8000738:	4608      	mov	r0, r1
 800073a:	e70f      	b.n	800055c <__udivmoddi4+0xd4>
 800073c:	3e02      	subs	r6, #2
 800073e:	4463      	add	r3, ip
 8000740:	e730      	b.n	80005a4 <__udivmoddi4+0x11c>
 8000742:	bf00      	nop

08000744 <__aeabi_idiv0>:
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000754:	2334      	movs	r3, #52	@ 0x34
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800075c:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <tx_application_define+0x4c>)
 800075e:	490e      	ldr	r1, [pc, #56]	@ (8000798 <tx_application_define+0x50>)
 8000760:	480e      	ldr	r0, [pc, #56]	@ (800079c <tx_application_define+0x54>)
 8000762:	f008 ff03 	bl	800956c <_txe_byte_pool_create>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10e      	bne.n	800078a <tx_application_define+0x42>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800076c:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <tx_application_define+0x54>)
 800076e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f000 fa4d 	bl	8000c10 <App_ThreadX_Init>
 8000776:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <tx_application_define+0x36>
      }
      /* USER CODE END  App_ThreadX_Init_Error */
    }

    /* USER CODE BEGIN  App_ThreadX_Init_Success */
    status = ThreadX_Init(memory_ptr);
 8000782:	68b8      	ldr	r0, [r7, #8]
 8000784:	f001 fa3e 	bl	8001c04 <ThreadX_Init>
 8000788:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000002c 	.word	0x2000002c
 8000798:	08009a2c 	.word	0x08009a2c
 800079c:	2000042c 	.word	0x2000042c

080007a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc4;
DMA_HandleTypeDef hdma_adc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	@ 0x30
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f009 f8ff 	bl	80099bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007be:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f2:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_ADC1_Init+0xe8>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000828:	4817      	ldr	r0, [pc, #92]	@ (8000888 <MX_ADC1_Init+0xe8>)
 800082a:	f001 fd13 	bl	8002254 <HAL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000834:	f000 fec2 	bl	80015bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800083c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000844:	f002 fdd8 	bl	80033f8 <HAL_ADCEx_MultiModeConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800084e:	f000 feb5 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_ADC1_Init+0xec>)
 8000854:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000856:	2306      	movs	r3, #6
 8000858:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085e:	237f      	movs	r3, #127	@ 0x7f
 8000860:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000862:	2304      	movs	r3, #4
 8000864:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_ADC1_Init+0xe8>)
 8000870:	f002 f92a 	bl	8002ac8 <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800087a:	f000 fe9f 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	@ 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000460 	.word	0x20000460
 800088c:	10c00010 	.word	0x10c00010

08000890 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2220      	movs	r2, #32
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f009 f88d 	bl	80099bc <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008a2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008a4:	4a5e      	ldr	r2, [pc, #376]	@ (8000a20 <MX_ADC4_Init+0x190>)
 80008a6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a8:	4b5c      	ldr	r3, [pc, #368]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008ae:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008b0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b6:	4b59      	ldr	r3, [pc, #356]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80008bc:	4b57      	ldr	r3, [pc, #348]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008c2:	4b56      	ldr	r3, [pc, #344]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008c8:	4b54      	ldr	r3, [pc, #336]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80008ce:	4b53      	ldr	r3, [pc, #332]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 80008d4:	4b51      	ldr	r3, [pc, #324]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 8;
 80008da:	4b50      	ldr	r3, [pc, #320]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008dc:	2208      	movs	r2, #8
 80008de:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80008e0:	4b4e      	ldr	r3, [pc, #312]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e8:	4b4c      	ldr	r3, [pc, #304]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ee:	4b4b      	ldr	r3, [pc, #300]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80008f4:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80008fc:	4b47      	ldr	r3, [pc, #284]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80008fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000902:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000904:	4b45      	ldr	r3, [pc, #276]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000906:	2200      	movs	r2, #0
 8000908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800090c:	4843      	ldr	r0, [pc, #268]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800090e:	f001 fca1 	bl	8002254 <HAL_ADC_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 fe50 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800091c:	4b41      	ldr	r3, [pc, #260]	@ (8000a24 <MX_ADC4_Init+0x194>)
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000920:	2306      	movs	r3, #6
 8000922:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000924:	2300      	movs	r3, #0
 8000926:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000928:	237f      	movs	r3, #127	@ 0x7f
 800092a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092c:	2304      	movs	r3, #4
 800092e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4838      	ldr	r0, [pc, #224]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800093a:	f002 f8c5 	bl	8002ac8 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8000944:	f000 fe3a 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000948:	4b37      	ldr	r3, [pc, #220]	@ (8000a28 <MX_ADC4_Init+0x198>)
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800094c:	230c      	movs	r3, #12
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4831      	ldr	r0, [pc, #196]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000956:	f002 f8b7 	bl	8002ac8 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC4_Init+0xd4>
  {
    Error_Handler();
 8000960:	f000 fe2c 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000964:	4b31      	ldr	r3, [pc, #196]	@ (8000a2c <MX_ADC4_Init+0x19c>)
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000968:	2312      	movs	r3, #18
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	482a      	ldr	r0, [pc, #168]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000972:	f002 f8a9 	bl	8002ac8 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC4_Init+0xf0>
  {
    Error_Handler();
 800097c:	f000 fe1e 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_ADC4_Init+0x1a0>)
 8000982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000984:	2318      	movs	r3, #24
 8000986:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	4823      	ldr	r0, [pc, #140]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 800098e:	f002 f89b 	bl	8002ac8 <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC4_Init+0x10c>
  {
    Error_Handler();
 8000998:	f000 fe10 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800099c:	4b25      	ldr	r3, [pc, #148]	@ (8000a34 <MX_ADC4_Init+0x1a4>)
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	481c      	ldr	r0, [pc, #112]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009ac:	f002 f88c 	bl	8002ac8 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC4_Init+0x12a>
  {
    Error_Handler();
 80009b6:	f000 fe01 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_ADC4_Init+0x1a8>)
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009be:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009ca:	f002 f87d 	bl	8002ac8 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC4_Init+0x148>
  {
    Error_Handler();
 80009d4:	f000 fdf2 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_ADC4_Init+0x1ac>)
 80009da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009dc:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80009e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 80009e8:	f002 f86e 	bl	8002ac8 <HAL_ADC_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC4_Init+0x166>
  {
    Error_Handler();
 80009f2:	f000 fde3 	bl	80015bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_ADC4_Init+0x1b0>)
 80009f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009fa:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80009fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_ADC4_Init+0x18c>)
 8000a06:	f002 f85f 	bl	8002ac8 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC4_Init+0x184>
  {
    Error_Handler();
 8000a10:	f000 fdd4 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200004cc 	.word	0x200004cc
 8000a20:	50000500 	.word	0x50000500
 8000a24:	14f00020 	.word	0x14f00020
 8000a28:	32601000 	.word	0x32601000
 8000a2c:	2a000400 	.word	0x2a000400
 8000a30:	2e300800 	.word	0x2e300800
 8000a34:	36902000 	.word	0x36902000
 8000a38:	1d500080 	.word	0x1d500080
 8000a3c:	21800100 	.word	0x21800100
 8000a40:	25b00200 	.word	0x25b00200

08000a44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0a2      	sub	sp, #136	@ 0x88
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	f107 0320 	add.w	r3, r7, #32
 8000a60:	2254      	movs	r2, #84	@ 0x54
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f008 ffa9 	bl	80099bc <memset>
  if(adcHandle->Instance==ADC1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a72:	d135      	bne.n	8000ae0 <HAL_ADC_MspInit+0x9c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a7a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a7e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	4618      	mov	r0, r3
 8000a86:	f005 faa5 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a90:	f000 fd94 	bl	80015bc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a94:	4b58      	ldr	r3, [pc, #352]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	4a57      	ldr	r2, [pc, #348]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000a9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa0:	4b55      	ldr	r3, [pc, #340]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b52      	ldr	r3, [pc, #328]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab0:	4a51      	ldr	r2, [pc, #324]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab8:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = FIRMWARECHECK_Pin;
 8000ac4:	2308      	movs	r3, #8
 8000ac6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(FIRMWARECHECK_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f003 fb83 	bl	80041e4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000ade:	e086      	b.n	8000bee <HAL_ADC_MspInit+0x1aa>
  else if(adcHandle->Instance==ADC4)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a45      	ldr	r2, [pc, #276]	@ (8000bfc <HAL_ADC_MspInit+0x1b8>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	f040 8081 	bne.w	8000bee <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000af2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000af6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 fa69 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_ADC_MspInit+0xc8>
      Error_Handler();
 8000b08:	f000 fd58 	bl	80015bc <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	4a39      	ldr	r2, [pc, #228]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b18:	4b37      	ldr	r3, [pc, #220]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b28:	4a33      	ldr	r2, [pc, #204]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b40:	4a2d      	ldr	r2, [pc, #180]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b48:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <HAL_ADC_MspInit+0x1b4>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ANALOG_1_Pin;
 8000b54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b58:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(ANALOG_1_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b66:	4619      	mov	r1, r3
 8000b68:	4825      	ldr	r0, [pc, #148]	@ (8000c00 <HAL_ADC_MspInit+0x1bc>)
 8000b6a:	f003 fb3b 	bl	80041e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ANALOG_2_Pin|ANALOG_5_Pin|ANALOG_6_Pin|ANALOG_7_Pin
 8000b6e:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 8000b72:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b74:	2303      	movs	r3, #3
 8000b76:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b80:	4619      	mov	r1, r3
 8000b82:	4820      	ldr	r0, [pc, #128]	@ (8000c04 <HAL_ADC_MspInit+0x1c0>)
 8000b84:	f003 fb2e 	bl	80041e4 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel3;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b8a:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <HAL_ADC_MspInit+0x1c8>)
 8000b8c:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b90:	2226      	movs	r2, #38	@ 0x26
 8000b92:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000ba2:	2280      	movs	r2, #128	@ 0x80
 8000ba4:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bac:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bae:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bb4:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bb8:	2220      	movs	r2, #32
 8000bba:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000bc2:	4811      	ldr	r0, [pc, #68]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bc4:	f002 fef2 	bl	80039ac <HAL_DMA_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_ADC_MspInit+0x18e>
      Error_Handler();
 8000bce:	f000 fcf5 	bl	80015bc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c08 <HAL_ADC_MspInit+0x1c4>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC4_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	203d      	movs	r0, #61	@ 0x3d
 8000be4:	f002 fdc8 	bl	8003778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC4_IRQn);
 8000be8:	203d      	movs	r0, #61	@ 0x3d
 8000bea:	f002 fddf 	bl	80037ac <HAL_NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3788      	adds	r7, #136	@ 0x88
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000500 	.word	0x50000500
 8000c00:	48000400 	.word	0x48000400
 8000c04:	48000c00 	.word	0x48000c00
 8000c08:	20000538 	.word	0x20000538
 8000c0c:	40020030 	.word	0x40020030

08000c10 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
//
//  tx_semaphore_create(&analogSemaphore, "analogSemaphore", 0);
//  tx_semaphore_create(&aeroSemaphore, "aeroSemaphore", 0);
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000c2e:	f007 fc99 	bl	8008564 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <txMainThreadEntry>:

/* USER CODE BEGIN 1 */
void txMainThreadEntry(ULONG threadInput){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

    HAL_FDCAN_Start(&hfdcan1);
 8000c40:	4806      	ldr	r0, [pc, #24]	@ (8000c5c <txMainThreadEntry+0x24>)
 8000c42:	f003 fa3b 	bl	80040bc <HAL_FDCAN_Start>
	while(1){
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8000c46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <txMainThreadEntry+0x28>)
 8000c4c:	f003 fc64 	bl	8004518 <HAL_GPIO_TogglePin>
	    tx_thread_sleep(1000);
 8000c50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c54:	f007 fe80 	bl	8008958 <_tx_thread_sleep>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8000c58:	bf00      	nop
 8000c5a:	e7f4      	b.n	8000c46 <txMainThreadEntry+0xe>
 8000c5c:	200005bc 	.word	0x200005bc
 8000c60:	48000800 	.word	0x48000800

08000c64 <txAnalogThreadEntry>:
	}
}

void txAnalogThreadEntry(ULONG threadInput){
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
//    SetDividers(voltageDividerStates);
    while(1){
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <txAnalogThreadEntry+0x8>

08000c70 <txAeroThreadEntry>:
//
//        tx_thread_sleep(2);
    }
}

void txAeroThreadEntry(ULONG threadInput){
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

    while(1){
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <txAeroThreadEntry+0x8>

08000c7c <txCAN500HZThreadEntry>:
//        SetChannel(1);

    }
}

void txCAN500HZThreadEntry(ULONG threadInput){
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

    while(1){
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <txCAN500HZThreadEntry+0x8>

08000c88 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc8 <MX_CRC_Init+0x40>)
 8000c90:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <MX_CRC_Init+0x3c>)
 8000cb2:	f002 fd89 	bl	80037c8 <HAL_CRC_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000cbc:	f000 fc7e 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000598 	.word	0x20000598
 8000cc8:	40023000 	.word	0x40023000

08000ccc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <HAL_CRC_MspInit+0x38>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d10b      	bne.n	8000cf6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_CRC_MspInit+0x3c>)
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce2:	4a09      	ldr	r2, [pc, #36]	@ (8000d08 <HAL_CRC_MspInit+0x3c>)
 8000ce4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ce8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <HAL_CRC_MspInit+0x3c>)
 8000cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023000 	.word	0x40023000
 8000d08:	40021000 	.word	0x40021000

08000d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_DMA_Init+0x70>)
 8000d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d16:	4a19      	ldr	r2, [pc, #100]	@ (8000d7c <MX_DMA_Init+0x70>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d1e:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <MX_DMA_Init+0x70>)
 8000d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <MX_DMA_Init+0x70>)
 8000d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d2e:	4a13      	ldr	r2, [pc, #76]	@ (8000d7c <MX_DMA_Init+0x70>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_DMA_Init+0x70>)
 8000d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	200b      	movs	r0, #11
 8000d48:	f002 fd16 	bl	8003778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d4c:	200b      	movs	r0, #11
 8000d4e:	f002 fd2d 	bl	80037ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	200c      	movs	r0, #12
 8000d58:	f002 fd0e 	bl	8003778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d5c:	200c      	movs	r0, #12
 8000d5e:	f002 fd25 	bl	80037ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	200d      	movs	r0, #13
 8000d68:	f002 fd06 	bl	8003778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d6c:	200d      	movs	r0, #13
 8000d6e:	f002 fd1d 	bl	80037ac <HAL_NVIC_EnableIRQ>

}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000d86:	4a20      	ldr	r2, [pc, #128]	@ (8000e08 <MX_FDCAN1_Init+0x88>)
 8000d88:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000da2:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000da8:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000db0:	2210      	movs	r2, #16
 8000db2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000dba:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000de4:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <MX_FDCAN1_Init+0x84>)
 8000df2:	f003 f809 	bl	8003e08 <HAL_FDCAN_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000dfc:	f000 fbde 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200005bc 	.word	0x200005bc
 8000e08:	40006400 	.word	0x40006400

08000e0c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b09e      	sub	sp, #120	@ 0x78
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	2254      	movs	r2, #84	@ 0x54
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f008 fdc5 	bl	80099bc <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a20      	ldr	r2, [pc, #128]	@ (8000eb8 <HAL_FDCAN_MspInit+0xac>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d139      	bne.n	8000eb0 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e40:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000e42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e46:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f005 f8c1 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000e58:	f000 fbb0 	bl	80015bc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e5c:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <HAL_FDCAN_MspInit+0xb0>)
 8000e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e60:	4a16      	ldr	r2, [pc, #88]	@ (8000ebc <HAL_FDCAN_MspInit+0xb0>)
 8000e62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <HAL_FDCAN_MspInit+0xb0>)
 8000e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <HAL_FDCAN_MspInit+0xb0>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e78:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <HAL_FDCAN_MspInit+0xb0>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e80:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <HAL_FDCAN_MspInit+0xb0>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e8c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e90:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e9e:	2309      	movs	r3, #9
 8000ea0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eac:	f003 f99a 	bl	80041e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3778      	adds	r7, #120	@ 0x78
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40006400 	.word	0x40006400
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2[4];
uint32_t difference[4];
double frequency[4];
uint8_t is_first_captured[4];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    uint8_t channel = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
    uint8_t hal_channel = 0u;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73bb      	strb	r3, [r7, #14]

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7f1b      	ldrb	r3, [r3, #28]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d104      	bne.n	8000ee2 <HAL_TIM_IC_CaptureCallback+0x22>
        channel = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73bb      	strb	r3, [r7, #14]
 8000ee0:	e019      	b.n	8000f16 <HAL_TIM_IC_CaptureCallback+0x56>
    } else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7f1b      	ldrb	r3, [r3, #28]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d104      	bne.n	8000ef4 <HAL_TIM_IC_CaptureCallback+0x34>
        channel = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_2;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	73bb      	strb	r3, [r7, #14]
 8000ef2:	e010      	b.n	8000f16 <HAL_TIM_IC_CaptureCallback+0x56>
    } else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7f1b      	ldrb	r3, [r3, #28]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d104      	bne.n	8000f06 <HAL_TIM_IC_CaptureCallback+0x46>
        channel = 2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_3;
 8000f00:	2308      	movs	r3, #8
 8000f02:	73bb      	strb	r3, [r7, #14]
 8000f04:	e007      	b.n	8000f16 <HAL_TIM_IC_CaptureCallback+0x56>
    } else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7f1b      	ldrb	r3, [r3, #28]
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d103      	bne.n	8000f16 <HAL_TIM_IC_CaptureCallback+0x56>
        channel = 3;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	73fb      	strb	r3, [r7, #15]
        hal_channel = TIM_CHANNEL_4;
 8000f12:	230c      	movs	r3, #12
 8000f14:	73bb      	strb	r3, [r7, #14]
    }

    if (is_first_captured[channel] == 0) {  // check if first rising edge to begin capture
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	4a2c      	ldr	r2, [pc, #176]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000f1a:	5cd3      	ldrb	r3, [r2, r3]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10e      	bne.n	8000f3e <HAL_TIM_IC_CaptureCallback+0x7e>
        IC_Val1[channel] = HAL_TIM_ReadCapturedValue(htim, hal_channel);
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	7bfc      	ldrb	r4, [r7, #15]
 8000f24:	4619      	mov	r1, r3
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f005 fe68 	bl	8006bfc <HAL_TIM_ReadCapturedValue>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a28      	ldr	r2, [pc, #160]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f30:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        is_first_captured[channel] = 1; // set flag to indicate next value will be second rising edge
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	4a25      	ldr	r2, [pc, #148]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	54d1      	strb	r1, [r2, r3]
//        float refClock = TIMCLOCK/(PRESCALAR);
//        frequency[channel] = refClock / difference[channel];
        is_first_captured[channel] = 0;
    }

}
 8000f3c:	e042      	b.n	8000fc4 <HAL_TIM_IC_CaptureCallback+0x104>
    } else if (is_first_captured[channel] == 1) {   // second rising edge
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4a22      	ldr	r2, [pc, #136]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000f42:	5cd3      	ldrb	r3, [r2, r3]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d13d      	bne.n	8000fc4 <HAL_TIM_IC_CaptureCallback+0x104>
        IC_Val2[channel] = HAL_TIM_ReadCapturedValue(htim, hal_channel);
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	7bfc      	ldrb	r4, [r7, #15]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f005 fe54 	bl	8006bfc <HAL_TIM_ReadCapturedValue>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f58:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        if (IC_Val2[channel] > IC_Val1[channel]) {  // first capture before second
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	491a      	ldr	r1, [pc, #104]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d90d      	bls.n	8000f8c <HAL_TIM_IC_CaptureCallback+0xcc>
            difference[channel] = IC_Val2[channel] - IC_Val1[channel];
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	4a18      	ldr	r2, [pc, #96]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	4a15      	ldr	r2, [pc, #84]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	1a8a      	subs	r2, r1, r2
 8000f84:	4914      	ldr	r1, [pc, #80]	@ (8000fd8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000f8a:	e017      	b.n	8000fbc <HAL_TIM_IC_CaptureCallback+0xfc>
        } else if (IC_Val2[channel] < IC_Val1[channel]) {   // first capture after second robust check
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	4a11      	ldr	r2, [pc, #68]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	490e      	ldr	r1, [pc, #56]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d20d      	bcs.n	8000fbc <HAL_TIM_IC_CaptureCallback+0xfc>
            difference[channel] = ((100 - IC_Val1[channel]) + IC_Val2[channel]) + 1;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000fa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	4909      	ldr	r1, [pc, #36]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000fac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fb0:	1ad2      	subs	r2, r2, r3
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	3265      	adds	r2, #101	@ 0x65
 8000fb6:	4908      	ldr	r1, [pc, #32]	@ (8000fd8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        is_first_captured[channel] = 0;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	4a03      	ldr	r2, [pc, #12]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	54d1      	strb	r1, [r2, r3]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	20000650 	.word	0x20000650
 8000fd0:	20000620 	.word	0x20000620
 8000fd4:	20000630 	.word	0x20000630
 8000fd8:	20000640 	.word	0x20000640

08000fdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	@ 0x30
 8000fe0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8001160 <MX_GPIO_Init+0x184>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	4a5a      	ldr	r2, [pc, #360]	@ (8001160 <MX_GPIO_Init+0x184>)
 8000ff8:	f043 0320 	orr.w	r3, r3, #32
 8000ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffe:	4b58      	ldr	r3, [pc, #352]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	f003 0320 	and.w	r3, r3, #32
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	4b55      	ldr	r3, [pc, #340]	@ (8001160 <MX_GPIO_Init+0x184>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	4a54      	ldr	r2, [pc, #336]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001016:	4b52      	ldr	r3, [pc, #328]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b4f      	ldr	r3, [pc, #316]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	4a4e      	ldr	r2, [pc, #312]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800102e:	4b4c      	ldr	r3, [pc, #304]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b49      	ldr	r3, [pc, #292]	@ (8001160 <MX_GPIO_Init+0x184>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	4a48      	ldr	r2, [pc, #288]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001046:	4b46      	ldr	r3, [pc, #280]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001052:	4b43      	ldr	r3, [pc, #268]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	4a42      	ldr	r2, [pc, #264]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001058:	f043 0310 	orr.w	r3, r3, #16
 800105c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105e:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	4b3d      	ldr	r3, [pc, #244]	@ (8001160 <MX_GPIO_Init+0x184>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	4a3c      	ldr	r2, [pc, #240]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001076:	4b3a      	ldr	r3, [pc, #232]	@ (8001160 <MX_GPIO_Init+0x184>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 8001082:	2200      	movs	r2, #0
 8001084:	f641 7130 	movw	r1, #7984	@ 0x1f30
 8001088:	4836      	ldr	r0, [pc, #216]	@ (8001164 <MX_GPIO_Init+0x188>)
 800108a:	f003 fa2d 	bl	80044e8 <HAL_GPIO_WritePin>
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRDY1_Pin|RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	f246 0103 	movw	r1, #24579	@ 0x6003
 8001094:	4834      	ldr	r0, [pc, #208]	@ (8001168 <MX_GPIO_Init+0x18c>)
 8001096:	f003 fa27 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STARTSYNC_2_Pin|CS2_Pin|DRDY2_Pin|RESET2_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 80010a0:	4832      	ldr	r0, [pc, #200]	@ (800116c <MX_GPIO_Init+0x190>)
 80010a2:	f003 fa21 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ANALOGSWITCH_5_GPIO_Port, ANALOGSWITCH_5_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ac:	4830      	ldr	r0, [pc, #192]	@ (8001170 <MX_GPIO_Init+0x194>)
 80010ae:	f003 fa1b 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010bc:	f003 fa14 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STARTSYNC_1_Pin|CS1_Pin|ANALOGSWITCH_8_Pin|ANALOGSWITCH_2_Pin
 80010c0:	f641 7330 	movw	r3, #7984	@ 0x1f30
 80010c4:	61fb      	str	r3, [r7, #28]
                          |ERROR_LED_Pin|CAN_LED_Pin|STATUS_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4822      	ldr	r0, [pc, #136]	@ (8001164 <MX_GPIO_Init+0x188>)
 80010da:	f003 f883 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|RESET1_Pin|ANALOGSWITCH_6_Pin|ANALOGSWITCH_7_Pin;
 80010de:	f246 0303 	movw	r3, #24579	@ 0x6003
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	481c      	ldr	r0, [pc, #112]	@ (8001168 <MX_GPIO_Init+0x18c>)
 80010f8:	f003 f874 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = STARTSYNC_2_Pin|CS2_Pin|DRDY2_Pin|RESET2_Pin;
 80010fc:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4815      	ldr	r0, [pc, #84]	@ (800116c <MX_GPIO_Init+0x190>)
 8001116:	f003 f865 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_5_Pin;
 800111a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ANALOGSWITCH_5_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	480f      	ldr	r0, [pc, #60]	@ (8001170 <MX_GPIO_Init+0x194>)
 8001134:	f003 f856 	bl	80041e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ANALOGSWITCH_3_Pin|ANALOGSWITCH_1_Pin|ANALOGSWITCH_4_Pin;
 8001138:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001154:	f003 f846 	bl	80041e4 <HAL_GPIO_Init>

}
 8001158:	bf00      	nop
 800115a:	3730      	adds	r7, #48	@ 0x30
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40021000 	.word	0x40021000
 8001164:	48000800 	.word	0x48000800
 8001168:	48000400 	.word	0x48000400
 800116c:	48001000 	.word	0x48001000
 8001170:	48000c00 	.word	0x48000c00

08001174 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c4_rx;
DMA_HandleTypeDef hdma_i2c4_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001178:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <MX_I2C1_Init+0x74>)
 800117a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ec <MX_I2C1_Init+0x78>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800117e:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <MX_I2C1_Init+0x74>)
 8001180:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <MX_I2C1_Init+0x7c>)
 8001182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001184:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <MX_I2C1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <MX_I2C1_Init+0x74>)
 800118c:	2201      	movs	r2, #1
 800118e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001190:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <MX_I2C1_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <MX_I2C1_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <MX_I2C1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <MX_I2C1_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <MX_I2C1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ae:	480e      	ldr	r0, [pc, #56]	@ (80011e8 <MX_I2C1_Init+0x74>)
 80011b0:	f003 f9cc 	bl	800454c <HAL_I2C_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011ba:	f000 f9ff 	bl	80015bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011be:	2100      	movs	r1, #0
 80011c0:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <MX_I2C1_Init+0x74>)
 80011c2:	f004 f85c 	bl	800527e <HAL_I2CEx_ConfigAnalogFilter>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011cc:	f000 f9f6 	bl	80015bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011d0:	2100      	movs	r1, #0
 80011d2:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <MX_I2C1_Init+0x74>)
 80011d4:	f004 f89e 	bl	8005314 <HAL_I2CEx_ConfigDigitalFilter>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011de:	f000 f9ed 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000654 	.word	0x20000654
 80011ec:	40005400 	.word	0x40005400
 80011f0:	30a0a7fb 	.word	0x30a0a7fb

080011f4 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <MX_I2C4_Init+0x74>)
 80011fa:	4a1c      	ldr	r2, [pc, #112]	@ (800126c <MX_I2C4_Init+0x78>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10802D9B;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MX_I2C4_Init+0x74>)
 8001200:	4a1b      	ldr	r2, [pc, #108]	@ (8001270 <MX_I2C4_Init+0x7c>)
 8001202:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <MX_I2C4_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <MX_I2C4_Init+0x74>)
 800120c:	2201      	movs	r2, #1
 800120e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <MX_I2C4_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <MX_I2C4_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <MX_I2C4_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001222:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_I2C4_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <MX_I2C4_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800122e:	480e      	ldr	r0, [pc, #56]	@ (8001268 <MX_I2C4_Init+0x74>)
 8001230:	f003 f98c 	bl	800454c <HAL_I2C_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800123a:	f000 f9bf 	bl	80015bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800123e:	2100      	movs	r1, #0
 8001240:	4809      	ldr	r0, [pc, #36]	@ (8001268 <MX_I2C4_Init+0x74>)
 8001242:	f004 f81c 	bl	800527e <HAL_I2CEx_ConfigAnalogFilter>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800124c:	f000 f9b6 	bl	80015bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001250:	2100      	movs	r1, #0
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <MX_I2C4_Init+0x74>)
 8001254:	f004 f85e 	bl	8005314 <HAL_I2CEx_ConfigDigitalFilter>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800125e:	f000 f9ad 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200006a8 	.word	0x200006a8
 800126c:	40008400 	.word	0x40008400
 8001270:	10802d9b 	.word	0x10802d9b

08001274 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0a2      	sub	sp, #136	@ 0x88
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	2254      	movs	r2, #84	@ 0x54
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f008 fb91 	bl	80099bc <memset>
  if(i2cHandle->Instance==I2C1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a80      	ldr	r2, [pc, #512]	@ (80014a0 <HAL_I2C_MspInit+0x22c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d158      	bne.n	8001356 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012a4:	2340      	movs	r3, #64	@ 0x40
 80012a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f004 fe8f 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012bc:	f000 f97e 	bl	80015bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b78      	ldr	r3, [pc, #480]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	4a77      	ldr	r2, [pc, #476]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012cc:	4b75      	ldr	r3, [pc, #468]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b72      	ldr	r3, [pc, #456]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012dc:	4a71      	ldr	r2, [pc, #452]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e4:	4b6f      	ldr	r3, [pc, #444]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]
 80012ee:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012f4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f6:	2312      	movs	r3, #18
 80012f8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001304:	2304      	movs	r3, #4
 8001306:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001314:	f002 ff66 	bl	80041e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001318:	2380      	movs	r3, #128	@ 0x80
 800131a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800131c:	2312      	movs	r3, #18
 800131e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800132a:	2304      	movs	r3, #4
 800132c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001334:	4619      	mov	r1, r3
 8001336:	485c      	ldr	r0, [pc, #368]	@ (80014a8 <HAL_I2C_MspInit+0x234>)
 8001338:	f002 ff54 	bl	80041e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133c:	4b59      	ldr	r3, [pc, #356]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001340:	4a58      	ldr	r2, [pc, #352]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 8001342:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001346:	6593      	str	r3, [r2, #88]	@ 0x58
 8001348:	4b56      	ldr	r3, [pc, #344]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001354:	e0a0      	b.n	8001498 <HAL_I2C_MspInit+0x224>
  else if(i2cHandle->Instance==I2C4)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a54      	ldr	r2, [pc, #336]	@ (80014ac <HAL_I2C_MspInit+0x238>)
 800135c:	4293      	cmp	r3, r2
 800135e:	f040 809b 	bne.w	8001498 <HAL_I2C_MspInit+0x224>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001362:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001366:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001368:	2300      	movs	r3, #0
 800136a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4618      	mov	r0, r3
 8001372:	f004 fe2f 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_I2C_MspInit+0x10c>
      Error_Handler();
 800137c:	f000 f91e 	bl	80015bc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001380:	4b48      	ldr	r3, [pc, #288]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001384:	4a47      	ldr	r2, [pc, #284]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138c:	4b45      	ldr	r3, [pc, #276]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001398:	23c0      	movs	r3, #192	@ 0xc0
 800139a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139c:	2312      	movs	r3, #18
 800139e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 80013aa:	2308      	movs	r3, #8
 80013ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013b4:	4619      	mov	r1, r3
 80013b6:	483e      	ldr	r0, [pc, #248]	@ (80014b0 <HAL_I2C_MspInit+0x23c>)
 80013b8:	f002 ff14 	bl	80041e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80013bc:	4b39      	ldr	r3, [pc, #228]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 80013be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c0:	4a38      	ldr	r2, [pc, #224]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 80013c2:	f043 0302 	orr.w	r3, r3, #2
 80013c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80013c8:	4b36      	ldr	r3, [pc, #216]	@ (80014a4 <HAL_I2C_MspInit+0x230>)
 80013ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c4_rx.Instance = DMA1_Channel1;
 80013d4:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <HAL_I2C_MspInit+0x240>)
 80013d6:	4a38      	ldr	r2, [pc, #224]	@ (80014b8 <HAL_I2C_MspInit+0x244>)
 80013d8:	601a      	str	r2, [r3, #0]
    hdma_i2c4_rx.Init.Request = DMA_REQUEST_I2C4_RX;
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <HAL_I2C_MspInit+0x240>)
 80013dc:	2216      	movs	r2, #22
 80013de:	605a      	str	r2, [r3, #4]
    hdma_i2c4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013e0:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <HAL_I2C_MspInit+0x240>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
    hdma_i2c4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e6:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <HAL_I2C_MspInit+0x240>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
    hdma_i2c4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013ec:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <HAL_I2C_MspInit+0x240>)
 80013ee:	2280      	movs	r2, #128	@ 0x80
 80013f0:	611a      	str	r2, [r3, #16]
    hdma_i2c4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013f2:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <HAL_I2C_MspInit+0x240>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
    hdma_i2c4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013f8:	4b2e      	ldr	r3, [pc, #184]	@ (80014b4 <HAL_I2C_MspInit+0x240>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
    hdma_i2c4_rx.Init.Mode = DMA_NORMAL;
 80013fe:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <HAL_I2C_MspInit+0x240>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
    hdma_i2c4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001404:	4b2b      	ldr	r3, [pc, #172]	@ (80014b4 <HAL_I2C_MspInit+0x240>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_rx) != HAL_OK)
 800140a:	482a      	ldr	r0, [pc, #168]	@ (80014b4 <HAL_I2C_MspInit+0x240>)
 800140c:	f002 face 	bl	80039ac <HAL_DMA_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_I2C_MspInit+0x1a6>
      Error_Handler();
 8001416:	f000 f8d1 	bl	80015bc <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c4_rx);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a25      	ldr	r2, [pc, #148]	@ (80014b4 <HAL_I2C_MspInit+0x240>)
 800141e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001420:	4a24      	ldr	r2, [pc, #144]	@ (80014b4 <HAL_I2C_MspInit+0x240>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_i2c4_tx.Instance = DMA1_Channel2;
 8001426:	4b25      	ldr	r3, [pc, #148]	@ (80014bc <HAL_I2C_MspInit+0x248>)
 8001428:	4a25      	ldr	r2, [pc, #148]	@ (80014c0 <HAL_I2C_MspInit+0x24c>)
 800142a:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Request = DMA_REQUEST_I2C4_TX;
 800142c:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <HAL_I2C_MspInit+0x248>)
 800142e:	2217      	movs	r2, #23
 8001430:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001432:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <HAL_I2C_MspInit+0x248>)
 8001434:	2210      	movs	r2, #16
 8001436:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001438:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <HAL_I2C_MspInit+0x248>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800143e:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <HAL_I2C_MspInit+0x248>)
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <HAL_I2C_MspInit+0x248>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800144a:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <HAL_I2C_MspInit+0x248>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 8001450:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <HAL_I2C_MspInit+0x248>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001456:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <HAL_I2C_MspInit+0x248>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 800145c:	4817      	ldr	r0, [pc, #92]	@ (80014bc <HAL_I2C_MspInit+0x248>)
 800145e:	f002 faa5 	bl	80039ac <HAL_DMA_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_I2C_MspInit+0x1f8>
      Error_Handler();
 8001468:	f000 f8a8 	bl	80015bc <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c4_tx);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a13      	ldr	r2, [pc, #76]	@ (80014bc <HAL_I2C_MspInit+0x248>)
 8001470:	639a      	str	r2, [r3, #56]	@ 0x38
 8001472:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <HAL_I2C_MspInit+0x248>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2052      	movs	r0, #82	@ 0x52
 800147e:	f002 f97b 	bl	8003778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001482:	2052      	movs	r0, #82	@ 0x52
 8001484:	f002 f992 	bl	80037ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2053      	movs	r0, #83	@ 0x53
 800148e:	f002 f973 	bl	8003778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001492:	2053      	movs	r0, #83	@ 0x53
 8001494:	f002 f98a 	bl	80037ac <HAL_NVIC_EnableIRQ>
}
 8001498:	bf00      	nop
 800149a:	3788      	adds	r7, #136	@ 0x88
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40005400 	.word	0x40005400
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48000400 	.word	0x48000400
 80014ac:	40008400 	.word	0x40008400
 80014b0:	48000800 	.word	0x48000800
 80014b4:	200006fc 	.word	0x200006fc
 80014b8:	40020008 	.word	0x40020008
 80014bc:	2000075c 	.word	0x2000075c
 80014c0:	4002001c 	.word	0x4002001c

080014c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c8:	f000 fc52 	bl	8001d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014cc:	f000 f81a 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d0:	f7ff fd84 	bl	8000fdc <MX_GPIO_Init>
  MX_DMA_Init();
 80014d4:	f7ff fc1a 	bl	8000d0c <MX_DMA_Init>
  MX_FDCAN1_Init();
 80014d8:	f7ff fc52 	bl	8000d80 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 80014dc:	f000 fa08 	bl	80018f0 <MX_TIM2_Init>
  MX_CRC_Init();
 80014e0:	f7ff fbd2 	bl	8000c88 <MX_CRC_Init>
  MX_ADC4_Init();
 80014e4:	f7ff f9d4 	bl	8000890 <MX_ADC4_Init>
  MX_SPI4_Init();
 80014e8:	f000 f86e 	bl	80015c8 <MX_SPI4_Init>
  MX_ADC1_Init();
 80014ec:	f7ff f958 	bl	80007a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80014f0:	f7ff fe40 	bl	8001174 <MX_I2C1_Init>
  MX_I2C4_Init();
 80014f4:	f7ff fe7e 	bl	80011f4 <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 80014f8:	f000 fab8 	bl	8001a6c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80014fc:	f7ff fb95 	bl	8000c2a <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <main+0x3c>

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b094      	sub	sp, #80	@ 0x50
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	2238      	movs	r2, #56	@ 0x38
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f008 fa52 	bl	80099bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001526:	2000      	movs	r0, #0
 8001528:	f003 ff40 	bl	80053ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800152c:	2301      	movs	r3, #1
 800152e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001530:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001534:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001536:	2302      	movs	r3, #2
 8001538:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153a:	2303      	movs	r3, #3
 800153c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800153e:	2306      	movs	r3, #6
 8001540:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001542:	2355      	movs	r3, #85	@ 0x55
 8001544:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001546:	2302      	movs	r3, #2
 8001548:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800154a:	2302      	movs	r3, #2
 800154c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800154e:	2302      	movs	r3, #2
 8001550:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001552:	f107 0318 	add.w	r3, r7, #24
 8001556:	4618      	mov	r0, r3
 8001558:	f003 ffdc 	bl	8005514 <HAL_RCC_OscConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001562:	f000 f82b 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
 8001568:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2303      	movs	r3, #3
 800156c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2104      	movs	r1, #4
 800157e:	4618      	mov	r0, r3
 8001580:	f004 fada 	bl	8005b38 <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800158a:	f000 f817 	bl	80015bc <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3750      	adds	r7, #80	@ 0x50
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a04      	ldr	r2, [pc, #16]	@ (80015b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015aa:	f000 fbf9 	bl	8001da0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40001000 	.word	0x40001000

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <Error_Handler+0x8>

080015c8 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <MX_SPI4_Init+0x74>)
 80015ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001640 <MX_SPI4_Init+0x78>)
 80015d0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	@ (800163c <MX_SPI4_Init+0x74>)
 80015d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015d8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80015da:	4b18      	ldr	r3, [pc, #96]	@ (800163c <MX_SPI4_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80015e0:	4b16      	ldr	r3, [pc, #88]	@ (800163c <MX_SPI4_Init+0x74>)
 80015e2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015e6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e8:	4b14      	ldr	r3, [pc, #80]	@ (800163c <MX_SPI4_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ee:	4b13      	ldr	r3, [pc, #76]	@ (800163c <MX_SPI4_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <MX_SPI4_Init+0x74>)
 80015f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015fa:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <MX_SPI4_Init+0x74>)
 80015fe:	2210      	movs	r2, #16
 8001600:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <MX_SPI4_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <MX_SPI4_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <MX_SPI4_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001614:	4b09      	ldr	r3, [pc, #36]	@ (800163c <MX_SPI4_Init+0x74>)
 8001616:	2207      	movs	r2, #7
 8001618:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800161a:	4b08      	ldr	r3, [pc, #32]	@ (800163c <MX_SPI4_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <MX_SPI4_Init+0x74>)
 8001622:	2208      	movs	r2, #8
 8001624:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_SPI4_Init+0x74>)
 8001628:	f004 ff22 	bl	8006470 <HAL_SPI_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001632:	f7ff ffc3 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200007bc 	.word	0x200007bc
 8001640:	40013c00 	.word	0x40013c00

08001644 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <HAL_SPI_MspInit+0x7c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d128      	bne.n	80016b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <HAL_SPI_MspInit+0x80>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166a:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <HAL_SPI_MspInit+0x80>)
 800166c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001670:	6613      	str	r3, [r2, #96]	@ 0x60
 8001672:	4b14      	ldr	r3, [pc, #80]	@ (80016c4 <HAL_SPI_MspInit+0x80>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001676:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800167e:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <HAL_SPI_MspInit+0x80>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	4a10      	ldr	r2, [pc, #64]	@ (80016c4 <HAL_SPI_MspInit+0x80>)
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <HAL_SPI_MspInit+0x80>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001696:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80016a8:	2305      	movs	r3, #5
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <HAL_SPI_MspInit+0x84>)
 80016b4:	f002 fd96 	bl	80041e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80016b8:	bf00      	nop
 80016ba:	3728      	adds	r7, #40	@ 0x28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40013c00 	.word	0x40013c00
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48001000 	.word	0x48001000

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_MspInit+0x4c>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d6:	4a10      	ldr	r2, [pc, #64]	@ (8001718 <HAL_MspInit+0x4c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80016de:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <HAL_MspInit+0x4c>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_MspInit+0x4c>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <HAL_MspInit+0x4c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016f6:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <HAL_MspInit+0x4c>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001702:	f000 fb7f 	bl	8001e04 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8001706:	2002      	movs	r0, #2
 8001708:	f000 fb68 	bl	8001ddc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800170c:	f003 fef2 	bl	80054f4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	@ 0x30
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800172c:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <HAL_InitTick+0xc4>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	4a2b      	ldr	r2, [pc, #172]	@ (80017e0 <HAL_InitTick+0xc4>)
 8001732:	f043 0310 	orr.w	r3, r3, #16
 8001736:	6593      	str	r3, [r2, #88]	@ 0x58
 8001738:	4b29      	ldr	r3, [pc, #164]	@ (80017e0 <HAL_InitTick+0xc4>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001744:	f107 020c 	add.w	r2, r7, #12
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f004 fbc8 	bl	8005ee4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001754:	f004 fb9a 	bl	8005e8c <HAL_RCC_GetPCLK1Freq>
 8001758:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800175a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800175c:	4a21      	ldr	r2, [pc, #132]	@ (80017e4 <HAL_InitTick+0xc8>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	0c9b      	lsrs	r3, r3, #18
 8001764:	3b01      	subs	r3, #1
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001768:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <HAL_InitTick+0xcc>)
 800176a:	4a20      	ldr	r2, [pc, #128]	@ (80017ec <HAL_InitTick+0xd0>)
 800176c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800176e:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <HAL_InitTick+0xcc>)
 8001770:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001774:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001776:	4a1c      	ldr	r2, [pc, #112]	@ (80017e8 <HAL_InitTick+0xcc>)
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <HAL_InitTick+0xcc>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001782:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <HAL_InitTick+0xcc>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001788:	4817      	ldr	r0, [pc, #92]	@ (80017e8 <HAL_InitTick+0xcc>)
 800178a:	f004 ff1c 	bl	80065c6 <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001794:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001798:	2b00      	cmp	r3, #0
 800179a:	d11b      	bne.n	80017d4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800179c:	4812      	ldr	r0, [pc, #72]	@ (80017e8 <HAL_InitTick+0xcc>)
 800179e:	f004 ff73 	bl	8006688 <HAL_TIM_Base_Start_IT>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80017a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d111      	bne.n	80017d4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017b0:	2036      	movs	r0, #54	@ 0x36
 80017b2:	f001 fffb 	bl	80037ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d808      	bhi.n	80017ce <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	2036      	movs	r0, #54	@ 0x36
 80017c2:	f001 ffd9 	bl	8003778 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c6:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_InitTick+0xd4>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	e002      	b.n	80017d4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3730      	adds	r7, #48	@ 0x30
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	20000820 	.word	0x20000820
 80017ec:	40001000 	.word	0x40001000
 80017f0:	20000004 	.word	0x20000004

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <NMI_Handler+0x4>

080017fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <MemManage_Handler+0x4>

0800180c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <UsageFault_Handler+0x4>

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_rx);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <DMA1_Channel1_IRQHandler+0x10>)
 8001832:	f002 f9ca 	bl	8003bca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200006fc 	.word	0x200006fc

08001840 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <DMA1_Channel2_IRQHandler+0x10>)
 8001846:	f002 f9c0 	bl	8003bca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000075c 	.word	0x2000075c

08001854 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001858:	4802      	ldr	r0, [pc, #8]	@ (8001864 <DMA1_Channel3_IRQHandler+0x10>)
 800185a:	f002 f9b6 	bl	8003bca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000538 	.word	0x20000538

08001868 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <TIM2_IRQHandler+0x10>)
 800186e:	f004 ffda 	bl	8006826 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2000086c 	.word	0x2000086c

0800187c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <TIM6_DAC_IRQHandler+0x10>)
 8001882:	f004 ffd0 	bl	8006826 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000820 	.word	0x20000820

08001890 <ADC4_IRQHandler>:

/**
  * @brief This function handles ADC4 global interrupt.
  */
void ADC4_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC4_IRQn 0 */

  /* USER CODE END ADC4_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc4);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <ADC4_IRQHandler+0x10>)
 8001896:	f000 fe99 	bl	80025cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC4_IRQn 1 */

  /* USER CODE END ADC4_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200004cc 	.word	0x200004cc

080018a4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <I2C4_EV_IRQHandler+0x10>)
 80018aa:	f002 feea 	bl	8004682 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200006a8 	.word	0x200006a8

080018b8 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <I2C4_ER_IRQHandler+0x10>)
 80018be:	f002 fefa 	bl	80046b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200006a8 	.word	0x200006a8

080018cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <SystemInit+0x20>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <SystemInit+0x20>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800190e:	4b31      	ldr	r3, [pc, #196]	@ (80019d4 <MX_TIM2_Init+0xe4>)
 8001910:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001914:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8001916:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <MX_TIM2_Init+0xe4>)
 8001918:	22a9      	movs	r2, #169	@ 0xa9
 800191a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <MX_TIM2_Init+0xe4>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001922:	4b2c      	ldr	r3, [pc, #176]	@ (80019d4 <MX_TIM2_Init+0xe4>)
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192a:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <MX_TIM2_Init+0xe4>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001930:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <MX_TIM2_Init+0xe4>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001936:	4827      	ldr	r0, [pc, #156]	@ (80019d4 <MX_TIM2_Init+0xe4>)
 8001938:	f004 ff1e 	bl	8006778 <HAL_TIM_IC_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001942:	f7ff fe3b 	bl	80015bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	481f      	ldr	r0, [pc, #124]	@ (80019d4 <MX_TIM2_Init+0xe4>)
 8001956:	f005 fb91 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001960:	f7ff fe2c 	bl	80015bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001968:	2301      	movs	r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	4619      	mov	r1, r3
 800197a:	4816      	ldr	r0, [pc, #88]	@ (80019d4 <MX_TIM2_Init+0xe4>)
 800197c:	f005 f8a2 	bl	8006ac4 <HAL_TIM_IC_ConfigChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001986:	f7ff fe19 	bl	80015bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2204      	movs	r2, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4810      	ldr	r0, [pc, #64]	@ (80019d4 <MX_TIM2_Init+0xe4>)
 8001992:	f005 f897 	bl	8006ac4 <HAL_TIM_IC_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800199c:	f7ff fe0e 	bl	80015bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	2208      	movs	r2, #8
 80019a4:	4619      	mov	r1, r3
 80019a6:	480b      	ldr	r0, [pc, #44]	@ (80019d4 <MX_TIM2_Init+0xe4>)
 80019a8:	f005 f88c 	bl	8006ac4 <HAL_TIM_IC_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80019b2:	f7ff fe03 	bl	80015bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	220c      	movs	r2, #12
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <MX_TIM2_Init+0xe4>)
 80019be:	f005 f881 	bl	8006ac4 <HAL_TIM_IC_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80019c8:	f7ff fdf8 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000086c 	.word	0x2000086c

080019d8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f8:	d12f      	bne.n	8001a5a <HAL_TIM_IC_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <HAL_TIM_IC_MspInit+0x8c>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fe:	4a19      	ldr	r2, [pc, #100]	@ (8001a64 <HAL_TIM_IC_MspInit+0x8c>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a06:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <HAL_TIM_IC_MspInit+0x8c>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a12:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <HAL_TIM_IC_MspInit+0x8c>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a16:	4a13      	ldr	r2, [pc, #76]	@ (8001a64 <HAL_TIM_IC_MspInit+0x8c>)
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a1e:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <HAL_TIM_IC_MspInit+0x8c>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> TIM2_CH1
    PD4     ------> TIM2_CH2
    PD6     ------> TIM2_CH4
    PD7     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = FREQUENCY_3_Pin|FREQUENCY_2_Pin|FREQUENCY_1_Pin|FREQUENCY_4_Pin;
 8001a2a:	23d8      	movs	r3, #216	@ 0xd8
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4808      	ldr	r0, [pc, #32]	@ (8001a68 <HAL_TIM_IC_MspInit+0x90>)
 8001a46:	f002 fbcd 	bl	80041e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	201c      	movs	r0, #28
 8001a50:	f001 fe92 	bl	8003778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a54:	201c      	movs	r0, #28
 8001a56:	f001 fea9 	bl	80037ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	@ 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	48000c00 	.word	0x48000c00

08001a6c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a70:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001a72:	4a21      	ldr	r2, [pc, #132]	@ (8001af8 <MX_LPUART1_UART_Init+0x8c>)
 8001a74:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001a78:	4a20      	ldr	r2, [pc, #128]	@ (8001afc <MX_LPUART1_UART_Init+0x90>)
 8001a7a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001a90:	220c      	movs	r2, #12
 8001a92:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a94:	4b17      	ldr	r3, [pc, #92]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001aac:	4811      	ldr	r0, [pc, #68]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001aae:	f005 fbc1 	bl	8007234 <HAL_UART_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001ab8:	f7ff fd80 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001abc:	2100      	movs	r1, #0
 8001abe:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001ac0:	f006 f95c 	bl	8007d7c <HAL_UARTEx_SetTxFifoThreshold>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001aca:	f7ff fd77 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4808      	ldr	r0, [pc, #32]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001ad2:	f006 f991 	bl	8007df8 <HAL_UARTEx_SetRxFifoThreshold>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001adc:	f7ff fd6e 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001ae0:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <MX_LPUART1_UART_Init+0x88>)
 8001ae2:	f006 f912 	bl	8007d0a <HAL_UARTEx_DisableFifoMode>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001aec:	f7ff fd66 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200008b8 	.word	0x200008b8
 8001af8:	40008000 	.word	0x40008000
 8001afc:	00033324 	.word	0x00033324

08001b00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b09e      	sub	sp, #120	@ 0x78
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	2254      	movs	r2, #84	@ 0x54
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f007 ff4b 	bl	80099bc <memset>
  if(uartHandle->Instance==LPUART1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba4 <HAL_UART_MspInit+0xa4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d135      	bne.n	8001b9c <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b30:	2320      	movs	r3, #32
 8001b32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f004 fa49 	bl	8005fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b48:	f7ff fd38 	bl	80015bc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <HAL_UART_MspInit+0xa8>)
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b50:	4a15      	ldr	r2, [pc, #84]	@ (8001ba8 <HAL_UART_MspInit+0xa8>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001b58:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <HAL_UART_MspInit+0xa8>)
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b64:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <HAL_UART_MspInit+0xa8>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b68:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba8 <HAL_UART_MspInit+0xa8>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <HAL_UART_MspInit+0xa8>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b94:	4619      	mov	r1, r3
 8001b96:	4805      	ldr	r0, [pc, #20]	@ (8001bac <HAL_UART_MspInit+0xac>)
 8001b98:	f002 fb24 	bl	80041e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	3778      	adds	r7, #120	@ 0x78
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40008000 	.word	0x40008000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48000800 	.word	0x48000800

08001bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bb0:	480d      	ldr	r0, [pc, #52]	@ (8001be8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bb2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bb4:	f7ff fe8a 	bl	80018cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb8:	480c      	ldr	r0, [pc, #48]	@ (8001bec <LoopForever+0x6>)
  ldr r1, =_edata
 8001bba:	490d      	ldr	r1, [pc, #52]	@ (8001bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <LoopForever+0xe>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bfc <LoopForever+0x16>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bde:	f007 fef5 	bl	80099cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be2:	f7ff fc6f 	bl	80014c4 <main>

08001be6 <LoopForever>:

LoopForever:
    b LoopForever
 8001be6:	e7fe      	b.n	8001be6 <LoopForever>
  ldr   r0, =_estack
 8001be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001bf4:	08009b00 	.word	0x08009b00
  ldr r2, =_sbss
 8001bf8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001bfc:	20001078 	.word	0x20001078

08001c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC1_2_IRQHandler>
	...

08001c04 <ThreadX_Init>:

TX_SEMAPHORE analogSemaphore;
TX_SEMAPHORE aeroSemaphore;


UINT ThreadX_Init(VOID *memory_ptr){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	@ 0x38
 8001c08:	af08      	add	r7, sp, #32
 8001c0a:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
      /* USER CODE BEGIN App_ThreadX_MEM_POOL */
      TX_BYTE_POOL *bytePool = (TX_BYTE_POOL*)memory_ptr;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	613b      	str	r3, [r7, #16]
      CHAR *pointer;
      /* USER CODE END App_ThreadX_MEM_POOL */

      /* USER CODE BEGIN App_ThreadX_Init */
      if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001c14:	f107 010c 	add.w	r1, r7, #12
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c1e:	6938      	ldr	r0, [r7, #16]
 8001c20:	f007 fc30 	bl	8009484 <_txe_byte_allocate>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <ThreadX_Init+0x2a>
          return TX_POOL_ERROR;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e081      	b.n	8001d32 <ThreadX_Init+0x12e>
      }

      if(tx_byte_allocate(bytePool, (VOID**) &pointer, TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8001c2e:	f107 010c 	add.w	r1, r7, #12
 8001c32:	2300      	movs	r3, #0
 8001c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c38:	6938      	ldr	r0, [r7, #16]
 8001c3a:	f007 fc23 	bl	8009484 <_txe_byte_allocate>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <ThreadX_Init+0x44>
          return TX_POOL_ERROR;
 8001c44:	2302      	movs	r3, #2
 8001c46:	e074      	b.n	8001d32 <ThreadX_Init+0x12e>
      }

      if(tx_thread_create(&txMainThread, "txMainThread", txMainThreadEntry, 0, pointer,
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	22b0      	movs	r2, #176	@ 0xb0
 8001c4c:	9206      	str	r2, [sp, #24]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	9205      	str	r2, [sp, #20]
 8001c52:	2200      	movs	r2, #0
 8001c54:	9204      	str	r2, [sp, #16]
 8001c56:	220a      	movs	r2, #10
 8001c58:	9203      	str	r2, [sp, #12]
 8001c5a:	220a      	movs	r2, #10
 8001c5c:	9202      	str	r2, [sp, #8]
 8001c5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c62:	9201      	str	r2, [sp, #4]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	4a34      	ldr	r2, [pc, #208]	@ (8001d3c <ThreadX_Init+0x138>)
 8001c6a:	4935      	ldr	r1, [pc, #212]	@ (8001d40 <ThreadX_Init+0x13c>)
 8001c6c:	4835      	ldr	r0, [pc, #212]	@ (8001d44 <ThreadX_Init+0x140>)
 8001c6e:	f007 fdb3 	bl	80097d8 <_txe_thread_create>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <ThreadX_Init+0x78>
                             TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                             TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
          return TX_THREAD_ERROR;
 8001c78:	230e      	movs	r3, #14
 8001c7a:	e05a      	b.n	8001d32 <ThreadX_Init+0x12e>
      }

      if(tx_thread_create(&txMainThread, "txAnalogThread", txAnalogThreadEntry, 0, pointer,
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	22b0      	movs	r2, #176	@ 0xb0
 8001c80:	9206      	str	r2, [sp, #24]
 8001c82:	2201      	movs	r2, #1
 8001c84:	9205      	str	r2, [sp, #20]
 8001c86:	2200      	movs	r2, #0
 8001c88:	9204      	str	r2, [sp, #16]
 8001c8a:	220a      	movs	r2, #10
 8001c8c:	9203      	str	r2, [sp, #12]
 8001c8e:	220a      	movs	r2, #10
 8001c90:	9202      	str	r2, [sp, #8]
 8001c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c96:	9201      	str	r2, [sp, #4]
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d48 <ThreadX_Init+0x144>)
 8001c9e:	492b      	ldr	r1, [pc, #172]	@ (8001d4c <ThreadX_Init+0x148>)
 8001ca0:	4828      	ldr	r0, [pc, #160]	@ (8001d44 <ThreadX_Init+0x140>)
 8001ca2:	f007 fd99 	bl	80097d8 <_txe_thread_create>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <ThreadX_Init+0xac>
                             TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                             TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
          return TX_THREAD_ERROR;
 8001cac:	230e      	movs	r3, #14
 8001cae:	e040      	b.n	8001d32 <ThreadX_Init+0x12e>
      }

      if(tx_thread_create(&txMainThread, "txAeroThread", txAeroThreadEntry, 0, pointer,
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	22b0      	movs	r2, #176	@ 0xb0
 8001cb4:	9206      	str	r2, [sp, #24]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	9205      	str	r2, [sp, #20]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	9204      	str	r2, [sp, #16]
 8001cbe:	220a      	movs	r2, #10
 8001cc0:	9203      	str	r2, [sp, #12]
 8001cc2:	220a      	movs	r2, #10
 8001cc4:	9202      	str	r2, [sp, #8]
 8001cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cca:	9201      	str	r2, [sp, #4]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d50 <ThreadX_Init+0x14c>)
 8001cd2:	4920      	ldr	r1, [pc, #128]	@ (8001d54 <ThreadX_Init+0x150>)
 8001cd4:	481b      	ldr	r0, [pc, #108]	@ (8001d44 <ThreadX_Init+0x140>)
 8001cd6:	f007 fd7f 	bl	80097d8 <_txe_thread_create>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <ThreadX_Init+0xe0>
                           TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                           TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
            return TX_THREAD_ERROR;
 8001ce0:	230e      	movs	r3, #14
 8001ce2:	e026      	b.n	8001d32 <ThreadX_Init+0x12e>
        }
      if(tx_thread_create(&txMainThread, "txCAN500HZ", txCAN500HZThreadEntry, 0, pointer,
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	22b0      	movs	r2, #176	@ 0xb0
 8001ce8:	9206      	str	r2, [sp, #24]
 8001cea:	2201      	movs	r2, #1
 8001cec:	9205      	str	r2, [sp, #20]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	9204      	str	r2, [sp, #16]
 8001cf2:	220a      	movs	r2, #10
 8001cf4:	9203      	str	r2, [sp, #12]
 8001cf6:	220a      	movs	r2, #10
 8001cf8:	9202      	str	r2, [sp, #8]
 8001cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cfe:	9201      	str	r2, [sp, #4]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	4a14      	ldr	r2, [pc, #80]	@ (8001d58 <ThreadX_Init+0x154>)
 8001d06:	4915      	ldr	r1, [pc, #84]	@ (8001d5c <ThreadX_Init+0x158>)
 8001d08:	480e      	ldr	r0, [pc, #56]	@ (8001d44 <ThreadX_Init+0x140>)
 8001d0a:	f007 fd65 	bl	80097d8 <_txe_thread_create>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <ThreadX_Init+0x114>
                           TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                           TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS){
            return TX_THREAD_ERROR;
 8001d14:	230e      	movs	r3, #14
 8001d16:	e00c      	b.n	8001d32 <ThreadX_Init+0x12e>
        }

      tx_semaphore_create(&analogSemaphore, "analogSemaphore", 0);
 8001d18:	231c      	movs	r3, #28
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4910      	ldr	r1, [pc, #64]	@ (8001d60 <ThreadX_Init+0x15c>)
 8001d1e:	4811      	ldr	r0, [pc, #68]	@ (8001d64 <ThreadX_Init+0x160>)
 8001d20:	f007 fcc4 	bl	80096ac <_txe_semaphore_create>
      tx_semaphore_create(&aeroSemaphore, "aeroSemaphore", 0);
 8001d24:	231c      	movs	r3, #28
 8001d26:	2200      	movs	r2, #0
 8001d28:	490f      	ldr	r1, [pc, #60]	@ (8001d68 <ThreadX_Init+0x164>)
 8001d2a:	4810      	ldr	r0, [pc, #64]	@ (8001d6c <ThreadX_Init+0x168>)
 8001d2c:	f007 fcbe 	bl	80096ac <_txe_semaphore_create>
      /* USER CODE END App_ThreadX_Init */

      return ret;
 8001d30:	697b      	ldr	r3, [r7, #20]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	08000c39 	.word	0x08000c39
 8001d40:	08009a40 	.word	0x08009a40
 8001d44:	2000094c 	.word	0x2000094c
 8001d48:	08000c65 	.word	0x08000c65
 8001d4c:	08009a50 	.word	0x08009a50
 8001d50:	08000c71 	.word	0x08000c71
 8001d54:	08009a60 	.word	0x08009a60
 8001d58:	08000c7d 	.word	0x08000c7d
 8001d5c:	08009a70 	.word	0x08009a70
 8001d60:	08009a7c 	.word	0x08009a7c
 8001d64:	200009fc 	.word	0x200009fc
 8001d68:	08009a8c 	.word	0x08009a8c
 8001d6c:	20000a18 	.word	0x20000a18

08001d70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7a:	2003      	movs	r0, #3
 8001d7c:	f001 fcf1 	bl	8003762 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d80:	200f      	movs	r0, #15
 8001d82:	f7ff fccb 	bl	800171c <HAL_InitTick>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	e001      	b.n	8001d96 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d92:	f7ff fc9b 	bl	80016cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d96:	79fb      	ldrb	r3, [r7, #7]

}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_IncTick+0x1c>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <HAL_IncTick+0x20>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a03      	ldr	r2, [pc, #12]	@ (8001dbc <HAL_IncTick+0x1c>)
 8001db0:	6013      	str	r3, [r2, #0]
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	20000a34 	.word	0x20000a34
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	@ (8001dd8 <HAL_GetTick+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000a34 	.word	0x20000a34

08001ddc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 0202 	bic.w	r2, r3, #2
 8001dec:	4904      	ldr	r1, [pc, #16]	@ (8001e00 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40010030 	.word	0x40010030

08001e04 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40010030 	.word	0x40010030

08001e24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	609a      	str	r2, [r3, #8]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3360      	adds	r3, #96	@ 0x60
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <LL_ADC_SetOffset+0x44>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ec4:	bf00      	nop
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	03fff000 	.word	0x03fff000

08001ed4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3360      	adds	r3, #96	@ 0x60
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3360      	adds	r3, #96	@ 0x60
 8001f10:	461a      	mov	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b087      	sub	sp, #28
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3360      	adds	r3, #96	@ 0x60
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f60:	bf00      	nop
 8001f62:	371c      	adds	r7, #28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3360      	adds	r3, #96	@ 0x60
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	615a      	str	r2, [r3, #20]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3330      	adds	r3, #48	@ 0x30
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	4413      	add	r3, r2
 800200c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	211f      	movs	r1, #31
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	401a      	ands	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	0e9b      	lsrs	r3, r3, #26
 8002026:	f003 011f 	and.w	r1, r3, #31
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	431a      	orrs	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3314      	adds	r3, #20
 800207c:	461a      	mov	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	0e5b      	lsrs	r3, r3, #25
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	4413      	add	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	0d1b      	lsrs	r3, r3, #20
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2107      	movs	r1, #7
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	401a      	ands	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	0d1b      	lsrs	r3, r3, #20
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	43db      	mvns	r3, r3
 80020de:	401a      	ands	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0318 	and.w	r3, r3, #24
 80020e6:	4908      	ldr	r1, [pc, #32]	@ (8002108 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020e8:	40d9      	lsrs	r1, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	400b      	ands	r3, r1
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	431a      	orrs	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	0007ffff 	.word	0x0007ffff

0800210c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 031f 	and.w	r3, r3, #31
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002154:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6093      	str	r3, [r2, #8]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800217c:	d101      	bne.n	8002182 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80021a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021cc:	d101      	bne.n	80021d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <LL_ADC_IsEnabled+0x18>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <LL_ADC_IsEnabled+0x1a>
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b04      	cmp	r3, #4
 8002218:	d101      	bne.n	800221e <LL_ADC_REG_IsConversionOngoing+0x18>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b08      	cmp	r3, #8
 800223e:	d101      	bne.n	8002244 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b089      	sub	sp, #36	@ 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e1a9      	b.n	80025c2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7fe fbe1 	bl	8000a44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff67 	bl	8002168 <LL_ADC_IsDeepPowerDownEnabled>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff4d 	bl	8002144 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff82 	bl	80021b8 <LL_ADC_IsInternalRegulatorEnabled>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d115      	bne.n	80022e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff66 	bl	8002190 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c4:	4b9c      	ldr	r3, [pc, #624]	@ (8002538 <HAL_ADC_Init+0x2e4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	099b      	lsrs	r3, r3, #6
 80022ca:	4a9c      	ldr	r2, [pc, #624]	@ (800253c <HAL_ADC_Init+0x2e8>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	3301      	adds	r3, #1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022d8:	e002      	b.n	80022e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	3b01      	subs	r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f9      	bne.n	80022da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff64 	bl	80021b8 <LL_ADC_IsInternalRegulatorEnabled>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10d      	bne.n	8002312 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fa:	f043 0210 	orr.w	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff75 	bl	8002206 <LL_ADC_REG_IsConversionOngoing>
 800231c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 8142 	bne.w	80025b0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 813e 	bne.w	80025b0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002338:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800233c:	f043 0202 	orr.w	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff49 	bl	80021e0 <LL_ADC_IsEnabled>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d141      	bne.n	80023d8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800235c:	d004      	beq.n	8002368 <HAL_ADC_Init+0x114>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a77      	ldr	r2, [pc, #476]	@ (8002540 <HAL_ADC_Init+0x2ec>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d10f      	bne.n	8002388 <HAL_ADC_Init+0x134>
 8002368:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800236c:	f7ff ff38 	bl	80021e0 <LL_ADC_IsEnabled>
 8002370:	4604      	mov	r4, r0
 8002372:	4873      	ldr	r0, [pc, #460]	@ (8002540 <HAL_ADC_Init+0x2ec>)
 8002374:	f7ff ff34 	bl	80021e0 <LL_ADC_IsEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	4323      	orrs	r3, r4
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	e012      	b.n	80023ae <HAL_ADC_Init+0x15a>
 8002388:	486e      	ldr	r0, [pc, #440]	@ (8002544 <HAL_ADC_Init+0x2f0>)
 800238a:	f7ff ff29 	bl	80021e0 <LL_ADC_IsEnabled>
 800238e:	4604      	mov	r4, r0
 8002390:	486d      	ldr	r0, [pc, #436]	@ (8002548 <HAL_ADC_Init+0x2f4>)
 8002392:	f7ff ff25 	bl	80021e0 <LL_ADC_IsEnabled>
 8002396:	4603      	mov	r3, r0
 8002398:	431c      	orrs	r4, r3
 800239a:	486c      	ldr	r0, [pc, #432]	@ (800254c <HAL_ADC_Init+0x2f8>)
 800239c:	f7ff ff20 	bl	80021e0 <LL_ADC_IsEnabled>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4323      	orrs	r3, r4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bf0c      	ite	eq
 80023a8:	2301      	moveq	r3, #1
 80023aa:	2300      	movne	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d012      	beq.n	80023d8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ba:	d004      	beq.n	80023c6 <HAL_ADC_Init+0x172>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a5f      	ldr	r2, [pc, #380]	@ (8002540 <HAL_ADC_Init+0x2ec>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_Init+0x176>
 80023c6:	4a62      	ldr	r2, [pc, #392]	@ (8002550 <HAL_ADC_Init+0x2fc>)
 80023c8:	e000      	b.n	80023cc <HAL_ADC_Init+0x178>
 80023ca:	4a62      	ldr	r2, [pc, #392]	@ (8002554 <HAL_ADC_Init+0x300>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f7ff fd26 	bl	8001e24 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7f5b      	ldrb	r3, [r3, #29]
 80023dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002402:	2b01      	cmp	r3, #1
 8002404:	d106      	bne.n	8002414 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	3b01      	subs	r3, #1
 800240c:	045b      	lsls	r3, r3, #17
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002428:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	4b48      	ldr	r3, [pc, #288]	@ (8002558 <HAL_ADC_Init+0x304>)
 8002438:	4013      	ands	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	430b      	orrs	r3, r1
 8002442:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fee4 	bl	800222c <LL_ADC_INJ_IsConversionOngoing>
 8002464:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d17f      	bne.n	800256c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d17c      	bne.n	800256c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002476:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800247e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800248e:	f023 0302 	bic.w	r3, r3, #2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	430b      	orrs	r3, r1
 800249a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d017      	beq.n	80024d4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80024b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80024bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6911      	ldr	r1, [r2, #16]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80024d2:	e013      	b.n	80024fc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691a      	ldr	r2, [r3, #16]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80024e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002502:	2b01      	cmp	r3, #1
 8002504:	d12a      	bne.n	800255c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800251c:	4311      	orrs	r1, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002522:	4311      	orrs	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002528:	430a      	orrs	r2, r1
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	611a      	str	r2, [r3, #16]
 8002536:	e019      	b.n	800256c <HAL_ADC_Init+0x318>
 8002538:	20000000 	.word	0x20000000
 800253c:	053e2d63 	.word	0x053e2d63
 8002540:	50000100 	.word	0x50000100
 8002544:	50000400 	.word	0x50000400
 8002548:	50000500 	.word	0x50000500
 800254c:	50000600 	.word	0x50000600
 8002550:	50000300 	.word	0x50000300
 8002554:	50000700 	.word	0x50000700
 8002558:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d10c      	bne.n	800258e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	f023 010f 	bic.w	r1, r3, #15
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	1e5a      	subs	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30
 800258c:	e007      	b.n	800259e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 020f 	bic.w	r2, r2, #15
 800259c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a2:	f023 0303 	bic.w	r3, r3, #3
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025ae:	e007      	b.n	80025c0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b4:	f043 0210 	orr.w	r2, r3, #16
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3724      	adds	r7, #36	@ 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	bf00      	nop

080025cc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	@ 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80025d4:	2300      	movs	r3, #0
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025f0:	d004      	beq.n	80025fc <HAL_ADC_IRQHandler+0x30>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a8e      	ldr	r2, [pc, #568]	@ (8002830 <HAL_ADC_IRQHandler+0x264>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_IRQHandler+0x34>
 80025fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002834 <HAL_ADC_IRQHandler+0x268>)
 80025fe:	e000      	b.n	8002602 <HAL_ADC_IRQHandler+0x36>
 8002600:	4b8d      	ldr	r3, [pc, #564]	@ (8002838 <HAL_ADC_IRQHandler+0x26c>)
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fd82 	bl	800210c <LL_ADC_GetMultimode>
 8002608:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d017      	beq.n	8002644 <HAL_ADC_IRQHandler+0x78>
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d012      	beq.n	8002644 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fed4 	bl	80033e4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2202      	movs	r2, #2
 8002642:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <HAL_ADC_IRQHandler+0x8c>
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8094 	beq.w	800278c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 808e 	beq.w	800278c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fc9b 	bl	8001fc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d072      	beq.n	800277e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a64      	ldr	r2, [pc, #400]	@ (8002830 <HAL_ADC_IRQHandler+0x264>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d009      	beq.n	80026b6 <HAL_ADC_IRQHandler+0xea>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a65      	ldr	r2, [pc, #404]	@ (800283c <HAL_ADC_IRQHandler+0x270>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d002      	beq.n	80026b2 <HAL_ADC_IRQHandler+0xe6>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	e003      	b.n	80026ba <HAL_ADC_IRQHandler+0xee>
 80026b2:	4b63      	ldr	r3, [pc, #396]	@ (8002840 <HAL_ADC_IRQHandler+0x274>)
 80026b4:	e001      	b.n	80026ba <HAL_ADC_IRQHandler+0xee>
 80026b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	4293      	cmp	r3, r2
 80026c0:	d008      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d002      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b09      	cmp	r3, #9
 80026d2:	d104      	bne.n	80026de <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	623b      	str	r3, [r7, #32]
 80026dc:	e014      	b.n	8002708 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a53      	ldr	r2, [pc, #332]	@ (8002830 <HAL_ADC_IRQHandler+0x264>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_ADC_IRQHandler+0x130>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a53      	ldr	r2, [pc, #332]	@ (800283c <HAL_ADC_IRQHandler+0x270>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d002      	beq.n	80026f8 <HAL_ADC_IRQHandler+0x12c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	e003      	b.n	8002700 <HAL_ADC_IRQHandler+0x134>
 80026f8:	4b51      	ldr	r3, [pc, #324]	@ (8002840 <HAL_ADC_IRQHandler+0x274>)
 80026fa:	e001      	b.n	8002700 <HAL_ADC_IRQHandler+0x134>
 80026fc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002700:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d135      	bne.n	800277e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b08      	cmp	r3, #8
 800271e:	d12e      	bne.n	800277e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fd6e 	bl	8002206 <LL_ADC_REG_IsConversionOngoing>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11a      	bne.n	8002766 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 020c 	bic.w	r2, r2, #12
 800273e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002750:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d112      	bne.n	800277e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002764:	e00b      	b.n	800277e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276a:	f043 0210 	orr.w	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f984 	bl	8002a8c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	220c      	movs	r2, #12
 800278a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_IRQHandler+0x1d4>
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80b3 	beq.w	8002912 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80ad 	beq.w	8002912 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d105      	bne.n	80027d0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fc36 	bl	8002046 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80027da:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fbf1 	bl	8001fc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027e6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a10      	ldr	r2, [pc, #64]	@ (8002830 <HAL_ADC_IRQHandler+0x264>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d009      	beq.n	8002806 <HAL_ADC_IRQHandler+0x23a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a11      	ldr	r2, [pc, #68]	@ (800283c <HAL_ADC_IRQHandler+0x270>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d002      	beq.n	8002802 <HAL_ADC_IRQHandler+0x236>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	e003      	b.n	800280a <HAL_ADC_IRQHandler+0x23e>
 8002802:	4b0f      	ldr	r3, [pc, #60]	@ (8002840 <HAL_ADC_IRQHandler+0x274>)
 8002804:	e001      	b.n	800280a <HAL_ADC_IRQHandler+0x23e>
 8002806:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	4293      	cmp	r3, r2
 8002810:	d008      	beq.n	8002824 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b06      	cmp	r3, #6
 800281c:	d002      	beq.n	8002824 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b07      	cmp	r3, #7
 8002822:	d10f      	bne.n	8002844 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	623b      	str	r3, [r7, #32]
 800282c:	e01f      	b.n	800286e <HAL_ADC_IRQHandler+0x2a2>
 800282e:	bf00      	nop
 8002830:	50000100 	.word	0x50000100
 8002834:	50000300 	.word	0x50000300
 8002838:	50000700 	.word	0x50000700
 800283c:	50000500 	.word	0x50000500
 8002840:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a8b      	ldr	r2, [pc, #556]	@ (8002a78 <HAL_ADC_IRQHandler+0x4ac>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_ADC_IRQHandler+0x296>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a8a      	ldr	r2, [pc, #552]	@ (8002a7c <HAL_ADC_IRQHandler+0x4b0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d002      	beq.n	800285e <HAL_ADC_IRQHandler+0x292>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	e003      	b.n	8002866 <HAL_ADC_IRQHandler+0x29a>
 800285e:	4b88      	ldr	r3, [pc, #544]	@ (8002a80 <HAL_ADC_IRQHandler+0x4b4>)
 8002860:	e001      	b.n	8002866 <HAL_ADC_IRQHandler+0x29a>
 8002862:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002866:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d047      	beq.n	8002904 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_ADC_IRQHandler+0x2c2>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d03f      	beq.n	8002904 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800288a:	2b00      	cmp	r3, #0
 800288c:	d13a      	bne.n	8002904 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002898:	2b40      	cmp	r3, #64	@ 0x40
 800289a:	d133      	bne.n	8002904 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d12e      	bne.n	8002904 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fcbe 	bl	800222c <LL_ADC_INJ_IsConversionOngoing>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d11a      	bne.n	80028ec <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028c4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d112      	bne.n	8002904 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028ea:	e00b      	b.n	8002904 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f0:	f043 0210 	orr.w	r2, r3, #16
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fd45 	bl	8003394 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2260      	movs	r2, #96	@ 0x60
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002918:	2b00      	cmp	r3, #0
 800291a:	d011      	beq.n	8002940 <HAL_ADC_IRQHandler+0x374>
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00c      	beq.n	8002940 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f8b4 	bl	8002aa0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2280      	movs	r2, #128	@ 0x80
 800293e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d012      	beq.n	8002970 <HAL_ADC_IRQHandler+0x3a4>
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00d      	beq.n	8002970 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002958:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fd2b 	bl	80033bc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800296e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002976:	2b00      	cmp	r3, #0
 8002978:	d012      	beq.n	80029a0 <HAL_ADC_IRQHandler+0x3d4>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002988:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fd1d 	bl	80033d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800299e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d043      	beq.n	8002a32 <HAL_ADC_IRQHandler+0x466>
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d03e      	beq.n	8002a32 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80029bc:	2301      	movs	r3, #1
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c0:	e021      	b.n	8002a06 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d015      	beq.n	80029f4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029d0:	d004      	beq.n	80029dc <HAL_ADC_IRQHandler+0x410>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a28      	ldr	r2, [pc, #160]	@ (8002a78 <HAL_ADC_IRQHandler+0x4ac>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_IRQHandler+0x414>
 80029dc:	4b29      	ldr	r3, [pc, #164]	@ (8002a84 <HAL_ADC_IRQHandler+0x4b8>)
 80029de:	e000      	b.n	80029e2 <HAL_ADC_IRQHandler+0x416>
 80029e0:	4b29      	ldr	r3, [pc, #164]	@ (8002a88 <HAL_ADC_IRQHandler+0x4bc>)
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fba0 	bl	8002128 <LL_ADC_GetMultiDMATransfer>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80029ee:	2301      	movs	r3, #1
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f2:	e008      	b.n	8002a06 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002a02:	2301      	movs	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10e      	bne.n	8002a2a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a10:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a1c:	f043 0202 	orr.w	r2, r3, #2
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f845 	bl	8002ab4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2210      	movs	r2, #16
 8002a30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d018      	beq.n	8002a6e <HAL_ADC_IRQHandler+0x4a2>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d013      	beq.n	8002a6e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a56:	f043 0208 	orr.w	r2, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a66:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fc9d 	bl	80033a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002a6e:	bf00      	nop
 8002a70:	3728      	adds	r7, #40	@ 0x28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	50000100 	.word	0x50000100
 8002a7c:	50000500 	.word	0x50000500
 8002a80:	50000400 	.word	0x50000400
 8002a84:	50000300 	.word	0x50000300
 8002a88:	50000700 	.word	0x50000700

08002a8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b0b6      	sub	sp, #216	@ 0xd8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d102      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x24>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	f000 bc13 	b.w	8003312 <HAL_ADC_ConfigChannel+0x84a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fb84 	bl	8002206 <LL_ADC_REG_IsConversionOngoing>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f040 83f3 	bne.w	80032ec <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f7ff fa6b 	bl	8001fee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fb72 	bl	8002206 <LL_ADC_REG_IsConversionOngoing>
 8002b22:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fb7e 	bl	800222c <LL_ADC_INJ_IsConversionOngoing>
 8002b30:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f040 81d9 	bne.w	8002ef0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 81d4 	bne.w	8002ef0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b50:	d10f      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	f7ff fa85 	bl	800206c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fa19 	bl	8001fa2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002b70:	e00e      	b.n	8002b90 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6819      	ldr	r1, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	f7ff fa74 	bl	800206c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fa09 	bl	8001fa2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	08db      	lsrs	r3, r3, #3
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d022      	beq.n	8002bf8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6919      	ldr	r1, [r3, #16]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bc2:	f7ff f963 	bl	8001e8c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6919      	ldr	r1, [r3, #16]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f7ff f9af 	bl	8001f36 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d102      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x126>
 8002be8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bec:	e000      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x128>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f7ff f9bb 	bl	8001f6c <LL_ADC_SetOffsetSaturation>
 8002bf6:	e17b      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff f968 	bl	8001ed4 <LL_ADC_GetOffsetChannel>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x15c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2100      	movs	r1, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff f95d 	bl	8001ed4 <LL_ADC_GetOffsetChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	f003 021f 	and.w	r2, r3, #31
 8002c22:	e01e      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x19a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff f952 	bl	8001ed4 <LL_ADC_GetOffsetChannel>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e004      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d105      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x1b2>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	e018      	b.n	8002cac <HAL_ADC_ConfigChannel+0x1e4>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	e004      	b.n	8002cac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d106      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff f921 	bl	8001f00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff f905 	bl	8001ed4 <LL_ADC_GetOffsetChannel>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x222>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff f8fa 	bl	8001ed4 <LL_ADC_GetOffsetChannel>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	0e9b      	lsrs	r3, r3, #26
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	e01e      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x260>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff f8ef 	bl	8001ed4 <LL_ADC_GetOffsetChannel>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002d08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002d18:	2320      	movs	r3, #32
 8002d1a:	e004      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x278>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	e018      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x2aa>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d4c:	fa93 f3a3 	rbit	r3, r3
 8002d50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002d64:	2320      	movs	r3, #32
 8002d66:	e004      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d106      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f8be 	bl	8001f00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2102      	movs	r1, #2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff f8a2 	bl	8001ed4 <LL_ADC_GetOffsetChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x2e8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2102      	movs	r1, #2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f897 	bl	8001ed4 <LL_ADC_GetOffsetChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	0e9b      	lsrs	r3, r3, #26
 8002daa:	f003 021f 	and.w	r2, r3, #31
 8002dae:	e01e      	b.n	8002dee <HAL_ADC_ConfigChannel+0x326>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2102      	movs	r1, #2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f88c 	bl	8001ed4 <LL_ADC_GetOffsetChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002dde:	2320      	movs	r3, #32
 8002de0:	e004      	b.n	8002dec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d105      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x33e>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	0e9b      	lsrs	r3, r3, #26
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	e016      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x36c>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002e18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002e26:	2320      	movs	r3, #32
 8002e28:	e004      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d106      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2102      	movs	r1, #2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff f85d 	bl	8001f00 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2103      	movs	r1, #3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff f841 	bl	8001ed4 <LL_ADC_GetOffsetChannel>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x3aa>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2103      	movs	r1, #3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff f836 	bl	8001ed4 <LL_ADC_GetOffsetChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	0e9b      	lsrs	r3, r3, #26
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	e017      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x3da>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2103      	movs	r1, #3
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff f82b 	bl	8001ed4 <LL_ADC_GetOffsetChannel>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e84:	fa93 f3a3 	rbit	r3, r3
 8002e88:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002e8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e8c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002e8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e94:	2320      	movs	r3, #32
 8002e96:	e003      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d105      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x3f2>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0e9b      	lsrs	r3, r3, #26
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	e011      	b.n	8002ede <HAL_ADC_ConfigChannel+0x416>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002ec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002eca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	e003      	b.n	8002ede <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d106      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2103      	movs	r1, #3
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff f808 	bl	8001f00 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff f973 	bl	80021e0 <LL_ADC_IsEnabled>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 813d 	bne.w	800317c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f7ff f8d8 	bl	80020c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4aa2      	ldr	r2, [pc, #648]	@ (80031a4 <HAL_ADC_ConfigChannel+0x6dc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	f040 812e 	bne.w	800317c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x480>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	0e9b      	lsrs	r3, r3, #26
 8002f36:	3301      	adds	r3, #1
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2b09      	cmp	r3, #9
 8002f3e:	bf94      	ite	ls
 8002f40:	2301      	movls	r3, #1
 8002f42:	2300      	movhi	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e019      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x4b4>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f58:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e003      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002f64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2b09      	cmp	r3, #9
 8002f74:	bf94      	ite	ls
 8002f76:	2301      	movls	r3, #1
 8002f78:	2300      	movhi	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d079      	beq.n	8003074 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d107      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x4d4>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	3301      	adds	r3, #1
 8002f94:	069b      	lsls	r3, r3, #26
 8002f96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f9a:	e015      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x500>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	e003      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	069b      	lsls	r3, r3, #26
 8002fc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x520>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0e9b      	lsrs	r3, r3, #26
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	e017      	b.n	8003018 <HAL_ADC_ConfigChannel+0x550>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002ff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003000:	2320      	movs	r3, #32
 8003002:	e003      	b.n	800300c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003004:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	3301      	adds	r3, #1
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	2101      	movs	r1, #1
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	ea42 0103 	orr.w	r1, r2, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <HAL_ADC_ConfigChannel+0x576>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	3301      	adds	r3, #1
 8003030:	f003 021f 	and.w	r2, r3, #31
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	051b      	lsls	r3, r3, #20
 800303c:	e018      	b.n	8003070 <HAL_ADC_ConfigChannel+0x5a8>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800304c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e003      	b.n	8003062 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800305a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003070:	430b      	orrs	r3, r1
 8003072:	e07e      	b.n	8003172 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x5c8>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	3301      	adds	r3, #1
 8003088:	069b      	lsls	r3, r3, #26
 800308a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800308e:	e015      	b.n	80030bc <HAL_ADC_ConfigChannel+0x5f4>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800309e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80030a8:	2320      	movs	r3, #32
 80030aa:	e003      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80030ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3301      	adds	r3, #1
 80030b6:	069b      	lsls	r3, r3, #26
 80030b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x614>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	0e9b      	lsrs	r3, r3, #26
 80030ce:	3301      	adds	r3, #1
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	2101      	movs	r1, #1
 80030d6:	fa01 f303 	lsl.w	r3, r1, r3
 80030da:	e017      	b.n	800310c <HAL_ADC_ConfigChannel+0x644>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	61fb      	str	r3, [r7, #28]
  return result;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80030f4:	2320      	movs	r3, #32
 80030f6:	e003      	b.n	8003100 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	3301      	adds	r3, #1
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2101      	movs	r1, #1
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	ea42 0103 	orr.w	r1, r2, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10d      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x670>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	0e9b      	lsrs	r3, r3, #26
 8003122:	3301      	adds	r3, #1
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	3b1e      	subs	r3, #30
 8003130:	051b      	lsls	r3, r3, #20
 8003132:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003136:	e01b      	b.n	8003170 <HAL_ADC_ConfigChannel+0x6a8>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	613b      	str	r3, [r7, #16]
  return result;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e003      	b.n	800315c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	f003 021f 	and.w	r2, r3, #31
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	3b1e      	subs	r3, #30
 800316a:	051b      	lsls	r3, r3, #20
 800316c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003170:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003176:	4619      	mov	r1, r3
 8003178:	f7fe ff78 	bl	800206c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b09      	ldr	r3, [pc, #36]	@ (80031a8 <HAL_ADC_ConfigChannel+0x6e0>)
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80be 	beq.w	8003306 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003192:	d004      	beq.n	800319e <HAL_ADC_ConfigChannel+0x6d6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a04      	ldr	r2, [pc, #16]	@ (80031ac <HAL_ADC_ConfigChannel+0x6e4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d10a      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x6ec>
 800319e:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <HAL_ADC_ConfigChannel+0x6e8>)
 80031a0:	e009      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x6ee>
 80031a2:	bf00      	nop
 80031a4:	407f0000 	.word	0x407f0000
 80031a8:	80080000 	.word	0x80080000
 80031ac:	50000100 	.word	0x50000100
 80031b0:	50000300 	.word	0x50000300
 80031b4:	4b59      	ldr	r3, [pc, #356]	@ (800331c <HAL_ADC_ConfigChannel+0x854>)
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fe5a 	bl	8001e70 <LL_ADC_GetCommonPathInternalCh>
 80031bc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a56      	ldr	r2, [pc, #344]	@ (8003320 <HAL_ADC_ConfigChannel+0x858>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_ADC_ConfigChannel+0x70c>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a55      	ldr	r2, [pc, #340]	@ (8003324 <HAL_ADC_ConfigChannel+0x85c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d13a      	bne.n	800324a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80031d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d134      	bne.n	800324a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031e8:	d005      	beq.n	80031f6 <HAL_ADC_ConfigChannel+0x72e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a4e      	ldr	r2, [pc, #312]	@ (8003328 <HAL_ADC_ConfigChannel+0x860>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	f040 8085 	bne.w	8003300 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031fe:	d004      	beq.n	800320a <HAL_ADC_ConfigChannel+0x742>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a49      	ldr	r2, [pc, #292]	@ (800332c <HAL_ADC_ConfigChannel+0x864>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x746>
 800320a:	4a49      	ldr	r2, [pc, #292]	@ (8003330 <HAL_ADC_ConfigChannel+0x868>)
 800320c:	e000      	b.n	8003210 <HAL_ADC_ConfigChannel+0x748>
 800320e:	4a43      	ldr	r2, [pc, #268]	@ (800331c <HAL_ADC_ConfigChannel+0x854>)
 8003210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003214:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f7fe fe15 	bl	8001e4a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003220:	4b44      	ldr	r3, [pc, #272]	@ (8003334 <HAL_ADC_ConfigChannel+0x86c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	099b      	lsrs	r3, r3, #6
 8003226:	4a44      	ldr	r2, [pc, #272]	@ (8003338 <HAL_ADC_ConfigChannel+0x870>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800323a:	e002      	b.n	8003242 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3b01      	subs	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f9      	bne.n	800323c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003248:	e05a      	b.n	8003300 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a3b      	ldr	r2, [pc, #236]	@ (800333c <HAL_ADC_ConfigChannel+0x874>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d125      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003258:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d11f      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a31      	ldr	r2, [pc, #196]	@ (800332c <HAL_ADC_ConfigChannel+0x864>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d104      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x7ac>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a34      	ldr	r2, [pc, #208]	@ (8003340 <HAL_ADC_ConfigChannel+0x878>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d047      	beq.n	8003304 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800327c:	d004      	beq.n	8003288 <HAL_ADC_ConfigChannel+0x7c0>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2a      	ldr	r2, [pc, #168]	@ (800332c <HAL_ADC_ConfigChannel+0x864>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_ADC_ConfigChannel+0x7c4>
 8003288:	4a29      	ldr	r2, [pc, #164]	@ (8003330 <HAL_ADC_ConfigChannel+0x868>)
 800328a:	e000      	b.n	800328e <HAL_ADC_ConfigChannel+0x7c6>
 800328c:	4a23      	ldr	r2, [pc, #140]	@ (800331c <HAL_ADC_ConfigChannel+0x854>)
 800328e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003292:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f7fe fdd6 	bl	8001e4a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800329e:	e031      	b.n	8003304 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a27      	ldr	r2, [pc, #156]	@ (8003344 <HAL_ADC_ConfigChannel+0x87c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d12d      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d127      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1c      	ldr	r2, [pc, #112]	@ (800332c <HAL_ADC_ConfigChannel+0x864>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d022      	beq.n	8003306 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032c8:	d004      	beq.n	80032d4 <HAL_ADC_ConfigChannel+0x80c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a17      	ldr	r2, [pc, #92]	@ (800332c <HAL_ADC_ConfigChannel+0x864>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x810>
 80032d4:	4a16      	ldr	r2, [pc, #88]	@ (8003330 <HAL_ADC_ConfigChannel+0x868>)
 80032d6:	e000      	b.n	80032da <HAL_ADC_ConfigChannel+0x812>
 80032d8:	4a10      	ldr	r2, [pc, #64]	@ (800331c <HAL_ADC_ConfigChannel+0x854>)
 80032da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f7fe fdb0 	bl	8001e4a <LL_ADC_SetCommonPathInternalCh>
 80032ea:	e00c      	b.n	8003306 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80032fe:	e002      	b.n	8003306 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003304:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800330e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003312:	4618      	mov	r0, r3
 8003314:	37d8      	adds	r7, #216	@ 0xd8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	50000700 	.word	0x50000700
 8003320:	c3210000 	.word	0xc3210000
 8003324:	90c00010 	.word	0x90c00010
 8003328:	50000600 	.word	0x50000600
 800332c:	50000100 	.word	0x50000100
 8003330:	50000300 	.word	0x50000300
 8003334:	20000000 	.word	0x20000000
 8003338:	053e2d63 	.word	0x053e2d63
 800333c:	c7520000 	.word	0xc7520000
 8003340:	50000500 	.word	0x50000500
 8003344:	cb840000 	.word	0xcb840000

08003348 <LL_ADC_IsEnabled>:
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <LL_ADC_IsEnabled+0x18>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <LL_ADC_IsEnabled+0x1a>
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <LL_ADC_REG_IsConversionOngoing>:
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b04      	cmp	r3, #4
 8003380:	d101      	bne.n	8003386 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b0a1      	sub	sp, #132	@ 0x84
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003412:	2302      	movs	r3, #2
 8003414:	e0e7      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800341e:	2300      	movs	r3, #0
 8003420:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003422:	2300      	movs	r3, #0
 8003424:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800342e:	d102      	bne.n	8003436 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003430:	4b6f      	ldr	r3, [pc, #444]	@ (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003432:	60bb      	str	r3, [r7, #8]
 8003434:	e009      	b.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6e      	ldr	r2, [pc, #440]	@ (80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d102      	bne.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003440:	4b6d      	ldr	r3, [pc, #436]	@ (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	e001      	b.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0be      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff ff7f 	bl	800336e <LL_ADC_REG_IsConversionOngoing>
 8003470:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff ff79 	bl	800336e <LL_ADC_REG_IsConversionOngoing>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 80a0 	bne.w	80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003484:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 809c 	bne.w	80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003494:	d004      	beq.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a55      	ldr	r2, [pc, #340]	@ (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80034a0:	4b56      	ldr	r3, [pc, #344]	@ (80035fc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80034a2:	e000      	b.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80034a4:	4b56      	ldr	r3, [pc, #344]	@ (8003600 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80034a6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d04b      	beq.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034c2:	035b      	lsls	r3, r3, #13
 80034c4:	430b      	orrs	r3, r1
 80034c6:	431a      	orrs	r2, r3
 80034c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034d4:	d004      	beq.n	80034e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a45      	ldr	r2, [pc, #276]	@ (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10f      	bne.n	8003500 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80034e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034e4:	f7ff ff30 	bl	8003348 <LL_ADC_IsEnabled>
 80034e8:	4604      	mov	r4, r0
 80034ea:	4841      	ldr	r0, [pc, #260]	@ (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034ec:	f7ff ff2c 	bl	8003348 <LL_ADC_IsEnabled>
 80034f0:	4603      	mov	r3, r0
 80034f2:	4323      	orrs	r3, r4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e012      	b.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003500:	483c      	ldr	r0, [pc, #240]	@ (80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003502:	f7ff ff21 	bl	8003348 <LL_ADC_IsEnabled>
 8003506:	4604      	mov	r4, r0
 8003508:	483b      	ldr	r0, [pc, #236]	@ (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800350a:	f7ff ff1d 	bl	8003348 <LL_ADC_IsEnabled>
 800350e:	4603      	mov	r3, r0
 8003510:	431c      	orrs	r4, r3
 8003512:	483c      	ldr	r0, [pc, #240]	@ (8003604 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003514:	f7ff ff18 	bl	8003348 <LL_ADC_IsEnabled>
 8003518:	4603      	mov	r3, r0
 800351a:	4323      	orrs	r3, r4
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d056      	beq.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800352a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003532:	f023 030f 	bic.w	r3, r3, #15
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	6811      	ldr	r1, [r2, #0]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	6892      	ldr	r2, [r2, #8]
 800353e:	430a      	orrs	r2, r1
 8003540:	431a      	orrs	r2, r3
 8003542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003544:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003546:	e047      	b.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003548:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003550:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003552:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800355c:	d004      	beq.n	8003568 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a23      	ldr	r2, [pc, #140]	@ (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d10f      	bne.n	8003588 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003568:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800356c:	f7ff feec 	bl	8003348 <LL_ADC_IsEnabled>
 8003570:	4604      	mov	r4, r0
 8003572:	481f      	ldr	r0, [pc, #124]	@ (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003574:	f7ff fee8 	bl	8003348 <LL_ADC_IsEnabled>
 8003578:	4603      	mov	r3, r0
 800357a:	4323      	orrs	r3, r4
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e012      	b.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003588:	481a      	ldr	r0, [pc, #104]	@ (80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800358a:	f7ff fedd 	bl	8003348 <LL_ADC_IsEnabled>
 800358e:	4604      	mov	r4, r0
 8003590:	4819      	ldr	r0, [pc, #100]	@ (80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003592:	f7ff fed9 	bl	8003348 <LL_ADC_IsEnabled>
 8003596:	4603      	mov	r3, r0
 8003598:	431c      	orrs	r4, r3
 800359a:	481a      	ldr	r0, [pc, #104]	@ (8003604 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800359c:	f7ff fed4 	bl	8003348 <LL_ADC_IsEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4323      	orrs	r3, r4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d012      	beq.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035ba:	f023 030f 	bic.w	r3, r3, #15
 80035be:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035c2:	e009      	b.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80035d6:	e000      	b.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80035e2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3784      	adds	r7, #132	@ 0x84
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd90      	pop	{r4, r7, pc}
 80035ee:	bf00      	nop
 80035f0:	50000100 	.word	0x50000100
 80035f4:	50000400 	.word	0x50000400
 80035f8:	50000500 	.word	0x50000500
 80035fc:	50000300 	.word	0x50000300
 8003600:	50000700 	.word	0x50000700
 8003604:	50000600 	.word	0x50000600

08003608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003618:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <__NVIC_SetPriorityGrouping+0x44>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003624:	4013      	ands	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800363a:	4a04      	ldr	r2, [pc, #16]	@ (800364c <__NVIC_SetPriorityGrouping+0x44>)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	60d3      	str	r3, [r2, #12]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003654:	4b04      	ldr	r3, [pc, #16]	@ (8003668 <__NVIC_GetPriorityGrouping+0x18>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	f003 0307 	and.w	r3, r3, #7
}
 800365e:	4618      	mov	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	2b00      	cmp	r3, #0
 800367c:	db0b      	blt.n	8003696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	4907      	ldr	r1, [pc, #28]	@ (80036a4 <__NVIC_EnableIRQ+0x38>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	2001      	movs	r0, #1
 800368e:	fa00 f202 	lsl.w	r2, r0, r2
 8003692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000e100 	.word	0xe000e100

080036a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	6039      	str	r1, [r7, #0]
 80036b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	db0a      	blt.n	80036d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	490c      	ldr	r1, [pc, #48]	@ (80036f4 <__NVIC_SetPriority+0x4c>)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	0112      	lsls	r2, r2, #4
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	440b      	add	r3, r1
 80036cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036d0:	e00a      	b.n	80036e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4908      	ldr	r1, [pc, #32]	@ (80036f8 <__NVIC_SetPriority+0x50>)
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	3b04      	subs	r3, #4
 80036e0:	0112      	lsls	r2, r2, #4
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	440b      	add	r3, r1
 80036e6:	761a      	strb	r2, [r3, #24]
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000e100 	.word	0xe000e100
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b089      	sub	sp, #36	@ 0x24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f1c3 0307 	rsb	r3, r3, #7
 8003716:	2b04      	cmp	r3, #4
 8003718:	bf28      	it	cs
 800371a:	2304      	movcs	r3, #4
 800371c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3304      	adds	r3, #4
 8003722:	2b06      	cmp	r3, #6
 8003724:	d902      	bls.n	800372c <NVIC_EncodePriority+0x30>
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3b03      	subs	r3, #3
 800372a:	e000      	b.n	800372e <NVIC_EncodePriority+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003730:	f04f 32ff 	mov.w	r2, #4294967295
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43da      	mvns	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	401a      	ands	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003744:	f04f 31ff 	mov.w	r1, #4294967295
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43d9      	mvns	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003754:	4313      	orrs	r3, r2
         );
}
 8003756:	4618      	mov	r0, r3
 8003758:	3724      	adds	r7, #36	@ 0x24
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ff4c 	bl	8003608 <__NVIC_SetPriorityGrouping>
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003786:	f7ff ff63 	bl	8003650 <__NVIC_GetPriorityGrouping>
 800378a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	6978      	ldr	r0, [r7, #20]
 8003792:	f7ff ffb3 	bl	80036fc <NVIC_EncodePriority>
 8003796:	4602      	mov	r2, r0
 8003798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379c:	4611      	mov	r1, r2
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff ff82 	bl	80036a8 <__NVIC_SetPriority>
}
 80037a4:	bf00      	nop
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ff56 	bl	800366c <__NVIC_EnableIRQ>
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e054      	b.n	8003884 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7f5b      	ldrb	r3, [r3, #29]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd fa6e 	bl	8000ccc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	791b      	ldrb	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10c      	bne.n	8003818 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a22      	ldr	r2, [pc, #136]	@ (800388c <HAL_CRC_Init+0xc4>)
 8003804:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0218 	bic.w	r2, r2, #24
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	e00c      	b.n	8003832 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6899      	ldr	r1, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	461a      	mov	r2, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f834 	bl	8003890 <HAL_CRCEx_Polynomial_Set>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e028      	b.n	8003884 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	795b      	ldrb	r3, [r3, #5]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f04f 32ff 	mov.w	r2, #4294967295
 8003842:	611a      	str	r2, [r3, #16]
 8003844:	e004      	b.n	8003850 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6912      	ldr	r2, [r2, #16]
 800384e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699a      	ldr	r2, [r3, #24]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	04c11db7 	.word	0x04c11db7

08003890 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80038a0:	231f      	movs	r3, #31
 80038a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
 80038b2:	e063      	b.n	800397c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80038b4:	bf00      	nop
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1e5a      	subs	r2, r3, #1
 80038ba:	613a      	str	r2, [r7, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <HAL_CRCEx_Polynomial_Set+0x44>
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b18      	cmp	r3, #24
 80038d8:	d846      	bhi.n	8003968 <HAL_CRCEx_Polynomial_Set+0xd8>
 80038da:	a201      	add	r2, pc, #4	@ (adr r2, 80038e0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80038dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e0:	0800396f 	.word	0x0800396f
 80038e4:	08003969 	.word	0x08003969
 80038e8:	08003969 	.word	0x08003969
 80038ec:	08003969 	.word	0x08003969
 80038f0:	08003969 	.word	0x08003969
 80038f4:	08003969 	.word	0x08003969
 80038f8:	08003969 	.word	0x08003969
 80038fc:	08003969 	.word	0x08003969
 8003900:	0800395d 	.word	0x0800395d
 8003904:	08003969 	.word	0x08003969
 8003908:	08003969 	.word	0x08003969
 800390c:	08003969 	.word	0x08003969
 8003910:	08003969 	.word	0x08003969
 8003914:	08003969 	.word	0x08003969
 8003918:	08003969 	.word	0x08003969
 800391c:	08003969 	.word	0x08003969
 8003920:	08003951 	.word	0x08003951
 8003924:	08003969 	.word	0x08003969
 8003928:	08003969 	.word	0x08003969
 800392c:	08003969 	.word	0x08003969
 8003930:	08003969 	.word	0x08003969
 8003934:	08003969 	.word	0x08003969
 8003938:	08003969 	.word	0x08003969
 800393c:	08003969 	.word	0x08003969
 8003940:	08003945 	.word	0x08003945
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b06      	cmp	r3, #6
 8003948:	d913      	bls.n	8003972 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800394e:	e010      	b.n	8003972 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b07      	cmp	r3, #7
 8003954:	d90f      	bls.n	8003976 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800395a:	e00c      	b.n	8003976 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2b0f      	cmp	r3, #15
 8003960:	d90b      	bls.n	800397a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003966:	e008      	b.n	800397a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	75fb      	strb	r3, [r7, #23]
        break;
 800396c:	e006      	b.n	800397c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800396e:	bf00      	nop
 8003970:	e004      	b.n	800397c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003972:	bf00      	nop
 8003974:	e002      	b.n	800397c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800397a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 0118 	bic.w	r1, r3, #24
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e08d      	b.n	8003ada <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b47      	ldr	r3, [pc, #284]	@ (8003ae4 <HAL_DMA_Init+0x138>)
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d80f      	bhi.n	80039ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	4b45      	ldr	r3, [pc, #276]	@ (8003ae8 <HAL_DMA_Init+0x13c>)
 80039d2:	4413      	add	r3, r2
 80039d4:	4a45      	ldr	r2, [pc, #276]	@ (8003aec <HAL_DMA_Init+0x140>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	091b      	lsrs	r3, r3, #4
 80039dc:	009a      	lsls	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a42      	ldr	r2, [pc, #264]	@ (8003af0 <HAL_DMA_Init+0x144>)
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80039e8:	e00e      	b.n	8003a08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b40      	ldr	r3, [pc, #256]	@ (8003af4 <HAL_DMA_Init+0x148>)
 80039f2:	4413      	add	r3, r2
 80039f4:	4a3d      	ldr	r2, [pc, #244]	@ (8003aec <HAL_DMA_Init+0x140>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	009a      	lsls	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a3c      	ldr	r2, [pc, #240]	@ (8003af8 <HAL_DMA_Init+0x14c>)
 8003a06:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f972 	bl	8003d44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a68:	d102      	bne.n	8003a70 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a84:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d010      	beq.n	8003ab0 <HAL_DMA_Init+0x104>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d80c      	bhi.n	8003ab0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f992 	bl	8003dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	e008      	b.n	8003ac2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40020407 	.word	0x40020407
 8003ae8:	bffdfff8 	.word	0xbffdfff8
 8003aec:	cccccccd 	.word	0xcccccccd
 8003af0:	40020000 	.word	0x40020000
 8003af4:	bffdfbf8 	.word	0xbffdfbf8
 8003af8:	40020400 	.word	0x40020400

08003afc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d00d      	beq.n	8003b30 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2204      	movs	r2, #4
 8003b18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
 8003b2e:	e047      	b.n	8003bc0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 020e 	bic.w	r2, r2, #14
 8003b3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b64:	f003 021f 	and.w	r2, r3, #31
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b72:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00c      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
    }
  }
  return status;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2204      	movs	r2, #4
 8003bec:	409a      	lsls	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d026      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x7a>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d021      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d107      	bne.n	8003c1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0204 	bic.w	r2, r2, #4
 8003c1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c22:	f003 021f 	and.w	r2, r3, #31
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	2104      	movs	r1, #4
 8003c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d071      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003c42:	e06c      	b.n	8003d1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d02e      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d029      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 020a 	bic.w	r2, r2, #10
 8003c7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8c:	f003 021f 	and.w	r2, r3, #31
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	2102      	movs	r1, #2
 8003c96:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d038      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003cb4:	e033      	b.n	8003d1e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d02a      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d025      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 020e 	bic.w	r2, r2, #14
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce8:	f003 021f 	and.w	r2, r3, #31
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
}
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d36:	b2db      	uxtb	r3, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b16      	ldr	r3, [pc, #88]	@ (8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d802      	bhi.n	8003d5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003d58:	4b15      	ldr	r3, [pc, #84]	@ (8003db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e001      	b.n	8003d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003d5e:	4b15      	ldr	r3, [pc, #84]	@ (8003db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d60:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	3b08      	subs	r3, #8
 8003d6e:	4a12      	ldr	r2, [pc, #72]	@ (8003db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	009a      	lsls	r2, r3, #2
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	461a      	mov	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8003dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	2201      	movs	r2, #1
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40020407 	.word	0x40020407
 8003db0:	40020800 	.word	0x40020800
 8003db4:	40020820 	.word	0x40020820
 8003db8:	cccccccd 	.word	0xcccccccd
 8003dbc:	40020880 	.word	0x40020880

08003dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a08      	ldr	r2, [pc, #32]	@ (8003e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003de2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	2201      	movs	r2, #1
 8003dee:	409a      	lsls	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	1000823f 	.word	0x1000823f
 8003e04:	40020940 	.word	0x40020940

08003e08 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e147      	b.n	80040aa <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fc ffec 	bl	8000e0c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0210 	bic.w	r2, r2, #16
 8003e42:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e44:	f7fd ffbe 	bl	8001dc4 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e4a:	e012      	b.n	8003e72 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e4c:	f7fd ffba 	bl	8001dc4 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b0a      	cmp	r3, #10
 8003e58:	d90b      	bls.n	8003e72 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5e:	f043 0201 	orr.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2203      	movs	r2, #3
 8003e6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e11b      	b.n	80040aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d0e5      	beq.n	8003e4c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e90:	f7fd ff98 	bl	8001dc4 <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003e96:	e012      	b.n	8003ebe <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003e98:	f7fd ff94 	bl	8001dc4 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b0a      	cmp	r3, #10
 8003ea4:	d90b      	bls.n	8003ebe <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eaa:	f043 0201 	orr.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e0f5      	b.n	80040aa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0e5      	beq.n	8003e98 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0202 	orr.w	r2, r2, #2
 8003eda:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a74      	ldr	r2, [pc, #464]	@ (80040b4 <HAL_FDCAN_Init+0x2ac>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d103      	bne.n	8003eee <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003ee6:	4a74      	ldr	r2, [pc, #464]	@ (80040b8 <HAL_FDCAN_Init+0x2b0>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	7c1b      	ldrb	r3, [r3, #16]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d108      	bne.n	8003f08 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f04:	619a      	str	r2, [r3, #24]
 8003f06:	e007      	b.n	8003f18 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f16:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	7c5b      	ldrb	r3, [r3, #17]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d108      	bne.n	8003f32 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f2e:	619a      	str	r2, [r3, #24]
 8003f30:	e007      	b.n	8003f42 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f40:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	7c9b      	ldrb	r3, [r3, #18]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d108      	bne.n	8003f5c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699a      	ldr	r2, [r3, #24]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f58:	619a      	str	r2, [r3, #24]
 8003f5a:	e007      	b.n	8003f6c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f6a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699a      	ldr	r2, [r3, #24]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8003f90:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0210 	bic.w	r2, r2, #16
 8003fa0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d108      	bne.n	8003fbc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699a      	ldr	r2, [r3, #24]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0204 	orr.w	r2, r2, #4
 8003fb8:	619a      	str	r2, [r3, #24]
 8003fba:	e02c      	b.n	8004016 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d028      	beq.n	8004016 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d01c      	beq.n	8004006 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fda:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0210 	orr.w	r2, r2, #16
 8003fea:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d110      	bne.n	8004016 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0220 	orr.w	r2, r2, #32
 8004002:	619a      	str	r2, [r3, #24]
 8004004:	e007      	b.n	8004016 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0220 	orr.w	r2, r2, #32
 8004014:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	3b01      	subs	r3, #1
 800401c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	3b01      	subs	r3, #1
 8004024:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004026:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800402e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	3b01      	subs	r3, #1
 8004038:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800403e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004040:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800404a:	d115      	bne.n	8004078 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004050:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	3b01      	subs	r3, #1
 8004058:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800405a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004060:	3b01      	subs	r3, #1
 8004062:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004064:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	3b01      	subs	r3, #1
 800406e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004074:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004076:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f83c 	bl	800410c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40006400 	.word	0x40006400
 80040b8:	40006500 	.word	0x40006500

080040bc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d110      	bne.n	80040f2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e006      	b.n	8004100 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f6:	f043 0204 	orr.w	r2, r3, #4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
  }
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004114:	4b30      	ldr	r3, [pc, #192]	@ (80041d8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004116:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a2f      	ldr	r2, [pc, #188]	@ (80041dc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d103      	bne.n	800412a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004128:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a2c      	ldr	r2, [pc, #176]	@ (80041e0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d103      	bne.n	800413c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800413a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800414a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004152:	041a      	lsls	r2, r3, #16
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004170:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004178:	061a      	lsls	r2, r3, #24
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e005      	b.n	80041be <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3304      	adds	r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d3f3      	bcc.n	80041b2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80041ca:	bf00      	nop
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	4000a400 	.word	0x4000a400
 80041dc:	40006800 	.word	0x40006800
 80041e0:	40006c00 	.word	0x40006c00

080041e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041f2:	e15a      	b.n	80044aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	2101      	movs	r1, #1
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	4013      	ands	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 814c 	beq.w	80044a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d005      	beq.n	8004224 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004220:	2b02      	cmp	r3, #2
 8004222:	d130      	bne.n	8004286 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	2203      	movs	r2, #3
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800425a:	2201      	movs	r2, #1
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4013      	ands	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	091b      	lsrs	r3, r3, #4
 8004270:	f003 0201 	and.w	r2, r3, #1
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	2b03      	cmp	r3, #3
 8004290:	d017      	beq.n	80042c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	2203      	movs	r2, #3
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43db      	mvns	r3, r3
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d123      	bne.n	8004316 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	08da      	lsrs	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3208      	adds	r2, #8
 80042d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	220f      	movs	r2, #15
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4013      	ands	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	08da      	lsrs	r2, r3, #3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3208      	adds	r2, #8
 8004310:	6939      	ldr	r1, [r7, #16]
 8004312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	2203      	movs	r2, #3
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4013      	ands	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f003 0203 	and.w	r2, r3, #3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80a6 	beq.w	80044a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004358:	4b5b      	ldr	r3, [pc, #364]	@ (80044c8 <HAL_GPIO_Init+0x2e4>)
 800435a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800435c:	4a5a      	ldr	r2, [pc, #360]	@ (80044c8 <HAL_GPIO_Init+0x2e4>)
 800435e:	f043 0301 	orr.w	r3, r3, #1
 8004362:	6613      	str	r3, [r2, #96]	@ 0x60
 8004364:	4b58      	ldr	r3, [pc, #352]	@ (80044c8 <HAL_GPIO_Init+0x2e4>)
 8004366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004370:	4a56      	ldr	r2, [pc, #344]	@ (80044cc <HAL_GPIO_Init+0x2e8>)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	3302      	adds	r3, #2
 8004378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	220f      	movs	r2, #15
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800439a:	d01f      	beq.n	80043dc <HAL_GPIO_Init+0x1f8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a4c      	ldr	r2, [pc, #304]	@ (80044d0 <HAL_GPIO_Init+0x2ec>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d019      	beq.n	80043d8 <HAL_GPIO_Init+0x1f4>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a4b      	ldr	r2, [pc, #300]	@ (80044d4 <HAL_GPIO_Init+0x2f0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <HAL_GPIO_Init+0x1f0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a4a      	ldr	r2, [pc, #296]	@ (80044d8 <HAL_GPIO_Init+0x2f4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00d      	beq.n	80043d0 <HAL_GPIO_Init+0x1ec>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a49      	ldr	r2, [pc, #292]	@ (80044dc <HAL_GPIO_Init+0x2f8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <HAL_GPIO_Init+0x1e8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a48      	ldr	r2, [pc, #288]	@ (80044e0 <HAL_GPIO_Init+0x2fc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d101      	bne.n	80043c8 <HAL_GPIO_Init+0x1e4>
 80043c4:	2305      	movs	r3, #5
 80043c6:	e00a      	b.n	80043de <HAL_GPIO_Init+0x1fa>
 80043c8:	2306      	movs	r3, #6
 80043ca:	e008      	b.n	80043de <HAL_GPIO_Init+0x1fa>
 80043cc:	2304      	movs	r3, #4
 80043ce:	e006      	b.n	80043de <HAL_GPIO_Init+0x1fa>
 80043d0:	2303      	movs	r3, #3
 80043d2:	e004      	b.n	80043de <HAL_GPIO_Init+0x1fa>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e002      	b.n	80043de <HAL_GPIO_Init+0x1fa>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <HAL_GPIO_Init+0x1fa>
 80043dc:	2300      	movs	r3, #0
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	f002 0203 	and.w	r2, r2, #3
 80043e4:	0092      	lsls	r2, r2, #2
 80043e6:	4093      	lsls	r3, r2
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ee:	4937      	ldr	r1, [pc, #220]	@ (80044cc <HAL_GPIO_Init+0x2e8>)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	089b      	lsrs	r3, r3, #2
 80043f4:	3302      	adds	r3, #2
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043fc:	4b39      	ldr	r3, [pc, #228]	@ (80044e4 <HAL_GPIO_Init+0x300>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	43db      	mvns	r3, r3
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4013      	ands	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004420:	4a30      	ldr	r2, [pc, #192]	@ (80044e4 <HAL_GPIO_Init+0x300>)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004426:	4b2f      	ldr	r3, [pc, #188]	@ (80044e4 <HAL_GPIO_Init+0x300>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	43db      	mvns	r3, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4013      	ands	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800444a:	4a26      	ldr	r2, [pc, #152]	@ (80044e4 <HAL_GPIO_Init+0x300>)
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004450:	4b24      	ldr	r3, [pc, #144]	@ (80044e4 <HAL_GPIO_Init+0x300>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	43db      	mvns	r3, r3
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4013      	ands	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004474:	4a1b      	ldr	r2, [pc, #108]	@ (80044e4 <HAL_GPIO_Init+0x300>)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800447a:	4b1a      	ldr	r3, [pc, #104]	@ (80044e4 <HAL_GPIO_Init+0x300>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	43db      	mvns	r3, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800449e:	4a11      	ldr	r2, [pc, #68]	@ (80044e4 <HAL_GPIO_Init+0x300>)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	3301      	adds	r3, #1
 80044a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f47f ae9d 	bne.w	80041f4 <HAL_GPIO_Init+0x10>
  }
}
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40010000 	.word	0x40010000
 80044d0:	48000400 	.word	0x48000400
 80044d4:	48000800 	.word	0x48000800
 80044d8:	48000c00 	.word	0x48000c00
 80044dc:	48001000 	.word	0x48001000
 80044e0:	48001400 	.word	0x48001400
 80044e4:	40010400 	.word	0x40010400

080044e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
 80044f4:	4613      	mov	r3, r2
 80044f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044f8:	787b      	ldrb	r3, [r7, #1]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044fe:	887a      	ldrh	r2, [r7, #2]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004504:	e002      	b.n	800450c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004506:	887a      	ldrh	r2, [r7, #2]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800452a:	887a      	ldrh	r2, [r7, #2]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4013      	ands	r3, r2
 8004530:	041a      	lsls	r2, r3, #16
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	43d9      	mvns	r1, r3
 8004536:	887b      	ldrh	r3, [r7, #2]
 8004538:	400b      	ands	r3, r1
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	619a      	str	r2, [r3, #24]
}
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e08d      	b.n	800467a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fc fe7e 	bl	8001274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2224      	movs	r2, #36	@ 0x24
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800459c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d107      	bne.n	80045c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	e006      	b.n	80045d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80045d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d108      	bne.n	80045ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045ea:	605a      	str	r2, [r3, #4]
 80045ec:	e007      	b.n	80045fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800460c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004610:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004620:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69d9      	ldr	r1, [r3, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1a      	ldr	r2, [r3, #32]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d005      	beq.n	80046ae <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	68f9      	ldr	r1, [r7, #12]
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	4798      	blx	r3
  }
}
 80046ae:	bf00      	nop
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b086      	sub	sp, #24
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00f      	beq.n	80046f8 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e6:	f043 0201 	orr.w	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00f      	beq.n	8004722 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004710:	f043 0208 	orr.w	r2, r3, #8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004720:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00f      	beq.n	800474c <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473a:	f043 0202 	orr.w	r2, r3, #2
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800474a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004750:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 030b 	and.w	r3, r3, #11
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800475c:	68f9      	ldr	r1, [r7, #12]
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fbd6 	bl	8004f10 <I2C_ITError>
  }
}
 8004764:	bf00      	nop
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
 80047a0:	4613      	mov	r3, r2
 80047a2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <I2C_Slave_ISR_IT+0x24>
 800480c:	2302      	movs	r3, #2
 800480e:	e0e2      	b.n	80049d6 <I2C_Slave_ISR_IT+0x1ea>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800482c:	6939      	ldr	r1, [r7, #16]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f9b6 	bl	8004ba0 <I2C_ITSlaveCplt>
 8004834:	e0ca      	b.n	80049cc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b00      	cmp	r3, #0
 800483e:	d04b      	beq.n	80048d8 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004846:	2b00      	cmp	r3, #0
 8004848:	d046      	beq.n	80048d8 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d128      	bne.n	80048a6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b28      	cmp	r3, #40	@ 0x28
 800485e:	d108      	bne.n	8004872 <I2C_Slave_ISR_IT+0x86>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004866:	d104      	bne.n	8004872 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004868:	6939      	ldr	r1, [r7, #16]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 fafc 	bl	8004e68 <I2C_ITListenCplt>
 8004870:	e031      	b.n	80048d6 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b29      	cmp	r3, #41	@ 0x29
 800487c:	d10e      	bne.n	800489c <I2C_Slave_ISR_IT+0xb0>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004884:	d00a      	beq.n	800489c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2210      	movs	r2, #16
 800488c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fc55 	bl	800513e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f926 	bl	8004ae6 <I2C_ITSlaveSeqCplt>
 800489a:	e01c      	b.n	80048d6 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2210      	movs	r2, #16
 80048a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80048a4:	e08f      	b.n	80049c6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2210      	movs	r2, #16
 80048ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	f043 0204 	orr.w	r2, r3, #4
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <I2C_Slave_ISR_IT+0xdc>
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048c6:	d17e      	bne.n	80049c6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048cc:	4619      	mov	r1, r3
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 fb1e 	bl	8004f10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80048d4:	e077      	b.n	80049c6 <I2C_Slave_ISR_IT+0x1da>
 80048d6:	e076      	b.n	80049c6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d02f      	beq.n	8004942 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d02a      	beq.n	8004942 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d018      	beq.n	8004928 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d14b      	bne.n	80049ca <I2C_Slave_ISR_IT+0x1de>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004938:	d047      	beq.n	80049ca <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f8d3 	bl	8004ae6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004940:	e043      	b.n	80049ca <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004952:	2b00      	cmp	r3, #0
 8004954:	d004      	beq.n	8004960 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004956:	6939      	ldr	r1, [r7, #16]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 f840 	bl	80049de <I2C_ITAddrCplt>
 800495e:	e035      	b.n	80049cc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d030      	beq.n	80049cc <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004970:	2b00      	cmp	r3, #0
 8004972:	d02b      	beq.n	80049cc <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d018      	beq.n	80049b0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	781a      	ldrb	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	851a      	strh	r2, [r3, #40]	@ 0x28
 80049ae:	e00d      	b.n	80049cc <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049b6:	d002      	beq.n	80049be <I2C_Slave_ISR_IT+0x1d2>
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f891 	bl	8004ae6 <I2C_ITSlaveSeqCplt>
 80049c4:	e002      	b.n	80049cc <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80049ca:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049f4:	2b28      	cmp	r3, #40	@ 0x28
 80049f6:	d16a      	bne.n	8004ace <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	0c1b      	lsrs	r3, r3, #16
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004a16:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a24:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004a32:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d138      	bne.n	8004aae <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004a3c:	897b      	ldrh	r3, [r7, #10]
 8004a3e:	09db      	lsrs	r3, r3, #7
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	89bb      	ldrh	r3, [r7, #12]
 8004a44:	4053      	eors	r3, r2
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f003 0306 	and.w	r3, r3, #6
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d11c      	bne.n	8004a8a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004a50:	897b      	ldrh	r3, [r7, #10]
 8004a52:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d13b      	bne.n	8004ade <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2208      	movs	r2, #8
 8004a72:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a7c:	89ba      	ldrh	r2, [r7, #12]
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fe86 	bl	8004794 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a88:	e029      	b.n	8004ade <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004a8a:	893b      	ldrh	r3, [r7, #8]
 8004a8c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fb95 	bl	80051c2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004aa0:	89ba      	ldrh	r2, [r7, #12]
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff fe74 	bl	8004794 <HAL_I2C_AddrCallback>
}
 8004aac:	e017      	b.n	8004ade <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004aae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fb85 	bl	80051c2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ac0:	89ba      	ldrh	r2, [r7, #12]
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fe64 	bl	8004794 <HAL_I2C_AddrCallback>
}
 8004acc:	e007      	b.n	8004ade <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e00c      	b.n	8004b34 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b32:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b29      	cmp	r3, #41	@ 0x29
 8004b3e:	d112      	bne.n	8004b66 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2228      	movs	r2, #40	@ 0x28
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2221      	movs	r2, #33	@ 0x21
 8004b4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b4e:	2101      	movs	r1, #1
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fb36 	bl	80051c2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fe04 	bl	800476c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b64:	e017      	b.n	8004b96 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b70:	d111      	bne.n	8004b96 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2228      	movs	r2, #40	@ 0x28
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2222      	movs	r2, #34	@ 0x22
 8004b7e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004b80:	2102      	movs	r1, #2
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fb1d 	bl	80051c2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff fdf5 	bl	8004780 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b96:	bf00      	nop
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bba:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bcc:	7afb      	ldrb	r3, [r7, #11]
 8004bce:	2b21      	cmp	r3, #33	@ 0x21
 8004bd0:	d002      	beq.n	8004bd8 <I2C_ITSlaveCplt+0x38>
 8004bd2:	7afb      	ldrb	r3, [r7, #11]
 8004bd4:	2b29      	cmp	r3, #41	@ 0x29
 8004bd6:	d108      	bne.n	8004bea <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004bd8:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 faf0 	bl	80051c2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2221      	movs	r2, #33	@ 0x21
 8004be6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004be8:	e019      	b.n	8004c1e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bea:	7afb      	ldrb	r3, [r7, #11]
 8004bec:	2b22      	cmp	r3, #34	@ 0x22
 8004bee:	d002      	beq.n	8004bf6 <I2C_ITSlaveCplt+0x56>
 8004bf0:	7afb      	ldrb	r3, [r7, #11]
 8004bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bf4:	d108      	bne.n	8004c08 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004bf6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fae1 	bl	80051c2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2222      	movs	r2, #34	@ 0x22
 8004c04:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c06:	e00a      	b.n	8004c1e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004c08:	7afb      	ldrb	r3, [r7, #11]
 8004c0a:	2b28      	cmp	r3, #40	@ 0x28
 8004c0c:	d107      	bne.n	8004c1e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004c0e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fad5 	bl	80051c2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c2c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6859      	ldr	r1, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b89      	ldr	r3, [pc, #548]	@ (8004e60 <I2C_ITSlaveCplt+0x2c0>)
 8004c3a:	400b      	ands	r3, r1
 8004c3c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fa7d 	bl	800513e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d013      	beq.n	8004c76 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c5c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01f      	beq.n	8004ca6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c74:	e017      	b.n	8004ca6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d012      	beq.n	8004ca6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c8e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d006      	beq.n	8004ca6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 0304 	bic.w	r3, r3, #4
 8004cb6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00c      	beq.n	8004cf2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d00:	f043 0204 	orr.w	r2, r3, #4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d049      	beq.n	8004da6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d044      	beq.n	8004da6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d128      	bne.n	8004d78 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b28      	cmp	r3, #40	@ 0x28
 8004d30:	d108      	bne.n	8004d44 <I2C_ITSlaveCplt+0x1a4>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d38:	d104      	bne.n	8004d44 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d3a:	6979      	ldr	r1, [r7, #20]
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f893 	bl	8004e68 <I2C_ITListenCplt>
 8004d42:	e030      	b.n	8004da6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b29      	cmp	r3, #41	@ 0x29
 8004d4e:	d10e      	bne.n	8004d6e <I2C_ITSlaveCplt+0x1ce>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d56:	d00a      	beq.n	8004d6e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2210      	movs	r2, #16
 8004d5e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f9ec 	bl	800513e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff febd 	bl	8004ae6 <I2C_ITSlaveSeqCplt>
 8004d6c:	e01b      	b.n	8004da6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2210      	movs	r2, #16
 8004d74:	61da      	str	r2, [r3, #28]
 8004d76:	e016      	b.n	8004da6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2210      	movs	r2, #16
 8004d7e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d84:	f043 0204 	orr.w	r2, r3, #4
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <I2C_ITSlaveCplt+0x1fa>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d98:	d105      	bne.n	8004da6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f8b5 	bl	8004f10 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d010      	beq.n	8004dde <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f8a4 	bl	8004f10 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b28      	cmp	r3, #40	@ 0x28
 8004dd2:	d141      	bne.n	8004e58 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004dd4:	6979      	ldr	r1, [r7, #20]
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f846 	bl	8004e68 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ddc:	e03c      	b.n	8004e58 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004de6:	d014      	beq.n	8004e12 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff fe7c 	bl	8004ae6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e64 <I2C_ITSlaveCplt+0x2c4>)
 8004df2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff fcd0 	bl	80047b0 <HAL_I2C_ListenCpltCallback>
}
 8004e10:	e022      	b.n	8004e58 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b22      	cmp	r3, #34	@ 0x22
 8004e1c:	d10e      	bne.n	8004e3c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fca3 	bl	8004780 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e3a:	e00d      	b.n	8004e58 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff fc8a 	bl	800476c <HAL_I2C_SlaveTxCpltCallback>
}
 8004e58:	bf00      	nop
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	fe00e800 	.word	0xfe00e800
 8004e64:	ffff0000 	.word	0xffff0000

08004e68 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a25      	ldr	r2, [pc, #148]	@ (8004f0c <I2C_ITListenCplt+0xa4>)
 8004e76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d022      	beq.n	8004ee4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d012      	beq.n	8004ee4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004edc:	f043 0204 	orr.w	r2, r3, #4
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ee4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f96a 	bl	80051c2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2210      	movs	r2, #16
 8004ef4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fc56 	bl	80047b0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004f04:	bf00      	nop
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	ffff0000 	.word	0xffff0000

08004f10 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f20:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a6d      	ldr	r2, [pc, #436]	@ (80050e4 <I2C_ITError+0x1d4>)
 8004f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	2b28      	cmp	r3, #40	@ 0x28
 8004f46:	d005      	beq.n	8004f54 <I2C_ITError+0x44>
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	2b29      	cmp	r3, #41	@ 0x29
 8004f4c:	d002      	beq.n	8004f54 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f52:	d10b      	bne.n	8004f6c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f54:	2103      	movs	r1, #3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f933 	bl	80051c2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2228      	movs	r2, #40	@ 0x28
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a60      	ldr	r2, [pc, #384]	@ (80050e8 <I2C_ITError+0x1d8>)
 8004f68:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f6a:	e030      	b.n	8004fce <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f6c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f926 	bl	80051c2 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f8e1 	bl	800513e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b60      	cmp	r3, #96	@ 0x60
 8004f86:	d01f      	beq.n	8004fc8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d114      	bne.n	8004fc8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d109      	bne.n	8004fc0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2210      	movs	r2, #16
 8004fb2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb8:	f043 0204 	orr.w	r2, r3, #4
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d039      	beq.n	8005050 <I2C_ITError+0x140>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b11      	cmp	r3, #17
 8004fe0:	d002      	beq.n	8004fe8 <I2C_ITError+0xd8>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b21      	cmp	r3, #33	@ 0x21
 8004fe6:	d133      	bne.n	8005050 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ff6:	d107      	bne.n	8005008 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005006:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500c:	4618      	mov	r0, r3
 800500e:	f7fe fe8b 	bl	8003d28 <HAL_DMA_GetState>
 8005012:	4603      	mov	r3, r0
 8005014:	2b01      	cmp	r3, #1
 8005016:	d017      	beq.n	8005048 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501c:	4a33      	ldr	r2, [pc, #204]	@ (80050ec <I2C_ITError+0x1dc>)
 800501e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe fd65 	bl	8003afc <HAL_DMA_Abort_IT>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d04d      	beq.n	80050d4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005042:	4610      	mov	r0, r2
 8005044:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005046:	e045      	b.n	80050d4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f851 	bl	80050f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800504e:	e041      	b.n	80050d4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d039      	beq.n	80050cc <I2C_ITError+0x1bc>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b12      	cmp	r3, #18
 800505c:	d002      	beq.n	8005064 <I2C_ITError+0x154>
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b22      	cmp	r3, #34	@ 0x22
 8005062:	d133      	bne.n	80050cc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800506e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005072:	d107      	bne.n	8005084 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005082:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe fe4d 	bl	8003d28 <HAL_DMA_GetState>
 800508e:	4603      	mov	r3, r0
 8005090:	2b01      	cmp	r3, #1
 8005092:	d017      	beq.n	80050c4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005098:	4a14      	ldr	r2, [pc, #80]	@ (80050ec <I2C_ITError+0x1dc>)
 800509a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fe fd27 	bl	8003afc <HAL_DMA_Abort_IT>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d011      	beq.n	80050d8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050be:	4610      	mov	r0, r2
 80050c0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050c2:	e009      	b.n	80050d8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f813 	bl	80050f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050ca:	e005      	b.n	80050d8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f80f 	bl	80050f0 <I2C_TreatErrorCallback>
  }
}
 80050d2:	e002      	b.n	80050da <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050d4:	bf00      	nop
 80050d6:	e000      	b.n	80050da <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050d8:	bf00      	nop
}
 80050da:	bf00      	nop
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	ffff0000 	.word	0xffff0000
 80050e8:	080047ed 	.word	0x080047ed
 80050ec:	08005187 	.word	0x08005187

080050f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b60      	cmp	r3, #96	@ 0x60
 8005102:	d10e      	bne.n	8005122 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff fb5c 	bl	80047d8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005120:	e009      	b.n	8005136 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fb47 	bl	80047c4 <HAL_I2C_ErrorCallback>
}
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b02      	cmp	r3, #2
 8005152:	d103      	bne.n	800515c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2200      	movs	r2, #0
 800515a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b01      	cmp	r3, #1
 8005168:	d007      	beq.n	800517a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	619a      	str	r2, [r3, #24]
  }
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	2200      	movs	r2, #0
 80051a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b0:	2200      	movs	r2, #0
 80051b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7ff ff9b 	bl	80050f0 <I2C_TreatErrorCallback>
}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	460b      	mov	r3, r1
 80051cc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80051d2:	887b      	ldrh	r3, [r7, #2]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00f      	beq.n	80051fc <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80051e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051f0:	2b28      	cmp	r3, #40	@ 0x28
 80051f2:	d003      	beq.n	80051fc <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80051fa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80051fc:	887b      	ldrh	r3, [r7, #2]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00f      	beq.n	8005226 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800520c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800521a:	2b28      	cmp	r3, #40	@ 0x28
 800521c:	d003      	beq.n	8005226 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005224:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005226:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800522a:	2b00      	cmp	r3, #0
 800522c:	da03      	bge.n	8005236 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005234:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005236:	887b      	ldrh	r3, [r7, #2]
 8005238:	2b10      	cmp	r3, #16
 800523a:	d103      	bne.n	8005244 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005242:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005244:	887b      	ldrh	r3, [r7, #2]
 8005246:	2b20      	cmp	r3, #32
 8005248:	d103      	bne.n	8005252 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f043 0320 	orr.w	r3, r3, #32
 8005250:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005252:	887b      	ldrh	r3, [r7, #2]
 8005254:	2b40      	cmp	r3, #64	@ 0x40
 8005256:	d103      	bne.n	8005260 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800525e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6819      	ldr	r1, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	43da      	mvns	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	400a      	ands	r2, r1
 8005270:	601a      	str	r2, [r3, #0]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b20      	cmp	r3, #32
 8005292:	d138      	bne.n	8005306 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800529e:	2302      	movs	r3, #2
 80052a0:	e032      	b.n	8005308 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2224      	movs	r2, #36	@ 0x24
 80052ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0201 	bic.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6819      	ldr	r1, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0201 	orr.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	e000      	b.n	8005308 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005306:	2302      	movs	r3, #2
  }
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b20      	cmp	r3, #32
 8005328:	d139      	bne.n	800539e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005334:	2302      	movs	r3, #2
 8005336:	e033      	b.n	80053a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	@ 0x24
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0201 	bic.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005366:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0201 	orr.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	e000      	b.n	80053a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800539e:	2302      	movs	r3, #2
  }
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d141      	bne.n	800543e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053ba:	4b4b      	ldr	r3, [pc, #300]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053c6:	d131      	bne.n	800542c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053c8:	4b47      	ldr	r3, [pc, #284]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ce:	4a46      	ldr	r2, [pc, #280]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053d8:	4b43      	ldr	r3, [pc, #268]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053e0:	4a41      	ldr	r2, [pc, #260]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053e8:	4b40      	ldr	r3, [pc, #256]	@ (80054ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2232      	movs	r2, #50	@ 0x32
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	4a3f      	ldr	r2, [pc, #252]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80053f4:	fba2 2303 	umull	r2, r3, r2, r3
 80053f8:	0c9b      	lsrs	r3, r3, #18
 80053fa:	3301      	adds	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053fe:	e002      	b.n	8005406 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3b01      	subs	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005406:	4b38      	ldr	r3, [pc, #224]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800540e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005412:	d102      	bne.n	800541a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f2      	bne.n	8005400 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800541a:	4b33      	ldr	r3, [pc, #204]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005426:	d158      	bne.n	80054da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e057      	b.n	80054dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800542c:	4b2e      	ldr	r3, [pc, #184]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800542e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005432:	4a2d      	ldr	r2, [pc, #180]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005438:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800543c:	e04d      	b.n	80054da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005444:	d141      	bne.n	80054ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005446:	4b28      	ldr	r3, [pc, #160]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800544e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005452:	d131      	bne.n	80054b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005454:	4b24      	ldr	r3, [pc, #144]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800545a:	4a23      	ldr	r2, [pc, #140]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800545c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005460:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005464:	4b20      	ldr	r3, [pc, #128]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800546c:	4a1e      	ldr	r2, [pc, #120]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800546e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005472:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005474:	4b1d      	ldr	r3, [pc, #116]	@ (80054ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2232      	movs	r2, #50	@ 0x32
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	4a1c      	ldr	r2, [pc, #112]	@ (80054f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	0c9b      	lsrs	r3, r3, #18
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800548a:	e002      	b.n	8005492 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3b01      	subs	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005492:	4b15      	ldr	r3, [pc, #84]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800549a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800549e:	d102      	bne.n	80054a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f2      	bne.n	800548c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054a6:	4b10      	ldr	r3, [pc, #64]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054b2:	d112      	bne.n	80054da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e011      	b.n	80054dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054b8:	4b0b      	ldr	r3, [pc, #44]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054be:	4a0a      	ldr	r2, [pc, #40]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80054c8:	e007      	b.n	80054da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054ca:	4b07      	ldr	r3, [pc, #28]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054d2:	4a05      	ldr	r2, [pc, #20]	@ (80054e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054d8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40007000 	.word	0x40007000
 80054ec:	20000000 	.word	0x20000000
 80054f0:	431bde83 	.word	0x431bde83

080054f4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80054f8:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	4a04      	ldr	r2, [pc, #16]	@ (8005510 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005502:	6093      	str	r3, [r2, #8]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40007000 	.word	0x40007000

08005514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e2fe      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d075      	beq.n	800561e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005532:	4b97      	ldr	r3, [pc, #604]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 030c 	and.w	r3, r3, #12
 800553a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800553c:	4b94      	ldr	r3, [pc, #592]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0303 	and.w	r3, r3, #3
 8005544:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b0c      	cmp	r3, #12
 800554a:	d102      	bne.n	8005552 <HAL_RCC_OscConfig+0x3e>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2b03      	cmp	r3, #3
 8005550:	d002      	beq.n	8005558 <HAL_RCC_OscConfig+0x44>
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d10b      	bne.n	8005570 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005558:	4b8d      	ldr	r3, [pc, #564]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d05b      	beq.n	800561c <HAL_RCC_OscConfig+0x108>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d157      	bne.n	800561c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e2d9      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005578:	d106      	bne.n	8005588 <HAL_RCC_OscConfig+0x74>
 800557a:	4b85      	ldr	r3, [pc, #532]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a84      	ldr	r2, [pc, #528]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e01d      	b.n	80055c4 <HAL_RCC_OscConfig+0xb0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005590:	d10c      	bne.n	80055ac <HAL_RCC_OscConfig+0x98>
 8005592:	4b7f      	ldr	r3, [pc, #508]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a7e      	ldr	r2, [pc, #504]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	4b7c      	ldr	r3, [pc, #496]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a7b      	ldr	r2, [pc, #492]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 80055a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	e00b      	b.n	80055c4 <HAL_RCC_OscConfig+0xb0>
 80055ac:	4b78      	ldr	r3, [pc, #480]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a77      	ldr	r2, [pc, #476]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 80055b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	4b75      	ldr	r3, [pc, #468]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a74      	ldr	r2, [pc, #464]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 80055be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d013      	beq.n	80055f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055cc:	f7fc fbfa 	bl	8001dc4 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d4:	f7fc fbf6 	bl	8001dc4 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b64      	cmp	r3, #100	@ 0x64
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e29e      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0xc0>
 80055f2:	e014      	b.n	800561e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fc fbe6 	bl	8001dc4 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055fc:	f7fc fbe2 	bl	8001dc4 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b64      	cmp	r3, #100	@ 0x64
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e28a      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800560e:	4b60      	ldr	r3, [pc, #384]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0xe8>
 800561a:	e000      	b.n	800561e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800561c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d075      	beq.n	8005716 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800562a:	4b59      	ldr	r3, [pc, #356]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
 8005632:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005634:	4b56      	ldr	r3, [pc, #344]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b0c      	cmp	r3, #12
 8005642:	d102      	bne.n	800564a <HAL_RCC_OscConfig+0x136>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d002      	beq.n	8005650 <HAL_RCC_OscConfig+0x13c>
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b04      	cmp	r3, #4
 800564e:	d11f      	bne.n	8005690 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005650:	4b4f      	ldr	r3, [pc, #316]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <HAL_RCC_OscConfig+0x154>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e25d      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005668:	4b49      	ldr	r3, [pc, #292]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	061b      	lsls	r3, r3, #24
 8005676:	4946      	ldr	r1, [pc, #280]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005678:	4313      	orrs	r3, r2
 800567a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800567c:	4b45      	ldr	r3, [pc, #276]	@ (8005794 <HAL_RCC_OscConfig+0x280>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f7fc f84b 	bl	800171c <HAL_InitTick>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d043      	beq.n	8005714 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e249      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d023      	beq.n	80056e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005698:	4b3d      	ldr	r3, [pc, #244]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a3c      	ldr	r2, [pc, #240]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 800569e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a4:	f7fc fb8e 	bl	8001dc4 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ac:	f7fc fb8a 	bl	8001dc4 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e232      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056be:	4b34      	ldr	r3, [pc, #208]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ca:	4b31      	ldr	r3, [pc, #196]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	061b      	lsls	r3, r3, #24
 80056d8:	492d      	ldr	r1, [pc, #180]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	604b      	str	r3, [r1, #4]
 80056de:	e01a      	b.n	8005716 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a2a      	ldr	r2, [pc, #168]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 80056e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7fc fb6a 	bl	8001dc4 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056f4:	f7fc fb66 	bl	8001dc4 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e20e      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005706:	4b22      	ldr	r3, [pc, #136]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f0      	bne.n	80056f4 <HAL_RCC_OscConfig+0x1e0>
 8005712:	e000      	b.n	8005716 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005714:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d041      	beq.n	80057a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01c      	beq.n	8005764 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800572a:	4b19      	ldr	r3, [pc, #100]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 800572c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005730:	4a17      	ldr	r2, [pc, #92]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573a:	f7fc fb43 	bl	8001dc4 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005742:	f7fc fb3f 	bl	8001dc4 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e1e7      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005754:	4b0e      	ldr	r3, [pc, #56]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0ef      	beq.n	8005742 <HAL_RCC_OscConfig+0x22e>
 8005762:	e020      	b.n	80057a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005764:	4b0a      	ldr	r3, [pc, #40]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 8005766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800576a:	4a09      	ldr	r2, [pc, #36]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005774:	f7fc fb26 	bl	8001dc4 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800577a:	e00d      	b.n	8005798 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800577c:	f7fc fb22 	bl	8001dc4 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d906      	bls.n	8005798 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e1ca      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000
 8005794:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005798:	4b8c      	ldr	r3, [pc, #560]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 800579a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1ea      	bne.n	800577c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 80a6 	beq.w	8005900 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057b4:	2300      	movs	r3, #0
 80057b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057b8:	4b84      	ldr	r3, [pc, #528]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 80057ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_RCC_OscConfig+0x2b4>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x2b6>
 80057c8:	2300      	movs	r3, #0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00d      	beq.n	80057ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ce:	4b7f      	ldr	r3, [pc, #508]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 80057d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d2:	4a7e      	ldr	r2, [pc, #504]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 80057d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80057da:	4b7c      	ldr	r3, [pc, #496]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 80057dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80057e6:	2301      	movs	r3, #1
 80057e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ea:	4b79      	ldr	r3, [pc, #484]	@ (80059d0 <HAL_RCC_OscConfig+0x4bc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d118      	bne.n	8005828 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f6:	4b76      	ldr	r3, [pc, #472]	@ (80059d0 <HAL_RCC_OscConfig+0x4bc>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a75      	ldr	r2, [pc, #468]	@ (80059d0 <HAL_RCC_OscConfig+0x4bc>)
 80057fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005802:	f7fc fadf 	bl	8001dc4 <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800580a:	f7fc fadb 	bl	8001dc4 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e183      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800581c:	4b6c      	ldr	r3, [pc, #432]	@ (80059d0 <HAL_RCC_OscConfig+0x4bc>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f0      	beq.n	800580a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d108      	bne.n	8005842 <HAL_RCC_OscConfig+0x32e>
 8005830:	4b66      	ldr	r3, [pc, #408]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005836:	4a65      	ldr	r2, [pc, #404]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005840:	e024      	b.n	800588c <HAL_RCC_OscConfig+0x378>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b05      	cmp	r3, #5
 8005848:	d110      	bne.n	800586c <HAL_RCC_OscConfig+0x358>
 800584a:	4b60      	ldr	r3, [pc, #384]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 800584c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005850:	4a5e      	ldr	r2, [pc, #376]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 8005852:	f043 0304 	orr.w	r3, r3, #4
 8005856:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800585a:	4b5c      	ldr	r3, [pc, #368]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005860:	4a5a      	ldr	r2, [pc, #360]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800586a:	e00f      	b.n	800588c <HAL_RCC_OscConfig+0x378>
 800586c:	4b57      	ldr	r3, [pc, #348]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005872:	4a56      	ldr	r2, [pc, #344]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800587c:	4b53      	ldr	r3, [pc, #332]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005882:	4a52      	ldr	r2, [pc, #328]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 8005884:	f023 0304 	bic.w	r3, r3, #4
 8005888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d016      	beq.n	80058c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005894:	f7fc fa96 	bl	8001dc4 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800589a:	e00a      	b.n	80058b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589c:	f7fc fa92 	bl	8001dc4 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e138      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058b2:	4b46      	ldr	r3, [pc, #280]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ed      	beq.n	800589c <HAL_RCC_OscConfig+0x388>
 80058c0:	e015      	b.n	80058ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c2:	f7fc fa7f 	bl	8001dc4 <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058c8:	e00a      	b.n	80058e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ca:	f7fc fa7b 	bl	8001dc4 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d8:	4293      	cmp	r3, r2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e121      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058e0:	4b3a      	ldr	r3, [pc, #232]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1ed      	bne.n	80058ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058ee:	7ffb      	ldrb	r3, [r7, #31]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d105      	bne.n	8005900 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058f4:	4b35      	ldr	r3, [pc, #212]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 80058f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f8:	4a34      	ldr	r2, [pc, #208]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 80058fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b00      	cmp	r3, #0
 800590a:	d03c      	beq.n	8005986 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01c      	beq.n	800594e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005914:	4b2d      	ldr	r3, [pc, #180]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 8005916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800591a:	4a2c      	ldr	r2, [pc, #176]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005924:	f7fc fa4e 	bl	8001dc4 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800592c:	f7fc fa4a 	bl	8001dc4 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e0f2      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800593e:	4b23      	ldr	r3, [pc, #140]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 8005940:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0ef      	beq.n	800592c <HAL_RCC_OscConfig+0x418>
 800594c:	e01b      	b.n	8005986 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800594e:	4b1f      	ldr	r3, [pc, #124]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 8005950:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005954:	4a1d      	ldr	r2, [pc, #116]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595e:	f7fc fa31 	bl	8001dc4 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005966:	f7fc fa2d 	bl	8001dc4 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e0d5      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005978:	4b14      	ldr	r3, [pc, #80]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 800597a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1ef      	bne.n	8005966 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 80c9 	beq.w	8005b22 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005990:	4b0e      	ldr	r3, [pc, #56]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 030c 	and.w	r3, r3, #12
 8005998:	2b0c      	cmp	r3, #12
 800599a:	f000 8083 	beq.w	8005aa4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d15e      	bne.n	8005a64 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a6:	4b09      	ldr	r3, [pc, #36]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a08      	ldr	r2, [pc, #32]	@ (80059cc <HAL_RCC_OscConfig+0x4b8>)
 80059ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b2:	f7fc fa07 	bl	8001dc4 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059b8:	e00c      	b.n	80059d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ba:	f7fc fa03 	bl	8001dc4 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d905      	bls.n	80059d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e0ab      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
 80059cc:	40021000 	.word	0x40021000
 80059d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059d4:	4b55      	ldr	r3, [pc, #340]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1ec      	bne.n	80059ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059e0:	4b52      	ldr	r3, [pc, #328]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 80059e2:	68da      	ldr	r2, [r3, #12]
 80059e4:	4b52      	ldr	r3, [pc, #328]	@ (8005b30 <HAL_RCC_OscConfig+0x61c>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6a11      	ldr	r1, [r2, #32]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059f0:	3a01      	subs	r2, #1
 80059f2:	0112      	lsls	r2, r2, #4
 80059f4:	4311      	orrs	r1, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80059fa:	0212      	lsls	r2, r2, #8
 80059fc:	4311      	orrs	r1, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a02:	0852      	lsrs	r2, r2, #1
 8005a04:	3a01      	subs	r2, #1
 8005a06:	0552      	lsls	r2, r2, #21
 8005a08:	4311      	orrs	r1, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a0e:	0852      	lsrs	r2, r2, #1
 8005a10:	3a01      	subs	r2, #1
 8005a12:	0652      	lsls	r2, r2, #25
 8005a14:	4311      	orrs	r1, r2
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005a1a:	06d2      	lsls	r2, r2, #27
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	4943      	ldr	r1, [pc, #268]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a24:	4b41      	ldr	r3, [pc, #260]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a40      	ldr	r2, [pc, #256]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 8005a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a30:	4b3e      	ldr	r3, [pc, #248]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4a3d      	ldr	r2, [pc, #244]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 8005a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3c:	f7fc f9c2 	bl	8001dc4 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a44:	f7fc f9be 	bl	8001dc4 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e066      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a56:	4b35      	ldr	r3, [pc, #212]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCC_OscConfig+0x530>
 8005a62:	e05e      	b.n	8005b22 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a64:	4b31      	ldr	r3, [pc, #196]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a30      	ldr	r2, [pc, #192]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 8005a6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fc f9a8 	bl	8001dc4 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fc f9a4 	bl	8001dc4 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e04c      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a8a:	4b28      	ldr	r3, [pc, #160]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a96:	4b25      	ldr	r3, [pc, #148]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	4924      	ldr	r1, [pc, #144]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 8005a9c:	4b25      	ldr	r3, [pc, #148]	@ (8005b34 <HAL_RCC_OscConfig+0x620>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	60cb      	str	r3, [r1, #12]
 8005aa2:	e03e      	b.n	8005b22 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e039      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8005b2c <HAL_RCC_OscConfig+0x618>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f003 0203 	and.w	r2, r3, #3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d12c      	bne.n	8005b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d123      	bne.n	8005b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d11b      	bne.n	8005b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d113      	bne.n	8005b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	3b01      	subs	r3, #1
 8005b04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d109      	bne.n	8005b1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b14:	085b      	lsrs	r3, r3, #1
 8005b16:	3b01      	subs	r3, #1
 8005b18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d001      	beq.n	8005b22 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3720      	adds	r7, #32
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	019f800c 	.word	0x019f800c
 8005b34:	feeefffc 	.word	0xfeeefffc

08005b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e11e      	b.n	8005d8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b50:	4b91      	ldr	r3, [pc, #580]	@ (8005d98 <HAL_RCC_ClockConfig+0x260>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d910      	bls.n	8005b80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5e:	4b8e      	ldr	r3, [pc, #568]	@ (8005d98 <HAL_RCC_ClockConfig+0x260>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f023 020f 	bic.w	r2, r3, #15
 8005b66:	498c      	ldr	r1, [pc, #560]	@ (8005d98 <HAL_RCC_ClockConfig+0x260>)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6e:	4b8a      	ldr	r3, [pc, #552]	@ (8005d98 <HAL_RCC_ClockConfig+0x260>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d001      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e106      	b.n	8005d8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d073      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d129      	bne.n	8005be8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b94:	4b81      	ldr	r3, [pc, #516]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0f4      	b.n	8005d8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005ba4:	f000 f9d0 	bl	8005f48 <RCC_GetSysClockFreqFromPLLSource>
 8005ba8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4a7c      	ldr	r2, [pc, #496]	@ (8005da0 <HAL_RCC_ClockConfig+0x268>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d93f      	bls.n	8005c32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bb2:	4b7a      	ldr	r3, [pc, #488]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d033      	beq.n	8005c32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d12f      	bne.n	8005c32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bd2:	4b72      	ldr	r3, [pc, #456]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bda:	4a70      	ldr	r2, [pc, #448]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005be2:	2380      	movs	r3, #128	@ 0x80
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	e024      	b.n	8005c32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d107      	bne.n	8005c00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bf0:	4b6a      	ldr	r3, [pc, #424]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e0c6      	b.n	8005d8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c00:	4b66      	ldr	r3, [pc, #408]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0be      	b.n	8005d8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c10:	f000 f8ce 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8005c14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4a61      	ldr	r2, [pc, #388]	@ (8005da0 <HAL_RCC_ClockConfig+0x268>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d909      	bls.n	8005c32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c26:	4a5d      	ldr	r2, [pc, #372]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c2e:	2380      	movs	r3, #128	@ 0x80
 8005c30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c32:	4b5a      	ldr	r3, [pc, #360]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f023 0203 	bic.w	r2, r3, #3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4957      	ldr	r1, [pc, #348]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c44:	f7fc f8be 	bl	8001dc4 <HAL_GetTick>
 8005c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4a:	e00a      	b.n	8005c62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c4c:	f7fc f8ba 	bl	8001dc4 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e095      	b.n	8005d8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c62:	4b4e      	ldr	r3, [pc, #312]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 020c 	and.w	r2, r3, #12
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d1eb      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d023      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c8c:	4b43      	ldr	r3, [pc, #268]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	4a42      	ldr	r2, [pc, #264]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005c92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ca4:	4b3d      	ldr	r3, [pc, #244]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005cac:	4a3b      	ldr	r2, [pc, #236]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005cae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005cb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb4:	4b39      	ldr	r3, [pc, #228]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	4936      	ldr	r1, [pc, #216]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	608b      	str	r3, [r1, #8]
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2b80      	cmp	r3, #128	@ 0x80
 8005ccc:	d105      	bne.n	8005cda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cce:	4b33      	ldr	r3, [pc, #204]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	4a32      	ldr	r2, [pc, #200]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005cd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cd8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cda:	4b2f      	ldr	r3, [pc, #188]	@ (8005d98 <HAL_RCC_ClockConfig+0x260>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d21d      	bcs.n	8005d24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8005d98 <HAL_RCC_ClockConfig+0x260>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f023 020f 	bic.w	r2, r3, #15
 8005cf0:	4929      	ldr	r1, [pc, #164]	@ (8005d98 <HAL_RCC_ClockConfig+0x260>)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005cf8:	f7fc f864 	bl	8001dc4 <HAL_GetTick>
 8005cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	e00a      	b.n	8005d16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d00:	f7fc f860 	bl	8001dc4 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e03b      	b.n	8005d8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d16:	4b20      	ldr	r3, [pc, #128]	@ (8005d98 <HAL_RCC_ClockConfig+0x260>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d1ed      	bne.n	8005d00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d30:	4b1a      	ldr	r3, [pc, #104]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4917      	ldr	r1, [pc, #92]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d4e:	4b13      	ldr	r3, [pc, #76]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	490f      	ldr	r1, [pc, #60]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d62:	f000 f825 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8005d66:	4602      	mov	r2, r0
 8005d68:	4b0c      	ldr	r3, [pc, #48]	@ (8005d9c <HAL_RCC_ClockConfig+0x264>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	091b      	lsrs	r3, r3, #4
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	490c      	ldr	r1, [pc, #48]	@ (8005da4 <HAL_RCC_ClockConfig+0x26c>)
 8005d74:	5ccb      	ldrb	r3, [r1, r3]
 8005d76:	f003 031f 	and.w	r3, r3, #31
 8005d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8005da8 <HAL_RCC_ClockConfig+0x270>)
 8005d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d82:	4b0a      	ldr	r3, [pc, #40]	@ (8005dac <HAL_RCC_ClockConfig+0x274>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fb fcc8 	bl	800171c <HAL_InitTick>
 8005d8c:	4603      	mov	r3, r0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3718      	adds	r7, #24
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40022000 	.word	0x40022000
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	04c4b400 	.word	0x04c4b400
 8005da4:	08009ab0 	.word	0x08009ab0
 8005da8:	20000000 	.word	0x20000000
 8005dac:	20000004 	.word	0x20000004

08005db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005db6:	4b2c      	ldr	r3, [pc, #176]	@ (8005e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d102      	bne.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	e047      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005dc8:	4b27      	ldr	r3, [pc, #156]	@ (8005e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 030c 	and.w	r3, r3, #12
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d102      	bne.n	8005dda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dd4:	4b26      	ldr	r3, [pc, #152]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	e03e      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005dda:	4b23      	ldr	r3, [pc, #140]	@ (8005e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 030c 	and.w	r3, r3, #12
 8005de2:	2b0c      	cmp	r3, #12
 8005de4:	d136      	bne.n	8005e54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005de6:	4b20      	ldr	r3, [pc, #128]	@ (8005e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005df0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d10c      	bne.n	8005e1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e04:	4a1a      	ldr	r2, [pc, #104]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0c:	4a16      	ldr	r2, [pc, #88]	@ (8005e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e0e:	68d2      	ldr	r2, [r2, #12]
 8005e10:	0a12      	lsrs	r2, r2, #8
 8005e12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e16:	fb02 f303 	mul.w	r3, r2, r3
 8005e1a:	617b      	str	r3, [r7, #20]
      break;
 8005e1c:	e00c      	b.n	8005e38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e1e:	4a13      	ldr	r2, [pc, #76]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e26:	4a10      	ldr	r2, [pc, #64]	@ (8005e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e28:	68d2      	ldr	r2, [r2, #12]
 8005e2a:	0a12      	lsrs	r2, r2, #8
 8005e2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e30:	fb02 f303 	mul.w	r3, r2, r3
 8005e34:	617b      	str	r3, [r7, #20]
      break;
 8005e36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e38:	4b0b      	ldr	r3, [pc, #44]	@ (8005e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	0e5b      	lsrs	r3, r3, #25
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	3301      	adds	r3, #1
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	e001      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e58:	693b      	ldr	r3, [r7, #16]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40021000 	.word	0x40021000
 8005e6c:	00f42400 	.word	0x00f42400
 8005e70:	016e3600 	.word	0x016e3600

08005e74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e78:	4b03      	ldr	r3, [pc, #12]	@ (8005e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20000000 	.word	0x20000000

08005e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e90:	f7ff fff0 	bl	8005e74 <HAL_RCC_GetHCLKFreq>
 8005e94:	4602      	mov	r2, r0
 8005e96:	4b06      	ldr	r3, [pc, #24]	@ (8005eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	4904      	ldr	r1, [pc, #16]	@ (8005eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ea2:	5ccb      	ldrb	r3, [r1, r3]
 8005ea4:	f003 031f 	and.w	r3, r3, #31
 8005ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	08009ac0 	.word	0x08009ac0

08005eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ebc:	f7ff ffda 	bl	8005e74 <HAL_RCC_GetHCLKFreq>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	4b06      	ldr	r3, [pc, #24]	@ (8005edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	0adb      	lsrs	r3, r3, #11
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	4904      	ldr	r1, [pc, #16]	@ (8005ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ece:	5ccb      	ldrb	r3, [r1, r3]
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	08009ac0 	.word	0x08009ac0

08005ee4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	220f      	movs	r2, #15
 8005ef2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005ef4:	4b12      	ldr	r3, [pc, #72]	@ (8005f40 <HAL_RCC_GetClockConfig+0x5c>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 0203 	and.w	r2, r3, #3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005f00:	4b0f      	ldr	r3, [pc, #60]	@ (8005f40 <HAL_RCC_GetClockConfig+0x5c>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <HAL_RCC_GetClockConfig+0x5c>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005f18:	4b09      	ldr	r3, [pc, #36]	@ (8005f40 <HAL_RCC_GetClockConfig+0x5c>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	08db      	lsrs	r3, r3, #3
 8005f1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005f26:	4b07      	ldr	r3, [pc, #28]	@ (8005f44 <HAL_RCC_GetClockConfig+0x60>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 020f 	and.w	r2, r3, #15
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	601a      	str	r2, [r3, #0]
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40021000 	.word	0x40021000
 8005f44:	40022000 	.word	0x40022000

08005f48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f003 0303 	and.w	r3, r3, #3
 8005f56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f58:	4b1b      	ldr	r3, [pc, #108]	@ (8005fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	091b      	lsrs	r3, r3, #4
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d10c      	bne.n	8005f86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f6c:	4a17      	ldr	r2, [pc, #92]	@ (8005fcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f74:	4a14      	ldr	r2, [pc, #80]	@ (8005fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f76:	68d2      	ldr	r2, [r2, #12]
 8005f78:	0a12      	lsrs	r2, r2, #8
 8005f7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	617b      	str	r3, [r7, #20]
    break;
 8005f84:	e00c      	b.n	8005fa0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f86:	4a12      	ldr	r2, [pc, #72]	@ (8005fd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8005fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f90:	68d2      	ldr	r2, [r2, #12]
 8005f92:	0a12      	lsrs	r2, r2, #8
 8005f94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005f98:	fb02 f303 	mul.w	r3, r2, r3
 8005f9c:	617b      	str	r3, [r7, #20]
    break;
 8005f9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fa0:	4b09      	ldr	r3, [pc, #36]	@ (8005fc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	0e5b      	lsrs	r3, r3, #25
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	3301      	adds	r3, #1
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005fba:	687b      	ldr	r3, [r7, #4]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	016e3600 	.word	0x016e3600
 8005fd0:	00f42400 	.word	0x00f42400

08005fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fdc:	2300      	movs	r3, #0
 8005fde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8098 	beq.w	8006122 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ff6:	4b43      	ldr	r3, [pc, #268]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10d      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006002:	4b40      	ldr	r3, [pc, #256]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006006:	4a3f      	ldr	r2, [pc, #252]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800600c:	6593      	str	r3, [r2, #88]	@ 0x58
 800600e:	4b3d      	ldr	r3, [pc, #244]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006016:	60bb      	str	r3, [r7, #8]
 8006018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800601a:	2301      	movs	r3, #1
 800601c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800601e:	4b3a      	ldr	r3, [pc, #232]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a39      	ldr	r2, [pc, #228]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006028:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800602a:	f7fb fecb 	bl	8001dc4 <HAL_GetTick>
 800602e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006030:	e009      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006032:	f7fb fec7 	bl	8001dc4 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d902      	bls.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	74fb      	strb	r3, [r7, #19]
        break;
 8006044:	e005      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006046:	4b30      	ldr	r3, [pc, #192]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0ef      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006052:	7cfb      	ldrb	r3, [r7, #19]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d159      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006058:	4b2a      	ldr	r3, [pc, #168]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800605a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006062:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01e      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	429a      	cmp	r2, r3
 8006072:	d019      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006074:	4b23      	ldr	r3, [pc, #140]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800607e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006080:	4b20      	ldr	r3, [pc, #128]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006086:	4a1f      	ldr	r2, [pc, #124]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800608c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006090:	4b1c      	ldr	r3, [pc, #112]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006096:	4a1b      	ldr	r2, [pc, #108]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800609c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060a0:	4a18      	ldr	r2, [pc, #96]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d016      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b2:	f7fb fe87 	bl	8001dc4 <HAL_GetTick>
 80060b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060b8:	e00b      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ba:	f7fb fe83 	bl	8001dc4 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d902      	bls.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	74fb      	strb	r3, [r7, #19]
            break;
 80060d0:	e006      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0ec      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80060e0:	7cfb      	ldrb	r3, [r7, #19]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10b      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060e6:	4b07      	ldr	r3, [pc, #28]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f4:	4903      	ldr	r1, [pc, #12]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80060fc:	e008      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060fe:	7cfb      	ldrb	r3, [r7, #19]
 8006100:	74bb      	strb	r3, [r7, #18]
 8006102:	e005      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006104:	40021000 	.word	0x40021000
 8006108:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610c:	7cfb      	ldrb	r3, [r7, #19]
 800610e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006110:	7c7b      	ldrb	r3, [r7, #17]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d105      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006116:	4ba7      	ldr	r3, [pc, #668]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611a:	4aa6      	ldr	r2, [pc, #664]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006120:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800612e:	4ba1      	ldr	r3, [pc, #644]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006134:	f023 0203 	bic.w	r2, r3, #3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	499d      	ldr	r1, [pc, #628]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006150:	4b98      	ldr	r3, [pc, #608]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006156:	f023 020c 	bic.w	r2, r3, #12
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	4995      	ldr	r1, [pc, #596]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006172:	4b90      	ldr	r3, [pc, #576]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006178:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	498c      	ldr	r1, [pc, #560]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006194:	4b87      	ldr	r3, [pc, #540]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800619a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	4984      	ldr	r1, [pc, #528]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061b6:	4b7f      	ldr	r3, [pc, #508]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	497b      	ldr	r1, [pc, #492]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061d8:	4b76      	ldr	r3, [pc, #472]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	4973      	ldr	r1, [pc, #460]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061fa:	4b6e      	ldr	r3, [pc, #440]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006200:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	496a      	ldr	r1, [pc, #424]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800620a:	4313      	orrs	r3, r2
 800620c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800621c:	4b65      	ldr	r3, [pc, #404]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006222:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	4962      	ldr	r1, [pc, #392]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800622c:	4313      	orrs	r3, r2
 800622e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800623e:	4b5d      	ldr	r3, [pc, #372]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006244:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624c:	4959      	ldr	r1, [pc, #356]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006260:	4b54      	ldr	r3, [pc, #336]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006262:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006266:	f023 0203 	bic.w	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626e:	4951      	ldr	r1, [pc, #324]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006270:	4313      	orrs	r3, r2
 8006272:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006282:	4b4c      	ldr	r3, [pc, #304]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006288:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006290:	4948      	ldr	r1, [pc, #288]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d015      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062a4:	4b43      	ldr	r3, [pc, #268]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b2:	4940      	ldr	r1, [pc, #256]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062c2:	d105      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c4:	4b3b      	ldr	r3, [pc, #236]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	4a3a      	ldr	r2, [pc, #232]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d015      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062dc:	4b35      	ldr	r3, [pc, #212]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ea:	4932      	ldr	r1, [pc, #200]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062fa:	d105      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062fc:	4b2d      	ldr	r3, [pc, #180]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	4a2c      	ldr	r2, [pc, #176]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006306:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d015      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006314:	4b27      	ldr	r3, [pc, #156]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006322:	4924      	ldr	r1, [pc, #144]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006332:	d105      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006334:	4b1f      	ldr	r3, [pc, #124]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	4a1e      	ldr	r2, [pc, #120]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800633a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800633e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d015      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800634c:	4b19      	ldr	r3, [pc, #100]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800634e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006352:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635a:	4916      	ldr	r1, [pc, #88]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800636a:	d105      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800636c:	4b11      	ldr	r3, [pc, #68]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	4a10      	ldr	r2, [pc, #64]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006376:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d019      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006384:	4b0b      	ldr	r3, [pc, #44]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800638a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006392:	4908      	ldr	r1, [pc, #32]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063a2:	d109      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063a4:	4b03      	ldr	r3, [pc, #12]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	4a02      	ldr	r2, [pc, #8]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ae:	60d3      	str	r3, [r2, #12]
 80063b0:	e002      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80063b2:	bf00      	nop
 80063b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d015      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063c4:	4b29      	ldr	r3, [pc, #164]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d2:	4926      	ldr	r1, [pc, #152]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063e2:	d105      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063e4:	4b21      	ldr	r3, [pc, #132]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	4a20      	ldr	r2, [pc, #128]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d015      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80063fc:	4b1b      	ldr	r3, [pc, #108]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006402:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800640a:	4918      	ldr	r1, [pc, #96]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800641a:	d105      	bne.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800641c:	4b13      	ldr	r3, [pc, #76]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	4a12      	ldr	r2, [pc, #72]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006426:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d015      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006434:	4b0d      	ldr	r3, [pc, #52]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006436:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800643a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006442:	490a      	ldr	r1, [pc, #40]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006444:	4313      	orrs	r3, r2
 8006446:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800644e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006452:	d105      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006454:	4b05      	ldr	r3, [pc, #20]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	4a04      	ldr	r2, [pc, #16]	@ (800646c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800645a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800645e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006460:	7cbb      	ldrb	r3, [r7, #18]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	40021000 	.word	0x40021000

08006470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e09d      	b.n	80065be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	d108      	bne.n	800649c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006492:	d009      	beq.n	80064a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	61da      	str	r2, [r3, #28]
 800649a:	e005      	b.n	80064a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fb f8be 	bl	8001644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064e8:	d902      	bls.n	80064f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e002      	b.n	80064f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80064f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80064fe:	d007      	beq.n	8006510 <HAL_SPI_Init+0xa0>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006508:	d002      	beq.n	8006510 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006552:	ea42 0103 	orr.w	r1, r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	0c1b      	lsrs	r3, r3, #16
 800656c:	f003 0204 	and.w	r2, r3, #4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	431a      	orrs	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800658c:	ea42 0103 	orr.w	r1, r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69da      	ldr	r2, [r3, #28]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e049      	b.n	800666c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d106      	bne.n	80065f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f841 	bl	8006674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2202      	movs	r2, #2
 80065f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3304      	adds	r3, #4
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f000 fb5b 	bl	8006cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b01      	cmp	r3, #1
 800669a:	d001      	beq.n	80066a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e054      	b.n	800674a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a26      	ldr	r2, [pc, #152]	@ (8006758 <HAL_TIM_Base_Start_IT+0xd0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d022      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x80>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ca:	d01d      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x80>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a22      	ldr	r2, [pc, #136]	@ (800675c <HAL_TIM_Base_Start_IT+0xd4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d018      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x80>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a21      	ldr	r2, [pc, #132]	@ (8006760 <HAL_TIM_Base_Start_IT+0xd8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d013      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x80>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006764 <HAL_TIM_Base_Start_IT+0xdc>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00e      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x80>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006768 <HAL_TIM_Base_Start_IT+0xe0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d009      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x80>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a1c      	ldr	r2, [pc, #112]	@ (800676c <HAL_TIM_Base_Start_IT+0xe4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d004      	beq.n	8006708 <HAL_TIM_Base_Start_IT+0x80>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a1b      	ldr	r2, [pc, #108]	@ (8006770 <HAL_TIM_Base_Start_IT+0xe8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d115      	bne.n	8006734 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	4b19      	ldr	r3, [pc, #100]	@ (8006774 <HAL_TIM_Base_Start_IT+0xec>)
 8006710:	4013      	ands	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b06      	cmp	r3, #6
 8006718:	d015      	beq.n	8006746 <HAL_TIM_Base_Start_IT+0xbe>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006720:	d011      	beq.n	8006746 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0201 	orr.w	r2, r2, #1
 8006730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006732:	e008      	b.n	8006746 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0201 	orr.w	r2, r2, #1
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	e000      	b.n	8006748 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006746:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40012c00 	.word	0x40012c00
 800675c:	40000400 	.word	0x40000400
 8006760:	40000800 	.word	0x40000800
 8006764:	40000c00 	.word	0x40000c00
 8006768:	40013400 	.word	0x40013400
 800676c:	40014000 	.word	0x40014000
 8006770:	40015000 	.word	0x40015000
 8006774:	00010007 	.word	0x00010007

08006778 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e049      	b.n	800681e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d106      	bne.n	80067a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7fb f91a 	bl	80019d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3304      	adds	r3, #4
 80067b4:	4619      	mov	r1, r3
 80067b6:	4610      	mov	r0, r2
 80067b8:	f000 fa82 	bl	8006cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d020      	beq.n	800688a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01b      	beq.n	800688a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f06f 0202 	mvn.w	r2, #2
 800685a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f003 0303 	and.w	r3, r3, #3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d003      	beq.n	8006878 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fa fb25 	bl	8000ec0 <HAL_TIM_IC_CaptureCallback>
 8006876:	e005      	b.n	8006884 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fa03 	bl	8006c84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa0a 	bl	8006c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d020      	beq.n	80068d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01b      	beq.n	80068d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f06f 0204 	mvn.w	r2, #4
 80068a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fa faff 	bl	8000ec0 <HAL_TIM_IC_CaptureCallback>
 80068c2:	e005      	b.n	80068d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f9dd 	bl	8006c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f9e4 	bl	8006c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d020      	beq.n	8006922 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f003 0308 	and.w	r3, r3, #8
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01b      	beq.n	8006922 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f06f 0208 	mvn.w	r2, #8
 80068f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2204      	movs	r2, #4
 80068f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7fa fad9 	bl	8000ec0 <HAL_TIM_IC_CaptureCallback>
 800690e:	e005      	b.n	800691c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f9b7 	bl	8006c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f9be 	bl	8006c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f003 0310 	and.w	r3, r3, #16
 8006928:	2b00      	cmp	r3, #0
 800692a:	d020      	beq.n	800696e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f003 0310 	and.w	r3, r3, #16
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01b      	beq.n	800696e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f06f 0210 	mvn.w	r2, #16
 800693e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2208      	movs	r2, #8
 8006944:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7fa fab3 	bl	8000ec0 <HAL_TIM_IC_CaptureCallback>
 800695a:	e005      	b.n	8006968 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f991 	bl	8006c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f998 	bl	8006c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00c      	beq.n	8006992 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f06f 0201 	mvn.w	r2, #1
 800698a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7fa fe03 	bl	8001598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006998:	2b00      	cmp	r3, #0
 800699a:	d104      	bne.n	80069a6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00c      	beq.n	80069c0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d007      	beq.n	80069c0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80069b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fbfe 	bl	80071bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00c      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d007      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80069dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fbf6 	bl	80071d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00c      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d007      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f952 	bl	8006cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00c      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d007      	beq.n	8006a2c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0220 	mvn.w	r2, #32
 8006a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fbbe 	bl	80071a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00c      	beq.n	8006a50 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d007      	beq.n	8006a50 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fbca 	bl	80071e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00c      	beq.n	8006a74 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d007      	beq.n	8006a74 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fbc2 	bl	80071f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00c      	beq.n	8006a98 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d007      	beq.n	8006a98 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fbba 	bl	800720c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00c      	beq.n	8006abc <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d007      	beq.n	8006abc <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fbb2 	bl	8007220 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006abc:	bf00      	nop
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e088      	b.n	8006bf4 <HAL_TIM_IC_ConfigChannel+0x130>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11b      	bne.n	8006b28 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006b00:	f000 f992 	bl	8006e28 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 020c 	bic.w	r2, r2, #12
 8006b12:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6999      	ldr	r1, [r3, #24]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	689a      	ldr	r2, [r3, #8]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	619a      	str	r2, [r3, #24]
 8006b26:	e060      	b.n	8006bea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d11c      	bne.n	8006b68 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006b3e:	f000 f9e7 	bl	8006f10 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006b50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6999      	ldr	r1, [r3, #24]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	021a      	lsls	r2, r3, #8
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	619a      	str	r2, [r3, #24]
 8006b66:	e040      	b.n	8006bea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	d11b      	bne.n	8006ba6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006b7e:	f000 fa04 	bl	8006f8a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	69da      	ldr	r2, [r3, #28]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 020c 	bic.w	r2, r2, #12
 8006b90:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69d9      	ldr	r1, [r3, #28]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	61da      	str	r2, [r3, #28]
 8006ba4:	e021      	b.n	8006bea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b0c      	cmp	r3, #12
 8006baa:	d11c      	bne.n	8006be6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006bbc:	f000 fa21 	bl	8007002 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69da      	ldr	r2, [r3, #28]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006bce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69d9      	ldr	r1, [r3, #28]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	021a      	lsls	r2, r3, #8
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	61da      	str	r2, [r3, #28]
 8006be4:	e001      	b.n	8006bea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3718      	adds	r7, #24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b0c      	cmp	r3, #12
 8006c0e:	d831      	bhi.n	8006c74 <HAL_TIM_ReadCapturedValue+0x78>
 8006c10:	a201      	add	r2, pc, #4	@ (adr r2, 8006c18 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c16:	bf00      	nop
 8006c18:	08006c4d 	.word	0x08006c4d
 8006c1c:	08006c75 	.word	0x08006c75
 8006c20:	08006c75 	.word	0x08006c75
 8006c24:	08006c75 	.word	0x08006c75
 8006c28:	08006c57 	.word	0x08006c57
 8006c2c:	08006c75 	.word	0x08006c75
 8006c30:	08006c75 	.word	0x08006c75
 8006c34:	08006c75 	.word	0x08006c75
 8006c38:	08006c61 	.word	0x08006c61
 8006c3c:	08006c75 	.word	0x08006c75
 8006c40:	08006c75 	.word	0x08006c75
 8006c44:	08006c75 	.word	0x08006c75
 8006c48:	08006c6b 	.word	0x08006c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c52:	60fb      	str	r3, [r7, #12]

      break;
 8006c54:	e00f      	b.n	8006c76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5c:	60fb      	str	r3, [r7, #12]

      break;
 8006c5e:	e00a      	b.n	8006c76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c66:	60fb      	str	r3, [r7, #12]

      break;
 8006c68:	e005      	b.n	8006c76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c70:	60fb      	str	r3, [r7, #12]

      break;
 8006c72:	e000      	b.n	8006c76 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006c74:	bf00      	nop
  }

  return tmpreg;
 8006c76:	68fb      	ldr	r3, [r7, #12]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a4c      	ldr	r2, [pc, #304]	@ (8006e04 <TIM_Base_SetConfig+0x144>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d017      	beq.n	8006d08 <TIM_Base_SetConfig+0x48>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cde:	d013      	beq.n	8006d08 <TIM_Base_SetConfig+0x48>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a49      	ldr	r2, [pc, #292]	@ (8006e08 <TIM_Base_SetConfig+0x148>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00f      	beq.n	8006d08 <TIM_Base_SetConfig+0x48>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a48      	ldr	r2, [pc, #288]	@ (8006e0c <TIM_Base_SetConfig+0x14c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00b      	beq.n	8006d08 <TIM_Base_SetConfig+0x48>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a47      	ldr	r2, [pc, #284]	@ (8006e10 <TIM_Base_SetConfig+0x150>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d007      	beq.n	8006d08 <TIM_Base_SetConfig+0x48>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a46      	ldr	r2, [pc, #280]	@ (8006e14 <TIM_Base_SetConfig+0x154>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_Base_SetConfig+0x48>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a45      	ldr	r2, [pc, #276]	@ (8006e18 <TIM_Base_SetConfig+0x158>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d108      	bne.n	8006d1a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a39      	ldr	r2, [pc, #228]	@ (8006e04 <TIM_Base_SetConfig+0x144>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d023      	beq.n	8006d6a <TIM_Base_SetConfig+0xaa>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d28:	d01f      	beq.n	8006d6a <TIM_Base_SetConfig+0xaa>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a36      	ldr	r2, [pc, #216]	@ (8006e08 <TIM_Base_SetConfig+0x148>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01b      	beq.n	8006d6a <TIM_Base_SetConfig+0xaa>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a35      	ldr	r2, [pc, #212]	@ (8006e0c <TIM_Base_SetConfig+0x14c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d017      	beq.n	8006d6a <TIM_Base_SetConfig+0xaa>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a34      	ldr	r2, [pc, #208]	@ (8006e10 <TIM_Base_SetConfig+0x150>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d013      	beq.n	8006d6a <TIM_Base_SetConfig+0xaa>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a33      	ldr	r2, [pc, #204]	@ (8006e14 <TIM_Base_SetConfig+0x154>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00f      	beq.n	8006d6a <TIM_Base_SetConfig+0xaa>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a33      	ldr	r2, [pc, #204]	@ (8006e1c <TIM_Base_SetConfig+0x15c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00b      	beq.n	8006d6a <TIM_Base_SetConfig+0xaa>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a32      	ldr	r2, [pc, #200]	@ (8006e20 <TIM_Base_SetConfig+0x160>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d007      	beq.n	8006d6a <TIM_Base_SetConfig+0xaa>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a31      	ldr	r2, [pc, #196]	@ (8006e24 <TIM_Base_SetConfig+0x164>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d003      	beq.n	8006d6a <TIM_Base_SetConfig+0xaa>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a2c      	ldr	r2, [pc, #176]	@ (8006e18 <TIM_Base_SetConfig+0x158>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d108      	bne.n	8006d7c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a18      	ldr	r2, [pc, #96]	@ (8006e04 <TIM_Base_SetConfig+0x144>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d013      	beq.n	8006dd0 <TIM_Base_SetConfig+0x110>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a1a      	ldr	r2, [pc, #104]	@ (8006e14 <TIM_Base_SetConfig+0x154>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00f      	beq.n	8006dd0 <TIM_Base_SetConfig+0x110>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a1a      	ldr	r2, [pc, #104]	@ (8006e1c <TIM_Base_SetConfig+0x15c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00b      	beq.n	8006dd0 <TIM_Base_SetConfig+0x110>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a19      	ldr	r2, [pc, #100]	@ (8006e20 <TIM_Base_SetConfig+0x160>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d007      	beq.n	8006dd0 <TIM_Base_SetConfig+0x110>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a18      	ldr	r2, [pc, #96]	@ (8006e24 <TIM_Base_SetConfig+0x164>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d003      	beq.n	8006dd0 <TIM_Base_SetConfig+0x110>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a13      	ldr	r2, [pc, #76]	@ (8006e18 <TIM_Base_SetConfig+0x158>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d103      	bne.n	8006dd8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d105      	bne.n	8006df6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f023 0201 	bic.w	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	611a      	str	r2, [r3, #16]
  }
}
 8006df6:	bf00      	nop
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40012c00 	.word	0x40012c00
 8006e08:	40000400 	.word	0x40000400
 8006e0c:	40000800 	.word	0x40000800
 8006e10:	40000c00 	.word	0x40000c00
 8006e14:	40013400 	.word	0x40013400
 8006e18:	40015000 	.word	0x40015000
 8006e1c:	40014000 	.word	0x40014000
 8006e20:	40014400 	.word	0x40014400
 8006e24:	40014800 	.word	0x40014800

08006e28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	f023 0201 	bic.w	r2, r3, #1
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4a28      	ldr	r2, [pc, #160]	@ (8006ef4 <TIM_TI1_SetConfig+0xcc>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d01b      	beq.n	8006e8e <TIM_TI1_SetConfig+0x66>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e5c:	d017      	beq.n	8006e8e <TIM_TI1_SetConfig+0x66>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4a25      	ldr	r2, [pc, #148]	@ (8006ef8 <TIM_TI1_SetConfig+0xd0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d013      	beq.n	8006e8e <TIM_TI1_SetConfig+0x66>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4a24      	ldr	r2, [pc, #144]	@ (8006efc <TIM_TI1_SetConfig+0xd4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00f      	beq.n	8006e8e <TIM_TI1_SetConfig+0x66>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a23      	ldr	r2, [pc, #140]	@ (8006f00 <TIM_TI1_SetConfig+0xd8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00b      	beq.n	8006e8e <TIM_TI1_SetConfig+0x66>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4a22      	ldr	r2, [pc, #136]	@ (8006f04 <TIM_TI1_SetConfig+0xdc>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d007      	beq.n	8006e8e <TIM_TI1_SetConfig+0x66>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4a21      	ldr	r2, [pc, #132]	@ (8006f08 <TIM_TI1_SetConfig+0xe0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d003      	beq.n	8006e8e <TIM_TI1_SetConfig+0x66>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4a20      	ldr	r2, [pc, #128]	@ (8006f0c <TIM_TI1_SetConfig+0xe4>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d101      	bne.n	8006e92 <TIM_TI1_SetConfig+0x6a>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <TIM_TI1_SetConfig+0x6c>
 8006e92:	2300      	movs	r3, #0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d008      	beq.n	8006eaa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	e003      	b.n	8006eb2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f023 030a 	bic.w	r3, r3, #10
 8006ecc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f003 030a 	and.w	r3, r3, #10
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40012c00 	.word	0x40012c00
 8006ef8:	40000400 	.word	0x40000400
 8006efc:	40000800 	.word	0x40000800
 8006f00:	40000c00 	.word	0x40000c00
 8006f04:	40013400 	.word	0x40013400
 8006f08:	40014000 	.word	0x40014000
 8006f0c:	40015000 	.word	0x40015000

08006f10 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	f023 0210 	bic.w	r2, r3, #16
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	031b      	lsls	r3, r3, #12
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	621a      	str	r2, [r3, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	371c      	adds	r7, #28
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b087      	sub	sp, #28
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	607a      	str	r2, [r7, #4]
 8006f96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f023 0303 	bic.w	r3, r3, #3
 8006fb6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fc6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006fda:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	021b      	lsls	r3, r3, #8
 8006fe0:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007002:	b480      	push	{r7}
 8007004:	b087      	sub	sp, #28
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	607a      	str	r2, [r7, #4]
 800700e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800702e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007040:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	031b      	lsls	r3, r3, #12
 8007046:	b29b      	uxth	r3, r3
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007054:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	031b      	lsls	r3, r3, #12
 800705a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	621a      	str	r2, [r3, #32]
}
 8007070:	bf00      	nop
 8007072:	371c      	adds	r7, #28
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007090:	2302      	movs	r3, #2
 8007092:	e074      	b.n	800717e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a34      	ldr	r2, [pc, #208]	@ (800718c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d009      	beq.n	80070d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a33      	ldr	r2, [pc, #204]	@ (8007190 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d004      	beq.n	80070d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a31      	ldr	r2, [pc, #196]	@ (8007194 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d108      	bne.n	80070e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80070d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80070ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a21      	ldr	r2, [pc, #132]	@ (800718c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d022      	beq.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007114:	d01d      	beq.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1f      	ldr	r2, [pc, #124]	@ (8007198 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d018      	beq.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1d      	ldr	r2, [pc, #116]	@ (800719c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d013      	beq.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a1c      	ldr	r2, [pc, #112]	@ (80071a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00e      	beq.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a15      	ldr	r2, [pc, #84]	@ (8007190 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d009      	beq.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a18      	ldr	r2, [pc, #96]	@ (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d004      	beq.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a11      	ldr	r2, [pc, #68]	@ (8007194 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d10c      	bne.n	800716c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	4313      	orrs	r3, r2
 8007162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40012c00 	.word	0x40012c00
 8007190:	40013400 	.word	0x40013400
 8007194:	40015000 	.word	0x40015000
 8007198:	40000400 	.word	0x40000400
 800719c:	40000800 	.word	0x40000800
 80071a0:	40000c00 	.word	0x40000c00
 80071a4:	40014000 	.word	0x40014000

080071a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e042      	b.n	80072cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800724c:	2b00      	cmp	r3, #0
 800724e:	d106      	bne.n	800725e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fa fc51 	bl	8001b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2224      	movs	r2, #36	@ 0x24
 8007262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0201 	bic.w	r2, r2, #1
 8007274:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fb24 	bl	80078cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f825 	bl	80072d4 <UART_SetConfig>
 800728a:	4603      	mov	r3, r0
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e01b      	b.n	80072cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0201 	orr.w	r2, r2, #1
 80072c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fba3 	bl	8007a10 <UART_CheckIdleState>
 80072ca:	4603      	mov	r3, r0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d8:	b08c      	sub	sp, #48	@ 0x30
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	431a      	orrs	r2, r3
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	431a      	orrs	r2, r3
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	4baa      	ldr	r3, [pc, #680]	@ (80075ac <UART_SetConfig+0x2d8>)
 8007304:	4013      	ands	r3, r2
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800730c:	430b      	orrs	r3, r1
 800730e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a9f      	ldr	r2, [pc, #636]	@ (80075b0 <UART_SetConfig+0x2dc>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d004      	beq.n	8007340 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800733c:	4313      	orrs	r3, r2
 800733e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800734a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007354:	430b      	orrs	r3, r1
 8007356:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735e:	f023 010f 	bic.w	r1, r3, #15
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a90      	ldr	r2, [pc, #576]	@ (80075b4 <UART_SetConfig+0x2e0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d125      	bne.n	80073c4 <UART_SetConfig+0xf0>
 8007378:	4b8f      	ldr	r3, [pc, #572]	@ (80075b8 <UART_SetConfig+0x2e4>)
 800737a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	2b03      	cmp	r3, #3
 8007384:	d81a      	bhi.n	80073bc <UART_SetConfig+0xe8>
 8007386:	a201      	add	r2, pc, #4	@ (adr r2, 800738c <UART_SetConfig+0xb8>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	0800739d 	.word	0x0800739d
 8007390:	080073ad 	.word	0x080073ad
 8007394:	080073a5 	.word	0x080073a5
 8007398:	080073b5 	.word	0x080073b5
 800739c:	2301      	movs	r3, #1
 800739e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073a2:	e116      	b.n	80075d2 <UART_SetConfig+0x2fe>
 80073a4:	2302      	movs	r3, #2
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073aa:	e112      	b.n	80075d2 <UART_SetConfig+0x2fe>
 80073ac:	2304      	movs	r3, #4
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073b2:	e10e      	b.n	80075d2 <UART_SetConfig+0x2fe>
 80073b4:	2308      	movs	r3, #8
 80073b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ba:	e10a      	b.n	80075d2 <UART_SetConfig+0x2fe>
 80073bc:	2310      	movs	r3, #16
 80073be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c2:	e106      	b.n	80075d2 <UART_SetConfig+0x2fe>
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a7c      	ldr	r2, [pc, #496]	@ (80075bc <UART_SetConfig+0x2e8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d138      	bne.n	8007440 <UART_SetConfig+0x16c>
 80073ce:	4b7a      	ldr	r3, [pc, #488]	@ (80075b8 <UART_SetConfig+0x2e4>)
 80073d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d4:	f003 030c 	and.w	r3, r3, #12
 80073d8:	2b0c      	cmp	r3, #12
 80073da:	d82d      	bhi.n	8007438 <UART_SetConfig+0x164>
 80073dc:	a201      	add	r2, pc, #4	@ (adr r2, 80073e4 <UART_SetConfig+0x110>)
 80073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e2:	bf00      	nop
 80073e4:	08007419 	.word	0x08007419
 80073e8:	08007439 	.word	0x08007439
 80073ec:	08007439 	.word	0x08007439
 80073f0:	08007439 	.word	0x08007439
 80073f4:	08007429 	.word	0x08007429
 80073f8:	08007439 	.word	0x08007439
 80073fc:	08007439 	.word	0x08007439
 8007400:	08007439 	.word	0x08007439
 8007404:	08007421 	.word	0x08007421
 8007408:	08007439 	.word	0x08007439
 800740c:	08007439 	.word	0x08007439
 8007410:	08007439 	.word	0x08007439
 8007414:	08007431 	.word	0x08007431
 8007418:	2300      	movs	r3, #0
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741e:	e0d8      	b.n	80075d2 <UART_SetConfig+0x2fe>
 8007420:	2302      	movs	r3, #2
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007426:	e0d4      	b.n	80075d2 <UART_SetConfig+0x2fe>
 8007428:	2304      	movs	r3, #4
 800742a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800742e:	e0d0      	b.n	80075d2 <UART_SetConfig+0x2fe>
 8007430:	2308      	movs	r3, #8
 8007432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007436:	e0cc      	b.n	80075d2 <UART_SetConfig+0x2fe>
 8007438:	2310      	movs	r3, #16
 800743a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800743e:	e0c8      	b.n	80075d2 <UART_SetConfig+0x2fe>
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a5e      	ldr	r2, [pc, #376]	@ (80075c0 <UART_SetConfig+0x2ec>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d125      	bne.n	8007496 <UART_SetConfig+0x1c2>
 800744a:	4b5b      	ldr	r3, [pc, #364]	@ (80075b8 <UART_SetConfig+0x2e4>)
 800744c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007450:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007454:	2b30      	cmp	r3, #48	@ 0x30
 8007456:	d016      	beq.n	8007486 <UART_SetConfig+0x1b2>
 8007458:	2b30      	cmp	r3, #48	@ 0x30
 800745a:	d818      	bhi.n	800748e <UART_SetConfig+0x1ba>
 800745c:	2b20      	cmp	r3, #32
 800745e:	d00a      	beq.n	8007476 <UART_SetConfig+0x1a2>
 8007460:	2b20      	cmp	r3, #32
 8007462:	d814      	bhi.n	800748e <UART_SetConfig+0x1ba>
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <UART_SetConfig+0x19a>
 8007468:	2b10      	cmp	r3, #16
 800746a:	d008      	beq.n	800747e <UART_SetConfig+0x1aa>
 800746c:	e00f      	b.n	800748e <UART_SetConfig+0x1ba>
 800746e:	2300      	movs	r3, #0
 8007470:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007474:	e0ad      	b.n	80075d2 <UART_SetConfig+0x2fe>
 8007476:	2302      	movs	r3, #2
 8007478:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800747c:	e0a9      	b.n	80075d2 <UART_SetConfig+0x2fe>
 800747e:	2304      	movs	r3, #4
 8007480:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007484:	e0a5      	b.n	80075d2 <UART_SetConfig+0x2fe>
 8007486:	2308      	movs	r3, #8
 8007488:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800748c:	e0a1      	b.n	80075d2 <UART_SetConfig+0x2fe>
 800748e:	2310      	movs	r3, #16
 8007490:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007494:	e09d      	b.n	80075d2 <UART_SetConfig+0x2fe>
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a4a      	ldr	r2, [pc, #296]	@ (80075c4 <UART_SetConfig+0x2f0>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d125      	bne.n	80074ec <UART_SetConfig+0x218>
 80074a0:	4b45      	ldr	r3, [pc, #276]	@ (80075b8 <UART_SetConfig+0x2e4>)
 80074a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80074aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80074ac:	d016      	beq.n	80074dc <UART_SetConfig+0x208>
 80074ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80074b0:	d818      	bhi.n	80074e4 <UART_SetConfig+0x210>
 80074b2:	2b80      	cmp	r3, #128	@ 0x80
 80074b4:	d00a      	beq.n	80074cc <UART_SetConfig+0x1f8>
 80074b6:	2b80      	cmp	r3, #128	@ 0x80
 80074b8:	d814      	bhi.n	80074e4 <UART_SetConfig+0x210>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <UART_SetConfig+0x1f0>
 80074be:	2b40      	cmp	r3, #64	@ 0x40
 80074c0:	d008      	beq.n	80074d4 <UART_SetConfig+0x200>
 80074c2:	e00f      	b.n	80074e4 <UART_SetConfig+0x210>
 80074c4:	2300      	movs	r3, #0
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ca:	e082      	b.n	80075d2 <UART_SetConfig+0x2fe>
 80074cc:	2302      	movs	r3, #2
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d2:	e07e      	b.n	80075d2 <UART_SetConfig+0x2fe>
 80074d4:	2304      	movs	r3, #4
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074da:	e07a      	b.n	80075d2 <UART_SetConfig+0x2fe>
 80074dc:	2308      	movs	r3, #8
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e2:	e076      	b.n	80075d2 <UART_SetConfig+0x2fe>
 80074e4:	2310      	movs	r3, #16
 80074e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ea:	e072      	b.n	80075d2 <UART_SetConfig+0x2fe>
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a35      	ldr	r2, [pc, #212]	@ (80075c8 <UART_SetConfig+0x2f4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d12a      	bne.n	800754c <UART_SetConfig+0x278>
 80074f6:	4b30      	ldr	r3, [pc, #192]	@ (80075b8 <UART_SetConfig+0x2e4>)
 80074f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007500:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007504:	d01a      	beq.n	800753c <UART_SetConfig+0x268>
 8007506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800750a:	d81b      	bhi.n	8007544 <UART_SetConfig+0x270>
 800750c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007510:	d00c      	beq.n	800752c <UART_SetConfig+0x258>
 8007512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007516:	d815      	bhi.n	8007544 <UART_SetConfig+0x270>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <UART_SetConfig+0x250>
 800751c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007520:	d008      	beq.n	8007534 <UART_SetConfig+0x260>
 8007522:	e00f      	b.n	8007544 <UART_SetConfig+0x270>
 8007524:	2300      	movs	r3, #0
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800752a:	e052      	b.n	80075d2 <UART_SetConfig+0x2fe>
 800752c:	2302      	movs	r3, #2
 800752e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007532:	e04e      	b.n	80075d2 <UART_SetConfig+0x2fe>
 8007534:	2304      	movs	r3, #4
 8007536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753a:	e04a      	b.n	80075d2 <UART_SetConfig+0x2fe>
 800753c:	2308      	movs	r3, #8
 800753e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007542:	e046      	b.n	80075d2 <UART_SetConfig+0x2fe>
 8007544:	2310      	movs	r3, #16
 8007546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754a:	e042      	b.n	80075d2 <UART_SetConfig+0x2fe>
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a17      	ldr	r2, [pc, #92]	@ (80075b0 <UART_SetConfig+0x2dc>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d13a      	bne.n	80075cc <UART_SetConfig+0x2f8>
 8007556:	4b18      	ldr	r3, [pc, #96]	@ (80075b8 <UART_SetConfig+0x2e4>)
 8007558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800755c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007560:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007564:	d01a      	beq.n	800759c <UART_SetConfig+0x2c8>
 8007566:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800756a:	d81b      	bhi.n	80075a4 <UART_SetConfig+0x2d0>
 800756c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007570:	d00c      	beq.n	800758c <UART_SetConfig+0x2b8>
 8007572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007576:	d815      	bhi.n	80075a4 <UART_SetConfig+0x2d0>
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <UART_SetConfig+0x2b0>
 800757c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007580:	d008      	beq.n	8007594 <UART_SetConfig+0x2c0>
 8007582:	e00f      	b.n	80075a4 <UART_SetConfig+0x2d0>
 8007584:	2300      	movs	r3, #0
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758a:	e022      	b.n	80075d2 <UART_SetConfig+0x2fe>
 800758c:	2302      	movs	r3, #2
 800758e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007592:	e01e      	b.n	80075d2 <UART_SetConfig+0x2fe>
 8007594:	2304      	movs	r3, #4
 8007596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800759a:	e01a      	b.n	80075d2 <UART_SetConfig+0x2fe>
 800759c:	2308      	movs	r3, #8
 800759e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075a2:	e016      	b.n	80075d2 <UART_SetConfig+0x2fe>
 80075a4:	2310      	movs	r3, #16
 80075a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075aa:	e012      	b.n	80075d2 <UART_SetConfig+0x2fe>
 80075ac:	cfff69f3 	.word	0xcfff69f3
 80075b0:	40008000 	.word	0x40008000
 80075b4:	40013800 	.word	0x40013800
 80075b8:	40021000 	.word	0x40021000
 80075bc:	40004400 	.word	0x40004400
 80075c0:	40004800 	.word	0x40004800
 80075c4:	40004c00 	.word	0x40004c00
 80075c8:	40005000 	.word	0x40005000
 80075cc:	2310      	movs	r3, #16
 80075ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4aae      	ldr	r2, [pc, #696]	@ (8007890 <UART_SetConfig+0x5bc>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	f040 8097 	bne.w	800770c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80075e2:	2b08      	cmp	r3, #8
 80075e4:	d823      	bhi.n	800762e <UART_SetConfig+0x35a>
 80075e6:	a201      	add	r2, pc, #4	@ (adr r2, 80075ec <UART_SetConfig+0x318>)
 80075e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ec:	08007611 	.word	0x08007611
 80075f0:	0800762f 	.word	0x0800762f
 80075f4:	08007619 	.word	0x08007619
 80075f8:	0800762f 	.word	0x0800762f
 80075fc:	0800761f 	.word	0x0800761f
 8007600:	0800762f 	.word	0x0800762f
 8007604:	0800762f 	.word	0x0800762f
 8007608:	0800762f 	.word	0x0800762f
 800760c:	08007627 	.word	0x08007627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007610:	f7fe fc3c 	bl	8005e8c <HAL_RCC_GetPCLK1Freq>
 8007614:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007616:	e010      	b.n	800763a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007618:	4b9e      	ldr	r3, [pc, #632]	@ (8007894 <UART_SetConfig+0x5c0>)
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800761c:	e00d      	b.n	800763a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800761e:	f7fe fbc7 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8007622:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007624:	e009      	b.n	800763a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800762a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800762c:	e005      	b.n	800763a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007638:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800763a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 8130 	beq.w	80078a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007646:	4a94      	ldr	r2, [pc, #592]	@ (8007898 <UART_SetConfig+0x5c4>)
 8007648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800764c:	461a      	mov	r2, r3
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007650:	fbb3 f3f2 	udiv	r3, r3, r2
 8007654:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	4613      	mov	r3, r2
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	4413      	add	r3, r2
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	429a      	cmp	r2, r3
 8007664:	d305      	bcc.n	8007672 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	429a      	cmp	r2, r3
 8007670:	d903      	bls.n	800767a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007678:	e113      	b.n	80078a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	2200      	movs	r2, #0
 800767e:	60bb      	str	r3, [r7, #8]
 8007680:	60fa      	str	r2, [r7, #12]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007686:	4a84      	ldr	r2, [pc, #528]	@ (8007898 <UART_SetConfig+0x5c4>)
 8007688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800768c:	b29b      	uxth	r3, r3
 800768e:	2200      	movs	r2, #0
 8007690:	603b      	str	r3, [r7, #0]
 8007692:	607a      	str	r2, [r7, #4]
 8007694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007698:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800769c:	f7f8 fedc 	bl	8000458 <__aeabi_uldivmod>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4610      	mov	r0, r2
 80076a6:	4619      	mov	r1, r3
 80076a8:	f04f 0200 	mov.w	r2, #0
 80076ac:	f04f 0300 	mov.w	r3, #0
 80076b0:	020b      	lsls	r3, r1, #8
 80076b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076b6:	0202      	lsls	r2, r0, #8
 80076b8:	6979      	ldr	r1, [r7, #20]
 80076ba:	6849      	ldr	r1, [r1, #4]
 80076bc:	0849      	lsrs	r1, r1, #1
 80076be:	2000      	movs	r0, #0
 80076c0:	460c      	mov	r4, r1
 80076c2:	4605      	mov	r5, r0
 80076c4:	eb12 0804 	adds.w	r8, r2, r4
 80076c8:	eb43 0905 	adc.w	r9, r3, r5
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	469a      	mov	sl, r3
 80076d4:	4693      	mov	fp, r2
 80076d6:	4652      	mov	r2, sl
 80076d8:	465b      	mov	r3, fp
 80076da:	4640      	mov	r0, r8
 80076dc:	4649      	mov	r1, r9
 80076de:	f7f8 febb 	bl	8000458 <__aeabi_uldivmod>
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4613      	mov	r3, r2
 80076e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076f0:	d308      	bcc.n	8007704 <UART_SetConfig+0x430>
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076f8:	d204      	bcs.n	8007704 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6a3a      	ldr	r2, [r7, #32]
 8007700:	60da      	str	r2, [r3, #12]
 8007702:	e0ce      	b.n	80078a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800770a:	e0ca      	b.n	80078a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007714:	d166      	bne.n	80077e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007716:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800771a:	2b08      	cmp	r3, #8
 800771c:	d827      	bhi.n	800776e <UART_SetConfig+0x49a>
 800771e:	a201      	add	r2, pc, #4	@ (adr r2, 8007724 <UART_SetConfig+0x450>)
 8007720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007724:	08007749 	.word	0x08007749
 8007728:	08007751 	.word	0x08007751
 800772c:	08007759 	.word	0x08007759
 8007730:	0800776f 	.word	0x0800776f
 8007734:	0800775f 	.word	0x0800775f
 8007738:	0800776f 	.word	0x0800776f
 800773c:	0800776f 	.word	0x0800776f
 8007740:	0800776f 	.word	0x0800776f
 8007744:	08007767 	.word	0x08007767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007748:	f7fe fba0 	bl	8005e8c <HAL_RCC_GetPCLK1Freq>
 800774c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800774e:	e014      	b.n	800777a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007750:	f7fe fbb2 	bl	8005eb8 <HAL_RCC_GetPCLK2Freq>
 8007754:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007756:	e010      	b.n	800777a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007758:	4b4e      	ldr	r3, [pc, #312]	@ (8007894 <UART_SetConfig+0x5c0>)
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800775c:	e00d      	b.n	800777a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800775e:	f7fe fb27 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8007762:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007764:	e009      	b.n	800777a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800776a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800776c:	e005      	b.n	800777a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007778:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 8090 	beq.w	80078a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007786:	4a44      	ldr	r2, [pc, #272]	@ (8007898 <UART_SetConfig+0x5c4>)
 8007788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800778c:	461a      	mov	r2, r3
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	fbb3 f3f2 	udiv	r3, r3, r2
 8007794:	005a      	lsls	r2, r3, #1
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	441a      	add	r2, r3
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	2b0f      	cmp	r3, #15
 80077ac:	d916      	bls.n	80077dc <UART_SetConfig+0x508>
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077b4:	d212      	bcs.n	80077dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f023 030f 	bic.w	r3, r3, #15
 80077be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	8bfb      	ldrh	r3, [r7, #30]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	8bfa      	ldrh	r2, [r7, #30]
 80077d8:	60da      	str	r2, [r3, #12]
 80077da:	e062      	b.n	80078a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077e2:	e05e      	b.n	80078a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d828      	bhi.n	800783e <UART_SetConfig+0x56a>
 80077ec:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <UART_SetConfig+0x520>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	08007819 	.word	0x08007819
 80077f8:	08007821 	.word	0x08007821
 80077fc:	08007829 	.word	0x08007829
 8007800:	0800783f 	.word	0x0800783f
 8007804:	0800782f 	.word	0x0800782f
 8007808:	0800783f 	.word	0x0800783f
 800780c:	0800783f 	.word	0x0800783f
 8007810:	0800783f 	.word	0x0800783f
 8007814:	08007837 	.word	0x08007837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007818:	f7fe fb38 	bl	8005e8c <HAL_RCC_GetPCLK1Freq>
 800781c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800781e:	e014      	b.n	800784a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007820:	f7fe fb4a 	bl	8005eb8 <HAL_RCC_GetPCLK2Freq>
 8007824:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007826:	e010      	b.n	800784a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007828:	4b1a      	ldr	r3, [pc, #104]	@ (8007894 <UART_SetConfig+0x5c0>)
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800782c:	e00d      	b.n	800784a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800782e:	f7fe fabf 	bl	8005db0 <HAL_RCC_GetSysClockFreq>
 8007832:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007834:	e009      	b.n	800784a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800783a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800783c:	e005      	b.n	800784a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007848:	bf00      	nop
    }

    if (pclk != 0U)
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	d028      	beq.n	80078a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007854:	4a10      	ldr	r2, [pc, #64]	@ (8007898 <UART_SetConfig+0x5c4>)
 8007856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800785a:	461a      	mov	r2, r3
 800785c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	085b      	lsrs	r3, r3, #1
 8007868:	441a      	add	r2, r3
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007872:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	2b0f      	cmp	r3, #15
 8007878:	d910      	bls.n	800789c <UART_SetConfig+0x5c8>
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007880:	d20c      	bcs.n	800789c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	b29a      	uxth	r2, r3
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60da      	str	r2, [r3, #12]
 800788c:	e009      	b.n	80078a2 <UART_SetConfig+0x5ce>
 800788e:	bf00      	nop
 8007890:	40008000 	.word	0x40008000
 8007894:	00f42400 	.word	0x00f42400
 8007898:	08009ac8 	.word	0x08009ac8
      }
      else
      {
        ret = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2200      	movs	r2, #0
 80078b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2200      	movs	r2, #0
 80078bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80078be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3730      	adds	r7, #48	@ 0x30
 80078c6:	46bd      	mov	sp, r7
 80078c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080078cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00a      	beq.n	80078f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793e:	f003 0304 	and.w	r3, r3, #4
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01a      	beq.n	80079e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ca:	d10a      	bne.n	80079e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	605a      	str	r2, [r3, #4]
  }
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b098      	sub	sp, #96	@ 0x60
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a20:	f7fa f9d0 	bl	8001dc4 <HAL_GetTick>
 8007a24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0308 	and.w	r3, r3, #8
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d12f      	bne.n	8007a94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f88e 	bl	8007b64 <UART_WaitOnFlagUntilTimeout>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d022      	beq.n	8007a94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a62:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e6      	bne.n	8007a4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e063      	b.n	8007b5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0304 	and.w	r3, r3, #4
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d149      	bne.n	8007b36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aa2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f857 	bl	8007b64 <UART_WaitOnFlagUntilTimeout>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d03c      	beq.n	8007b36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ada:	633b      	str	r3, [r7, #48]	@ 0x30
 8007adc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e6      	bne.n	8007abc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3308      	adds	r3, #8
 8007af4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f023 0301 	bic.w	r3, r3, #1
 8007b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3308      	adds	r3, #8
 8007b0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b0e:	61fa      	str	r2, [r7, #28]
 8007b10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	69b9      	ldr	r1, [r7, #24]
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e5      	bne.n	8007aee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e012      	b.n	8007b5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3758      	adds	r7, #88	@ 0x58
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	603b      	str	r3, [r7, #0]
 8007b70:	4613      	mov	r3, r2
 8007b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b74:	e04f      	b.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7c:	d04b      	beq.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b7e:	f7fa f921 	bl	8001dc4 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d302      	bcc.n	8007b94 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e04e      	b.n	8007c36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0304 	and.w	r3, r3, #4
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d037      	beq.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b80      	cmp	r3, #128	@ 0x80
 8007baa:	d034      	beq.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b40      	cmp	r3, #64	@ 0x40
 8007bb0:	d031      	beq.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f003 0308 	and.w	r3, r3, #8
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d110      	bne.n	8007be2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f838 	bl	8007c3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e029      	b.n	8007c36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bf0:	d111      	bne.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f81e 	bl	8007c3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e00f      	b.n	8007c36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69da      	ldr	r2, [r3, #28]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	bf0c      	ite	eq
 8007c26:	2301      	moveq	r3, #1
 8007c28:	2300      	movne	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d0a0      	beq.n	8007b76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b095      	sub	sp, #84	@ 0x54
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c4e:	e853 3f00 	ldrex	r3, [r3]
 8007c52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	461a      	mov	r2, r3
 8007c62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c64:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e6      	bne.n	8007c46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c8e:	f023 0301 	bic.w	r3, r3, #1
 8007c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3308      	adds	r3, #8
 8007c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ca4:	e841 2300 	strex	r3, r2, [r1]
 8007ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e3      	bne.n	8007c78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d118      	bne.n	8007cea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f023 0310 	bic.w	r3, r3, #16
 8007ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cd6:	61bb      	str	r3, [r7, #24]
 8007cd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6979      	ldr	r1, [r7, #20]
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e6      	bne.n	8007cb8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2220      	movs	r2, #32
 8007cee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007cfe:	bf00      	nop
 8007d00:	3754      	adds	r7, #84	@ 0x54
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b085      	sub	sp, #20
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e027      	b.n	8007d70 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2224      	movs	r2, #36	@ 0x24
 8007d2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0201 	bic.w	r2, r2, #1
 8007d46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d101      	bne.n	8007d94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d90:	2302      	movs	r3, #2
 8007d92:	e02d      	b.n	8007df0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2224      	movs	r2, #36	@ 0x24
 8007da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 0201 	bic.w	r2, r2, #1
 8007dba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f84f 	bl	8007e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d101      	bne.n	8007e10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e02d      	b.n	8007e6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2224      	movs	r2, #36	@ 0x24
 8007e1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0201 	bic.w	r2, r2, #1
 8007e36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f811 	bl	8007e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d108      	bne.n	8007e96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e94:	e031      	b.n	8007efa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e96:	2308      	movs	r3, #8
 8007e98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e9a:	2308      	movs	r3, #8
 8007e9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	0e5b      	lsrs	r3, r3, #25
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	f003 0307 	and.w	r3, r3, #7
 8007eac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	0f5b      	lsrs	r3, r3, #29
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	7b3a      	ldrb	r2, [r7, #12]
 8007ec2:	4911      	ldr	r1, [pc, #68]	@ (8007f08 <UARTEx_SetNbDataToProcess+0x94>)
 8007ec4:	5c8a      	ldrb	r2, [r1, r2]
 8007ec6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007eca:	7b3a      	ldrb	r2, [r7, #12]
 8007ecc:	490f      	ldr	r1, [pc, #60]	@ (8007f0c <UARTEx_SetNbDataToProcess+0x98>)
 8007ece:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	7b7a      	ldrb	r2, [r7, #13]
 8007ee0:	4909      	ldr	r1, [pc, #36]	@ (8007f08 <UARTEx_SetNbDataToProcess+0x94>)
 8007ee2:	5c8a      	ldrb	r2, [r1, r2]
 8007ee4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ee8:	7b7a      	ldrb	r2, [r7, #13]
 8007eea:	4908      	ldr	r1, [pc, #32]	@ (8007f0c <UARTEx_SetNbDataToProcess+0x98>)
 8007eec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eee:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007efa:	bf00      	nop
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	08009ae0 	.word	0x08009ae0
 8007f0c:	08009ae8 	.word	0x08009ae8

08007f10 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b096      	sub	sp, #88	@ 0x58
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3303      	adds	r3, #3
 8007f22:	f023 0303 	bic.w	r3, r3, #3
 8007f26:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007f28:	f3ef 8310 	mrs	r3, PRIMASK
 8007f2c:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
    return(posture);
 8007f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8007f30:	633b      	str	r3, [r7, #48]	@ 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8007f32:	b672      	cpsid	i
#endif
    return(int_posture);
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8007f36:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007f38:	4b55      	ldr	r3, [pc, #340]	@ (8008090 <_tx_byte_allocate+0x180>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f46:	621a      	str	r2, [r3, #32]
 8007f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4e:	f383 8810 	msr	PRIMASK, r3
}
 8007f52:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8007f54:	6879      	ldr	r1, [r7, #4]
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 f9b2 	bl	80082c0 <_tx_byte_pool_search>
 8007f5c:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8007f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8007f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007f68:	b672      	cpsid	i
    return(int_posture);
 8007f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8007f6c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8007f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8007f74:	2301      	movs	r3, #1
 8007f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f78:	e006      	b.n	8007f88 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d101      	bne.n	8007f88 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8007f84:	2301      	movs	r3, #1
 8007f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8007f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0d9      	beq.n	8007f42 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f92:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8007f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d008      	beq.n	8007fac <_tx_byte_allocate+0x9c>
 8007f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f9c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	f383 8810 	msr	PRIMASK, r3
}
 8007fa4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007faa:	e06c      	b.n	8008086 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d061      	beq.n	8008076 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8007fb2:	4b38      	ldr	r3, [pc, #224]	@ (8008094 <_tx_byte_allocate+0x184>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d007      	beq.n	8007fca <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8007fba:	2310      	movs	r3, #16
 8007fbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	f383 8810 	msr	PRIMASK, r3
}
 8007fc8:	e05d      	b.n	8008086 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8007fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fcc:	4a32      	ldr	r2, [pc, #200]	@ (8008098 <_tx_byte_allocate+0x188>)
 8007fce:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8007fd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8007fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8007fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8007fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fe4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff4:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8008000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008002:	2b00      	cmp	r3, #0
 8008004:	d109      	bne.n	800801a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800800a:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800800c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800800e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008010:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8008012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008014:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008016:	675a      	str	r2, [r3, #116]	@ 0x74
 8008018:	e011      	b.n	800803e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8008020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008022:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008024:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8008026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800802a:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800802c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800802e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008030:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8008032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008036:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8008038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800803a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800803c:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800803e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008040:	2209      	movs	r2, #9
 8008042:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008046:	2201      	movs	r2, #1
 8008048:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800804a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8008050:	4b10      	ldr	r3, [pc, #64]	@ (8008094 <_tx_byte_allocate+0x184>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3301      	adds	r3, #1
 8008056:	4a0f      	ldr	r2, [pc, #60]	@ (8008094 <_tx_byte_allocate+0x184>)
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800805c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	f383 8810 	msr	PRIMASK, r3
}
 8008064:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8008066:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8008068:	f000 fe30 	bl	8008ccc <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800806c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800806e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008072:	653b      	str	r3, [r7, #80]	@ 0x50
 8008074:	e007      	b.n	8008086 <_tx_byte_allocate+0x176>
 8008076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008078:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f383 8810 	msr	PRIMASK, r3
}
 8008080:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8008082:	2310      	movs	r3, #16
 8008084:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8008086:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8008088:	4618      	mov	r0, r3
 800808a:	3758      	adds	r7, #88	@ 0x58
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	20000a70 	.word	0x20000a70
 8008094:	20000b08 	.word	0x20000b08
 8008098:	0800809d 	.word	0x0800809d

0800809c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08e      	sub	sp, #56	@ 0x38
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80080a6:	f3ef 8310 	mrs	r3, PRIMASK
 80080aa:	623b      	str	r3, [r7, #32]
    return(posture);
 80080ac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80080ae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80080b0:	b672      	cpsid	i
    return(int_posture);
 80080b2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80080b4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080ba:	4a33      	ldr	r2, [pc, #204]	@ (8008188 <_tx_byte_pool_cleanup+0xec>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d158      	bne.n	8008172 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d152      	bne.n	8008172 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080d0:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d04c      	beq.n	8008172 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 80080d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a2b      	ldr	r2, [pc, #172]	@ (800818c <_tx_byte_pool_cleanup+0xf0>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d147      	bne.n	8008172 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80080e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d043      	beq.n	8008172 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 80080f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f4:	1e5a      	subs	r2, r3, #1
 80080f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f8:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d103      	bne.n	800810e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8008106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008108:	2200      	movs	r2, #0
 800810a:	625a      	str	r2, [r3, #36]	@ 0x24
 800810c:	e013      	b.n	8008136 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008112:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008118:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800811e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008122:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008124:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8008126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	429a      	cmp	r2, r3
 800812e:	d102      	bne.n	8008136 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008134:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800813a:	2b09      	cmp	r3, #9
 800813c:	d119      	bne.n	8008172 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2210      	movs	r2, #16
 8008142:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008146:	4b12      	ldr	r3, [pc, #72]	@ (8008190 <_tx_byte_pool_cleanup+0xf4>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3301      	adds	r3, #1
 800814c:	4a10      	ldr	r2, [pc, #64]	@ (8008190 <_tx_byte_pool_cleanup+0xf4>)
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008152:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f383 8810 	msr	PRIMASK, r3
}
 800815a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fcb5 	bl	8008acc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008162:	f3ef 8310 	mrs	r3, PRIMASK
 8008166:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008168:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800816a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800816c:	b672      	cpsid	i
    return(int_posture);
 800816e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008170:	637b      	str	r3, [r7, #52]	@ 0x34
 8008172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008174:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f383 8810 	msr	PRIMASK, r3
}
 800817c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800817e:	bf00      	nop
 8008180:	3738      	adds	r7, #56	@ 0x38
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	0800809d 	.word	0x0800809d
 800818c:	42595445 	.word	0x42595445
 8008190:	20000b08 	.word	0x20000b08

08008194 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08e      	sub	sp, #56	@ 0x38
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80081a2:	2234      	movs	r2, #52	@ 0x34
 80081a4:	2100      	movs	r1, #0
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f001 fc08 	bl	80099bc <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	f023 0303 	bic.w	r3, r3, #3
 80081b2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	f1a3 0208 	sub.w	r2, r3, #8
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2202      	movs	r2, #2
 80081e0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80081e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	4413      	add	r3, r2
 80081ec:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80081ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f0:	3b04      	subs	r3, #4
 80081f2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80081f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 80081fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008200:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8008202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008204:	3b04      	subs	r3, #4
 8008206:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800820a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800820c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800821a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800821e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8008224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008226:	3304      	adds	r3, #4
 8008228:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800822a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800822e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008230:	4a1f      	ldr	r2, [pc, #124]	@ (80082b0 <_tx_byte_pool_create+0x11c>)
 8008232:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800823a:	f3ef 8310 	mrs	r3, PRIMASK
 800823e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8008240:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8008242:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008244:	b672      	cpsid	i
    return(int_posture);
 8008246:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8008248:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	4a19      	ldr	r2, [pc, #100]	@ (80082b4 <_tx_byte_pool_create+0x120>)
 800824e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8008250:	4b19      	ldr	r3, [pc, #100]	@ (80082b8 <_tx_byte_pool_create+0x124>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d109      	bne.n	800826c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8008258:	4a18      	ldr	r2, [pc, #96]	@ (80082bc <_tx_byte_pool_create+0x128>)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	631a      	str	r2, [r3, #48]	@ 0x30
 800826a:	e011      	b.n	8008290 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800826c:	4b13      	ldr	r3, [pc, #76]	@ (80082bc <_tx_byte_pool_create+0x128>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008276:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6a3a      	ldr	r2, [r7, #32]
 800828e:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8008290:	4b09      	ldr	r3, [pc, #36]	@ (80082b8 <_tx_byte_pool_create+0x124>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3301      	adds	r3, #1
 8008296:	4a08      	ldr	r2, [pc, #32]	@ (80082b8 <_tx_byte_pool_create+0x124>)
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f383 8810 	msr	PRIMASK, r3
}
 80082a4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3738      	adds	r7, #56	@ 0x38
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	ffffeeee 	.word	0xffffeeee
 80082b4:	42595445 	.word	0x42595445
 80082b8:	20000a64 	.word	0x20000a64
 80082bc:	20000a60 	.word	0x20000a60

080082c0 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b097      	sub	sp, #92	@ 0x5c
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80082ca:	2300      	movs	r3, #0
 80082cc:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80082ce:	f3ef 8310 	mrs	r3, PRIMASK
 80082d2:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 80082d6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80082d8:	b672      	cpsid	i
    return(int_posture);
 80082da:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 80082dc:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689a      	ldr	r2, [r3, #8]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	3b02      	subs	r3, #2
 80082e8:	00db      	lsls	r3, r3, #3
 80082ea:	4413      	add	r3, r2
 80082ec:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d308      	bcc.n	8008308 <_tx_byte_pool_search+0x48>
 80082f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082f8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	f383 8810 	msr	PRIMASK, r3
}
 8008300:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	653b      	str	r3, [r7, #80]	@ 0x50
 8008306:	e0dd      	b.n	80084c4 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008308:	4b72      	ldr	r3, [pc, #456]	@ (80084d4 <_tx_byte_pool_search+0x214>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008312:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	695b      	ldr	r3, [r3, #20]
 8008318:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	3301      	adds	r3, #1
 8008320:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 8008322:	2300      	movs	r3, #0
 8008324:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008328:	3304      	adds	r3, #4
 800832a:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800832c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832e:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8008330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a68      	ldr	r2, [pc, #416]	@ (80084d8 <_tx_byte_pool_search+0x218>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d143      	bne.n	80083c2 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800833a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800833c:	2b00      	cmp	r3, #0
 800833e:	d104      	bne.n	800834a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008344:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8008346:	2301      	movs	r3, #1
 8008348:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800834a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800834c:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800834e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8008354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800835c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800835e:	3b08      	subs	r3, #8
 8008360:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8008362:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d257      	bcs.n	800841a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800836a:	2300      	movs	r3, #0
 800836c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800836e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008370:	3304      	adds	r3, #4
 8008372:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008376:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8008378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a56      	ldr	r2, [pc, #344]	@ (80084d8 <_tx_byte_pool_search+0x218>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d113      	bne.n	80083aa <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008384:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8008386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	1e5a      	subs	r2, r3, #1
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800839e:	429a      	cmp	r2, r3
 80083a0:	d114      	bne.n	80083cc <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80083a6:	615a      	str	r2, [r3, #20]
 80083a8:	e010      	b.n	80083cc <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80083aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ac:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 80083ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80083b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d008      	beq.n	80083cc <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80083ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083bc:	3b01      	subs	r3, #1
 80083be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083c0:	e004      	b.n	80083cc <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80083c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083c4:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 80083c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80083cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80083d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083d4:	3b01      	subs	r3, #1
 80083d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083da:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f383 8810 	msr	PRIMASK, r3
}
 80083e2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80083e4:	f3ef 8310 	mrs	r3, PRIMASK
 80083e8:	61bb      	str	r3, [r7, #24]
    return(posture);
 80083ea:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80083ec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80083ee:	b672      	cpsid	i
    return(int_posture);
 80083f0:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80083f2:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d009      	beq.n	8008412 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	3301      	adds	r3, #1
 800840a:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008410:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8008412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008414:	2b00      	cmp	r3, #0
 8008416:	d186      	bne.n	8008326 <_tx_byte_pool_search+0x66>
 8008418:	e000      	b.n	800841c <_tx_byte_pool_search+0x15c>
                    break;
 800841a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800841c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d048      	beq.n	80084b4 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8008422:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b13      	cmp	r3, #19
 800842a:	d91e      	bls.n	800846a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	3308      	adds	r3, #8
 8008430:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008432:	4413      	add	r3, r2
 8008434:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008438:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800843a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800843c:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008444:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008448:	3304      	adds	r3, #4
 800844a:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800844c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844e:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8008450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008452:	4a21      	ldr	r2, [pc, #132]	@ (80084d8 <_tx_byte_pool_search+0x218>)
 8008454:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8008460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008464:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800846a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800846c:	3304      	adds	r3, #4
 800846e:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	689a      	ldr	r2, [r3, #8]
 800847e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	f1a3 0208 	sub.w	r2, r3, #8
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008490:	429a      	cmp	r2, r3
 8008492:	d105      	bne.n	80084a0 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008496:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	615a      	str	r2, [r3, #20]
 80084a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084a2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f383 8810 	msr	PRIMASK, r3
}
 80084aa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80084ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084ae:	3308      	adds	r3, #8
 80084b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80084b2:	e007      	b.n	80084c4 <_tx_byte_pool_search+0x204>
 80084b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f383 8810 	msr	PRIMASK, r3
}
 80084be:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80084c0:	2300      	movs	r3, #0
 80084c2:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80084c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	375c      	adds	r7, #92	@ 0x5c
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	20000a70 	.word	0x20000a70
 80084d8:	ffffeeee 	.word	0xffffeeee

080084dc <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80084e0:	f000 f9b2 	bl	8008848 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80084e4:	f000 fdba 	bl	800905c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80084e8:	4b12      	ldr	r3, [pc, #72]	@ (8008534 <_tx_initialize_high_level+0x58>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	4b12      	ldr	r3, [pc, #72]	@ (8008538 <_tx_initialize_high_level+0x5c>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80084f4:	4b11      	ldr	r3, [pc, #68]	@ (800853c <_tx_initialize_high_level+0x60>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	4b11      	ldr	r3, [pc, #68]	@ (8008540 <_tx_initialize_high_level+0x64>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8008500:	4b10      	ldr	r3, [pc, #64]	@ (8008544 <_tx_initialize_high_level+0x68>)
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	4b10      	ldr	r3, [pc, #64]	@ (8008548 <_tx_initialize_high_level+0x6c>)
 8008508:	2200      	movs	r2, #0
 800850a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800850c:	4b0f      	ldr	r3, [pc, #60]	@ (800854c <_tx_initialize_high_level+0x70>)
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	4b0f      	ldr	r3, [pc, #60]	@ (8008550 <_tx_initialize_high_level+0x74>)
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8008518:	4b0e      	ldr	r3, [pc, #56]	@ (8008554 <_tx_initialize_high_level+0x78>)
 800851a:	2200      	movs	r2, #0
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	4b0e      	ldr	r3, [pc, #56]	@ (8008558 <_tx_initialize_high_level+0x7c>)
 8008520:	2200      	movs	r2, #0
 8008522:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8008524:	4b0d      	ldr	r3, [pc, #52]	@ (800855c <_tx_initialize_high_level+0x80>)
 8008526:	2200      	movs	r2, #0
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	4b0d      	ldr	r3, [pc, #52]	@ (8008560 <_tx_initialize_high_level+0x84>)
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
#endif
}
 8008530:	bf00      	nop
 8008532:	bd80      	pop	{r7, pc}
 8008534:	20000a38 	.word	0x20000a38
 8008538:	20000a3c 	.word	0x20000a3c
 800853c:	20000a40 	.word	0x20000a40
 8008540:	20000a44 	.word	0x20000a44
 8008544:	20000a48 	.word	0x20000a48
 8008548:	20000a4c 	.word	0x20000a4c
 800854c:	20000a58 	.word	0x20000a58
 8008550:	20000a5c 	.word	0x20000a5c
 8008554:	20000a60 	.word	0x20000a60
 8008558:	20000a64 	.word	0x20000a64
 800855c:	20000a50 	.word	0x20000a50
 8008560:	20000a54 	.word	0x20000a54

08008564 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8008568:	4b10      	ldr	r3, [pc, #64]	@ (80085ac <_tx_initialize_kernel_enter+0x48>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8008570:	d00c      	beq.n	800858c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8008572:	4b0e      	ldr	r3, [pc, #56]	@ (80085ac <_tx_initialize_kernel_enter+0x48>)
 8008574:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8008578:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800857a:	f7f7 fe51 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800857e:	f7ff ffad 	bl	80084dc <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8008582:	4b0b      	ldr	r3, [pc, #44]	@ (80085b0 <_tx_initialize_kernel_enter+0x4c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3301      	adds	r3, #1
 8008588:	4a09      	ldr	r2, [pc, #36]	@ (80085b0 <_tx_initialize_kernel_enter+0x4c>)
 800858a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800858c:	4b07      	ldr	r3, [pc, #28]	@ (80085ac <_tx_initialize_kernel_enter+0x48>)
 800858e:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8008592:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8008594:	4b07      	ldr	r3, [pc, #28]	@ (80085b4 <_tx_initialize_kernel_enter+0x50>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4618      	mov	r0, r3
 800859a:	f7f8 f8d5 	bl	8000748 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800859e:	4b03      	ldr	r3, [pc, #12]	@ (80085ac <_tx_initialize_kernel_enter+0x48>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80085a4:	f7f7 fe7c 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80085a8:	bf00      	nop
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	2000000c 	.word	0x2000000c
 80085b0:	20000b08 	.word	0x20000b08
 80085b4:	20000a68 	.word	0x20000a68

080085b8 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08a      	sub	sp, #40	@ 0x28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80085c4:	221c      	movs	r2, #28
 80085c6:	2100      	movs	r1, #0
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f001 f9f7 	bl	80099bc <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80085da:	f3ef 8310 	mrs	r3, PRIMASK
 80085de:	61bb      	str	r3, [r7, #24]
    return(posture);
 80085e0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80085e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80085e4:	b672      	cpsid	i
    return(int_posture);
 80085e6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80085e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	4a18      	ldr	r2, [pc, #96]	@ (8008650 <_tx_semaphore_create+0x98>)
 80085ee:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80085f0:	4b18      	ldr	r3, [pc, #96]	@ (8008654 <_tx_semaphore_create+0x9c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d109      	bne.n	800860c <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80085f8:	4a17      	ldr	r2, [pc, #92]	@ (8008658 <_tx_semaphore_create+0xa0>)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	619a      	str	r2, [r3, #24]
 800860a:	e011      	b.n	8008630 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800860c:	4b12      	ldr	r3, [pc, #72]	@ (8008658 <_tx_semaphore_create+0xa0>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6a3a      	ldr	r2, [r7, #32]
 800862e:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8008630:	4b08      	ldr	r3, [pc, #32]	@ (8008654 <_tx_semaphore_create+0x9c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3301      	adds	r3, #1
 8008636:	4a07      	ldr	r2, [pc, #28]	@ (8008654 <_tx_semaphore_create+0x9c>)
 8008638:	6013      	str	r3, [r2, #0]
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f383 8810 	msr	PRIMASK, r3
}
 8008644:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3728      	adds	r7, #40	@ 0x28
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	53454d41 	.word	0x53454d41
 8008654:	20000a3c 	.word	0x20000a3c
 8008658:	20000a38 	.word	0x20000a38

0800865c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b092      	sub	sp, #72	@ 0x48
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800866a:	2300      	movs	r3, #0
 800866c:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800866e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008670:	21ef      	movs	r1, #239	@ 0xef
 8008672:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008674:	f001 f9a2 	bl	80099bc <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8008678:	22b0      	movs	r2, #176	@ 0xb0
 800867a:	2100      	movs	r1, #0
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f001 f99d 	bl	80099bc <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008698:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800869e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80086b2:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80086b8:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2220      	movs	r2, #32
 80086be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80086c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80086c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086c8:	3b01      	subs	r3, #1
 80086ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80086cc:	4413      	add	r3, r2
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80086d4:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80086d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086da:	429a      	cmp	r2, r3
 80086dc:	d007      	beq.n	80086ee <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80086ec:	e006      	b.n	80086fc <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086f2:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2203      	movs	r2, #3
 8008700:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	4a48      	ldr	r2, [pc, #288]	@ (8008828 <_tx_thread_create+0x1cc>)
 8008706:	655a      	str	r2, [r3, #84]	@ 0x54
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800870e:	4947      	ldr	r1, [pc, #284]	@ (800882c <_tx_thread_create+0x1d0>)
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7f7 fe25 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008716:	f3ef 8310 	mrs	r3, PRIMASK
 800871a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800871c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800871e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008720:	b672      	cpsid	i
    return(int_posture);
 8008722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8008724:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4a41      	ldr	r2, [pc, #260]	@ (8008830 <_tx_thread_create+0x1d4>)
 800872a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800872c:	4b41      	ldr	r3, [pc, #260]	@ (8008834 <_tx_thread_create+0x1d8>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10b      	bne.n	800874c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8008734:	4a40      	ldr	r2, [pc, #256]	@ (8008838 <_tx_thread_create+0x1dc>)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800874a:	e016      	b.n	800877a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800874c:	4b3a      	ldr	r3, [pc, #232]	@ (8008838 <_tx_thread_create+0x1dc>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8008752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008754:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008758:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800875a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800876e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800877a:	4b2e      	ldr	r3, [pc, #184]	@ (8008834 <_tx_thread_create+0x1d8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	3301      	adds	r3, #1
 8008780:	4a2c      	ldr	r2, [pc, #176]	@ (8008834 <_tx_thread_create+0x1d8>)
 8008782:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8008784:	4b2d      	ldr	r3, [pc, #180]	@ (800883c <_tx_thread_create+0x1e0>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3301      	adds	r3, #1
 800878a:	4a2c      	ldr	r2, [pc, #176]	@ (800883c <_tx_thread_create+0x1e0>)
 800878c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800878e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008790:	2b01      	cmp	r3, #1
 8008792:	d129      	bne.n	80087e8 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008794:	f3ef 8305 	mrs	r3, IPSR
 8008798:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800879a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800879c:	4b28      	ldr	r3, [pc, #160]	@ (8008840 <_tx_thread_create+0x1e4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80087a6:	d30d      	bcc.n	80087c4 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80087a8:	4b26      	ldr	r3, [pc, #152]	@ (8008844 <_tx_thread_create+0x1e8>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80087ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80087b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b8:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80087ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80087c2:	e001      	b.n	80087c8 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80087c4:	2300      	movs	r3, #0
 80087c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80087c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ca:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	f383 8810 	msr	PRIMASK, r3
}
 80087d2:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 f979 	bl	8008acc <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80087da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d01e      	beq.n	800881e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80087e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80087e6:	e01a      	b.n	800881e <_tx_thread_create+0x1c2>
 80087e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	f383 8810 	msr	PRIMASK, r3
}
 80087f2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80087f4:	f3ef 8310 	mrs	r3, PRIMASK
 80087f8:	61bb      	str	r3, [r7, #24]
    return(posture);
 80087fa:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80087fc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80087fe:	b672      	cpsid	i
    return(int_posture);
 8008800:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8008802:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8008804:	4b0d      	ldr	r3, [pc, #52]	@ (800883c <_tx_thread_create+0x1e0>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3b01      	subs	r3, #1
 800880a:	4a0c      	ldr	r2, [pc, #48]	@ (800883c <_tx_thread_create+0x1e0>)
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008810:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	f383 8810 	msr	PRIMASK, r3
}
 8008818:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800881a:	f000 f91d 	bl	8008a58 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3748      	adds	r7, #72	@ 0x48
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	08008fa1 	.word	0x08008fa1
 800882c:	080088c1 	.word	0x080088c1
 8008830:	54485244 	.word	0x54485244
 8008834:	20000a7c 	.word	0x20000a7c
 8008838:	20000a78 	.word	0x20000a78
 800883c:	20000b08 	.word	0x20000b08
 8008840:	2000000c 	.word	0x2000000c
 8008844:	20000a74 	.word	0x20000a74

08008848 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800884c:	4b12      	ldr	r3, [pc, #72]	@ (8008898 <_tx_thread_initialize+0x50>)
 800884e:	2200      	movs	r2, #0
 8008850:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8008852:	4b12      	ldr	r3, [pc, #72]	@ (800889c <_tx_thread_initialize+0x54>)
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8008858:	4b11      	ldr	r3, [pc, #68]	@ (80088a0 <_tx_thread_initialize+0x58>)
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800885e:	4b11      	ldr	r3, [pc, #68]	@ (80088a4 <_tx_thread_initialize+0x5c>)
 8008860:	2220      	movs	r2, #32
 8008862:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8008864:	2280      	movs	r2, #128	@ 0x80
 8008866:	2100      	movs	r1, #0
 8008868:	480f      	ldr	r0, [pc, #60]	@ (80088a8 <_tx_thread_initialize+0x60>)
 800886a:	f001 f8a7 	bl	80099bc <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800886e:	4b0f      	ldr	r3, [pc, #60]	@ (80088ac <_tx_thread_initialize+0x64>)
 8008870:	2200      	movs	r2, #0
 8008872:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8008874:	4b0e      	ldr	r3, [pc, #56]	@ (80088b0 <_tx_thread_initialize+0x68>)
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800887a:	4b0e      	ldr	r3, [pc, #56]	@ (80088b4 <_tx_thread_initialize+0x6c>)
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8008880:	4b0d      	ldr	r3, [pc, #52]	@ (80088b8 <_tx_thread_initialize+0x70>)
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8008886:	4b0d      	ldr	r3, [pc, #52]	@ (80088bc <_tx_thread_initialize+0x74>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800888e:	4a0b      	ldr	r2, [pc, #44]	@ (80088bc <_tx_thread_initialize+0x74>)
 8008890:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8008892:	bf00      	nop
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000a70 	.word	0x20000a70
 800889c:	20000a74 	.word	0x20000a74
 80088a0:	20000a80 	.word	0x20000a80
 80088a4:	20000a84 	.word	0x20000a84
 80088a8:	20000a88 	.word	0x20000a88
 80088ac:	20000a78 	.word	0x20000a78
 80088b0:	20000a7c 	.word	0x20000a7c
 80088b4:	20000b08 	.word	0x20000b08
 80088b8:	20000b0c 	.word	0x20000b0c
 80088bc:	20000b10 	.word	0x20000b10

080088c0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80088c6:	4b21      	ldr	r3, [pc, #132]	@ (800894c <_tx_thread_shell_entry+0x8c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088d0:	69fa      	ldr	r2, [r7, #28]
 80088d2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80088d4:	4610      	mov	r0, r2
 80088d6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80088d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008950 <_tx_thread_shell_entry+0x90>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80088e0:	4b1b      	ldr	r3, [pc, #108]	@ (8008950 <_tx_thread_shell_entry+0x90>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	69f8      	ldr	r0, [r7, #28]
 80088e6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80088e8:	f3ef 8310 	mrs	r3, PRIMASK
 80088ec:	607b      	str	r3, [r7, #4]
    return(posture);
 80088ee:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80088f0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80088f2:	b672      	cpsid	i
    return(int_posture);
 80088f4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80088f6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	2201      	movs	r2, #1
 80088fc:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	2201      	movs	r2, #1
 8008902:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	2200      	movs	r2, #0
 8008908:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800890a:	4b12      	ldr	r3, [pc, #72]	@ (8008954 <_tx_thread_shell_entry+0x94>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3301      	adds	r3, #1
 8008910:	4a10      	ldr	r2, [pc, #64]	@ (8008954 <_tx_thread_shell_entry+0x94>)
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f383 8810 	msr	PRIMASK, r3
}
 800891e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8008920:	f3ef 8314 	mrs	r3, CONTROL
 8008924:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8008926:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8008928:	617b      	str	r3, [r7, #20]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f023 0304 	bic.w	r3, r3, #4
 8008930:	617b      	str	r3, [r7, #20]
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f383 8814 	msr	CONTROL, r3
}
 800893c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800893e:	69f8      	ldr	r0, [r7, #28]
 8008940:	f000 f9c4 	bl	8008ccc <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8008944:	bf00      	nop
 8008946:	3720      	adds	r7, #32
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	20000a70 	.word	0x20000a70
 8008950:	20000b0c 	.word	0x20000b0c
 8008954:	20000b08 	.word	0x20000b08

08008958 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08e      	sub	sp, #56	@ 0x38
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008960:	f3ef 8310 	mrs	r3, PRIMASK
 8008964:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8008966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8008968:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800896a:	b672      	cpsid	i
    return(int_posture);
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800896e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008970:	4b35      	ldr	r3, [pc, #212]	@ (8008a48 <_tx_thread_sleep+0xf0>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8008976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d108      	bne.n	800898e <_tx_thread_sleep+0x36>
 800897c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	f383 8810 	msr	PRIMASK, r3
}
 8008986:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8008988:	2313      	movs	r3, #19
 800898a:	637b      	str	r3, [r7, #52]	@ 0x34
 800898c:	e056      	b.n	8008a3c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800898e:	f3ef 8305 	mrs	r3, IPSR
 8008992:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8008994:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008996:	4b2d      	ldr	r3, [pc, #180]	@ (8008a4c <_tx_thread_sleep+0xf4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4313      	orrs	r3, r2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d008      	beq.n	80089b2 <_tx_thread_sleep+0x5a>
 80089a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	f383 8810 	msr	PRIMASK, r3
}
 80089aa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80089ac:	2313      	movs	r3, #19
 80089ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b0:	e044      	b.n	8008a3c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80089b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b4:	4a26      	ldr	r2, [pc, #152]	@ (8008a50 <_tx_thread_sleep+0xf8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d108      	bne.n	80089cc <_tx_thread_sleep+0x74>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f383 8810 	msr	PRIMASK, r3
}
 80089c4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80089c6:	2313      	movs	r3, #19
 80089c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ca:	e037      	b.n	8008a3c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d108      	bne.n	80089e4 <_tx_thread_sleep+0x8c>
 80089d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f383 8810 	msr	PRIMASK, r3
}
 80089dc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80089de:	2300      	movs	r3, #0
 80089e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089e2:	e02b      	b.n	8008a3c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80089e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008a54 <_tx_thread_sleep+0xfc>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d008      	beq.n	80089fe <_tx_thread_sleep+0xa6>
 80089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ee:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f383 8810 	msr	PRIMASK, r3
}
 80089f6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80089f8:	2313      	movs	r3, #19
 80089fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80089fc:	e01e      	b.n	8008a3c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80089fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a00:	2204      	movs	r2, #4
 8008a02:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a06:	2201      	movs	r2, #1
 8008a08:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8008a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008a18:	4b0e      	ldr	r3, [pc, #56]	@ (8008a54 <_tx_thread_sleep+0xfc>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8008a54 <_tx_thread_sleep+0xfc>)
 8008a20:	6013      	str	r3, [r2, #0]
 8008a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a24:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f383 8810 	msr	PRIMASK, r3
}
 8008a2c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8008a2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a30:	f000 f94c 	bl	8008ccc <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8008a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a3a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8008a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3738      	adds	r7, #56	@ 0x38
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	20000a70 	.word	0x20000a70
 8008a4c:	2000000c 	.word	0x2000000c
 8008a50:	20000bb8 	.word	0x20000bb8
 8008a54:	20000b08 	.word	0x20000b08

08008a58 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b089      	sub	sp, #36	@ 0x24
 8008a5c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008a5e:	4b17      	ldr	r3, [pc, #92]	@ (8008abc <_tx_thread_system_preempt_check+0x64>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d121      	bne.n	8008aae <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8008a6a:	4b15      	ldr	r3, [pc, #84]	@ (8008ac0 <_tx_thread_system_preempt_check+0x68>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8008a70:	4b14      	ldr	r3, [pc, #80]	@ (8008ac4 <_tx_thread_system_preempt_check+0x6c>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d017      	beq.n	8008aae <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008a7e:	4b12      	ldr	r3, [pc, #72]	@ (8008ac8 <_tx_thread_system_preempt_check+0x70>)
 8008a80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a84:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008a86:	f3ef 8305 	mrs	r3, IPSR
 8008a8a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008a8c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10c      	bne.n	8008aac <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008a92:	f3ef 8310 	mrs	r3, PRIMASK
 8008a96:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008a98:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8008a9a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008a9c:	b662      	cpsie	i
}
 8008a9e:	bf00      	nop
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f383 8810 	msr	PRIMASK, r3
}
 8008aaa:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8008aac:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8008aae:	bf00      	nop
 8008ab0:	3724      	adds	r7, #36	@ 0x24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	20000b08 	.word	0x20000b08
 8008ac0:	20000a70 	.word	0x20000a70
 8008ac4:	20000a74 	.word	0x20000a74
 8008ac8:	e000ed04 	.word	0xe000ed04

08008acc <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b096      	sub	sp, #88	@ 0x58
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8008ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8008adc:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8008ade:	b672      	cpsid	i
    return(int_posture);
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8008ae2:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d005      	beq.n	8008af8 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	334c      	adds	r3, #76	@ 0x4c
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 fb91 	bl	8009218 <_tx_timer_system_deactivate>
 8008af6:	e002      	b.n	8008afe <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8008afe:	4b6c      	ldr	r3, [pc, #432]	@ (8008cb0 <_tx_thread_system_resume+0x1e4>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	4a6a      	ldr	r2, [pc, #424]	@ (8008cb0 <_tx_thread_system_resume+0x1e4>)
 8008b06:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f040 8083 	bne.w	8008c18 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 8097 	beq.w	8008c4a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d172      	bne.n	8008c0a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2e:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8008b30:	4a60      	ldr	r2, [pc, #384]	@ (8008cb4 <_tx_thread_system_resume+0x1e8>)
 8008b32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 8008b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d154      	bne.n	8008bea <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8008b40:	495c      	ldr	r1, [pc, #368]	@ (8008cb4 <_tx_thread_system_resume+0x1e8>)
 8008b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8008b56:	2201      	movs	r2, #1
 8008b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5e:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8008b60:	4b55      	ldr	r3, [pc, #340]	@ (8008cb8 <_tx_thread_system_resume+0x1ec>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b66:	4313      	orrs	r3, r2
 8008b68:	4a53      	ldr	r2, [pc, #332]	@ (8008cb8 <_tx_thread_system_resume+0x1ec>)
 8008b6a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8008b6c:	4b53      	ldr	r3, [pc, #332]	@ (8008cbc <_tx_thread_system_resume+0x1f0>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d269      	bcs.n	8008c4a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8008b76:	4a51      	ldr	r2, [pc, #324]	@ (8008cbc <_tx_thread_system_resume+0x1f0>)
 8008b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b7a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8008b7c:	4b50      	ldr	r3, [pc, #320]	@ (8008cc0 <_tx_thread_system_resume+0x1f4>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8008b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d103      	bne.n	8008b90 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8008b88:	4a4d      	ldr	r2, [pc, #308]	@ (8008cc0 <_tx_thread_system_resume+0x1f4>)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	e05c      	b.n	8008c4a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8008b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d257      	bcs.n	8008c4a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8008b9a:	4a49      	ldr	r2, [pc, #292]	@ (8008cc0 <_tx_thread_system_resume+0x1f4>)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba6:	f383 8810 	msr	PRIMASK, r3
}
 8008baa:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008bac:	4b40      	ldr	r3, [pc, #256]	@ (8008cb0 <_tx_thread_system_resume+0x1e4>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 8008bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d174      	bne.n	8008ca2 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008bb8:	4b42      	ldr	r3, [pc, #264]	@ (8008cc4 <_tx_thread_system_resume+0x1f8>)
 8008bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bbe:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008bc0:	f3ef 8305 	mrs	r3, IPSR
 8008bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8008bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10c      	bne.n	8008be6 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 8008bd4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008bd6:	b662      	cpsie	i
}
 8008bd8:	bf00      	nop
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	f383 8810 	msr	PRIMASK, r3
}
 8008be4:	bf00      	nop
}
 8008be6:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8008be8:	e05b      	b.n	8008ca2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8008bea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bee:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8008bf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8008bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c00:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c06:	621a      	str	r2, [r3, #32]
 8008c08:	e01f      	b.n	8008c4a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2203      	movs	r2, #3
 8008c14:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c16:	e018      	b.n	8008c4a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d014      	beq.n	8008c4a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d010      	beq.n	8008c4a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d106      	bne.n	8008c3e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c3c:	e005      	b.n	8008c4a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2203      	movs	r2, #3
 8008c48:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8008c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8008cc8 <_tx_thread_system_resume+0x1fc>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c52:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	f383 8810 	msr	PRIMASK, r3
}
 8008c5a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8008c5c:	4b18      	ldr	r3, [pc, #96]	@ (8008cc0 <_tx_thread_system_resume+0x1f4>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d020      	beq.n	8008ca8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008c66:	4b12      	ldr	r3, [pc, #72]	@ (8008cb0 <_tx_thread_system_resume+0x1e4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 8008c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d11a      	bne.n	8008ca8 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008c72:	4b14      	ldr	r3, [pc, #80]	@ (8008cc4 <_tx_thread_system_resume+0x1f8>)
 8008c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c78:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c7a:	f3ef 8305 	mrs	r3, IPSR
 8008c7e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008c80:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10f      	bne.n	8008ca6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008c86:	f3ef 8310 	mrs	r3, PRIMASK
 8008c8a:	613b      	str	r3, [r7, #16]
    return(posture);
 8008c8c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8008c8e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008c90:	b662      	cpsie	i
}
 8008c92:	bf00      	nop
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f383 8810 	msr	PRIMASK, r3
}
 8008c9e:	bf00      	nop
}
 8008ca0:	e001      	b.n	8008ca6 <_tx_thread_system_resume+0x1da>
                                return;
 8008ca2:	bf00      	nop
 8008ca4:	e000      	b.n	8008ca8 <_tx_thread_system_resume+0x1dc>
 8008ca6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8008ca8:	3758      	adds	r7, #88	@ 0x58
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20000b08 	.word	0x20000b08
 8008cb4:	20000a88 	.word	0x20000a88
 8008cb8:	20000a80 	.word	0x20000a80
 8008cbc:	20000a84 	.word	0x20000a84
 8008cc0:	20000a74 	.word	0x20000a74
 8008cc4:	e000ed04 	.word	0xe000ed04
 8008cc8:	20000a70 	.word	0x20000a70

08008ccc <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b09e      	sub	sp, #120	@ 0x78
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8008cd4:	4b81      	ldr	r3, [pc, #516]	@ (8008edc <_tx_thread_system_suspend+0x210>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008cda:	f3ef 8310 	mrs	r3, PRIMASK
 8008cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 8008ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 8008ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8008ce4:	b672      	cpsid	i
    return(int_posture);
 8008ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8008ce8:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d112      	bne.n	8008d18 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8008cf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d008      	beq.n	8008d10 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8008cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d04:	d004      	beq.n	8008d10 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	334c      	adds	r3, #76	@ 0x4c
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 fa22 	bl	8009154 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	69db      	ldr	r3, [r3, #28]
 8008d14:	4a72      	ldr	r2, [pc, #456]	@ (8008ee0 <_tx_thread_system_suspend+0x214>)
 8008d16:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8008d18:	4b72      	ldr	r3, [pc, #456]	@ (8008ee4 <_tx_thread_system_suspend+0x218>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	4a71      	ldr	r2, [pc, #452]	@ (8008ee4 <_tx_thread_system_suspend+0x218>)
 8008d20:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	f040 80a6 	bne.w	8008e78 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d36:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a1b      	ldr	r3, [r3, #32]
 8008d3c:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8008d3e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d015      	beq.n	8008d72 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d4a:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8008d4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008d50:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8008d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d54:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d56:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8008d58:	4a63      	ldr	r2, [pc, #396]	@ (8008ee8 <_tx_thread_system_suspend+0x21c>)
 8008d5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d157      	bne.n	8008e16 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8008d66:	4960      	ldr	r1, [pc, #384]	@ (8008ee8 <_tx_thread_system_suspend+0x21c>)
 8008d68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008d70:	e051      	b.n	8008e16 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8008d72:	4a5d      	ldr	r2, [pc, #372]	@ (8008ee8 <_tx_thread_system_suspend+0x21c>)
 8008d74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d76:	2100      	movs	r1, #0
 8008d78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d80:	fa02 f303 	lsl.w	r3, r2, r3
 8008d84:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8008d86:	4b59      	ldr	r3, [pc, #356]	@ (8008eec <_tx_thread_system_suspend+0x220>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d8c:	43db      	mvns	r3, r3
 8008d8e:	4013      	ands	r3, r2
 8008d90:	4a56      	ldr	r2, [pc, #344]	@ (8008eec <_tx_thread_system_suspend+0x220>)
 8008d92:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8008d94:	2300      	movs	r3, #0
 8008d96:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8008d98:	4b54      	ldr	r3, [pc, #336]	@ (8008eec <_tx_thread_system_suspend+0x220>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8008d9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d12b      	bne.n	8008dfc <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008da4:	4b52      	ldr	r3, [pc, #328]	@ (8008ef0 <_tx_thread_system_suspend+0x224>)
 8008da6:	2220      	movs	r2, #32
 8008da8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8008daa:	4b52      	ldr	r3, [pc, #328]	@ (8008ef4 <_tx_thread_system_suspend+0x228>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008db2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008db6:	f383 8810 	msr	PRIMASK, r3
}
 8008dba:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008dbc:	4b49      	ldr	r3, [pc, #292]	@ (8008ee4 <_tx_thread_system_suspend+0x218>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 8008dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f040 8081 	bne.w	8008ecc <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008dca:	4b4b      	ldr	r3, [pc, #300]	@ (8008ef8 <_tx_thread_system_suspend+0x22c>)
 8008dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dd0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008dd2:	f3ef 8305 	mrs	r3, IPSR
 8008dd6:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 8008dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10c      	bne.n	8008df8 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008dde:	f3ef 8310 	mrs	r3, PRIMASK
 8008de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 8008de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 8008de6:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008de8:	b662      	cpsie	i
}
 8008dea:	bf00      	nop
 8008dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dee:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df2:	f383 8810 	msr	PRIMASK, r3
}
 8008df6:	bf00      	nop
}
 8008df8:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8008dfa:	e067      	b.n	8008ecc <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8008dfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008dfe:	fa93 f3a3 	rbit	r3, r3
 8008e02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e06:	fab3 f383 	clz	r3, r3
 8008e0a:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8008e0c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e10:	4413      	add	r3, r2
 8008e12:	4a37      	ldr	r2, [pc, #220]	@ (8008ef0 <_tx_thread_system_suspend+0x224>)
 8008e14:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8008e16:	4b37      	ldr	r3, [pc, #220]	@ (8008ef4 <_tx_thread_system_suspend+0x228>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d12b      	bne.n	8008e78 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008e20:	4b33      	ldr	r3, [pc, #204]	@ (8008ef0 <_tx_thread_system_suspend+0x224>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a30      	ldr	r2, [pc, #192]	@ (8008ee8 <_tx_thread_system_suspend+0x21c>)
 8008e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e2a:	4a32      	ldr	r2, [pc, #200]	@ (8008ef4 <_tx_thread_system_suspend+0x228>)
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e30:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	f383 8810 	msr	PRIMASK, r3
}
 8008e38:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ee4 <_tx_thread_system_suspend+0x218>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 8008e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d144      	bne.n	8008ed0 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008e46:	4b2c      	ldr	r3, [pc, #176]	@ (8008ef8 <_tx_thread_system_suspend+0x22c>)
 8008e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e4c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008e4e:	f3ef 8305 	mrs	r3, IPSR
 8008e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 8008e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10c      	bne.n	8008e74 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8008e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 8008e62:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008e64:	b662      	cpsie	i
}
 8008e66:	bf00      	nop
 8008e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	f383 8810 	msr	PRIMASK, r3
}
 8008e72:	bf00      	nop
}
 8008e74:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8008e76:	e02b      	b.n	8008ed0 <_tx_thread_system_suspend+0x204>
 8008e78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e7a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	f383 8810 	msr	PRIMASK, r3
}
 8008e82:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8008e84:	4b1b      	ldr	r3, [pc, #108]	@ (8008ef4 <_tx_thread_system_suspend+0x228>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d022      	beq.n	8008ed4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008e8e:	4b15      	ldr	r3, [pc, #84]	@ (8008ee4 <_tx_thread_system_suspend+0x218>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 8008e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d11c      	bne.n	8008ed4 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008e9a:	4b17      	ldr	r3, [pc, #92]	@ (8008ef8 <_tx_thread_system_suspend+0x22c>)
 8008e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ea0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008ea2:	f3ef 8305 	mrs	r3, IPSR
 8008ea6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008ea8:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10c      	bne.n	8008ec8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008eae:	f3ef 8310 	mrs	r3, PRIMASK
 8008eb2:	617b      	str	r3, [r7, #20]
    return(posture);
 8008eb4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8008eb6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8008eb8:	b662      	cpsie	i
}
 8008eba:	bf00      	nop
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f383 8810 	msr	PRIMASK, r3
}
 8008ec6:	bf00      	nop
}
 8008ec8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8008eca:	e003      	b.n	8008ed4 <_tx_thread_system_suspend+0x208>
                return;
 8008ecc:	bf00      	nop
 8008ece:	e002      	b.n	8008ed6 <_tx_thread_system_suspend+0x20a>
            return;
 8008ed0:	bf00      	nop
 8008ed2:	e000      	b.n	8008ed6 <_tx_thread_system_suspend+0x20a>
    return;
 8008ed4:	bf00      	nop
}
 8008ed6:	3778      	adds	r7, #120	@ 0x78
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20000a70 	.word	0x20000a70
 8008ee0:	20001074 	.word	0x20001074
 8008ee4:	20000b08 	.word	0x20000b08
 8008ee8:	20000a88 	.word	0x20000a88
 8008eec:	20000a80 	.word	0x20000a80
 8008ef0:	20000a84 	.word	0x20000a84
 8008ef4:	20000a74 	.word	0x20000a74
 8008ef8:	e000ed04 	.word	0xe000ed04

08008efc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008f02:	4b21      	ldr	r3, [pc, #132]	@ (8008f88 <_tx_thread_time_slice+0x8c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008f08:	f3ef 8310 	mrs	r3, PRIMASK
 8008f0c:	60fb      	str	r3, [r7, #12]
    return(posture);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8008f10:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008f12:	b672      	cpsid	i
    return(int_posture);
 8008f14:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8008f16:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8008f18:	4b1c      	ldr	r3, [pc, #112]	@ (8008f8c <_tx_thread_time_slice+0x90>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d024      	beq.n	8008f6e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d120      	bne.n	8008f6e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	69da      	ldr	r2, [r3, #28]
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	4a15      	ldr	r2, [pc, #84]	@ (8008f90 <_tx_thread_time_slice+0x94>)
 8008f3a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d013      	beq.n	8008f6e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d10d      	bne.n	8008f6e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	6a12      	ldr	r2, [r2, #32]
 8008f5a:	490e      	ldr	r1, [pc, #56]	@ (8008f94 <_tx_thread_time_slice+0x98>)
 8008f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008f60:	4b0d      	ldr	r3, [pc, #52]	@ (8008f98 <_tx_thread_time_slice+0x9c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a0b      	ldr	r2, [pc, #44]	@ (8008f94 <_tx_thread_time_slice+0x98>)
 8008f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8008f9c <_tx_thread_time_slice+0xa0>)
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f383 8810 	msr	PRIMASK, r3
}
 8008f78:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8008f7a:	bf00      	nop
 8008f7c:	371c      	adds	r7, #28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	20000a70 	.word	0x20000a70
 8008f8c:	20000b18 	.word	0x20000b18
 8008f90:	20001074 	.word	0x20001074
 8008f94:	20000a88 	.word	0x20000a88
 8008f98:	20000a84 	.word	0x20000a84
 8008f9c:	20000a74 	.word	0x20000a74

08008fa0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08a      	sub	sp, #40	@ 0x28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008fac:	f3ef 8310 	mrs	r3, PRIMASK
 8008fb0:	617b      	str	r3, [r7, #20]
    return(posture);
 8008fb2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8008fb4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008fb6:	b672      	cpsid	i
    return(int_posture);
 8008fb8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8008fba:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc0:	2b04      	cmp	r3, #4
 8008fc2:	d10e      	bne.n	8008fe2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8008fc4:	4b13      	ldr	r3, [pc, #76]	@ (8009014 <_tx_thread_timeout+0x74>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	4a12      	ldr	r2, [pc, #72]	@ (8009014 <_tx_thread_timeout+0x74>)
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f383 8810 	msr	PRIMASK, r3
}
 8008fd8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8008fda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008fdc:	f7ff fd76 	bl	8008acc <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8008fe0:	e013      	b.n	800900a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fe6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008fee:	61bb      	str	r3, [r7, #24]
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f383 8810 	msr	PRIMASK, r3
}
 8008ffa:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	69b9      	ldr	r1, [r7, #24]
 8009006:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009008:	4798      	blx	r3
}
 800900a:	bf00      	nop
 800900c:	3728      	adds	r7, #40	@ 0x28
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000b08 	.word	0x20000b08

08009018 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800901e:	f3ef 8310 	mrs	r3, PRIMASK
 8009022:	607b      	str	r3, [r7, #4]
    return(posture);
 8009024:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8009026:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009028:	b672      	cpsid	i
    return(int_posture);
 800902a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800902c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800902e:	4b09      	ldr	r3, [pc, #36]	@ (8009054 <_tx_timer_expiration_process+0x3c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3301      	adds	r3, #1
 8009034:	4a07      	ldr	r2, [pc, #28]	@ (8009054 <_tx_timer_expiration_process+0x3c>)
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	f383 8810 	msr	PRIMASK, r3
}
 8009042:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8009044:	4804      	ldr	r0, [pc, #16]	@ (8009058 <_tx_timer_expiration_process+0x40>)
 8009046:	f7ff fd41 	bl	8008acc <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800904a:	bf00      	nop
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000b08 	.word	0x20000b08
 8009058:	20000bb8 	.word	0x20000bb8

0800905c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800905c:	b590      	push	{r4, r7, lr}
 800905e:	b089      	sub	sp, #36	@ 0x24
 8009060:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8009062:	4b28      	ldr	r3, [pc, #160]	@ (8009104 <_tx_timer_initialize+0xa8>)
 8009064:	2200      	movs	r2, #0
 8009066:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8009068:	4b27      	ldr	r3, [pc, #156]	@ (8009108 <_tx_timer_initialize+0xac>)
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800906e:	4b27      	ldr	r3, [pc, #156]	@ (800910c <_tx_timer_initialize+0xb0>)
 8009070:	2200      	movs	r2, #0
 8009072:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8009074:	4b26      	ldr	r3, [pc, #152]	@ (8009110 <_tx_timer_initialize+0xb4>)
 8009076:	2200      	movs	r2, #0
 8009078:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800907a:	4b26      	ldr	r3, [pc, #152]	@ (8009114 <_tx_timer_initialize+0xb8>)
 800907c:	2200      	movs	r2, #0
 800907e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8009080:	2280      	movs	r2, #128	@ 0x80
 8009082:	2100      	movs	r1, #0
 8009084:	4824      	ldr	r0, [pc, #144]	@ (8009118 <_tx_timer_initialize+0xbc>)
 8009086:	f000 fc99 	bl	80099bc <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800908a:	4b24      	ldr	r3, [pc, #144]	@ (800911c <_tx_timer_initialize+0xc0>)
 800908c:	4a22      	ldr	r2, [pc, #136]	@ (8009118 <_tx_timer_initialize+0xbc>)
 800908e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8009090:	4b23      	ldr	r3, [pc, #140]	@ (8009120 <_tx_timer_initialize+0xc4>)
 8009092:	4a21      	ldr	r2, [pc, #132]	@ (8009118 <_tx_timer_initialize+0xbc>)
 8009094:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8009096:	4b23      	ldr	r3, [pc, #140]	@ (8009124 <_tx_timer_initialize+0xc8>)
 8009098:	4a23      	ldr	r2, [pc, #140]	@ (8009128 <_tx_timer_initialize+0xcc>)
 800909a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800909c:	4b21      	ldr	r3, [pc, #132]	@ (8009124 <_tx_timer_initialize+0xc8>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	3304      	adds	r3, #4
 80090a2:	4a20      	ldr	r2, [pc, #128]	@ (8009124 <_tx_timer_initialize+0xc8>)
 80090a4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80090a6:	4b21      	ldr	r3, [pc, #132]	@ (800912c <_tx_timer_initialize+0xd0>)
 80090a8:	4a21      	ldr	r2, [pc, #132]	@ (8009130 <_tx_timer_initialize+0xd4>)
 80090aa:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80090ac:	4b21      	ldr	r3, [pc, #132]	@ (8009134 <_tx_timer_initialize+0xd8>)
 80090ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80090b2:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80090b4:	4b20      	ldr	r3, [pc, #128]	@ (8009138 <_tx_timer_initialize+0xdc>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80090ba:	4b1c      	ldr	r3, [pc, #112]	@ (800912c <_tx_timer_initialize+0xd0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a1d      	ldr	r2, [pc, #116]	@ (8009134 <_tx_timer_initialize+0xd8>)
 80090c0:	6812      	ldr	r2, [r2, #0]
 80090c2:	491d      	ldr	r1, [pc, #116]	@ (8009138 <_tx_timer_initialize+0xdc>)
 80090c4:	6809      	ldr	r1, [r1, #0]
 80090c6:	481c      	ldr	r0, [pc, #112]	@ (8009138 <_tx_timer_initialize+0xdc>)
 80090c8:	6800      	ldr	r0, [r0, #0]
 80090ca:	2400      	movs	r4, #0
 80090cc:	9405      	str	r4, [sp, #20]
 80090ce:	2400      	movs	r4, #0
 80090d0:	9404      	str	r4, [sp, #16]
 80090d2:	9003      	str	r0, [sp, #12]
 80090d4:	9102      	str	r1, [sp, #8]
 80090d6:	9201      	str	r2, [sp, #4]
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	4b18      	ldr	r3, [pc, #96]	@ (800913c <_tx_timer_initialize+0xe0>)
 80090dc:	4a18      	ldr	r2, [pc, #96]	@ (8009140 <_tx_timer_initialize+0xe4>)
 80090de:	4919      	ldr	r1, [pc, #100]	@ (8009144 <_tx_timer_initialize+0xe8>)
 80090e0:	4819      	ldr	r0, [pc, #100]	@ (8009148 <_tx_timer_initialize+0xec>)
 80090e2:	f7ff fabb 	bl	800865c <_tx_thread_create>
 80090e6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e5      	bne.n	80090ba <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80090ee:	4b17      	ldr	r3, [pc, #92]	@ (800914c <_tx_timer_initialize+0xf0>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80090f4:	4b16      	ldr	r3, [pc, #88]	@ (8009150 <_tx_timer_initialize+0xf4>)
 80090f6:	2200      	movs	r2, #0
 80090f8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80090fa:	bf00      	nop
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd90      	pop	{r4, r7, pc}
 8009102:	bf00      	nop
 8009104:	20000b14 	.word	0x20000b14
 8009108:	20001074 	.word	0x20001074
 800910c:	20000b18 	.word	0x20000b18
 8009110:	20000ba8 	.word	0x20000ba8
 8009114:	20000bb4 	.word	0x20000bb4
 8009118:	20000b1c 	.word	0x20000b1c
 800911c:	20000b9c 	.word	0x20000b9c
 8009120:	20000ba4 	.word	0x20000ba4
 8009124:	20000ba0 	.word	0x20000ba0
 8009128:	20000b98 	.word	0x20000b98
 800912c:	20000c68 	.word	0x20000c68
 8009130:	20000c74 	.word	0x20000c74
 8009134:	20000c6c 	.word	0x20000c6c
 8009138:	20000c70 	.word	0x20000c70
 800913c:	4154494d 	.word	0x4154494d
 8009140:	08009289 	.word	0x08009289
 8009144:	08009a9c 	.word	0x08009a9c
 8009148:	20000bb8 	.word	0x20000bb8
 800914c:	20000bac 	.word	0x20000bac
 8009150:	20000bb0 	.word	0x20000bb0

08009154 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009154:	b480      	push	{r7}
 8009156:	b089      	sub	sp, #36	@ 0x24
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d04a      	beq.n	80091fe <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916e:	d046      	beq.n	80091fe <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d142      	bne.n	80091fe <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	2b20      	cmp	r3, #32
 800917c:	d902      	bls.n	8009184 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800917e:	231f      	movs	r3, #31
 8009180:	61bb      	str	r3, [r7, #24]
 8009182:	e002      	b.n	800918a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	3b01      	subs	r3, #1
 8009188:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800918a:	4b20      	ldr	r3, [pc, #128]	@ (800920c <_tx_timer_system_activate+0xb8>)
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8009196:	4b1e      	ldr	r3, [pc, #120]	@ (8009210 <_tx_timer_system_activate+0xbc>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69fa      	ldr	r2, [r7, #28]
 800919c:	429a      	cmp	r2, r3
 800919e:	d30b      	bcc.n	80091b8 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80091a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009210 <_tx_timer_system_activate+0xbc>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69fa      	ldr	r2, [r7, #28]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	109b      	asrs	r3, r3, #2
 80091aa:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80091ac:	4b19      	ldr	r3, [pc, #100]	@ (8009214 <_tx_timer_system_activate+0xc0>)
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d109      	bne.n	80091d4 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	e011      	b.n	80091f8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80091fe:	bf00      	nop
 8009200:	3724      	adds	r7, #36	@ 0x24
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	20000ba4 	.word	0x20000ba4
 8009210:	20000ba0 	.word	0x20000ba0
 8009214:	20000b9c 	.word	0x20000b9c

08009218 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d026      	beq.n	800927a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	429a      	cmp	r2, r3
 8009238:	d108      	bne.n	800924c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	429a      	cmp	r2, r3
 8009242:	d117      	bne.n	8009274 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2200      	movs	r2, #0
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	e013      	b.n	8009274 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	695b      	ldr	r3, [r3, #20]
 8009250:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	429a      	cmp	r2, r3
 8009266:	d105      	bne.n	8009274 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	619a      	str	r2, [r3, #24]
    }
}
 800927a:	bf00      	nop
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
	...

08009288 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b098      	sub	sp, #96	@ 0x60
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8009290:	2300      	movs	r3, #0
 8009292:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a73      	ldr	r2, [pc, #460]	@ (8009464 <_tx_timer_thread_entry+0x1dc>)
 8009298:	4293      	cmp	r3, r2
 800929a:	f040 80de 	bne.w	800945a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800929e:	f3ef 8310 	mrs	r3, PRIMASK
 80092a2:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 80092a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 80092a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80092a8:	b672      	cpsid	i
    return(int_posture);
 80092aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80092ac:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80092ae:	4b6e      	ldr	r3, [pc, #440]	@ (8009468 <_tx_timer_thread_entry+0x1e0>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d003      	beq.n	80092c4 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f107 020c 	add.w	r2, r7, #12
 80092c2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80092c4:	4b68      	ldr	r3, [pc, #416]	@ (8009468 <_tx_timer_thread_entry+0x1e0>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80092cc:	4b66      	ldr	r3, [pc, #408]	@ (8009468 <_tx_timer_thread_entry+0x1e0>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3304      	adds	r3, #4
 80092d2:	4a65      	ldr	r2, [pc, #404]	@ (8009468 <_tx_timer_thread_entry+0x1e0>)
 80092d4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80092d6:	4b64      	ldr	r3, [pc, #400]	@ (8009468 <_tx_timer_thread_entry+0x1e0>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	4b64      	ldr	r3, [pc, #400]	@ (800946c <_tx_timer_thread_entry+0x1e4>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d103      	bne.n	80092ea <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80092e2:	4b63      	ldr	r3, [pc, #396]	@ (8009470 <_tx_timer_thread_entry+0x1e8>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a60      	ldr	r2, [pc, #384]	@ (8009468 <_tx_timer_thread_entry+0x1e0>)
 80092e8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80092ea:	4b62      	ldr	r3, [pc, #392]	@ (8009474 <_tx_timer_thread_entry+0x1ec>)
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]
 80092f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092f2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	f383 8810 	msr	PRIMASK, r3
}
 80092fa:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80092fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009300:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8009302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8009304:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8009306:	b672      	cpsid	i
    return(int_posture);
 8009308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800930a:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800930c:	e07f      	b.n	800940e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8009318:	2300      	movs	r3, #0
 800931a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800931c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800931e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009320:	429a      	cmp	r2, r3
 8009322:	d102      	bne.n	800932a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	e00e      	b.n	8009348 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800932a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8009330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009334:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8009336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800933a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800933c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800933e:	f107 020c 	add.w	r2, r7, #12
 8009342:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8009344:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009346:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8009348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b20      	cmp	r3, #32
 800934e:	d911      	bls.n	8009374 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8009350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8009358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800935a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800935c:	2300      	movs	r3, #0
 800935e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009362:	f107 0208 	add.w	r2, r7, #8
 8009366:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8009368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800936a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800936c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800936e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009370:	60bb      	str	r3, [r7, #8]
 8009372:	e01a      	b.n	80093aa <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8009374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800937a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8009380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009386:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8009388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d009      	beq.n	80093a4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8009390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009392:	f107 0208 	add.w	r2, r7, #8
 8009396:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8009398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800939a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800939c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800939e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093a0:	60bb      	str	r3, [r7, #8]
 80093a2:	e002      	b.n	80093aa <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80093a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093a6:	2200      	movs	r2, #0
 80093a8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80093aa:	4a33      	ldr	r2, [pc, #204]	@ (8009478 <_tx_timer_thread_entry+0x1f0>)
 80093ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093ae:	6013      	str	r3, [r2, #0]
 80093b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80093b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b6:	f383 8810 	msr	PRIMASK, r3
}
 80093ba:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80093bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80093c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093c4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80093c6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80093c8:	f3ef 8310 	mrs	r3, PRIMASK
 80093cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 80093ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 80093d0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80093d2:	b672      	cpsid	i
    return(int_posture);
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80093d6:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80093d8:	4b27      	ldr	r3, [pc, #156]	@ (8009478 <_tx_timer_thread_entry+0x1f0>)
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d105      	bne.n	80093f2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80093e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093e8:	2200      	movs	r2, #0
 80093ea:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80093ec:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80093ee:	f7ff feb1 	bl	8009154 <_tx_timer_system_activate>
 80093f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093f4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	f383 8810 	msr	PRIMASK, r3
}
 80093fc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80093fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009402:	623b      	str	r3, [r7, #32]
    return(posture);
 8009404:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009406:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009408:	b672      	cpsid	i
    return(int_posture);
 800940a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800940c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	f47f af7c 	bne.w	800930e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8009416:	4b17      	ldr	r3, [pc, #92]	@ (8009474 <_tx_timer_thread_entry+0x1ec>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d116      	bne.n	800944c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800941e:	4b17      	ldr	r3, [pc, #92]	@ (800947c <_tx_timer_thread_entry+0x1f4>)
 8009420:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009424:	2203      	movs	r2, #3
 8009426:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800942a:	2201      	movs	r2, #1
 800942c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800942e:	4b14      	ldr	r3, [pc, #80]	@ (8009480 <_tx_timer_thread_entry+0x1f8>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3301      	adds	r3, #1
 8009434:	4a12      	ldr	r2, [pc, #72]	@ (8009480 <_tx_timer_thread_entry+0x1f8>)
 8009436:	6013      	str	r3, [r2, #0]
 8009438:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800943a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f383 8810 	msr	PRIMASK, r3
}
 8009442:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8009444:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009446:	f7ff fc41 	bl	8008ccc <_tx_thread_system_suspend>
 800944a:	e728      	b.n	800929e <_tx_timer_thread_entry+0x16>
 800944c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800944e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f383 8810 	msr	PRIMASK, r3
}
 8009456:	bf00      	nop
            TX_DISABLE
 8009458:	e721      	b.n	800929e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800945a:	bf00      	nop
 800945c:	3760      	adds	r7, #96	@ 0x60
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	4154494d 	.word	0x4154494d
 8009468:	20000ba4 	.word	0x20000ba4
 800946c:	20000ba0 	.word	0x20000ba0
 8009470:	20000b9c 	.word	0x20000b9c
 8009474:	20000ba8 	.word	0x20000ba8
 8009478:	20000bb4 	.word	0x20000bb4
 800947c:	20000bb8 	.word	0x20000bb8
 8009480:	20000b08 	.word	0x20000b08

08009484 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08a      	sub	sp, #40	@ 0x28
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009492:	2300      	movs	r3, #0
 8009494:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d102      	bne.n	80094a2 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800949c:	2302      	movs	r3, #2
 800949e:	627b      	str	r3, [r7, #36]	@ 0x24
 80094a0:	e029      	b.n	80094f6 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a2d      	ldr	r2, [pc, #180]	@ (800955c <_txe_byte_allocate+0xd8>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d002      	beq.n	80094b2 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80094ac:	2302      	movs	r3, #2
 80094ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80094b0:	e021      	b.n	80094f6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d102      	bne.n	80094be <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80094b8:	2303      	movs	r3, #3
 80094ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80094bc:	e01b      	b.n	80094f6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d102      	bne.n	80094ca <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80094c4:	2305      	movs	r3, #5
 80094c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80094c8:	e015      	b.n	80094f6 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d902      	bls.n	80094da <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80094d4:	2305      	movs	r3, #5
 80094d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80094d8:	e00d      	b.n	80094f6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00a      	beq.n	80094f6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80094e0:	f3ef 8305 	mrs	r3, IPSR
 80094e4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80094e6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80094e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009560 <_txe_byte_allocate+0xdc>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80094f2:	2304      	movs	r3, #4
 80094f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80094f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d108      	bne.n	800950e <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80094fc:	4b19      	ldr	r3, [pc, #100]	@ (8009564 <_txe_byte_allocate+0xe0>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8009502:	6a3b      	ldr	r3, [r7, #32]
 8009504:	4a18      	ldr	r2, [pc, #96]	@ (8009568 <_txe_byte_allocate+0xe4>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d101      	bne.n	800950e <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800950a:	2313      	movs	r3, #19
 800950c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800950e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009510:	2b00      	cmp	r3, #0
 8009512:	d114      	bne.n	800953e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009514:	f3ef 8305 	mrs	r3, IPSR
 8009518:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800951a:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800951c:	4b10      	ldr	r3, [pc, #64]	@ (8009560 <_txe_byte_allocate+0xdc>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4313      	orrs	r3, r2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00b      	beq.n	800953e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009526:	f3ef 8305 	mrs	r3, IPSR
 800952a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800952c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800952e:	4b0c      	ldr	r3, [pc, #48]	@ (8009560 <_txe_byte_allocate+0xdc>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4313      	orrs	r3, r2
 8009534:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8009538:	d201      	bcs.n	800953e <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800953a:	2313      	movs	r3, #19
 800953c:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800953e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009540:	2b00      	cmp	r3, #0
 8009542:	d106      	bne.n	8009552 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	68b9      	ldr	r1, [r7, #8]
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7fe fce0 	bl	8007f10 <_tx_byte_allocate>
 8009550:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 8009552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009554:	4618      	mov	r0, r3
 8009556:	3728      	adds	r7, #40	@ 0x28
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	42595445 	.word	0x42595445
 8009560:	2000000c 	.word	0x2000000c
 8009564:	20000a70 	.word	0x20000a70
 8009568:	20000bb8 	.word	0x20000bb8

0800956c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b092      	sub	sp, #72	@ 0x48
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800957a:	2300      	movs	r3, #0
 800957c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d102      	bne.n	800958a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009584:	2302      	movs	r3, #2
 8009586:	647b      	str	r3, [r7, #68]	@ 0x44
 8009588:	e075      	b.n	8009676 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800958a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800958c:	2b34      	cmp	r3, #52	@ 0x34
 800958e:	d002      	beq.n	8009596 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8009590:	2302      	movs	r3, #2
 8009592:	647b      	str	r3, [r7, #68]	@ 0x44
 8009594:	e06f      	b.n	8009676 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009596:	f3ef 8310 	mrs	r3, PRIMASK
 800959a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800959c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800959e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80095a0:	b672      	cpsid	i
    return(int_posture);
 80095a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80095a4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80095a6:	4b3b      	ldr	r3, [pc, #236]	@ (8009694 <_txe_byte_pool_create+0x128>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3301      	adds	r3, #1
 80095ac:	4a39      	ldr	r2, [pc, #228]	@ (8009694 <_txe_byte_pool_create+0x128>)
 80095ae:	6013      	str	r3, [r2, #0]
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80095b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b6:	f383 8810 	msr	PRIMASK, r3
}
 80095ba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80095bc:	4b36      	ldr	r3, [pc, #216]	@ (8009698 <_txe_byte_pool_create+0x12c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80095c2:	2300      	movs	r3, #0
 80095c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80095c6:	e009      	b.n	80095dc <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d00b      	beq.n	80095e8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80095d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80095d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095d8:	3301      	adds	r3, #1
 80095da:	643b      	str	r3, [r7, #64]	@ 0x40
 80095dc:	4b2f      	ldr	r3, [pc, #188]	@ (800969c <_txe_byte_pool_create+0x130>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d3f0      	bcc.n	80095c8 <_txe_byte_pool_create+0x5c>
 80095e6:	e000      	b.n	80095ea <_txe_byte_pool_create+0x7e>
                break;
 80095e8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80095ea:	f3ef 8310 	mrs	r3, PRIMASK
 80095ee:	623b      	str	r3, [r7, #32]
    return(posture);
 80095f0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80095f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80095f4:	b672      	cpsid	i
    return(int_posture);
 80095f6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80095f8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80095fa:	4b26      	ldr	r3, [pc, #152]	@ (8009694 <_txe_byte_pool_create+0x128>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3b01      	subs	r3, #1
 8009600:	4a24      	ldr	r2, [pc, #144]	@ (8009694 <_txe_byte_pool_create+0x128>)
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009606:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960a:	f383 8810 	msr	PRIMASK, r3
}
 800960e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009610:	f7ff fa22 	bl	8008a58 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009618:	429a      	cmp	r2, r3
 800961a:	d102      	bne.n	8009622 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800961c:	2302      	movs	r3, #2
 800961e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009620:	e029      	b.n	8009676 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d102      	bne.n	800962e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8009628:	2303      	movs	r3, #3
 800962a:	647b      	str	r3, [r7, #68]	@ 0x44
 800962c:	e023      	b.n	8009676 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b63      	cmp	r3, #99	@ 0x63
 8009632:	d802      	bhi.n	800963a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8009634:	2305      	movs	r3, #5
 8009636:	647b      	str	r3, [r7, #68]	@ 0x44
 8009638:	e01d      	b.n	8009676 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800963a:	4b19      	ldr	r3, [pc, #100]	@ (80096a0 <_txe_byte_pool_create+0x134>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8009640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009642:	4a18      	ldr	r2, [pc, #96]	@ (80096a4 <_txe_byte_pool_create+0x138>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d101      	bne.n	800964c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009648:	2313      	movs	r3, #19
 800964a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800964c:	f3ef 8305 	mrs	r3, IPSR
 8009650:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009652:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009654:	4b14      	ldr	r3, [pc, #80]	@ (80096a8 <_txe_byte_pool_create+0x13c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4313      	orrs	r3, r2
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800965e:	f3ef 8305 	mrs	r3, IPSR
 8009662:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009664:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009666:	4b10      	ldr	r3, [pc, #64]	@ (80096a8 <_txe_byte_pool_create+0x13c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4313      	orrs	r3, r2
 800966c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8009670:	d201      	bcs.n	8009676 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8009672:	2313      	movs	r3, #19
 8009674:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009678:	2b00      	cmp	r3, #0
 800967a:	d106      	bne.n	800968a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	68b9      	ldr	r1, [r7, #8]
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f7fe fd86 	bl	8008194 <_tx_byte_pool_create>
 8009688:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800968a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800968c:	4618      	mov	r0, r3
 800968e:	3748      	adds	r7, #72	@ 0x48
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	20000b08 	.word	0x20000b08
 8009698:	20000a60 	.word	0x20000a60
 800969c:	20000a64 	.word	0x20000a64
 80096a0:	20000a70 	.word	0x20000a70
 80096a4:	20000bb8 	.word	0x20000bb8
 80096a8:	2000000c 	.word	0x2000000c

080096ac <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b092      	sub	sp, #72	@ 0x48
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
 80096b8:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80096ba:	2300      	movs	r3, #0
 80096bc:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d102      	bne.n	80096ca <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80096c4:	230c      	movs	r3, #12
 80096c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80096c8:	e054      	b.n	8009774 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b1c      	cmp	r3, #28
 80096ce:	d002      	beq.n	80096d6 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80096d0:	230c      	movs	r3, #12
 80096d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80096d4:	e04e      	b.n	8009774 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80096d6:	f3ef 8310 	mrs	r3, PRIMASK
 80096da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80096dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80096de:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80096e0:	b672      	cpsid	i
    return(int_posture);
 80096e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80096e4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80096e6:	4b36      	ldr	r3, [pc, #216]	@ (80097c0 <_txe_semaphore_create+0x114>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	3301      	adds	r3, #1
 80096ec:	4a34      	ldr	r2, [pc, #208]	@ (80097c0 <_txe_semaphore_create+0x114>)
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f6:	f383 8810 	msr	PRIMASK, r3
}
 80096fa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80096fc:	4b31      	ldr	r3, [pc, #196]	@ (80097c4 <_txe_semaphore_create+0x118>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8009702:	2300      	movs	r3, #0
 8009704:	643b      	str	r3, [r7, #64]	@ 0x40
 8009706:	e009      	b.n	800971c <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800970c:	429a      	cmp	r2, r3
 800970e:	d00b      	beq.n	8009728 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8009710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8009716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009718:	3301      	adds	r3, #1
 800971a:	643b      	str	r3, [r7, #64]	@ 0x40
 800971c:	4b2a      	ldr	r3, [pc, #168]	@ (80097c8 <_txe_semaphore_create+0x11c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009722:	429a      	cmp	r2, r3
 8009724:	d3f0      	bcc.n	8009708 <_txe_semaphore_create+0x5c>
 8009726:	e000      	b.n	800972a <_txe_semaphore_create+0x7e>
                break;
 8009728:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800972a:	f3ef 8310 	mrs	r3, PRIMASK
 800972e:	623b      	str	r3, [r7, #32]
    return(posture);
 8009730:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8009732:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009734:	b672      	cpsid	i
    return(int_posture);
 8009736:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8009738:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800973a:	4b21      	ldr	r3, [pc, #132]	@ (80097c0 <_txe_semaphore_create+0x114>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3b01      	subs	r3, #1
 8009740:	4a1f      	ldr	r2, [pc, #124]	@ (80097c0 <_txe_semaphore_create+0x114>)
 8009742:	6013      	str	r3, [r2, #0]
 8009744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009746:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974a:	f383 8810 	msr	PRIMASK, r3
}
 800974e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009750:	f7ff f982 	bl	8008a58 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009758:	429a      	cmp	r2, r3
 800975a:	d102      	bne.n	8009762 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800975c:	230c      	movs	r3, #12
 800975e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009760:	e008      	b.n	8009774 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009762:	4b1a      	ldr	r3, [pc, #104]	@ (80097cc <_txe_semaphore_create+0x120>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8009768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800976a:	4a19      	ldr	r2, [pc, #100]	@ (80097d0 <_txe_semaphore_create+0x124>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d101      	bne.n	8009774 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009770:	2313      	movs	r3, #19
 8009772:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009776:	2b00      	cmp	r3, #0
 8009778:	d114      	bne.n	80097a4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800977a:	f3ef 8305 	mrs	r3, IPSR
 800977e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8009780:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009782:	4b14      	ldr	r3, [pc, #80]	@ (80097d4 <_txe_semaphore_create+0x128>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4313      	orrs	r3, r2
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00b      	beq.n	80097a4 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800978c:	f3ef 8305 	mrs	r3, IPSR
 8009790:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009792:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009794:	4b0f      	ldr	r3, [pc, #60]	@ (80097d4 <_txe_semaphore_create+0x128>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4313      	orrs	r3, r2
 800979a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800979e:	d201      	bcs.n	80097a4 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80097a0:	2313      	movs	r3, #19
 80097a2:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80097a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d105      	bne.n	80097b6 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	68b9      	ldr	r1, [r7, #8]
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f7fe ff02 	bl	80085b8 <_tx_semaphore_create>
 80097b4:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 80097b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3748      	adds	r7, #72	@ 0x48
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	20000b08 	.word	0x20000b08
 80097c4:	20000a38 	.word	0x20000a38
 80097c8:	20000a3c 	.word	0x20000a3c
 80097cc:	20000a70 	.word	0x20000a70
 80097d0:	20000bb8 	.word	0x20000bb8
 80097d4:	2000000c 	.word	0x2000000c

080097d8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b09a      	sub	sp, #104	@ 0x68
 80097dc:	af06      	add	r7, sp, #24
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80097e6:	2300      	movs	r3, #0
 80097e8:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d102      	bne.n	80097f6 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80097f0:	230e      	movs	r3, #14
 80097f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097f4:	e0bb      	b.n	800996e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80097f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097f8:	2bb0      	cmp	r3, #176	@ 0xb0
 80097fa:	d002      	beq.n	8009802 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80097fc:	230e      	movs	r3, #14
 80097fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009800:	e0b5      	b.n	800996e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009802:	f3ef 8310 	mrs	r3, PRIMASK
 8009806:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8009808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800980a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800980c:	b672      	cpsid	i
    return(int_posture);
 800980e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009810:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8009812:	4b64      	ldr	r3, [pc, #400]	@ (80099a4 <_txe_thread_create+0x1cc>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3301      	adds	r3, #1
 8009818:	4a62      	ldr	r2, [pc, #392]	@ (80099a4 <_txe_thread_create+0x1cc>)
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800981e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009822:	f383 8810 	msr	PRIMASK, r3
}
 8009826:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8009828:	2300      	movs	r3, #0
 800982a:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800982c:	4b5e      	ldr	r3, [pc, #376]	@ (80099a8 <_txe_thread_create+0x1d0>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8009832:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009834:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8009836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009838:	3b01      	subs	r3, #1
 800983a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800983c:	4413      	add	r3, r2
 800983e:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8009840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009842:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8009844:	2300      	movs	r3, #0
 8009846:	647b      	str	r3, [r7, #68]	@ 0x44
 8009848:	e02b      	b.n	80098a2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800984e:	429a      	cmp	r2, r3
 8009850:	d101      	bne.n	8009856 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8009852:	2301      	movs	r3, #1
 8009854:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8009856:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009858:	2b01      	cmp	r3, #1
 800985a:	d028      	beq.n	80098ae <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800985c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009862:	429a      	cmp	r2, r3
 8009864:	d308      	bcc.n	8009878 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8009866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800986c:	429a      	cmp	r2, r3
 800986e:	d203      	bcs.n	8009878 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8009870:	2300      	movs	r3, #0
 8009872:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8009874:	2301      	movs	r3, #1
 8009876:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8009878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800987e:	429a      	cmp	r2, r3
 8009880:	d308      	bcc.n	8009894 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8009882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009888:	429a      	cmp	r2, r3
 800988a:	d203      	bcs.n	8009894 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800988c:	2300      	movs	r3, #0
 800988e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8009890:	2301      	movs	r3, #1
 8009892:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8009894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800989a:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800989c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800989e:	3301      	adds	r3, #1
 80098a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80098a2:	4b42      	ldr	r3, [pc, #264]	@ (80099ac <_txe_thread_create+0x1d4>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d3ce      	bcc.n	800984a <_txe_thread_create+0x72>
 80098ac:	e000      	b.n	80098b0 <_txe_thread_create+0xd8>
                break;
 80098ae:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80098b0:	f3ef 8310 	mrs	r3, PRIMASK
 80098b4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80098b6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80098b8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80098ba:	b672      	cpsid	i
    return(int_posture);
 80098bc:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80098be:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80098c0:	4b38      	ldr	r3, [pc, #224]	@ (80099a4 <_txe_thread_create+0x1cc>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	4a37      	ldr	r2, [pc, #220]	@ (80099a4 <_txe_thread_create+0x1cc>)
 80098c8:	6013      	str	r3, [r2, #0]
 80098ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098cc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	f383 8810 	msr	PRIMASK, r3
}
 80098d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80098d6:	f7ff f8bf 	bl	8008a58 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098de:	429a      	cmp	r2, r3
 80098e0:	d102      	bne.n	80098e8 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80098e2:	230e      	movs	r3, #14
 80098e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098e6:	e042      	b.n	800996e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80098e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d102      	bne.n	80098f4 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80098ee:	2303      	movs	r3, #3
 80098f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098f2:	e03c      	b.n	800996e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d102      	bne.n	8009900 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80098fa:	2303      	movs	r3, #3
 80098fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098fe:	e036      	b.n	800996e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8009900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009902:	2bc7      	cmp	r3, #199	@ 0xc7
 8009904:	d802      	bhi.n	800990c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8009906:	2305      	movs	r3, #5
 8009908:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800990a:	e030      	b.n	800996e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800990c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800990e:	2b1f      	cmp	r3, #31
 8009910:	d902      	bls.n	8009918 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8009912:	230f      	movs	r3, #15
 8009914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009916:	e02a      	b.n	800996e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8009918:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800991a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800991c:	429a      	cmp	r2, r3
 800991e:	d902      	bls.n	8009926 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8009920:	2318      	movs	r3, #24
 8009922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009924:	e023      	b.n	800996e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8009926:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009928:	2b01      	cmp	r3, #1
 800992a:	d902      	bls.n	8009932 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800992c:	2310      	movs	r3, #16
 800992e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009930:	e01d      	b.n	800996e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8009932:	4b1f      	ldr	r3, [pc, #124]	@ (80099b0 <_txe_thread_create+0x1d8>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8009938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993a:	4a1e      	ldr	r2, [pc, #120]	@ (80099b4 <_txe_thread_create+0x1dc>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d101      	bne.n	8009944 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009940:	2313      	movs	r3, #19
 8009942:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009944:	f3ef 8305 	mrs	r3, IPSR
 8009948:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800994a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800994c:	4b1a      	ldr	r3, [pc, #104]	@ (80099b8 <_txe_thread_create+0x1e0>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4313      	orrs	r3, r2
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00b      	beq.n	800996e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009956:	f3ef 8305 	mrs	r3, IPSR
 800995a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800995c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800995e:	4b16      	ldr	r3, [pc, #88]	@ (80099b8 <_txe_thread_create+0x1e0>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4313      	orrs	r3, r2
 8009964:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8009968:	d201      	bcs.n	800996e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800996a:	2313      	movs	r3, #19
 800996c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800996e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009970:	2b00      	cmp	r3, #0
 8009972:	d112      	bne.n	800999a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8009974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009976:	9305      	str	r3, [sp, #20]
 8009978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800997a:	9304      	str	r3, [sp, #16]
 800997c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800997e:	9303      	str	r3, [sp, #12]
 8009980:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009982:	9302      	str	r3, [sp, #8]
 8009984:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009986:	9301      	str	r3, [sp, #4]
 8009988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f7fe fe62 	bl	800865c <_tx_thread_create>
 8009998:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800999a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800999c:	4618      	mov	r0, r3
 800999e:	3750      	adds	r7, #80	@ 0x50
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	20000b08 	.word	0x20000b08
 80099a8:	20000a78 	.word	0x20000a78
 80099ac:	20000a7c 	.word	0x20000a7c
 80099b0:	20000a70 	.word	0x20000a70
 80099b4:	20000bb8 	.word	0x20000bb8
 80099b8:	2000000c 	.word	0x2000000c

080099bc <memset>:
 80099bc:	4402      	add	r2, r0
 80099be:	4603      	mov	r3, r0
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d100      	bne.n	80099c6 <memset+0xa>
 80099c4:	4770      	bx	lr
 80099c6:	f803 1b01 	strb.w	r1, [r3], #1
 80099ca:	e7f9      	b.n	80099c0 <memset+0x4>

080099cc <__libc_init_array>:
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	4d0d      	ldr	r5, [pc, #52]	@ (8009a04 <__libc_init_array+0x38>)
 80099d0:	4c0d      	ldr	r4, [pc, #52]	@ (8009a08 <__libc_init_array+0x3c>)
 80099d2:	1b64      	subs	r4, r4, r5
 80099d4:	10a4      	asrs	r4, r4, #2
 80099d6:	2600      	movs	r6, #0
 80099d8:	42a6      	cmp	r6, r4
 80099da:	d109      	bne.n	80099f0 <__libc_init_array+0x24>
 80099dc:	4d0b      	ldr	r5, [pc, #44]	@ (8009a0c <__libc_init_array+0x40>)
 80099de:	4c0c      	ldr	r4, [pc, #48]	@ (8009a10 <__libc_init_array+0x44>)
 80099e0:	f000 f818 	bl	8009a14 <_init>
 80099e4:	1b64      	subs	r4, r4, r5
 80099e6:	10a4      	asrs	r4, r4, #2
 80099e8:	2600      	movs	r6, #0
 80099ea:	42a6      	cmp	r6, r4
 80099ec:	d105      	bne.n	80099fa <__libc_init_array+0x2e>
 80099ee:	bd70      	pop	{r4, r5, r6, pc}
 80099f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099f4:	4798      	blx	r3
 80099f6:	3601      	adds	r6, #1
 80099f8:	e7ee      	b.n	80099d8 <__libc_init_array+0xc>
 80099fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80099fe:	4798      	blx	r3
 8009a00:	3601      	adds	r6, #1
 8009a02:	e7f2      	b.n	80099ea <__libc_init_array+0x1e>
 8009a04:	08009af8 	.word	0x08009af8
 8009a08:	08009af8 	.word	0x08009af8
 8009a0c:	08009af8 	.word	0x08009af8
 8009a10:	08009afc 	.word	0x08009afc

08009a14 <_init>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	bf00      	nop
 8009a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1a:	bc08      	pop	{r3}
 8009a1c:	469e      	mov	lr, r3
 8009a1e:	4770      	bx	lr

08009a20 <_fini>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	bf00      	nop
 8009a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a26:	bc08      	pop	{r3}
 8009a28:	469e      	mov	lr, r3
 8009a2a:	4770      	bx	lr
